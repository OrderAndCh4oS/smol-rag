<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd">
  <key id="d7" for="edge" attr.name="excerpt_id" attr.type="string" />
  <key id="d6" for="edge" attr.name="weight" attr.type="double" />
  <key id="d5" for="edge" attr.name="keywords" attr.type="string" />
  <key id="d4" for="edge" attr.name="description" attr.type="string" />
  <key id="d3" for="node" attr.name="excerpt_id" attr.type="string" />
  <key id="d2" for="node" attr.name="description" attr.type="string" />
  <key id="d1" for="node" attr.name="category" attr.type="string" />
  <key id="d0" for="graph" attr.name="content_keywords" attr.type="string" />
  <graph edgedefault="undirected">
    <node id="SmolRAG">
      <data key="d1">feature:|:api:|:example:|:function:|:configuration</data>
      <data key="d2">SmolRAG is a customizable framework for managing queries and storage locations of key-value stores.:|:SmolRAG is a retrieval-augmented generation system that facilitates smooth operation through troubleshooting and diagnostic steps.:|:SmolRAG is a feature that implements strategies to optimize similarity search performance within vector databases.:|:SmolRAG is an application programming interface designed for flexible document querying, knowledge extraction, and reasoning tasks, facilitating various use cases.:|:SmolRAG is an application programming interface that encompasses functionalities for managing documents, updates, and removals.:|:SmolRAG is a system that utilizes knowledge graphs to enhance vector embeddings by providing structured representations of entities and relationships extracted from documents.:|:SmolRAG is an application designed for handling retrieval-augmented generation tasks, which includes the management of documents and data.:|:SmolRAG is an API that facilitates knowledge graph-based queries, including methods for performing vector searches.:|:SmolRAG is an API designed for robust similarity search across various use cases, addressing challenges such as query ambiguity and long document handling.:|:SmolRAG is a tool that implements a knowledge graph using NetworkX, allowing for flexible configuration of the graph store.:|:SmolRAG is an API that interacts through REST and supports various query types using the Python requests library.:|:SmolRAG is a system innovation that enhances the embedding process by including excerpt summaries, improving retrieval quality.:|:SmolRAG is a cloud deployment feature that requires specific performance considerations when deploying in the cloud.:|:SmolRAG is a robust system that provides multiple query types to leverage diverse capabilities for information retrieval.:|:SmolRAG is an example of a system or project referenced in the context of queries about information processing and retrieval.:|:SmolRAG is a system or framework that requires monitoring and profiling to optimize its performance.:|:SmolRAG is a system designed to evolve with advancements in text embedding technologies, enhancing its retrieval capabilities.:|:SmolRAG is a system designed for document retrieval and management, utilizing various components to enhance performance and modularity.:|:SmolRAG is a configurable system that can be enhanced with custom components to meet advanced user needs.:|:SmolRAG is a function that processes and retrieves information based on specific queries.:|:SmolRAG is an API that utilizes various retrieval mechanisms, including similarity search, to provide accurate and relevant information retrieval.:|:SmolRAG is a configurable system that relies on specific hardware requirements to optimize its performance during document ingestion and processing.:|:SmolRAG is a system designed for document ingestion and query processing, which requires optimization techniques to enhance its performance.:|:SmolRAG is an API designed to generate response texts based on provided queries, highlighting its core functionality.:|:SmolRAG is a feature that encompasses a document ingestion process, aimed at transforming raw documents into a rich, queryable knowledge base.:|:SmolRAG is an application programming interface designed to perform similarity searches using vector embeddings to enhance information retrieval capabilities based on semantic meaning.:|:SmolRAG is an API that allows users to create instances for document ingestion and processing queries, either with default or custom settings.:|:SmolRAG is a system that integrates embedding generation and knowledge graph extraction from documents, enhancing semantic search capabilities.:|:SmolRAG is a feature that facilitates customization of models, caching behavior, and various settings related to LLM (Large Language Model).:|:SmolRAG is a system that utilizes excerpt embeddings for semantic search functionality, allowing users to find relevant content based on conceptual similarity.:|:SmolRAG is an API that allows for custom implementations of various components, catering to specific needs in data processing and retrieval.:|:SmolRAG is a class designed for handling the extraction methods of entities and relationships, which can be extended for customization.:|:SmolRAG is an API designed to handle various query types, providing flexibility and accuracy in responses tailored to user needs.:|:SmolRAG is an API designed for lightweight and efficient performance in processing and analyzing text data within a RAG system, focused on optimizing response times and resource usage.:|:SmolRAG is a system that provides users with multiple query types to enhance the effectiveness and flexibility of applications.:|:SmolRAG is a system designed for retrieval-augmented generation, requiring proper installation and configuration for optimal performance.:|:SmolRAG is a feature that captures and logs important information to help users troubleshoot issues.:|:SmolRAG is an application programming interface that facilitates retrievable attention and generation, enabling users to implement custom strategies for document processing.:|:SmolRAG is an API that represents a balanced approach to retrieval-augmented generation, integrating semantic search, knowledge graphs, and large language models for contextually relevant answers.:|:SmolRAG is an API that allows for advanced customization by extending its core classes.:|:SmolRAG is an API that facilitates integration with applications for querying documents efficiently.:|:SmolRAG is a system that integrates knowledge graphs and employs mechanisms for maintaining and updating these graphs as documents change, ensuring accurate representation of knowledge.:|:SmolRAG is an API designed for handling document collections and query volumes, offering various scaling strategies.:|:SmolRAG is an advanced application programming interface (API) designed for document querying, knowledge extraction, and integration with web applications, showcasing versatility and power.:|:SmolRAG is a modular system designed for document handling, allowing customization and flexible adaptation to various use cases with clear interfaces.:|:SmolRAG is a lightweight retrieval-augmented generation system designed for fast, up-to-date querying of documents, integrating vector embeddings, knowledge graphs, and large language models.:|:SmolRAG is an API designed to improve the efficiency and cost-effectiveness of document retrieval through various optimization strategies, including caching and batch processing.:|:SmolRAG is a function that processes and retrieves information, designed to answer queries about topics such as document chunking.:|:SmolRAG is a system that offers configurable options to customize its operation for various use cases, including model selection and processing methods.:|:SmolRAG is a system that involves document ingestion and optimization strategies, particularly for handling large document collections.:|:SmolRAG is the API being referenced, which returns a response in JSON format.:|:SmolRAG is an API that utilizes high-quality embeddings, efficient storage, and similarity search mechanisms to optimize information retrieval.:|:SmolRAG refers to a system with capabilities for knowledge graphs that integrate with vector embeddings to enhance information retrieval and reasoning.:|:SmolRAG is an API that facilitates various types of queries, providing users with the means to interact with data and retrieve relevant information.</data>
      <data key="d3">excerpt_id_e87481ca8b130695eba22131f0d98381:|:excerpt_id_774f4016ba53a64bd395a960e0ffcab8:|:excerpt_id_dc5eb8ded0d63524675f654a6fc91d2d:|:excerpt_id_53fcb2b3968172f6a84ec306bc995c22:|:excerpt_id_dc80c8904c8ce4e245e92a5bec8771ed:|:excerpt_id_9c072e3e78902159765fef2d7578e992:|:excerpt_id_202adb0bb512738fa7d6f938caa6321b:|:excerpt_id_fa8eff5daa3ccebd7d707f836f2eef0c:|:excerpt_id_9e82c97bd0829ec40084f1a45d364353:|:excerpt_id_d18b53e295f2d7f1d8c1de2dd0ca1da8:|:excerpt_id_4aef7238aeefda715071f4fd758b3293:|:excerpt_id_410400e8efb55e29eb563d4e92c76993:|:excerpt_id_f23cfae03c6ea9dae127b21ad7657454:|:excerpt_id_fddc660eda213cec6e37412bf400333b:|:excerpt_id_830011071c115f9a27db96ac1fa737b1:|:excerpt_id_b0d4e3abf98287ec9c0b65e83c50a4f5:|:excerpt_id_9b3e7699a2ad7cd3ed369e4a0e702290:|:excerpt_id_cb26db70dcd624e7b0e4b4273956b799:|:excerpt_id_e477d31a3d287e5594aac260eb346c86:|:excerpt_id_4eaabbb94075ebadba59d18cde321d42:|:excerpt_id_479ad0928f95805c9a3315aa5e37e736:|:excerpt_id_33ec53332806b9871abe7246fe9d300e:|:excerpt_id_a04d28950802508f2641ac651fc3089f:|:excerpt_id_48308b4707045e24b9b6c640c0048cbd:|:excerpt_id_f867ac5b5c6b6493fa80e156c12f2998:|:excerpt_id_0758031048f3438910733878e3670905:|:excerpt_id_96986ce98a0ff5dd646eb68683799151:|:excerpt_id_2a207df76f08f6572a56d121a4af7e96:|:excerpt_id_a5e5cdf3e51d57cc6dcc1078d00dca43:|:excerpt_id_8c0374f7cf68e5fd2e81a44aabeb6e31:|:excerpt_id_30a123552bb5d444811933f9adae9eba:|:excerpt_id_f27852542198490011a0063a5b735acb:|:excerpt_id_14e13330c8ba86a6d13d53a1fb558359:|:excerpt_id_57292a4a5cf5ae55025a640b2ddac8b8:|:excerpt_id_da7254efa9566860b06caf2d81ce9bf9:|:excerpt_id_22c851b59e941d90f109fdbe5227ad21:|:excerpt_id_c289d1319a7b3fb8268c5d19dc2d9f0b:|:excerpt_id_f1ef3b38067579dab39116dbfeca6ddc:|:excerpt_id_c5fc9102d2349644a3809cad72f71169:|:excerpt_id_c911a970aeaf57b302869e9d148ac6c8:|:excerpt_id_ab9a95edcb52c69f2a75ee555f1b7457:|:excerpt_id_9d9cc347ab952fb9a4b25bd3a1a18919:|:excerpt_id_7e70042d92c65d0381abf750e7b75435:|:excerpt_id_04b29d6443a2c6106c835c2ddeda4287:|:excerpt_id_a0f941d65b7b426fcf7651ac77c9eefd:|:excerpt_id_2000936bfa184ddaaecfee9d1339bf97:|:excerpt_id_04830b46c6b9fee612a7e80e9b24cec2:|:excerpt_id_11ec8cca8bde6a6c952520bf8d71db92:|:excerpt_id_f1fae642defef59936a03b705fb37221:|:excerpt_id_87dae939db470195b9a1c5b5ab8cca31:|:excerpt_id_1240c160e7b3db62fbd1d9af5733d19e:|:excerpt_id_ff13dc4b945b67da62f3fade912e8d3f:|:excerpt_id_2a3a2def38291bcc747a40723d311218:|:excerpt_id_8e74fbca347d63700a75f9a44ad95dec</data>
    </node>
    <node id="LightRAG">
      <data key="d1">api</data>
      <data key="d2">LightRAG is a retrieval-augmented generation system that serves as the inspiration for SmolRAG, focusing on similar principles of document querying.</data>
      <data key="d3">excerpt_id_cb26db70dcd624e7b0e4b4273956b799</data>
    </node>
    <node id="Vector Embeddings">
      <data key="d1">feature</data>
      <data key="d2">Vector Embeddings are techniques used in SmolRAG to understand the contextual representation of text for better querying and information retrieval.</data>
      <data key="d3">excerpt_id_cb26db70dcd624e7b0e4b4273956b799</data>
    </node>
    <node id="Knowledge Graphs">
      <data key="d1">feature</data>
      <data key="d2">Knowledge Graphs are structured representations of knowledge integrated within SmolRAG to enhance semantic search capabilities.:|:Knowledge Graphs are a key feature of SmolRAG that complement vector embeddings by enabling structured representations of entities and their relationships.:|:Knowledge Graphs are a feature utilized by SmolRAG to enrich data relationships and enhance the understanding of context in responses.</data>
      <data key="d3">excerpt_id_cb26db70dcd624e7b0e4b4273956b799:|:excerpt_id_9e82c97bd0829ec40084f1a45d364353:|:excerpt_id_830011071c115f9a27db96ac1fa737b1</data>
    </node>
    <node id="Large Language Models">
      <data key="d1">feature</data>
      <data key="d2">Large Language Models are powerful algorithms utilized in SmolRAG to generate contextually relevant answers based on input queries.:|:Large Language Models are a feature of SmolRAG, providing sophisticated language understanding and generation capabilities.</data>
      <data key="d3">excerpt_id_cb26db70dcd624e7b0e4b4273956b799:|:excerpt_id_830011071c115f9a27db96ac1fa737b1</data>
    </node>
    <node id="Document Processing">
      <data key="d1">function</data>
      <data key="d2">Document Processing is a core function of SmolRAG, involving the detection and processing of changes to ensure information is current.</data>
      <data key="d3">excerpt_id_cb26db70dcd624e7b0e4b4273956b799</data>
    </node>
    <node id="Contextual Understanding">
      <data key="d1">feature:|:variable</data>
      <data key="d2">Contextual Understanding refers to the ability of SmolRAG to maintain the context of documents through intelligent chunking and summarization.:|:Contextual Understanding is the property of semantic vectors that incorporates contextual information for nuanced meaning interpretation in SmolRAG.:|:Contextual Understanding describes the ability to comprehend semantic meaning beyond basic keyword matching.</data>
      <data key="d3">excerpt_id_cb26db70dcd624e7b0e4b4273956b799:|:excerpt_id_fd5970a76cf7d27c6af5388563268de1:|:excerpt_id_8e74fbca347d63700a75f9a44ad95dec</data>
    </node>
    <node id="Flexible Querying">
      <data key="d1">feature</data>
      <data key="d2">Flexible Querying describes the various methods offered by SmolRAG to accommodate different question types and information needs.</data>
      <data key="d3">excerpt_id_cb26db70dcd624e7b0e4b4273956b799</data>
    </node>
    <node id="Code Preservation">
      <data key="d1">feature</data>
      <data key="d2">Code Preservation ensures that technical content and code blocks remain intact during the document processing in SmolRAG.</data>
      <data key="d3">excerpt_id_cb26db70dcd624e7b0e4b4273956b799</data>
    </node>
    <node id="Document Processor">
      <data key="d1">function</data>
      <data key="d2">Document Processor is responsible for handling the ingestion, chunking, and summarization of documents.</data>
      <data key="d3">excerpt_id_ae4f7039a8650da3b37a6933308a7196</data>
    </node>
    <node id="Vector Store">
      <data key="d1">configuration:|:function</data>
      <data key="d2">Vector Store refers to a system for storing embeddings of document chunks, which can consume significant memory, particularly in large collections.:|:Vector Store is a storage configuration that uses NanoVectorStore to store embeddings, facilitating semantic search capabilities.:|:Vector Store manages document embeddings that facilitate semantic search capabilities.</data>
      <data key="d3">excerpt_id_ae4f7039a8650da3b37a6933308a7196:|:excerpt_id_efce5aab9b4130a5bb56f788c7389339:|:excerpt_id_8d580efe0a0849a9ed415edb7a33f22e</data>
    </node>
    <node id="Knowledge Graph">
      <data key="d1">feature:|:configuration:|:function</data>
      <data key="d2">Knowledge Graph refers to the NetworkXGraphStore that stores entities and their relationships for querying purposes.:|:Knowledge Graph stores entities and relationships that are extracted from documents to provide structured information.:|:Knowledge Graph is a component within SmolRAG that provides structured representations of entities and relationships, complementing vector embeddings.:|:Knowledge Graph is a large structure containing many entities and relationships which can be memory-intensive to manage.:|:Knowledge Graph is a feature that provides a structured representation of information, enhancing the depth and context of search queries.:|:Knowledge Graph refers to the expanding data system that may impact the system's performance over time.:|:Knowledge Graph is a structured representation of information that can be customized, particularly its storage location.</data>
      <data key="d3">excerpt_id_8a0247b8e1267963faeba1c255657e41:|:excerpt_id_8d580efe0a0849a9ed415edb7a33f22e:|:excerpt_id_d51ed839a3e8d83bf62dabc2376c5057:|:excerpt_id_efce5aab9b4130a5bb56f788c7389339:|:excerpt_id_53fcb2b3968172f6a84ec306bc995c22:|:excerpt_id_ae4f7039a8650da3b37a6933308a7196:|:excerpt_id_48308b4707045e24b9b6c640c0048cbd</data>
    </node>
    <node id="Query Processor">
      <data key="d1">function</data>
      <data key="d2">Query Processor processes various types of queries and retrieves relevant information from the system.</data>
      <data key="d3">excerpt_id_ae4f7039a8650da3b37a6933308a7196</data>
    </node>
    <node id="LLM Interface">
      <data key="d1">interface</data>
      <data key="d2">LLM Interface communicates with OpenAI's API to obtain embeddings and generate completions for queries.</data>
      <data key="d3">excerpt_id_ae4f7039a8650da3b37a6933308a7196</data>
    </node>
    <node id="API Layer">
      <data key="d1">api</data>
      <data key="d2">API Layer exposes the system's functionality through a REST API, allowing external interactions with the components.</data>
      <data key="d3">excerpt_id_ae4f7039a8650da3b37a6933308a7196</data>
    </node>
    <node id="SmolRag Class">
      <data key="d1">class:|:function</data>
      <data key="d2">The SmolRag Class is the main class for initializing the SmolRAG application and it allows for customizing behavior through various parameters.:|:The SmolRag Class is the main entry point and orchestrator for the SmolRAG system, providing core functionality.</data>
      <data key="d3">excerpt_id_e63a9adb633f3f6ff0b8817ba44dc6fd:|:excerpt_id_b0d4e3abf98287ec9c0b65e83c50a4f5</data>
    </node>
    <node id="Chunking Module">
      <data key="d1">feature</data>
      <data key="d2">The Chunking Module provides strategies for splitting documents into manageable pieces, enhancing processing efficiency.</data>
      <data key="d3">excerpt_id_e63a9adb633f3f6ff0b8817ba44dc6fd</data>
    </node>
    <node id="OpenAiLlm">
      <data key="d1">api:|:function</data>
      <data key="d2">OpenAiLlm is an interface for interacting with OpenAI's API to generate embeddings and work with language models.:|:OpenAiLlm is an API imported from app.openai_llm that provides functionalities for interacting with OpenAI's language model to generate responses based on prompts.:|:OpenAiLlm handles communication with OpenAI's API for embeddings and completions, enabling AI functionalities.:|:OpenAiLlm is an API used for interacting with OpenAI's language model, providing functionality to generate text-based completions.:|:OpenAiLlm is an API that allows the creation of a custom instance with specific settings for interfacing with OpenAI's language models.:|:OpenAiLlm is a function that utilizes OpenAI's language model to generate embeddings and manage query caching, playing a vital role in the SmolRag system.:|:OpenAiLlm is an API that interfaces with an OpenAI model for completing tasks based on user prompts.:|:OpenAiLlm is a class providing a clean interface to OpenAI's API for handling embeddings and completions with configurable models and caching mechanisms.</data>
      <data key="d3">excerpt_id_e63a9adb633f3f6ff0b8817ba44dc6fd:|:excerpt_id_37be0a25cbf8d078251a96284455700d:|:excerpt_id_d256b3e352fdb14aff55223ceb48a24a:|:excerpt_id_c1b3890c12c9544c940bd001ae647dce:|:excerpt_id_c14bcfff661cc7a5b7c70532fd0b5d83:|:excerpt_id_7632c4b619e7677d548ca2cb0924040f:|:excerpt_id_bc4e6aac2a735309400738bd11c772ba:|:excerpt_id_6aad6436e24fdc08b2a945d47b297b8b</data>
    </node>
    <node id="NanoVectorStore">
      <data key="d1">feature:|:configuration:|:variable:|:technology:|:storage:|:class:|:api</data>
      <data key="d2">NanoVectorStore is a feature designed for effective and simple vector storage and retrieval, optimized for speed and performance.:|:NanoVectorStore is an API that provides a lightweight implementation for storing and retrieving embeddings, allowing for customizable vector store configurations.:|:NanoVectorStore is a simple yet effective storage solution for embeddings that provides essential functionality without the complexity of larger vector databases.:|:NanoVectorStore is an API used for managing vector stores, capable of storing and retrieving vector embeddings from specified database paths.:|:NanoVectorStore represents a variable type that manages persistent storage for vector data, crucial for maintaining embeddings across different components.:|:NanoVectorStore is a lightweight vector database class designed for storing and retrieving embeddings, offering simple and efficient functionality.:|:NanoVectorStore is a lightweight vector database used by SmolRAG to manage embeddings and facilitate similarity searches.:|:NanoVectorStore is the storage solution for embeddings, designed for efficient retrieval of embedding vectors associated with text data.:|:NanoVectorStore is a lightweight vector database used by SmolRAG to manage embeddings effectively.:|:The NanoVectorStore is a lightweight vector database designed for storing and retrieving embeddings in an efficient manner.:|:NanoVectorStore is a mechanism for storing the high-dimensional vectors along with metadata created during the embedding process.</data>
      <data key="d3">excerpt_id_1886dbfbe4d28a804d7c671e8aba5c2c:|:excerpt_id_8c0374f7cf68e5fd2e81a44aabeb6e31:|:excerpt_id_e63a9adb633f3f6ff0b8817ba44dc6fd:|:excerpt_id_5c4413edcfebaf19b7162d2f89ba5c40:|:excerpt_id_4b68104ae9ba6f2fafa3669fefa1839b:|:excerpt_id_22c851b59e941d90f109fdbe5227ad21:|:excerpt_id_bc4e6aac2a735309400738bd11c772ba:|:excerpt_id_dc80c8904c8ce4e245e92a5bec8771ed:|:excerpt_id_c14bcfff661cc7a5b7c70532fd0b5d83:|:excerpt_id_96986ce98a0ff5dd646eb68683799151:|:excerpt_id_2000936bfa184ddaaecfee9d1339bf97</data>
    </node>
    <node id="NetworkXGraphStore">
      <data key="d1">configuration:|:interface:|:api</data>
      <data key="d2">NetworkXGraphStore is an API for managing graph databases using NetworkX, designed for storing and retrieving graph data efficiently.:|:NetworkXGraphStore serves as the interface for managing graph data, integral for connecting and traversing entities and relationships within SmolRag.:|:The NetworkXGraphStore class is an implementation for a graph database built on NetworkX, designed to store entities and relationships.:|:NetworkXGraphStore is a graph database built on NetworkX for storing entities and their relationships, useful for complex queries.</data>
      <data key="d3">excerpt_id_8080c1c6669176557a9fdbafc319a94c:|:excerpt_id_e63a9adb633f3f6ff0b8817ba44dc6fd:|:excerpt_id_bc4e6aac2a735309400738bd11c772ba:|:excerpt_id_0f09ea93b0147ae060748c2d7d541cd0</data>
    </node>
    <node id="JsonKvStore">
      <data key="d1">configuration:|:api</data>
      <data key="d2">The JsonKvStore class provides a simple implementation of a key-value store for caching and metadata.:|:JsonKvStore is a configuration type for key-value storage using JSON format, facilitating data retrieval for various components of SmolRag.:|:JsonKvStore is a key-value store configuration that stores data in JSON format, used for caching queries and embeddings.:|:JsonKvStore is a key-value store implementation that allows for storing and retrieving JSON data in a convenient format, facilitating the management of key-value pairs.:|:JsonKvStore is a simple key-value store that allows for caching and handling metadata, providing performance benefits.</data>
      <data key="d3">excerpt_id_e63a9adb633f3f6ff0b8817ba44dc6fd:|:excerpt_id_37be0a25cbf8d078251a96284455700d:|:excerpt_id_cbbeef7dc6ce1662aa9990abd0d0a080:|:excerpt_id_8080c1c6669176557a9fdbafc319a94c:|:excerpt_id_bc4e6aac2a735309400738bd11c772ba</data>
    </node>
    <node id="API Module">
      <data key="d1">api</data>
      <data key="d2">The API Module is implemented using FastAPI, exposing the functionality of SmolRAG and allowing external interaction.</data>
      <data key="d3">excerpt_id_e63a9adb633f3f6ff0b8817ba44dc6fd</data>
    </node>
    <node id="System Requirements">
      <data key="d1">feature</data>
      <data key="d2">System Requirements detail the necessary hardware and software specifications for running SmolRAG efficiently.</data>
      <data key="d3">excerpt_id_e63a9adb633f3f6ff0b8817ba44dc6fd</data>
    </node>
    <node id="Integration Points">
      <data key="d1">feature</data>
      <data key="d2">Integration Points describe various methods for integrating SmolRAG with other systems, enhancing its versatility.</data>
      <data key="d3">excerpt_id_e63a9adb633f3f6ff0b8817ba44dc6fd</data>
    </node>
    <node id="Retrieval-Augmented Generation">
      <data key="d1">function</data>
      <data key="d2">Retrieval-Augmented Generation (RAG) is a function that enhances the capability of models by combining retrieval mechanisms with generative processes to produce accurate responses.</data>
      <data key="d3">excerpt_id_830011071c115f9a27db96ac1fa737b1</data>
    </node>
    <node id="Semantic Search">
      <data key="d1">feature:|:function</data>
      <data key="d2">Semantic Search refers to the process enabled by embeddings that allows for searching entities and relationships based on meaning rather than just keyword matching.:|:Semantic Search is a feature of SmolRAG that allows for more intuitive and context-aware search capabilities, improving the relevance of search results.</data>
      <data key="d3">excerpt_id_4869439483a23885f8fdf7f5e9c7039f:|:excerpt_id_830011071c115f9a27db96ac1fa737b1</data>
    </node>
    <node id="Documentation Search System">
      <data key="d1">example</data>
      <data key="d2">A Documentation Search System is an application example that can be built using SmolRAG, leveraging its advanced search capabilities.</data>
      <data key="d3">excerpt_id_830011071c115f9a27db96ac1fa737b1</data>
    </node>
    <node id="Knowledge Base">
      <data key="d1">example</data>
      <data key="d2">A Knowledge Base is another application example that utilizes SmolRAG to organize and retrieve information effectively.</data>
      <data key="d3">excerpt_id_830011071c115f9a27db96ac1fa737b1</data>
    </node>
    <node id="Question-Answering Application">
      <data key="d1">example</data>
      <data key="d2">A Question-Answering Application is a practical implementation of SmolRAG, designed to provide precise answers to user queries.</data>
      <data key="d3">excerpt_id_830011071c115f9a27db96ac1fa737b1</data>
    </node>
    <node id="Similarity Search">
      <data key="d1">feature:|:function</data>
      <data key="d2">Similarity Search is a functionality in SmolRAG that allows users to find relevant information based on semantic similarities.:|:Similarity Search is a core functionality of SmolRAG that enables retrieval of document excerpts based on semantic similarity instead of traditional keyword matching.:|:Similarity Search is a capability within SmolRAG that allows for finding relevant information based on semantic meaning, using vectors to represent queries and documents.</data>
      <data key="d3">excerpt_id_d18b53e295f2d7f1d8c1de2dd0ca1da8:|:excerpt_id_8e74fbca347d63700a75f9a44ad95dec:|:excerpt_id_23af2b95600ddac30518f7c80f59e79b</data>
    </node>
    <node id="Vector Representation">
      <data key="d1">configuration</data>
      <data key="d2">Vector Representation refers to the method of capturing the meaning of both queries and documents through high-dimensional vectors (embeddings) in SmolRAG.</data>
      <data key="d3">excerpt_id_8e74fbca347d63700a75f9a44ad95dec</data>
    </node>
    <node id="Semantic Vectors">
      <data key="d1">variable</data>
      <data key="d2">Semantic Vectors are high-dimensional representations of queries and document excerpts that capture their semantic meaning, promoting effective information retrieval.</data>
      <data key="d3">excerpt_id_8e74fbca347d63700a75f9a44ad95dec</data>
    </node>
    <node id="Similarity Metrics">
      <data key="d1">feature</data>
      <data key="d2">Similarity Metrics are the mathematical measures used by SmolRAG to quantify how similar two vectors are, essential for conducting similarity searches.</data>
      <data key="d3">excerpt_id_8e74fbca347d63700a75f9a44ad95dec</data>
    </node>
    <node id="Cosine Similarity">
      <data key="d1">feature</data>
      <data key="d2">Cosine Similarity is the primary metric used to measure the cosine of the angle between two vectors, indicating the level of similarity.</data>
      <data key="d3">excerpt_id_5c4413edcfebaf19b7162d2f89ba5c40</data>
    </node>
    <node id="Score Range">
      <data key="d1">variable</data>
      <data key="d2">Score Range defines the typical range of similarity scores from 0 to 1, where 1 indicates perfect similarity between vectors.</data>
      <data key="d3">excerpt_id_5c4413edcfebaf19b7162d2f89ba5c40</data>
    </node>
    <node id="Threshold Filtering">
      <data key="d1">configuration:|:function</data>
      <data key="d2">Threshold Filtering is a configurable parameter that filters out results that do not meet a minimal similarity score, defaulting to 0.02.:|:Threshold Filtering allows the system to eliminate results that do not meet a certain similarity threshold, refining outputs.</data>
      <data key="d3">excerpt_id_4b68104ae9ba6f2fafa3669fefa1839b:|:excerpt_id_5c4413edcfebaf19b7162d2f89ba5c40</data>
    </node>
    <node id="Ranking">
      <data key="d1">feature:|:function</data>
      <data key="d2">Ranking is the process of organizing excerpts by their proximity in similarity to the query embedding for subsequent processing.:|:Ranking is the process of ordering results based on their similarity score, ensuring the most similar excerpts appear first.</data>
      <data key="d3">excerpt_id_4b68104ae9ba6f2fafa3669fefa1839b:|:excerpt_id_5c4413edcfebaf19b7162d2f89ba5c40</data>
    </node>
    <node id="Normalization">
      <data key="d1">function</data>
      <data key="d2">Normalization is a technique applied to vectors to ensure fair comparisons by adjusting their magnitudes.</data>
      <data key="d3">excerpt_id_5c4413edcfebaf19b7162d2f89ba5c40</data>
    </node>
    <node id="Query Processing for Similarity Search">
      <data key="d1">function</data>
      <data key="d2">Query Processing for Similarity Search refers to the sequence of steps that a system takes to handle and respond to user queries for similarity.</data>
      <data key="d3">excerpt_id_5c4413edcfebaf19b7162d2f89ba5c40</data>
    </node>
    <node id="Query Embedding">
      <data key="d1">function</data>
      <data key="d2">Query Embedding describes the process of embedding a user-submitted query using the same model as the stored excerpts.:|:Query Embedding is the process of transforming user query text into a vector format using the same model that processes document excerpts.</data>
      <data key="d3">excerpt_id_4b68104ae9ba6f2fafa3669fefa1839b:|:excerpt_id_5c4413edcfebaf19b7162d2f89ba5c40</data>
    </node>
    <node id="Vector Comparison">
      <data key="d1">function</data>
      <data key="d2">Vector Comparison involves comparing the embedded query vector to all excerpt vectors stored in the database to determine similarity.</data>
      <data key="d3">excerpt_id_5c4413edcfebaf19b7162d2f89ba5c40</data>
    </node>
    <node id="Similarity Scoring">
      <data key="d1">function</data>
      <data key="d2">Similarity Scoring produces a numeric score that represents how similar the query vector is to each excerpt vector.</data>
      <data key="d3">excerpt_id_5c4413edcfebaf19b7162d2f89ba5c40</data>
    </node>
    <node id="Ranking and Filtering">
      <data key="d1">function</data>
      <data key="d2">Ranking and Filtering is the process of organizing the similarity scores and excluding those that fall below the threshold.</data>
      <data key="d3">excerpt_id_5c4413edcfebaf19b7162d2f89ba5c40</data>
    </node>
    <node id="Top-K Selection">
      <data key="d1">function</data>
      <data key="d2">Top-K Selection refers to the approach of selecting the top-k most similar excerpts from the ranked results, with a default of 5.:|:Top-K Selection refers to the method of identifying and selecting the top-k most similar excerpts after ranking.</data>
      <data key="d3">excerpt_id_4b68104ae9ba6f2fafa3669fefa1839b:|:excerpt_id_5c4413edcfebaf19b7162d2f89ba5c40</data>
    </node>
    <node id="Efficient Storage">
      <data key="d1">feature:|:function</data>
      <data key="d2">Efficient Storage refers to the capability of SmolRAG to manage and store data effectively, enabling quick access and retrieval.:|:Efficient Storage refers to the method of storing vectors in an optimized format for fast retrieval.:|:Efficient Storage refers to the optimization of how embeddings are stored for fast retrieval, improving performance.</data>
      <data key="d3">excerpt_id_2a3a2def38291bcc747a40723d311218:|:excerpt_id_4b68104ae9ba6f2fafa3669fefa1839b:|:excerpt_id_22c851b59e941d90f109fdbe5227ad21</data>
    </node>
    <node id="In-Memory Processing">
      <data key="d1">function</data>
      <data key="d2">In-Memory Processing allows for swift retrieval of vectors by loading them into memory during search operations.</data>
      <data key="d3">excerpt_id_22c851b59e941d90f109fdbe5227ad21</data>
    </node>
    <node id="Persistence">
      <data key="d1">feature:|:function</data>
      <data key="d2">Persistence involves serializing vectors to disk, allowing them to persist between different runs of the application.:|:Persistence indicates that embeddings are serialized to disk, allowing them to remain available between runs of the system.</data>
      <data key="d3">excerpt_id_4b68104ae9ba6f2fafa3669fefa1839b:|:excerpt_id_22c851b59e941d90f109fdbe5227ad21</data>
    </node>
    <node id="Metadata Management">
      <data key="d1">function</data>
      <data key="d2">Metadata Management entails associating metadata with each vector for easier retrieval and filtering.</data>
      <data key="d3">excerpt_id_22c851b59e941d90f109fdbe5227ad21</data>
    </node>
    <node id="CRUD Operations">
      <data key="d1">function</data>
      <data key="d2">CRUD Operations refer to the standard processes of creating, reading, updating, and deleting embeddings within the storage.:|:CRUD Operations refer to the operations allowed on the vector store:|:creating, reading, updating, and deleting vectors.</data>
      <data key="d3">excerpt_id_4b68104ae9ba6f2fafa3669fefa1839b:|:excerpt_id_22c851b59e941d90f109fdbe5227ad21</data>
    </node>
    <node id="Efficient Vector Operations">
      <data key="d1">function</data>
      <data key="d2">Efficient Vector Operations utilize NumPy for performing fast vector calculations.</data>
      <data key="d3">excerpt_id_22c851b59e941d90f109fdbe5227ad21</data>
    </node>
    <node id="Batch Processing">
      <data key="d1">feature:|:configuration:|:optimization strategy:|:function</data>
      <data key="d2">Batch Processing allows multiple queries to be processed simultaneously, which facilitates testing and bulk data processing.:|:Batch Processing is a technique employed to process multiple items in a single API call, optimizing the embedding process and reducing costs.:|:Batch Processing allows the handling of multiple vectors simultaneously to enhance processing efficiency.:|:Batch Processing is an optimization strategy that suggests processing documents in groups to manage memory usage more efficiently.</data>
      <data key="d3">excerpt_id_410400e8efb55e29eb563d4e92c76993:|:excerpt_id_30a123552bb5d444811933f9adae9eba:|:excerpt_id_22c851b59e941d90f109fdbe5227ad21:|:excerpt_id_0758031048f3438910733878e3670905</data>
    </node>
    <node id="Caching">
      <data key="d1">optimization strategy:|:feature:|:function</data>
      <data key="d2">Caching involves storing previous results of embeddings and API calls to reduce redundancy in processing and improve speed.:|:Caching is a function designed to temporarily store frequently accessed data to improve retrieval times and reduce the load on servers.:|:Caching refers to the technique of storing query embeddings to prevent redundant API calls.:|:Caching is an optimization strategy that involves storing API responses to improve performance and reduce redundant calls to the API.:|:Caching refers to storing intermediate results from queries to improve the performance of common query patterns in knowledge graphs.</data>
      <data key="d3">excerpt_id_410400e8efb55e29eb563d4e92c76993:|:excerpt_id_22c851b59e941d90f109fdbe5227ad21:|:excerpt_id_8ec1e476798fb46038b3e8a5c5907ec5:|:excerpt_id_bfbdc7de5c6b20362e7297fd06fd853a:|:excerpt_id_773dc5e90c361202bafd4c70106e3c4a</data>
    </node>
    <node id="Incremental Updates">
      <data key="d1">optimization strategy:|:function</data>
      <data key="d2">Incremental Updates allow the knowledge graph to reflect changes in documents, ensuring that affected entities and relationships are kept current.:|:Incremental Updates refer to the strategy of only processing new or modified documents rather than the complete set, enhancing efficiency.:|:Incremental Updates are performed to update the vector store only when documents have changed, optimizing performance.:|:Incremental Updates is a function that re-embeds only the affected excerpts when documents change, thus saving computational resources.</data>
      <data key="d3">excerpt_id_c911a970aeaf57b302869e9d148ac6c8:|:excerpt_id_410400e8efb55e29eb563d4e92c76993:|:excerpt_id_22c851b59e941d90f109fdbe5227ad21:|:excerpt_id_0758031048f3438910733878e3670905</data>
    </node>
    <node id="Dimensionality Management">
      <data key="d1">function</data>
      <data key="d2">Dimensionality Management balances vector dimension with performance requirements for optimal search capabilities.:|:Dimensionality Management is a function that balances the embedding dimension against performance requirements to optimize processing.</data>
      <data key="d3">excerpt_id_22c851b59e941d90f109fdbe5227ad21:|:excerpt_id_0758031048f3438910733878e3670905</data>
    </node>
    <node id="Context Retrieval and Preparation">
      <data key="d1">function</data>
      <data key="d2">Context Retrieval and Preparation is a method that prepares similar excerpts for use by the language model.</data>
      <data key="d3">excerpt_id_22c851b59e941d90f109fdbe5227ad21</data>
    </node>
    <node id="Excerpt Retrieval">
      <data key="d1">function</data>
      <data key="d2">Excerpt Retrieval is the process of retrieving the full text of selected excerpts from storage.</data>
      <data key="d3">excerpt_id_22c851b59e941d90f109fdbe5227ad21</data>
    </node>
    <node id="Summary Inclusion">
      <data key="d1">function</data>
      <data key="d2">Summary Inclusion involves adding each excerpt's summary to provide contextual information.</data>
      <data key="d3">excerpt_id_22c851b59e941d90f109fdbe5227ad21</data>
    </node>
    <node id="Formatting">
      <data key="d1">function</data>
      <data key="d2">Formatting is the structuring of excerpts and summaries into a coherent context for the language model.</data>
      <data key="d3">excerpt_id_22c851b59e941d90f109fdbe5227ad21</data>
    </node>
    <node id="Token Management">
      <data key="d1">function</data>
      <data key="d2">Token Management refers to the process of managing the combined context to fit within token limits.</data>
      <data key="d3">excerpt_id_22c851b59e941d90f109fdbe5227ad21</data>
    </node>
    <node id="Prompt Construction">
      <data key="d1">function</data>
      <data key="d2">Prompt Construction incorporates the prepared context into a prompt suitable for the language model.</data>
      <data key="d3">excerpt_id_22c851b59e941d90f109fdbe5227ad21</data>
    </node>
    <node id="Query Ambiguity">
      <data key="d1">feature</data>
      <data key="d2">Query Ambiguity refers to the challenge of handling different kinds of ambiguities in user queries for effective search.</data>
      <data key="d3">excerpt_id_202adb0bb512738fa7d6f938caa6321b</data>
    </node>
    <node id="Semantic Gaps">
      <data key="d1">feature</data>
      <data key="d2">Semantic Gaps involve bridging gaps in meaning that may exist between user queries and document content using knowledge graphs.</data>
      <data key="d3">excerpt_id_202adb0bb512738fa7d6f938caa6321b</data>
    </node>
    <node id="Out-of-Domain Queries">
      <data key="d1">feature</data>
      <data key="d2">Out-of-Domain Queries are the types of queries that do not match any documents, which SmolRAG handles gracefully.</data>
      <data key="d3">excerpt_id_202adb0bb512738fa7d6f938caa6321b</data>
    </node>
    <node id="Long Documents">
      <data key="d1">feature</data>
      <data key="d2">Long Documents are effectively managed in SmolRAG through techniques like chunking and summarization to improve search relevance.</data>
      <data key="d3">excerpt_id_202adb0bb512738fa7d6f938caa6321b</data>
    </node>
    <node id="Rare Terms">
      <data key="d1">feature</data>
      <data key="d2">Rare Terms refer to infrequently used terms whose importance is balanced against overall semantic meaning during search.</data>
      <data key="d3">excerpt_id_202adb0bb512738fa7d6f938caa6321b</data>
    </node>
    <node id="Knowledge Graph Integration">
      <data key="d1">configuration</data>
      <data key="d2">Knowledge Graph Integration allows for the combination of vector search with graph-based retrieval to enhance query responses.</data>
      <data key="d3">excerpt_id_202adb0bb512738fa7d6f938caa6321b</data>
    </node>
    <node id="Entity-Based Search">
      <data key="d1">function</data>
      <data key="d2">Entity-Based Search utilizes entity embeddings to locate relevant entities within the knowledge graph.</data>
      <data key="d3">excerpt_id_202adb0bb512738fa7d6f938caa6321b</data>
    </node>
    <node id="Relationship-Based Search">
      <data key="d1">function</data>
      <data key="d2">Relationship-Based Search focuses on finding relationships between entities based on their semantic similarity.</data>
      <data key="d3">excerpt_id_202adb0bb512738fa7d6f938caa6321b</data>
    </node>
    <node id="Hybrid Approaches">
      <data key="d1">configuration</data>
      <data key="d2">Hybrid Approaches refer to the blending of different search strategies to take advantage of their complementary strengths.</data>
      <data key="d3">excerpt_id_202adb0bb512738fa7d6f938caa6321b</data>
    </node>
    <node id="Weighted Combinations">
      <data key="d1">configuration</data>
      <data key="d2">Weighted Combinations involve adjusting the influence of various search methods based on the characteristics of query inputs.</data>
      <data key="d3">excerpt_id_202adb0bb512738fa7d6f938caa6321b</data>
    </node>
    <node id="Evaluating Search Quality">
      <data key="d1">function</data>
      <data key="d2">Evaluating Search Quality encompasses mechanisms for assessing and enhancing the effectiveness of similarity search in SmolRAG.</data>
      <data key="d3">excerpt_id_202adb0bb512738fa7d6f938caa6321b</data>
    </node>
    <node id="Test Queries">
      <data key="d1">example</data>
      <data key="d2">Test Queries refer to predefined questions used to evaluate the performance of retrieval systems, focusing on assessing accuracy and completeness.</data>
      <data key="d3">excerpt_id_23af2b95600ddac30518f7c80f59e79b</data>
    </node>
    <node id="Precision and Recall">
      <data key="d1">feature</data>
      <data key="d2">Precision and Recall are metrics used to measure the accuracy and completeness of search results within a retrieval system.</data>
      <data key="d3">excerpt_id_23af2b95600ddac30518f7c80f59e79b</data>
    </node>
    <node id="Threshold Tuning">
      <data key="d1">feature:|:function</data>
      <data key="d2">Threshold Tuning is a feature that manages adjustable similarity thresholds to optimize the balance between precision and recall in retrieval performance.:|:Threshold Tuning is the process of adjusting similarity thresholds to balance precision and recall in search results.</data>
      <data key="d3">excerpt_id_0758031048f3438910733878e3670905:|:excerpt_id_23af2b95600ddac30518f7c80f59e79b</data>
    </node>
    <node id="Model Selection">
      <data key="d1">function</data>
      <data key="d2">Model Selection involves comparing different embedding models to identify which model provides the best performance in retrieval tasks.</data>
      <data key="d3">excerpt_id_23af2b95600ddac30518f7c80f59e79b</data>
    </node>
    <node id="User Feedback">
      <data key="d1">variable</data>
      <data key="d2">User Feedback consists of insights and ratings from users that help improve the quality of search results over time.</data>
      <data key="d3">excerpt_id_23af2b95600ddac30518f7c80f59e79b</data>
    </node>
    <node id="Question Answering">
      <data key="d1">application</data>
      <data key="d2">Question Answering is a practical application of similarity search that aims to find relevant information to answer specific user questions.</data>
      <data key="d3">excerpt_id_23af2b95600ddac30518f7c80f59e79b</data>
    </node>
    <node id="Document Exploration">
      <data key="d1">application</data>
      <data key="d2">Document Exploration allows users to discover related content across different documents using similarity search.</data>
      <data key="d3">excerpt_id_23af2b95600ddac30518f7c80f59e79b</data>
    </node>
    <node id="Concept Search">
      <data key="d1">application</data>
      <data key="d2">Concept Search involves finding information about concepts even when terminology varies, utilizing similarity search techniques.</data>
      <data key="d3">excerpt_id_23af2b95600ddac30518f7c80f59e79b</data>
    </node>
    <node id="Technical Support">
      <data key="d1">application</data>
      <data key="d2">Technical Support is a practical use of similarity search to locate relevant documentation for resolving technical issues.</data>
      <data key="d3">excerpt_id_23af2b95600ddac30518f7c80f59e79b</data>
    </node>
    <node id="Knowledge Discovery">
      <data key="d1">application</data>
      <data key="d2">Knowledge Discovery aims to uncover connections between different pieces of information through similarity search.</data>
      <data key="d3">excerpt_id_23af2b95600ddac30518f7c80f59e79b</data>
    </node>
    <node id="Advanced Models">
      <data key="d1">future enhancement</data>
      <data key="d2">Advanced Models refers to the incorporation of newer and more powerful embedding models to enhance similarity search capabilities.</data>
      <data key="d3">excerpt_id_23af2b95600ddac30518f7c80f59e79b</data>
    </node>
    <node id="Approximate Search">
      <data key="d1">future enhancement</data>
      <data key="d2">Approximate Search involves implementing approximate nearest neighbor techniques to efficiently handle larger collections.</data>
      <data key="d3">excerpt_id_23af2b95600ddac30518f7c80f59e79b</data>
    </node>
    <node id="Multi-Modal Search">
      <data key="d1">future enhancement</data>
      <data key="d2">Multi-Modal Search expands similarity search to manage non-text content such as images and videos.</data>
      <data key="d3">excerpt_id_23af2b95600ddac30518f7c80f59e79b</data>
    </node>
    <node id="Personalization">
      <data key="d1">future enhancement</data>
      <data key="d2">Personalization adapts search results based on individual user preferences and search history to improve relevance.</data>
      <data key="d3">excerpt_id_23af2b95600ddac30518f7c80f59e79b</data>
    </node>
    <node id="Federated Search">
      <data key="d1">future enhancement</data>
      <data key="d2">Federated Search enables querying across multiple vector stores or knowledge bases, enhancing the scope of search results.</data>
      <data key="d3">excerpt_id_23af2b95600ddac30518f7c80f59e79b</data>
    </node>
    <node id="Vector Search Query Type">
      <data key="d1">configuration</data>
      <data key="d2">Vector Search Query Type is a specific approach within SmolRAG that leverages vectors for querying to identify semantically similar content.</data>
      <data key="d3">excerpt_id_d18b53e295f2d7f1d8c1de2dd0ca1da8</data>
    </node>
    <node id="Knowledge Graph Approaches">
      <data key="d1">configuration:|:function</data>
      <data key="d2">Knowledge Graph Approaches in SmolRAG are methods that can be combined with similarity search to enhance query responses and information retrieval.:|:Knowledge Graph Approaches refer to techniques that utilize the relationships and structures within knowledge graphs to answer queries effectively.</data>
      <data key="d3">excerpt_id_f18a098e46a2044eb43b0d2c58ecc3e2:|:excerpt_id_d18b53e295f2d7f1d8c1de2dd0ca1da8</data>
    </node>
    <node id="SmolRAG API">
      <data key="d1">api</data>
      <data key="d2">The SmolRAG API is an application programming interface that can be deployed for various purposes, particularly in production settings.:|:The SmolRAG API is a RESTful API that allows users to interact with SmolRAG through HTTP requests, simplifying document queries.:|:SmolRAG API is an application programming interface that can be configured in different ways to suit various requirements.:|:The SmolRAG API is an application programming interface that enables interactions between web applications and various data sources, but it does not include CORS configuration by default.:|:The SmolRAG API is a programmable interface designed to provide access to specific functionalities, including document management and performance optimization.:|:The SmolRAG API is an application programming interface that allows integration and interaction with other software components, facilitating various operations, including error handling.:|:The SmolRAG API is an application programming interface that facilitates interaction with the SmolRAG service, without built-in rate limiting by default.:|:The SmolRAG API is a web-based interface that allows interaction with backend features, utilizing automatic documentation through Swagger UI and ReDoc.:|:The SmolRAG API is a powerful tool designed for querying documents, adhering to RESTful principles, and utilizing FastAPI for an efficient user interface.:|:SmolRAG API provides an interface for users to interact with the Mix Query Method, enabling straightforward integration and execution of queries.</data>
      <data key="d3">excerpt_id_1fe2968b7d2d64446c316e24fa371c2a:|:excerpt_id_07bdc18399de7676516bc3f23397788c:|:excerpt_id_8a0247b8e1267963faeba1c255657e41:|:excerpt_id_25c46a7909a2f532a6989da2de994646:|:excerpt_id_006e4a3ed33e76243f95fdc7b39916e6:|:excerpt_id_14fbfc8e32f774c23cc2f9360cb2c1c5:|:excerpt_id_605f86c194720dfb2ba5318d6291e7fa:|:excerpt_id_a4699fb3dcb4a727d1eb4a481496bfa2:|:excerpt_id_8ae4948b96c52786e166f40ab294103d:|:excerpt_id_bfbdc7de5c6b20362e7297fd06fd853a</data>
    </node>
    <node id="FastAPI">
      <data key="d1">technology:|:api:|:function:|:framework</data>
      <data key="d2">FastAPI is a modern web framework for building APIs with Python, designed for fast and efficient performance.:|:FastAPI is a modern web framework for building APIs with Python, designed for performance and ease of use when implementing features like versioning.:|:FastAPI is a modern web framework for building APIs with Python, designed to be easy to use and fast.:|:FastAPI is a modern, fast (high-performance), web framework for building APIs with Python based on standard Python type hints.:|:FastAPI is a modern web framework for building APIs with Python based on standard Python type hints, used here to implement the API.:|:FastAPI is a modern, fast (high-performance) web framework for building APIs with Python 3.6+ based on standard Python type hints.:|:FastAPI is a modern web framework for building APIs with Python 3.6+ based on standard Python type hints, providing features like automatic validation and documentation.:|:FastAPI is a modern web framework for building APIs with Python, designed for performance and ease of use.:|:FastAPI is a modern, fast web framework for building APIs with Python, designed for performance and ease of use in creating web applications.:|:FastAPI is a web framework that enhances the capabilities of the SmolRAG API by enabling a clean and well-documented interface for users.:|:FastAPI is a modern, fast web framework for building APIs with Python, featuring automatic interactive documentation.:|:FastAPI is a modern, high-performance web framework for building APIs with Python 3.6+ based on standard Python type hints.:|:FastAPI is the web framework used to build the SmolRAG API, offering features like automatic validation and serialization.:|:FastAPI is a modern web framework used for building APIs with Python based on standard Python type hints, making it easy to develop high-quality applications.</data>
      <data key="d3">excerpt_id_f9f9e7c388f5ed8fa52c4ed1b6f792c9:|:excerpt_id_53ae527cec786bde0d38d922738f582d:|:excerpt_id_27249d9d3f94ef9651b9eb1eaf1ed6e3:|:excerpt_id_abfc709617d4485a5d0d2754f4298bae:|:excerpt_id_dc931d71f7d6a347aaaa011838c3efaf:|:excerpt_id_605f86c194720dfb2ba5318d6291e7fa:|:excerpt_id_2444e5ece582784ac2fce0dabf395906:|:excerpt_id_18b7236af033065c11ace3034fa8761a:|:excerpt_id_17a5056efc735a93a671ced76a4ca7f1:|:excerpt_id_24d76bde5328dc16ace5722740c74eb7:|:excerpt_id_a4699fb3dcb4a727d1eb4a481496bfa2:|:excerpt_id_07384bef2559980ac5dc719b7a30dc2d:|:excerpt_id_14de54a01d2eddbd92dc845208f04fa1:|:excerpt_id_db532a32078ae304c7d23c29df7effc8</data>
    </node>
    <node id="Endpoint">
      <data key="d1">feature</data>
      <data key="d2">The Endpoint is a key feature of the SmolRAG API, specifically the `/query` endpoint that processes document queries.</data>
      <data key="d3">excerpt_id_605f86c194720dfb2ba5318d6291e7fa</data>
    </node>
    <node id="/query">
      <data key="d1">api:|:interface</data>
      <data key="d2">The /query interface is the endpoint for the API where queries are sent, utilizing the FastAPI framework's routing capabilities.:|:The `/query` endpoint is an interface for sending requests to the SmolRAG API, accepting JSON payloads and returning query results.:|:The '/query' API endpoint is used to process the query text and return responses based on query parameters.:|:The /query interface is an endpoint where users can make queries by sending POST requests containing input data.</data>
      <data key="d3">excerpt_id_32599e1b552f26ddce9129b57e04566f:|:excerpt_id_605f86c194720dfb2ba5318d6291e7fa:|:excerpt_id_abfc709617d4485a5d0d2754f4298bae:|:excerpt_id_0b584310e88dc1a8507dcdad84fa71fa</data>
    </node>
    <node id="Request Format">
      <data key="d1">configuration</data>
      <data key="d2">The Request Format specifies how to structure requests to the `/query` endpoint, detailing the JSON payload requirements.:|:Request Format refers to the structure and content of the requests sent to the FastAPI, which must adhere to specific requirements.</data>
      <data key="d3">excerpt_id_53ae527cec786bde0d38d922738f582d:|:excerpt_id_605f86c194720dfb2ba5318d6291e7fa</data>
    </node>
    <node id="json">
      <data key="d1">api:|:data format</data>
      <data key="d2">JSON is a lightweight data interchange format that is easy for humans to read and write and easy for machines to parse and generate.:|:json is a standard Python library for parsing JSON data, used to save and load cached results in the QueryCache class.:|:JSON, which stands for JavaScript Object Notation, is a lightweight data interchange format that is easy for humans to read and write, and easy for machines to parse and generate.:|:JSON is a lightweight data-interchange format that is easy for humans to read and write and easy for machines to parse and generate.</data>
      <data key="d3">excerpt_id_57eb43a9ab45275ad99d7f7de6594ffd:|:excerpt_id_3d1e91c648620eaa7e9638d82c90d947:|:excerpt_id_9bebde77788b480bb0dca061281305da:|:excerpt_id_f867ac5b5c6b6493fa80e156c12f2998:|:excerpt_id_8f131bada0cf88919e5b437392d9c338</data>
    </node>
    <node id="query text">
      <data key="d1">variable</data>
      <data key="d2">query text is a placeholder for the actual search query that the user is meant to input into the API request, formatted as text.</data>
      <data key="d3">excerpt_id_3d1e91c648620eaa7e9638d82c90d947</data>
    </node>
    <node id="query_type">
      <data key="d1">configuration:|:variable</data>
      <data key="d2">The 'query_type' variable within QueryRequest is a string that specifies the type of query being made, defaulting to 'standard'.:|:query_type is a variable indicating the type of the query being processed, which aids in generating the cache key.:|:Query Type is a variable used in the requests to specify the nature of the query being performed, either standard, local_kg, or mix.:|:query_type is a string variable in QueryRequest that indicates the type of query to be executed, defaulting to 'standard'.:|:query_type is a configuration parameter that determines the type of query to be executed on the SmolRag API, such as standard or hybrid KG.:|:The 'query_type' variable determines the type of query to perform, with an optional default value of 'standard'.:|:query_type is a variable that indicates the type of query, used to create unique cache keys for different types of queries.:|:Query Type indicates the nature of the query being made, defining how the server should process the request.:|:query_type refers to the type of query being processed, which can include valid types like standard, local_kg, global_kg, hybrid_kg, and mix.:|:query_type specifies the type of query being made to the API, in this case, indicating a standard type of query.:|:query_type is a variable that indicates the type of query being made, guiding the processing of the incoming request.</data>
      <data key="d3">excerpt_id_3d1e91c648620eaa7e9638d82c90d947:|:excerpt_id_27249d9d3f94ef9651b9eb1eaf1ed6e3:|:excerpt_id_9bebde77788b480bb0dca061281305da:|:excerpt_id_6d5e3b714d13f4cccc13c6ddccfafca3:|:excerpt_id_479ad0928f95805c9a3315aa5e37e736:|:excerpt_id_32599e1b552f26ddce9129b57e04566f:|:excerpt_id_871ea4244ed66d033bd333acf9bf3bc4:|:excerpt_id_f867ac5b5c6b6493fa80e156c12f2998:|:excerpt_id_24d76bde5328dc16ace5722740c74eb7:|:excerpt_id_8f131bada0cf88919e5b437392d9c338:|:excerpt_id_0b584310e88dc1a8507dcdad84fa71fa</data>
    </node>
    <node id="text">
      <data key="d1">variable</data>
      <data key="d2">The 'text' variable within QueryRequest is defined as a string and is crucial for representing the query input that the user provides.:|:text is a variable that represents the string input which will be processed by the custom chunking strategy function.:|:text is a string variable in QueryRequest that contains the query input from the user, which must not be empty.:|:The 'text' variable represents the input query text that is required for processing.</data>
      <data key="d3">excerpt_id_b448f2ca1ed64ac27b528bb6bed67d93:|:excerpt_id_24d76bde5328dc16ace5722740c74eb7:|:excerpt_id_27249d9d3f94ef9651b9eb1eaf1ed6e3:|:excerpt_id_0b584310e88dc1a8507dcdad84fa71fa</data>
    </node>
    <node id="standard">
      <data key="d1">function:|:example</data>
      <data key="d2">standard is a valid query type that can be used within the context of a JSON request.:|:The 'standard' example represents a query type that utilizes vector search for processing.</data>
      <data key="d3">excerpt_id_8f131bada0cf88919e5b437392d9c338:|:excerpt_id_0b584310e88dc1a8507dcdad84fa71fa</data>
    </node>
    <node id="local_kg">
      <data key="d1">function:|:example</data>
      <data key="d2">local_kg is a valid query type indicating a localized knowledge graph query.:|:The 'local_kg' example indicates a query type that uses a local knowledge graph for data retrieval.</data>
      <data key="d3">excerpt_id_8f131bada0cf88919e5b437392d9c338:|:excerpt_id_0b584310e88dc1a8507dcdad84fa71fa</data>
    </node>
    <node id="global_kg">
      <data key="d1">function:|:example</data>
      <data key="d2">The 'global_kg' example denotes a query type that employs a global knowledge graph.:|:global_kg is a valid query type indicating a global knowledge graph query.</data>
      <data key="d3">excerpt_id_8f131bada0cf88919e5b437392d9c338:|:excerpt_id_0b584310e88dc1a8507dcdad84fa71fa</data>
    </node>
    <node id="hybrid_kg">
      <data key="d1">function:|:example</data>
      <data key="d2">hybrid_kg is a valid query type that suggests combining local and global knowledge graph queries.:|:The 'hybrid_kg' example refers to a query type that incorporates both local and global knowledge graph approaches.</data>
      <data key="d3">excerpt_id_8f131bada0cf88919e5b437392d9c338:|:excerpt_id_0b584310e88dc1a8507dcdad84fa71fa</data>
    </node>
    <node id="mix">
      <data key="d1">function:|:example</data>
      <data key="d2">The 'mix' example showcases a query type that combines vector search with knowledge graph methods.:|:mix is a valid query type indicating a combination of various types of queries.</data>
      <data key="d3">excerpt_id_8f131bada0cf88919e5b437392d9c338:|:excerpt_id_0b584310e88dc1a8507dcdad84fa71fa</data>
    </node>
    <node id="Response Text">
      <data key="d1">variable</data>
      <data key="d2">Response Text is the string returned by the SmolRAG API, containing the result of the API call.</data>
      <data key="d3">excerpt_id_9d9cc347ab952fb9a4b25bd3a1a18919</data>
    </node>
    <node id="JSON">
      <data key="d1">configuration</data>
      <data key="d2">JSON is a data format used to structure the response from the SmolRAG API in a readable manner.</data>
      <data key="d3">excerpt_id_9d9cc347ab952fb9a4b25bd3a1a18919</data>
    </node>
    <node id="result">
      <data key="d1">variable</data>
      <data key="d2">result is a variable that receives and holds the completion result returned by the LLM after processing the prompt.:|:The variable `result` is a string that holds the response text generated by SmolRAG in response to a query.:|:result is a variable that stores the outcome of the query processing before it is returned to the user.:|:result is a variable that stores the output from the language model after processing the prompt.:|:result is a variable that stores the outcome of processing the query, which is then returned to the client in JSON format.:|:result is a variable that stores the output received from the llm API after processing the prompt.:|:result is a variable that stores the returned value from the profiled function after execution.</data>
      <data key="d3">excerpt_id_8fda81c68b75421d305c4c8c5587399b:|:excerpt_id_9bcab0017708cc906fc0c391ec015f1e:|:excerpt_id_cf3cd9ded1fbc94e0796c2e9873e597c:|:excerpt_id_32599e1b552f26ddce9129b57e04566f:|:excerpt_id_7632c4b619e7677d548ca2cb0924040f:|:excerpt_id_87dae939db470195b9a1c5b5ab8cca31:|:excerpt_id_6aad6436e24fdc08b2a945d47b297b8b</data>
    </node>
    <node id="Error Handling">
      <data key="d1">feature:|:configuration:|:function</data>
      <data key="d2">Error Handling is a function that ensures the system maintains stability and continues operation even when embedding generation encounters issues.:|:Error Handling is a feature of the API that implements mechanisms to manage and respond to errors effectively, ensuring clarity in user feedback.:|:Error Handling encompasses methods to catch and log errors during processing, ensuring system reliability.:|:Error Handling is a configuration that ensures the reliability and resilience of the ingestion process when faced with complex documents.:|:Error Handling refers to the systematic approach of anticipating, detecting, and managing errors in a software system to ensure robust performance and user satisfaction.</data>
      <data key="d3">excerpt_id_04830b46c6b9fee612a7e80e9b24cec2:|:excerpt_id_18835ef6b8af421b24d0b04072745415:|:excerpt_id_efce5aab9b4130a5bb56f788c7389339:|:excerpt_id_0758031048f3438910733878e3670905:|:excerpt_id_87dae939db470195b9a1c5b5ab8cca31</data>
    </node>
    <node id="Client Errors (4xx)">
      <data key="d1">configuration</data>
      <data key="d2">Client Errors relevant to the API are defined within the 4xx status code range, indicating issues with the client's request.</data>
      <data key="d3">excerpt_id_87dae939db470195b9a1c5b5ab8cca31</data>
    </node>
    <node id="400 Bad Request">
      <data key="d1">example</data>
      <data key="d2">400 Bad Request is an example of a client error that occurs when the request is deemed invalid, such as when the query text is empty.</data>
      <data key="d3">excerpt_id_87dae939db470195b9a1c5b5ab8cca31</data>
    </node>
    <node id="Query Text">
      <data key="d1">variable</data>
      <data key="d2">Query Text is a variable that holds the string input intended for querying, which cannot be empty as indicated by the error message.:|:Query Text is a placeholder indicating the input text for which a query is formulated.</data>
      <data key="d3">excerpt_id_09efdd02089d4d4a3aa99a252d672b58:|:excerpt_id_57eb43a9ab45275ad99d7f7de6594ffd</data>
    </node>
    <node id="Error Message">
      <data key="d1">api:|:message</data>
      <data key="d2">Error Message is a response detail in JSON format that describes the issue encountered during an API call.:|:Error Message is a string output that indicates a specific error condition occurring when the Query Text is empty.</data>
      <data key="d3">excerpt_id_57eb43a9ab45275ad99d7f7de6594ffd:|:excerpt_id_6dd306338edf913b9d21cc96c55f5c03</data>
    </node>
    <node id="or">
      <data key="d1">variable</data>
      <data key="d2">Or is a logical variable used in programming and decision-making, representing a binary choice between two or more conditions.</data>
      <data key="d3">excerpt_id_e81c4e4f2b7b93b481e13a8553c2ae1b</data>
    </node>
    <node id="500 Internal Server Error">
      <data key="d1">api</data>
      <data key="d2">500 Internal Server Error is an API response indicating that an unexpected error occurred during the processing of a query.</data>
      <data key="d3">excerpt_id_dd9ffc6bef5d858bb7b1279db8dfc3ad</data>
    </node>
    <node id="Server Errors (5xx)" />
    <node id="JSON Format">
      <data key="d1">configuration</data>
      <data key="d2">JSON Format is a structured data format used to transmit information between a server and a client, representing data objects in key-value pairs.</data>
      <data key="d3">excerpt_id_6dd306338edf913b9d21cc96c55f5c03</data>
    </node>
    <node id="Authentication">
      <data key="d1">feature</data>
      <data key="d2">Authentication refers to the methods and mechanisms employed to secure access to the SmolRAG API, ensuring that only authorized users can interact with it.</data>
      <data key="d3">excerpt_id_1fe2968b7d2d64446c316e24fa371c2a</data>
    </node>
    <node id="API Key">
      <data key="d1">variable</data>
      <data key="d2">API Key refers to a unique identifier used to authenticate a user or application when making requests to an API.:|:An API Key is a value passed in request headers that serves as a unique identifier and secret token for authenticating an application or user trying to access the SmolRAG API.</data>
      <data key="d3">excerpt_id_1fe2968b7d2d64446c316e24fa371c2a:|:excerpt_id_dfcb42b36ae0e3ad5d118ac29dbb8550</data>
    </node>
    <node id="OAuth 2.0">
      <data key="d1">function</data>
      <data key="d2">OAuth 2.0 is a protocol that allows users to authorize third-party access to their resources without sharing their credentials, used in securing the SmolRAG API.</data>
      <data key="d3">excerpt_id_1fe2968b7d2d64446c316e24fa371c2a</data>
    </node>
    <node id="JWT">
      <data key="d1">variable</data>
      <data key="d2">JSON Web Tokens (JWT) are compact and self-contained means for securely transmitting information between parties as a JSON object, employed for stateless authentication in the SmolRAG API.</data>
      <data key="d3">excerpt_id_1fe2968b7d2d64446c316e24fa371c2a</data>
    </node>
    <node id="API Gateway">
      <data key="d1">configuration:|:interface</data>
      <data key="d2">An API Gateway is a server that acts as an access point to a bridge between users and the SmolRAG API, which provides authentication and helps manage traffic.:|:An API Gateway is a server that acts as an API front-end, which can provide rate limiting capabilities among other functionalities.</data>
      <data key="d3">excerpt_id_1fe2968b7d2d64446c316e24fa371c2a:|:excerpt_id_25c46a7909a2f532a6989da2de994646</data>
    </node>
    <node id="API_KEY">
      <data key="d1">variable</data>
      <data key="d2">API_KEY is a string variable storing a secret key used for API authentication in the FastAPI application.</data>
      <data key="d3">excerpt_id_2444e5ece582784ac2fce0dabf395906</data>
    </node>
    <node id="API_KEY_NAME">
      <data key="d1">variable</data>
      <data key="d2">API_KEY_NAME is a string variable that defines the name of the API key header for authentication purposes.</data>
      <data key="d3">excerpt_id_2444e5ece582784ac2fce0dabf395906</data>
    </node>
    <node id="api_key_header">
      <data key="d1">interface</data>
      <data key="d2">api_key_header is an instance of APIKeyHeader that is used to retrieve the API key from requests in the FastAPI application.</data>
      <data key="d3">excerpt_id_2444e5ece582784ac2fce0dabf395906</data>
    </node>
    <node id="get_api_key">
      <data key="d1">function</data>
      <data key="d2">get_api_key is an asynchronous function that validates the API key provided in the request header and raises an HTTP exception for invalid keys.</data>
      <data key="d3">excerpt_id_2444e5ece582784ac2fce0dabf395906</data>
    </node>
    <node id="query_endpoint">
      <data key="d1">function</data>
      <data key="d2">query_endpoint is an asynchronous function defined to handle POST requests to the '/query' API endpoint, processing queries based on the parameters defined in QueryRequest.:|:query_endpoint is an API endpoint defined to handle POST requests for queries, utilizing asynchronous processing.:|:The query_endpoint function is an asynchronous HTTP POST endpoint that processes requests for querying data based on the specified query type.:|:query_endpoint is an asynchronous function defined as an API endpoint for processing queries, protected by rate limiting.:|:query_endpoint is an asynchronous function endpoint that processes incoming queries, protected by the get_api_key dependency.</data>
      <data key="d3">excerpt_id_abfc709617d4485a5d0d2754f4298bae:|:excerpt_id_9bcab0017708cc906fc0c391ec015f1e:|:excerpt_id_dc931d71f7d6a347aaaa011838c3efaf:|:excerpt_id_2444e5ece582784ac2fce0dabf395906:|:excerpt_id_24d76bde5328dc16ace5722740c74eb7</data>
    </node>
    <node id="HTTPException">
      <data key="d1">feature:|:api:|:error:|:function</data>
      <data key="d2">HTTPException is an API class used to handle exceptions in a user-friendly manner by returning an appropriate HTTP response when errors occur.:|:HTTPException is a built-in function in FastAPI that is used to raise errors with specified HTTP status codes.:|:HTTPException is an exception raised in FastAPI to handle HTTP error responses, providing clear feedback to clients.:|:HTTPException is a class used to raise errors with specific HTTP status codes and detail messages in FastAPI applications.</data>
      <data key="d3">excerpt_id_dc931d71f7d6a347aaaa011838c3efaf:|:excerpt_id_2444e5ece582784ac2fce0dabf395906:|:excerpt_id_27249d9d3f94ef9651b9eb1eaf1ed6e3:|:excerpt_id_9bcab0017708cc906fc0c391ec015f1e</data>
    </node>
    <node id="Rate Limiting">
      <data key="d1">feature:|:configuration:|:function</data>
      <data key="d2">Rate Limiting is a function used to control the amount of incoming or outgoing traffic to or from a network in a specified time period.:|:Rate Limiting is a function used to control the number of requests that a user can make to an API within a specified time frame.:|:Rate Limiting is a feature suggested for the SmolRAG API to prevent abuse and ensure fair usage in production environments.:|:Rate Limiting is a strategy implemented to control the rate of API requests and prevent hitting the API's usage limits.:|:Rate Limiting is a configuration that restricts the number of API requests a user can make within a specific time frame to ensure fair usage.</data>
      <data key="d3">excerpt_id_25c46a7909a2f532a6989da2de994646:|:excerpt_id_5c8d062ff56fbe4073ca40e6794ef56b:|:excerpt_id_d41d4522e6a3cf4c0b8733e72233523a:|:excerpt_id_8ec1e476798fb46038b3e8a5c5907ec5:|:excerpt_id_ff086be0a4666895d6aa51a1f2a286e5</data>
    </node>
    <node id="FastAPI Middleware">
      <data key="d1">configuration</data>
      <data key="d2">FastAPI Middleware is a configurable component that can be used to implement rate limiting for the SmolRAG API.</data>
      <data key="d3">excerpt_id_25c46a7909a2f532a6989da2de994646</data>
    </node>
    <node id="slowapi">
      <data key="d1">example</data>
      <data key="d2">The `slowapi` package serves as an example implementation tool for incorporating rate limiting features in FastAPI applications.</data>
      <data key="d3">excerpt_id_25c46a7909a2f532a6989da2de994646</data>
    </node>
    <node id="Limiter">
      <data key="d1">configuration</data>
      <data key="d2">Limiter is a configuration component in the SlowAPI library used to impose rate limits on API endpoints to prevent excessive usage.</data>
      <data key="d3">excerpt_id_abfc709617d4485a5d0d2754f4298bae</data>
    </node>
    <node id="RateLimitExceeded">
      <data key="d1">exception</data>
      <data key="d2">RateLimitExceeded is an exception class that is raised when a request exceeds the defined rate limits within the API.</data>
      <data key="d3">excerpt_id_abfc709617d4485a5d0d2754f4298bae</data>
    </node>
    <node id="QueryRequest">
      <data key="d1">interface:|:model:|:configuration:|:variable</data>
      <data key="d2">QueryRequest is a Pydantic model serving as the schema for query requests to ensure data validity and correctness.:|:QueryRequest is a variable type expected as input in the query_endpoint function, representing the data structure for queries.:|:QueryRequest is a data model that defines the structure of the incoming request containing a text and a query type, validated by Pydantic.:|:QueryRequest is a data structure used in the v1_router to encapsulate the request data for query processing.:|:QueryRequest is a class that extends Pydantic's BaseModel, designed to validate and parse the data for a query, including text, query type, and maximum results.:|:QueryRequest is a variable type that represents the request data structure needed by the async_query function.:|:QueryRequest represents the structure of the data being sent to the query_endpoint, detailing the type of query and the text content.</data>
      <data key="d3">excerpt_id_27249d9d3f94ef9651b9eb1eaf1ed6e3:|:excerpt_id_abfc709617d4485a5d0d2754f4298bae:|:excerpt_id_9bcab0017708cc906fc0c391ec015f1e:|:excerpt_id_5024e90dea7510cdc40f94282d4af1a0:|:excerpt_id_18b7236af033065c11ace3034fa8761a:|:excerpt_id_24d76bde5328dc16ace5722740c74eb7:|:excerpt_id_14de54a01d2eddbd92dc845208f04fa1</data>
    </node>
    <node id="CORS Configuration">
      <data key="d1">configuration</data>
      <data key="d2">CORS Configuration refers to the settings that allow web applications from one domain to interact with an API from another domain, critical for browser-based requests.</data>
      <data key="d3">excerpt_id_14fbfc8e32f774c23cc2f9360cb2c1c5</data>
    </node>
    <node id="FastAPI's Middleware">
      <data key="d1">function</data>
      <data key="d2">FastAPI's Middleware serves as a function that can be utilized to configure CORS, allowing web applications to make cross-origin requests more securely and effectively.</data>
      <data key="d3">excerpt_id_14fbfc8e32f774c23cc2f9360cb2c1c5</data>
    </node>
    <node id="SmolRag API">
      <data key="d1">api</data>
      <data key="d2">SmolRag API is a FastAPI application designed to serve as a backend interface for web applications, providing API endpoints and configuring middleware for cross-origin requests.:|:SmolRag API is a FastAPI application designed to provide a backend interface for clients, with features that adhere to standards like CORS.:|:SmolRag API is an application built using FastAPI, providing an interface for specific functionalities related to querying data.</data>
      <data key="d3">excerpt_id_f9f9e7c388f5ed8fa52c4ed1b6f792c9:|:excerpt_id_14de54a01d2eddbd92dc845208f04fa1:|:excerpt_id_db532a32078ae304c7d23c29df7effc8</data>
    </node>
    <node id="CORS Middleware">
      <data key="d1">middleware:|:configuration</data>
      <data key="d2">CORS Middleware is a configuration component that allows the FastAPI application to handle cross-origin requests, specifying permitted origins, methods, and headers.:|:CORS Middleware is a component integrated into the FastAPI application to handle Cross-Origin Resource Sharing, allowing web applications hosted on different domains to communicate.</data>
      <data key="d3">excerpt_id_f9f9e7c388f5ed8fa52c4ed1b6f792c9:|:excerpt_id_db532a32078ae304c7d23c29df7effc8</data>
    </node>
    <node id="allow_origins">
      <data key="d1">configuration:|:variable</data>
      <data key="d2">allow_origins is a configuration variable that specifies which external domains are permitted to interact with the API, enhancing security and functionality through cross-origin resource sharing.:|:allow_origins is a configuration setting within the CORS Middleware that specifies which origins are allowed to access the API.:|:The `allow_origins` configuration setting specifies which domains are permitted to access the API, essential for managing cross-origin requests.</data>
      <data key="d3">excerpt_id_17a5056efc735a93a671ced76a4ca7f1:|:excerpt_id_f9f9e7c388f5ed8fa52c4ed1b6f792c9:|:excerpt_id_db532a32078ae304c7d23c29df7effc8</data>
    </node>
    <node id="allow_methods">
      <data key="d1">configuration:|:variable</data>
      <data key="d2">allow_methods is a variable used to define the HTTP methods that are allowed when making requests to the API, facilitating diverse client-server interactions.:|:allow_methods is a configuration that designates which HTTP methods are permitted to be used when accessing the API.</data>
      <data key="d3">excerpt_id_f9f9e7c388f5ed8fa52c4ed1b6f792c9:|:excerpt_id_db532a32078ae304c7d23c29df7effc8</data>
    </node>
    <node id="API Endpoints">
      <data key="d1">feature</data>
      <data key="d2">API Endpoints are specific routes defined in the FastAPI application that allow clients to interact with the server to retrieve or modify data.</data>
      <data key="d3">excerpt_id_f9f9e7c388f5ed8fa52c4ed1b6f792c9</data>
    </node>
    <node id="allow_headers">
      <data key="d1">configuration:|:variable</data>
      <data key="d2">allow_headers is a variable that defines the specific headers that can be used when making requests to the API, important for the proper handling of requests with custom headers.:|:allow_headers is a configuration that indicates which headers can be used in the requests to the API.</data>
      <data key="d3">excerpt_id_f9f9e7c388f5ed8fa52c4ed1b6f792c9:|:excerpt_id_db532a32078ae304c7d23c29df7effc8</data>
    </node>
    <node id="API Versioning">
      <data key="d1">feature</data>
      <data key="d2">API Versioning is a feature that supports multiple versions of an API, allowing for breaking changes while maintaining usability for existing clients.</data>
      <data key="d3">excerpt_id_17a5056efc735a93a671ced76a4ca7f1</data>
    </node>
    <node id="path prefixes">
      <data key="d1">function</data>
      <data key="d2">Path prefixes are a method for implementing API versioning by attaching versions to the URL paths, enabling different versions to coexist.</data>
      <data key="d3">excerpt_id_17a5056efc735a93a671ced76a4ca7f1</data>
    </node>
    <node id="v1_router">
      <data key="d1">configuration</data>
      <data key="d2">v1_router is a router configuration for version 1 of the SmolRag API, designed to handle requests with a prefix '/v1'.</data>
      <data key="d3">excerpt_id_14de54a01d2eddbd92dc845208f04fa1</data>
    </node>
    <node id="v2_router">
      <data key="d1">configuration</data>
      <data key="d2">v2_router is a router configuration for version 2 of the SmolRag API, designed to handle requests with a prefix '/v2'.</data>
      <data key="d3">excerpt_id_14de54a01d2eddbd92dc845208f04fa1</data>
    </node>
    <node id="query_endpoint_v1">
      <data key="d1">function</data>
      <data key="d2">query_endpoint_v1 is a function in the v1_router responsible for processing queries using version 1 logic.</data>
      <data key="d3">excerpt_id_14de54a01d2eddbd92dc845208f04fa1</data>
    </node>
    <node id="query_endpoint_v2">
      <data key="d1">function</data>
      <data key="d2">query_endpoint_v2 is a function in the v2_router responsible for processing queries using version 2 logic.</data>
      <data key="d3">excerpt_id_14de54a01d2eddbd92dc845208f04fa1</data>
    </node>
    <node id="QueryRequestV2">
      <data key="d1">variable</data>
      <data key="d2">QueryRequestV2 is a data structure used in the v2_router to encapsulate the request data for query processing.</data>
      <data key="d3">excerpt_id_14de54a01d2eddbd92dc845208f04fa1</data>
    </node>
    <node id="Swagger UI">
      <data key="d1">interface</data>
      <data key="d2">Swagger UI is an interactive documentation interface for APIs that allows users to explore endpoints, view schemas, and test APIs directly from the browser.</data>
      <data key="d3">excerpt_id_07bdc18399de7676516bc3f23397788c</data>
    </node>
    <node id="ReDoc">
      <data key="d1">interface</data>
      <data key="d2">ReDoc is an alternative API documentation interface that provides a user-friendly way to understand APIs and their functionalities.</data>
      <data key="d3">excerpt_id_07bdc18399de7676516bc3f23397788c</data>
    </node>
    <node id="API Documentation">
      <data key="d1">configuration</data>
      <data key="d2">API Documentation encompasses the guidelines and information pertaining to the usage, endpoints, request and response schemas, and error responses of the SmolRAG API.</data>
      <data key="d3">excerpt_id_07bdc18399de7676516bc3f23397788c</data>
    </node>
    <node id="Example API Requests">
      <data key="d1">example</data>
      <data key="d2">Example API Requests provide practical instances of how to interact with the SmolRAG API, demonstrating usage through different tools like curl.</data>
      <data key="d3">excerpt_id_07bdc18399de7676516bc3f23397788c</data>
    </node>
    <node id="Standard Query">
      <data key="d1">function</data>
      <data key="d2">Standard Query is a type of query that retrieves information based on a predefined standard, allowing for conventional data extraction.:|:Standard Query is a function of the SmolRAG API used to perform basic queries, enabling users to ask specific questions about the data.</data>
      <data key="d3">excerpt_id_09efdd02089d4d4a3aa99a252d672b58:|:excerpt_id_fddc660eda213cec6e37412bf400333b</data>
    </node>
    <node id="Knowledge Graph Query">
      <data key="d1">function</data>
      <data key="d2">The Knowledge Graph Query function is designed to retrieve data from a knowledge graph but may return unexpected results due to various causes.:|:Knowledge Graph Query is a function of the SmolRAG API designed to identify relationships between entities within a dataset.</data>
      <data key="d3">excerpt_id_65cb890bd3f9ceeaeaba0e1a329ba460:|:excerpt_id_fddc660eda213cec6e37412bf400333b</data>
    </node>
    <node id="Mix Query">
      <data key="d1">function</data>
      <data key="d2">Mix Query is a function that processes and retrieves information by integrating different querying techniques within the SmolRag API.:|:Mix Query is a function that integrates both vector search and knowledge graph methods to provide a comprehensive response to complex queries.:|:Mix Query integrates results from the knowledge graph with vector search outputs for a more enriched dataset and response.:|:Mix Query represents a query method that applies different querying strategies to optimize data retrieval.:|:Mix Query is a function of the SmolRAG API that combines elements of standard and knowledge graph queries to process and retrieve information.:|:Mix Query is the most resource-intensive query type, as it combines multiple approaches to querying.:|:The Mix Query integrates vector search and knowledge graph methodologies to provide a comprehensive querying solution.</data>
      <data key="d3">excerpt_id_9320c4230ec563f6b23dbe9d38b855e0:|:excerpt_id_09efdd02089d4d4a3aa99a252d672b58:|:excerpt_id_4869439483a23885f8fdf7f5e9c7039f:|:excerpt_id_fddc660eda213cec6e37412bf400333b:|:excerpt_id_e477d31a3d287e5594aac260eb346c86:|:excerpt_id_f1ef3b38067579dab39116dbfeca6ddc:|:excerpt_id_0fe32e6885f5b985ccdafa775b1e90c3</data>
    </node>
    <node id="localhost:8000/query">
      <data key="d1">interface</data>
      <data key="d2">localhost:8000/query is the interface endpoint for the SmolRAG API where queries are sent and responses are received.</data>
      <data key="d3">excerpt_id_fddc660eda213cec6e37412bf400333b</data>
    </node>
    <node id="Python requests">
      <data key="d1">api</data>
      <data key="d2">Python requests is an API that facilitates making HTTP requests in Python, allowing users to fetch data from web services easily.</data>
      <data key="d3">excerpt_id_e4ab8ab288b90325e31809958bd2e6c8</data>
    </node>
    <node id="configuration" />
    <node id="requests">
      <data key="d1">api</data>
      <data key="d2">Requests is a Python HTTP library that allows users to send HTTP requests easily and interact with web services.</data>
      <data key="d3">excerpt_id_f867ac5b5c6b6493fa80e156c12f2998</data>
    </node>
    <node id="url">
      <data key="d1">variable</data>
      <data key="d2">The URL is a string that specifies the location of the web service endpoint, which is accessed to process queries.</data>
      <data key="d3">excerpt_id_f867ac5b5c6b6493fa80e156c12f2998</data>
    </node>
    <node id="headers">
      <data key="d1">configuration</data>
      <data key="d2">Headers are part of the configuration in the fetch request that define the metadata for the request, particularly the content type.:|:Headers is a dictionary that contains the metadata for the HTTP request, specifying the content type for communication.</data>
      <data key="d3">excerpt_id_f867ac5b5c6b6493fa80e156c12f2998:|:excerpt_id_479ad0928f95805c9a3315aa5e37e736</data>
    </node>
    <node id="payload">
      <data key="d1">variable</data>
      <data key="d2">Payload refers to the data being sent in the body of the HTTP request, formatted as JSON for querying.</data>
      <data key="d3">excerpt_id_f867ac5b5c6b6493fa80e156c12f2998</data>
    </node>
    <node id="response">
      <data key="d1">variable</data>
      <data key="d2">Response refers to the data returned from the web service after processing the HTTP request, typically in JSON format.:|:response holds the data returned by the API call after attempting to embed a batch of texts.:|:response is a variable that captures the output from the OpenAI API call, indicating whether the key is valid or if an error has occurred.</data>
      <data key="d3">excerpt_id_f72624f4124b364e9f6e3cabefc26dcb:|:excerpt_id_f867ac5b5c6b6493fa80e156c12f2998:|:excerpt_id_7427e209fc13ae7cacd434f823963545</data>
    </node>
    <node id="print">
      <data key="d1">function:|:example</data>
      <data key="d2">print is a built-in function used to log the retry attempts in the console.:|:print is a built-in function in Python used to output data to the console, here used to indicate the processing status of batches.:|:print is a built-in function in Python that outputs text or variables to the console or standard output.:|:print is a built-in function in Python used to output messages to the console, used here to indicate the removal of an old document.:|:Print is a built-in function in Python used to output data to the console.:|:print is a built-in function in Python that outputs the value of keyword_data to the console.:|:print is a function that outputs the result of the query to the console.:|:print is a built-in function in Python that outputs the value of the result variable to the console.</data>
      <data key="d3">excerpt_id_e7b71f4ba0f007f7f8bb0625c3380566:|:excerpt_id_1def6bdd950a1221491ad5bc7859d768:|:excerpt_id_fcb87a80b68c38981b549c5658a74b5b:|:excerpt_id_f867ac5b5c6b6493fa80e156c12f2998:|:excerpt_id_8410a7e36eb3c87c25483898c18044a2:|:excerpt_id_53cdd140e8895a35a045a5efd1c35efd:|:excerpt_id_7632c4b619e7677d548ca2cb0924040f:|:excerpt_id_6aad6436e24fdc08b2a945d47b297b8b</data>
    </node>
    <node id="JavaScript fetch">
      <data key="d1">api</data>
      <data key="d2">JavaScript fetch is an API used to make network requests, allowing code to retrieve and manipulate data from servers.</data>
      <data key="d3">excerpt_id_765e9105978f521a3480235ec324fe28</data>
    </node>
    <node id="fetch">
      <data key="d1">function</data>
      <data key="d2">Fetch is a function that allows you to make network requests to servers, used here to retrieve data from a specified URL.</data>
      <data key="d3">excerpt_id_479ad0928f95805c9a3315aa5e37e736</data>
    </node>
    <node id="query">
      <data key="d1">variable:|:function</data>
      <data key="d2">query is a variable that holds the string input used for generating embeddings and querying the database.:|:query is a method of the SmolRag class that processes a standard query and returns results based on the query's text.:|:query is a variable used to hold the search term that is to be processed by various types of queries.:|:query is a function of the SmolRag class that allows users to perform searches on the imported documents.:|:Query is a variable representing the type of data request being made to the server, indicating the nature of the information needed.:|:query is a variable that holds a string value, specifically the user's query to be processed by the language model.:|:query is a method that is overridden in the CustomSmolRag class to provide a tailored implementation of querying.:|:query is a function that processes a test query and retrieves results based on the imported documents.:|:query is a method that allows for querying the vector store to retrieve the top-k most similar vectors based on cosine similarity.:|:query is an endpoint function in the Flask app that processes incoming POST requests with a query and returns results based on the specified query type.</data>
      <data key="d3">excerpt_id_f23f1c9ec24d0c56c84d4dea02a31e9c:|:excerpt_id_479ad0928f95805c9a3315aa5e37e736:|:excerpt_id_2aec78b1c9251a3e46cf4a0fc90b5ce4:|:excerpt_id_fcb87a80b68c38981b549c5658a74b5b:|:excerpt_id_32599e1b552f26ddce9129b57e04566f:|:excerpt_id_a8ba44e624cea2552a723858adb3841b:|:excerpt_id_6aad6436e24fdc08b2a945d47b297b8b:|:excerpt_id_902f74e2a13563ad2b6088a90d1308d6:|:excerpt_id_19166492bd9b3932cb606850e071caa4:|:excerpt_id_391d9b7fd00abda862a1d6576fee1918</data>
    </node>
    <node id="localhost:8000">
      <data key="d1">api</data>
      <data key="d2">Localhost:8000 refers to the API endpoint being accessed for making queries indirectly related to document chunking and information retrieval.</data>
      <data key="d3">excerpt_id_479ad0928f95805c9a3315aa5e37e736</data>
    </node>
    <node id="data">
      <data key="d1">variable</data>
      <data key="d2">Data is a variable that receives the parsed JSON response from the server, presumably containing the results of the queries made.:|:data is a variable holding sorted information as it is processed within the _get_entities_from_relationships method, being ranked according to specific criteria.</data>
      <data key="d3">excerpt_id_451a74f3189766e5f74d735e4bd4d846:|:excerpt_id_479ad0928f95805c9a3315aa5e37e736</data>
    </node>
    <node id="console.log">
      <data key="d1">function</data>
      <data key="d2">Console.log is a function used to output data to the console, helpful for debugging by displaying the received data from the queries.</data>
      <data key="d3">excerpt_id_479ad0928f95805c9a3315aa5e37e736</data>
    </node>
    <node id="body">
      <data key="d1">configuration</data>
      <data key="d2">Body is part of the configuration that contains the request payload being sent to the server in JSON format.</data>
      <data key="d3">excerpt_id_479ad0928f95805c9a3315aa5e37e736</data>
    </node>
    <node id="Uvicorn">
      <data key="d1">configuration:|:api</data>
      <data key="d2">Uvicorn is a production-grade ASGI server known for its fast performance, commonly used with Gunicorn to serve Python web applications.:|:Uvicorn is a lightweight ASGI server recommended for development and small deployments of applications using the SmolRAG API.</data>
      <data key="d3">excerpt_id_006e4a3ed33e76243f95fdc7b39916e6:|:excerpt_id_bfbdc7de5c6b20362e7297fd06fd853a</data>
    </node>
    <node id="uvicorn">
      <data key="d1">api</data>
      <data key="d2">Uvicorn is an ASGI server implementation for Python, used to run web applications, particularly those built with frameworks like FastAPI.:|:Uvicorn is an ASGI server for Python that serves as an application server for asynchronous frameworks and is capable of serving applications using ASGI standards.</data>
      <data key="d3">excerpt_id_ad7847424ed02f7703bdac9030b5c32a:|:excerpt_id_4fbf0d25ec0ca8c1cb9ebaf57eb37998</data>
    </node>
    <node id="api.main:app">
      <data key="d1">configuration</data>
      <data key="d2">app refers to the entry point of the application that Uvicorn is set to run, indicating the structure and designation of the API.:|:app refers to the entry point of a web application, defined within the Gunicorn configuration to specify the application to be served.:|:api.main:|:api.main:app refers to the ASGI application instance expected by Uvicorn to start serving the web application.</data>
      <data key="d3">excerpt_id_6d201e08f402100e25cea0da712f2d5a:|:excerpt_id_ad7847424ed02f7703bdac9030b5c32a:|:excerpt_id_4fbf0d25ec0ca8c1cb9ebaf57eb37998</data>
    </node>
    <node id="host">
      <data key="d1">variable</data>
      <data key="d2">Host refers to the network address on which the application will listen for incoming connections, specified as 0.0.0.0 to allow external access.:|:host is a variable representing the address where the application will listen for requests; in this case, it is set to '0.0.0.0', meaning all network interfaces.</data>
      <data key="d3">excerpt_id_ad7847424ed02f7703bdac9030b5c32a:|:excerpt_id_4fbf0d25ec0ca8c1cb9ebaf57eb37998</data>
    </node>
    <node id="port">
      <data key="d1">variable</data>
      <data key="d2">port is a variable that represents the port number the application listens to; here, it is set to '8000', which is a common port for web applications.:|:Port refers to the specific number (8000) on which the application will run, enabling clients to connect to the Uvicorn server.</data>
      <data key="d3">excerpt_id_ad7847424ed02f7703bdac9030b5c32a:|:excerpt_id_4fbf0d25ec0ca8c1cb9ebaf57eb37998</data>
    </node>
    <node id="Gunicorn">
      <data key="d1">api</data>
      <data key="d2">Gunicorn is a Python WSGI HTTP server used for serving web applications in production environments.:|:Gunicorn is a Python WSGI HTTP server that serves web applications, often utilized in conjunction with Uvicorn for enhanced performance.</data>
      <data key="d3">excerpt_id_bfbdc7de5c6b20362e7297fd06fd853a:|:excerpt_id_7b0dedd61181e074b18409d0e42f7c52</data>
    </node>
    <node id="Uvicorn Workers">
      <data key="d1">configuration</data>
      <data key="d2">Uvicorn Workers refer to asynchronous server workers that can be used with Gunicorn to handle multiple requests simultaneously in production.</data>
      <data key="d3">excerpt_id_7b0dedd61181e074b18409d0e42f7c52</data>
    </node>
    <node id="gunicorn">
      <data key="d1">api</data>
      <data key="d2">Gunicorn is a Python WSGI HTTP server that is used to serve Python web applications, capable of handling multiple workers for improved performance.</data>
      <data key="d3">excerpt_id_6d201e08f402100e25cea0da712f2d5a</data>
    </node>
    <node id="4">
      <data key="d1">variable</data>
      <data key="d2">The variable '4' specifies the number of worker processes that Gunicorn will manage, impacting the application's concurrent handling capacity.</data>
      <data key="d3">excerpt_id_6d201e08f402100e25cea0da712f2d5a</data>
    </node>
    <node id="uvicorn.workers.UvicornWorker">
      <data key="d1">function</data>
      <data key="d2">UvicornWorker is a class that allows the Gunicorn server to run on the Uvicorn ASGI server, which is suited for asynchronous web applications.</data>
      <data key="d3">excerpt_id_6d201e08f402100e25cea0da712f2d5a</data>
    </node>
    <node id="0.0.0.0:8000">
      <data key="d1">interface</data>
      <data key="d2">0.0.0.0:8000 is the bind address and port where the Gunicorn server listens for incoming requests from clients.</data>
      <data key="d3">excerpt_id_6d201e08f402100e25cea0da712f2d5a</data>
    </node>
    <node id="Docker">
      <data key="d1">api</data>
      <data key="d2">Docker is a platform used for containerizing applications, enabling consistent deployment across different environments.</data>
      <data key="d3">excerpt_id_3d3def25aa2341dd78246b6adb9a1c8b</data>
    </node>
    <node id="API">
      <data key="d1">api</data>
      <data key="d2">API refers to the application programming interface, which allows different software applications to communicate with each other.:|:API is an application programming interface that allows different software applications to communicate with each other.</data>
      <data key="d3">excerpt_id_ff086be0a4666895d6aa51a1f2a286e5:|:excerpt_id_dfcb42b36ae0e3ad5d118ac29dbb8550</data>
    </node>
    <node id="smol-rag">
      <data key="d1">api</data>
      <data key="d2">smol-rag is an API that can be built using Docker, allowing users to create, run, and manage its functionalities.</data>
      <data key="d3">excerpt_id_878373b0861c70677ab71887afefe6ca</data>
    </node>
    <node id="docker build">
      <data key="d1">function</data>
      <data key="d2">docker build is a command used to create a Docker image from a specified directory, defined in this case by 'smol-rag' and the '.' indicating the current directory.</data>
      <data key="d3">excerpt_id_878373b0861c70677ab71887afefe6ca</data>
    </node>
    <node id="docker run">
      <data key="d1">function</data>
      <data key="d2">docker run is a command used to run a Docker container from a created image, allowing the user to specify configurations such as environment variables and port mappings.</data>
      <data key="d3">excerpt_id_878373b0861c70677ab71887afefe6ca</data>
    </node>
    <node id=".env">
      <data key="d1">configuration:|:file</data>
      <data key="d2">The '.env' file typically contains environment variables and configurations used by applications, often holding secrets and settings that configure the environment.:|:.env is an environment configuration file specified for the Docker container, containing environment variables that are loaded when the container is run.</data>
      <data key="d3">excerpt_id_b77543b9fea5f27d22ce61d4fa8535e7:|:excerpt_id_878373b0861c70677ab71887afefe6ca</data>
    </node>
    <node id="8000:8000">
      <data key="d1">variable</data>
      <data key="d2">8000:8000 represents the port mapping in the docker run command, allowing external access to the application running inside the container on port 8000.</data>
      <data key="d3">excerpt_id_878373b0861c70677ab71887afefe6ca</data>
    </node>
    <node id="bash">
      <data key="d1">interface</data>
      <data key="d2">bash is a command-line interface used here to execute Docker commands for building and running the smol-rag API.</data>
      <data key="d3">excerpt_id_878373b0861c70677ab71887afefe6ca</data>
    </node>
    <node id="Performance Optimization">
      <data key="d1">feature:|:configuration:|:function</data>
      <data key="d2">Performance Optimization encompasses strategies for enhancing the efficiency and responsiveness of applications, such as using specialized server configurations and caching.:|:Performance Optimization involves refining the graph structure to improve the efficiency of querying and traversal within the knowledge graph.:|:Performance Optimization encompasses strategies aimed at improving the efficiency and speed of the SmolRAG API usage.</data>
      <data key="d3">excerpt_id_c911a970aeaf57b302869e9d148ac6c8:|:excerpt_id_da7254efa9566860b06caf2d81ce9bf9:|:excerpt_id_bfbdc7de5c6b20362e7297fd06fd853a</data>
    </node>
    <node id="Horizontal Scaling">
      <data key="d1">feature:|:configuration</data>
      <data key="d2">Horizontal Scaling refers to the method of adding more machines or instances to a system in order to handle increased traffic and load.:|:Horizontal Scaling refers to distributing the processing and storage requirements across multiple machines to handle larger workloads efficiently.</data>
      <data key="d3">excerpt_id_bfbdc7de5c6b20362e7297fd06fd853a:|:excerpt_id_9c072e3e78902159765fef2d7578e992</data>
    </node>
    <node id="Memory Usage">
      <data key="d1">feature:|:variable</data>
      <data key="d2">Memory Usage refers to the amount of memory consumed by applications, particularly by the vector store and knowledge graph components.:|:Memory Usage quantifies the amount of RAM consumed by the SmolRAG system, particularly by the vector store and knowledge graph.:|:Memory Usage is a feature that informs about the memory state before and after executing garbage collection.:|:Memory Usage refers to the amount of memory that an application or system is currently utilizing during its operation, a crucial factor for performance optimization.:|:Memory Usage is a feature that indicates the percentage of used memory in the system.</data>
      <data key="d3">excerpt_id_9b3e7699a2ad7cd3ed369e4a0e702290:|:excerpt_id_2249047f50897aaf33539b74ade53916:|:excerpt_id_bfbdc7de5c6b20362e7297fd06fd853a:|:excerpt_id_162e6c9e88d526c7cda8c551479b1fb1:|:excerpt_id_73511a8e00d53872966dbd2a0639babc</data>
    </node>
    <node id="Authentication and Authorization">
      <data key="d1">feature</data>
      <data key="d2">Authentication and Authorization are essential security measures that ensure only authorized users can access specific resources or functions within an application.</data>
      <data key="d3">excerpt_id_bfbdc7de5c6b20362e7297fd06fd853a</data>
    </node>
    <node id="HTTPS">
      <data key="d1">configuration</data>
      <data key="d2">HTTPS is a secure version of HTTP that utilizes encryption to protect the data being transmitted between users and servers, essential for safe communications in production.</data>
      <data key="d3">excerpt_id_bfbdc7de5c6b20362e7297fd06fd853a</data>
    </node>
    <node id="Input Validation and Sanitization">
      <data key="d1">feature</data>
      <data key="d2">Input Validation and Sanitization are processes used to ensure that user inputs are safe and conform to expected formats, preventing potential security threats.</data>
      <data key="d3">excerpt_id_bfbdc7de5c6b20362e7297fd06fd853a</data>
    </node>
    <node id="Logging">
      <data key="d1">feature:|:function</data>
      <data key="d2">Logging is implemented for performance-critical operations to gain insights into their behavior and to assist in troubleshooting within the SmolRAG framework.:|:Logging is a feature that records each step of the ingestion process for debugging and monitoring purposes.:|:Logging is the process of recording information about API usage and errors, essential for maintaining and debugging applications.</data>
      <data key="d3">excerpt_id_1240c160e7b3db62fbd1d9af5733d19e:|:excerpt_id_bfbdc7de5c6b20362e7297fd06fd853a:|:excerpt_id_efce5aab9b4130a5bb56f788c7389339</data>
    </node>
    <node id="Health Check Endpoints">
      <data key="d1">feature</data>
      <data key="d2">Health Check Endpoints are specific API endpoints designed to provide status updates about the application, helping to monitor its health and performance.</data>
      <data key="d3">excerpt_id_bfbdc7de5c6b20362e7297fd06fd853a</data>
    </node>
    <node id="Monitoring Tools">
      <data key="d1">example</data>
      <data key="d2">Monitoring Tools are software applications used to oversee the performance, availability, and functioning of IT systems, ensuring optimal operation.</data>
      <data key="d3">excerpt_id_bfbdc7de5c6b20362e7297fd06fd853a</data>
    </node>
    <node id="Document Management">
      <data key="d1">feature:|:function</data>
      <data key="d2">Document Management refers to the collective methods and processes associated with handling documents within the SmolRAG API, including creating, updating, and deleting.:|:Document Management is a feature of SmolRAG that allows managing documents, including detecting changes and removing documents.</data>
      <data key="d3">excerpt_id_dc5eb8ded0d63524675f654a6fc91d2d:|:excerpt_id_bfbdc7de5c6b20362e7297fd06fd853a</data>
    </node>
    <node id="add_document">
      <data key="d1">function</data>
      <data key="d2">add_document is an asynchronous function that handles POST requests to add a new document to the system based on the provided DocumentRequest.</data>
      <data key="d3">excerpt_id_30964e126597da239266ed63840a67ce</data>
    </node>
    <node id="remove_document">
      <data key="d1">function</data>
      <data key="d2">remove_document is an asynchronous function designed to handle DELETE requests to remove a document based on its document_id.</data>
      <data key="d3">excerpt_id_30964e126597da239266ed63840a67ce</data>
    </node>
    <node id="DocumentRequest">
      <data key="d1">variable</data>
      <data key="d2">DocumentRequest is a data structure that encapsulates the information required to create a new document, used as a parameter in the add_document function.</data>
      <data key="d3">excerpt_id_30964e126597da239266ed63840a67ce</data>
    </node>
    <node id="/documents">
      <data key="d1">api</data>
      <data key="d2">The /documents endpoint is used in the API to perform operations related to document management, including adding and removing documents.</data>
      <data key="d3">excerpt_id_30964e126597da239266ed63840a67ce</data>
    </node>
    <node id="document_id" />
    <node id="System Information">
      <data key="d1">feature</data>
      <data key="d2">System Information is a feature that provides details regarding the system's current state and configuration.</data>
      <data key="d3">excerpt_id_567dce2677fe41f56df76aa77cd2310d</data>
    </node>
    <node id="Endpoints">
      <data key="d1">api</data>
      <data key="d2">Endpoints are the URLs through which different functionalities of the system can be accessed, particularly for retrieving system information.</data>
      <data key="d3">excerpt_id_567dce2677fe41f56df76aa77cd2310d</data>
    </node>
    <node id="app">
      <data key="d1">configuration:|:api:|:function</data>
      <data key="d2">app is an instance of Flask that is configured to handle routing and serve the web application.:|:app is the FastAPI application instance that serves as the entry point for API requests, routing them to the appropriate handlers.:|:The app directory contains the main functionality of SmolRAG, including core classes and various utility modules.:|:The app is an API endpoint that facilitates GET requests to retrieve system information.:|:app represents the main application instance created for handling web requests, typically a FastAPI app instance in this context.</data>
      <data key="d3">excerpt_id_f1fae642defef59936a03b705fb37221:|:excerpt_id_61a0743ace2fcb551b527e0c9f420df9:|:excerpt_id_32599e1b552f26ddce9129b57e04566f:|:excerpt_id_45d6be4a87b8ef84ca7fc5672dffaf14:|:excerpt_id_18b7236af033065c11ace3034fa8761a</data>
    </node>
    <node id="get_info">
      <data key="d1">function</data>
      <data key="d2">get_info is an asynchronous function defined within the app to return system information when called.</data>
      <data key="d3">excerpt_id_61a0743ace2fcb551b527e0c9f420df9</data>
    </node>
    <node id="Asynchronous Processing">
      <data key="d1">feature:|:function</data>
      <data key="d2">Asynchronous Processing refers to a feature that allows long-running queries to be executed without blocking the main application, enabling background tasks to manage these queries efficiently.:|:Asynchronous Processing is a method where queries are handled without blocking, especially useful in non-interactive scenarios to improve throughput.</data>
      <data key="d3">excerpt_id_4eb0bdce814c5bedbf9389c0382a7cab:|:excerpt_id_0cb743ef78a1b56785a004b70800d537</data>
    </node>
    <node id="long-running queries" />
    <node id="BackgroundTasks">
      <data key="d1">feature</data>
      <data key="d2">BackgroundTasks in FastAPI allow for background processing of tasks in asynchronous API endpoints, improving user experience.:|:BackgroundTasks is a feature in FastAPI that allows the execution of background tasks without blocking the main execution flow.</data>
      <data key="d3">excerpt_id_dc931d71f7d6a347aaaa011838c3efaf:|:excerpt_id_5024e90dea7510cdc40f94282d4af1a0</data>
    </node>
    <node id="async_query">
      <data key="d1">function</data>
      <data key="d2">async_query is a function that handles POST requests to initiate an asynchronous query, processing it in the background.</data>
      <data key="d3">excerpt_id_5024e90dea7510cdc40f94282d4af1a0</data>
    </node>
    <node id="process_query">
      <data key="d1">function</data>
      <data key="d2">process_query is a function that performs the actual processing of the query received in the async_query function.</data>
      <data key="d3">excerpt_id_5024e90dea7510cdc40f94282d4af1a0</data>
    </node>
    <node id="get_query_result">
      <data key="d1">function</data>
      <data key="d2">get_query_result is a function that handles GET requests to retrieve the results of the processed query by its query_id.</data>
      <data key="d3">excerpt_id_5024e90dea7510cdc40f94282d4af1a0</data>
    </node>
    <node id="query_id">
      <data key="d1">variable</data>
      <data key="d2">query_id is a variable that uniquely identifies each asynchronous query for retrieving results later.</data>
      <data key="d3">excerpt_id_5024e90dea7510cdc40f94282d4af1a0</data>
    </node>
    <node id="Webhooks">
      <data key="d1">feature</data>
      <data key="d2">Webhooks are features that enable the notification of external systems when queries are completed, facilitating real-time communication and integration.</data>
      <data key="d3">excerpt_id_45d7095e44edf05d55c5e9a51a6eddaa</data>
    </node>
    <node id="External Systems" />
    <node id="webhook_query">
      <data key="d1">function</data>
      <data key="d2">webhook_query is an asynchronous function that processes a query and sends a result to a specified webhook URL.</data>
      <data key="d3">excerpt_id_45d6be4a87b8ef84ca7fc5672dffaf14</data>
    </node>
    <node id="WebhookQueryRequest">
      <data key="d1">api</data>
      <data key="d2">WebhookQueryRequest is a data structure defined for incoming requests to the webhook endpoint, capturing information necessary for processing the query.</data>
      <data key="d3">excerpt_id_45d6be4a87b8ef84ca7fc5672dffaf14</data>
    </node>
    <node id="Interface">
      <data key="d1">interface</data>
      <data key="d2">The Interface of the SmolRAG API is designed to be simple yet powerful, facilitating easy interaction for developers across various applications.</data>
      <data key="d3">excerpt_id_a4699fb3dcb4a727d1eb4a481496bfa2</data>
    </node>
    <node id="Troubleshooting Guide">
      <data key="d1">function</data>
      <data key="d2">The Troubleshooting Guide is a resource aimed at helping users identify and resolve issues encountered while working with SmolRAG.</data>
      <data key="d3">excerpt_id_ab9a95edcb52c69f2a75ee555f1b7457</data>
    </node>
    <node id="Document Ingestion">
      <data key="d1">feature:|:function</data>
      <data key="d2">Document Ingestion is the function that manages the automatic and efficient conversion of raw documents, ensuring they are change-aware and searchable.:|:Document Ingestion refers to the process of efficiently acquiring and preparing documents for use within SmolRAG, which can improve overall performance.:|:Document Ingestion is a feature of SmolRAG that allows the system to process and incorporate documents into its operations.</data>
      <data key="d3">excerpt_id_f2b7fbadfa83b8b0ea536a4b85fef7d6:|:excerpt_id_33ec53332806b9871abe7246fe9d300e:|:excerpt_id_ab9a95edcb52c69f2a75ee555f1b7457</data>
    </node>
    <node id="Querying">
      <data key="d1">feature</data>
      <data key="d2">Querying refers to the process by which users can request information from SmolRAG, based on the documents it has ingested.</data>
      <data key="d3">excerpt_id_ab9a95edcb52c69f2a75ee555f1b7457</data>
    </node>
    <node id="System Operation">
      <data key="d1">feature</data>
      <data key="d2">System Operation encompasses the overall functionality and performance of SmolRAG when it is running properly.</data>
      <data key="d3">excerpt_id_ab9a95edcb52c69f2a75ee555f1b7457</data>
    </node>
    <node id="Python">
      <data key="d1">api:|:variable</data>
      <data key="d2">Python is a programming language that must be at version 3.10 or higher for SmolRAG to function correctly.:|:Python is a programming language that is referenced in the context of its version, which can be checked using a command-line interface.</data>
      <data key="d3">excerpt_id_9888cc29917ed733af66f25a5cc2b247:|:excerpt_id_ab9a95edcb52c69f2a75ee555f1b7457</data>
    </node>
    <node id="--version">
      <data key="d1">function</data>
      <data key="d2">The --version flag is a command-line argument used in Python to display the current version of the Python interpreter.</data>
      <data key="d3">excerpt_id_9888cc29917ed733af66f25a5cc2b247</data>
    </node>
    <node id="Dependencies">
      <data key="d1">variable</data>
      <data key="d2">Dependencies refer to the external libraries or modules that a software project relies on to function correctly.</data>
      <data key="d3">excerpt_id_d2a774d9def4ca1fa9100293ec6b86ad</data>
    </node>
    <node id="Reinstallation">
      <data key="d1">function</data>
      <data key="d2">Reinstallation is the process of removing the current dependencies and installing them anew to ensure the project has the latest or correct versions.</data>
      <data key="d3">excerpt_id_d2a774d9def4ca1fa9100293ec6b86ad</data>
    </node>
    <node id="requirements.txt">
      <data key="d1">file</data>
      <data key="d2">requirements.txt is a file that typically contains a list of dependencies required for a Python project, used for the installation of necessary packages via pip.</data>
      <data key="d3">excerpt_id_03271a6a5d13d849c08443a9db5da3f2</data>
    </node>
    <node id="pip">
      <data key="d1">tool</data>
      <data key="d2">pip is a package management system for Python that allows users to install and manage software packages written in Python.</data>
      <data key="d3">excerpt_id_03271a6a5d13d849c08443a9db5da3f2</data>
    </node>
    <node id="Python Path">
      <data key="d1">configuration</data>
      <data key="d2">Python Path refers to the set of directories that Python searches for modules and packages during import operations.</data>
      <data key="d3">excerpt_id_05ba5cb63e02db3955236eb828720a8d</data>
    </node>
    <node id="Check your Python path" />
    <node id="sys">
      <data key="d1">api</data>
      <data key="d2">sys is a built-in module in Python that provides access to some variables used or maintained by the interpreter and to functions that interact with the interpreter.</data>
      <data key="d3">excerpt_id_38b645571565a0204d9487e838cb2760</data>
    </node>
    <node id="sys.path">
      <data key="d1">variable</data>
      <data key="d2">sys.path is a list in Python that specifies the search path for modules, determining where the interpreter looks for modules to import.</data>
      <data key="d3">excerpt_id_38b645571565a0204d9487e838cb2760</data>
    </node>
    <node id="Directory Structure Errors">
      <data key="d1">feature</data>
      <data key="d2">Directory Structure Errors represent issues within the file system's directory configuration that can lead to operational disruptions.</data>
      <data key="d3">excerpt_id_6758894cf7981ef5f34cb228a5d16340</data>
    </node>
    <node id="Required Directories">
      <data key="d1">configuration</data>
      <data key="d2">Required Directories are essential directories that must exist for the system to operate correctly, and their absence indicates a configuration error.</data>
      <data key="d3">excerpt_id_6758894cf7981ef5f34cb228a5d16340</data>
    </node>
    <node id="Incorrect Permissions">
      <data key="d1">configuration</data>
      <data key="d2">Incorrect Permissions refer to security settings that prevent access to directories, potentially leading to operational issues.</data>
      <data key="d3">excerpt_id_6758894cf7981ef5f34cb228a5d16340</data>
    </node>
    <node id="Solutions">
      <data key="d1">configuration:|:function</data>
      <data key="d2">Solutions refer to the proposed actions to resolve Directory Structure Errors, including the creation of necessary directories.:|:Solutions provide the recommended actions to resolve the issues described, ensuring the vector store operates effectively.:|:Solutions encompass a series of recommended actions to rectify the identified symptoms and their potential causes in relation to knowledge graphs.</data>
      <data key="d3">excerpt_id_77b6fe94a073645e5b6b2eb8d96ea848:|:excerpt_id_6758894cf7981ef5f34cb228a5d16340:|:excerpt_id_c9ce0a52dd8e0d214e0d319600722c10</data>
    </node>
    <node id="Create the Required Directories">
      <data key="d1">function</data>
      <data key="d2">Create the Required Directories is a specific action designed to resolve directory errors by ensuring that all necessary directories are present.</data>
      <data key="d3">excerpt_id_6758894cf7981ef5f34cb228a5d16340</data>
    </node>
    <node id="mkdir">
      <data key="d1">function</data>
      <data key="d2">mkdir is a command used to create directories in a filesystem, allowing for the organization of data into specified paths.</data>
      <data key="d3">excerpt_id_3316a255ca7ada1bc72eb9b8d3ae3a01</data>
    </node>
    <node id="app/data">
      <data key="d1">directory:|:variable</data>
      <data key="d2">app/data is a directory that likely stores data related to the application.:|:app/data is a directory that contains files and subdirectories, used to store application-related data.:|:app/data represents a variable path indicating where application data is stored.</data>
      <data key="d3">excerpt_id_3316a255ca7ada1bc72eb9b8d3ae3a01:|:excerpt_id_aa9cab6794cd0484b917db2b206d2082:|:excerpt_id_da963b955867ad307c665992c7d9c84b</data>
    </node>
    <node id="app/cache">
      <data key="d1">variable</data>
      <data key="d2">app/cache denotes a variable path used for caching data to improve application performance.:|:app/cache is a directory that may contain cached files used to speed up application performance.</data>
      <data key="d3">excerpt_id_3316a255ca7ada1bc72eb9b8d3ae3a01:|:excerpt_id_aa9cab6794cd0484b917db2b206d2082</data>
    </node>
    <node id="app/logs">
      <data key="d1">feature:|:variable</data>
      <data key="d2">app/logs is the path specified for the log directory, indicating where logs will be stored in the application structure.:|:app/logs is a directory designated for storing log files generated by the application.:|:app/logs indicates a variable path for storing application logs, which are essential for monitoring and debugging.</data>
      <data key="d3">excerpt_id_3316a255ca7ada1bc72eb9b8d3ae3a01:|:excerpt_id_1b2e40e76edb8537fc654b87660704c7:|:excerpt_id_aa9cab6794cd0484b917db2b206d2082</data>
    </node>
    <node id="app/input_docs">
      <data key="d1">directory:|:variable</data>
      <data key="d2">app/input_docs is a directory that likely holds input documents used by the application.:|:app/input_docs is a directory listed by the command, indicating where input documents are stored within the app structure.:|:app/input_docs represents a variable path for input documents needed by the application.</data>
      <data key="d3">excerpt_id_3316a255ca7ada1bc72eb9b8d3ae3a01:|:excerpt_id_04b1a7a15c695eaaaa60cc40a20110c1:|:excerpt_id_aa9cab6794cd0484b917db2b206d2082</data>
    </node>
    <node id="Directory Permissions">
      <data key="d1">feature</data>
      <data key="d2">Directory Permissions refers to the settings that determine who can access and modify files and directories within a system.</data>
      <data key="d3">excerpt_id_d751adcf72f75cada5f4b4f6b4a5a1b1</data>
    </node>
    <node id="Check directory permissions" />
    <node id="ls">
      <data key="d1">command:|:function</data>
      <data key="d2">ls is a command used in the terminal to list directory contents, and in this case, it shows detailed information about the contents of app/input_docs.:|:ls is a command in bash that lists the contents of a directory, showing detailed information when the '-la' options are used.:|:ls is a command in bash used to list directory contents, which provides visibility into files and directories.</data>
      <data key="d3">excerpt_id_a66721de2329f6b7e9441b5571c292e1:|:excerpt_id_04b1a7a15c695eaaaa60cc40a20110c1:|:excerpt_id_da963b955867ad307c665992c7d9c84b</data>
    </node>
    <node id="app/">
      <data key="d1">variable</data>
      <data key="d2">app/ is a variable representing a directory within the filesystem that contains various files and subdirectories.</data>
      <data key="d3">excerpt_id_a66721de2329f6b7e9441b5571c292e1</data>
    </node>
    <node id="Directories">
      <data key="d1">variable</data>
      <data key="d2">Directories refer to the file system locations that must be writable by the current user for certain operations to succeed.</data>
      <data key="d3">excerpt_id_0f1aa622f57bbeb1470b779cb8c4b100</data>
    </node>
    <node id="current user" />
    <node id="chmod">
      <data key="d1">function</data>
      <data key="d2">chmod is a shell command used to change the file mode (permissions) of a file or directory, enabling or disabling permissions for users.:|:chmod is a command in Unix and Unix-like operating systems that changes the file system modes of files and directories.</data>
      <data key="d3">excerpt_id_aa9cab6794cd0484b917db2b206d2082:|:excerpt_id_a0530857217125f4a562cdad49a728ee</data>
    </node>
    <node id="OpenAI API Key">
      <data key="d1">variable</data>
      <data key="d2">The OpenAI API Key is a critical variable required to access OpenAI's services, and its absence or incorrect value can lead to environment variable errors.</data>
      <data key="d3">excerpt_id_6538981cbc1da9f8defba0891fd6799e</data>
    </node>
    <node id="Environment Variables">
      <data key="d1">configuration:|:variable</data>
      <data key="d2">Environment Variables are utilized in SmolRAG to set core configuration settings, which can be defined in the system environment or in a `.env` file.:|:Environment Variables are used to configure applications and should be correctly loaded for proper functioning, as outlined in troubleshooting scenarios.</data>
      <data key="d3">excerpt_id_a04d28950802508f2641ac651fc3089f:|:excerpt_id_6538981cbc1da9f8defba0891fd6799e</data>
    </node>
    <node id=".env file">
      <data key="d1">configuration:|:file</data>
      <data key="d2">The .env file is a configuration file where environment variables can be defined for the SmolRAG project, including sensitive information like the OpenAI API key.:|:The .env file is a configuration file that stores environment variables necessary for an application, and its proper existence and contents are vital for avoiding errors.</data>
      <data key="d3">excerpt_id_a04d28950802508f2641ac651fc3089f:|:excerpt_id_6538981cbc1da9f8defba0891fd6799e</data>
    </node>
    <node id="No .env file" />
    <node id="cat">
      <data key="d1">function</data>
      <data key="d2">cat is a command-line utility used to display the content of files, in this case, used to view the main log file.:|:The 'cat' function is a command in Unix-like operating systems that reads data from files and outputs it to the standard output, commonly used to display the content of a file.</data>
      <data key="d3">excerpt_id_b77543b9fea5f27d22ce61d4fa8535e7:|:excerpt_id_2367c566864db88a866eced295cee581</data>
    </node>
    <node id="OPENAI_API_KEY">
      <data key="d1">variable</data>
      <data key="d2">OPENAI_API_KEY is a variable that stores a key for accessing the OpenAI API, which is essential for authentication and interaction with OpenAI's services.:|:OPENAI_API_KEY is an environment variable used to store the OpenAI API key, which allows for authentication and access to OpenAI's API services.:|:OPENAI_API_KEY is an environment variable that stores the API key required for authentication when interacting with the OpenAI API.:|:OPENAI_API_KEY represents a specific variable used to store the API key for accessing OpenAI services, which is essential for authentication.:|:OPENAI_API_KEY is a required environment variable that stores the OpenAI API key necessary for accessing OpenAI services.:|:OPENAI_API_KEY is an environment variable used in the configuration of both smolrag-api-1 and smolrag-api-2, indicating that it is critical for their operation.:|:OPENAI_API_KEY is an environment variable referencing an OpenAI API key stored in Kubernetes secrets for secure access.</data>
      <data key="d3">excerpt_id_e6ed2f63115ab3925c9e8de1512e5ac8:|:excerpt_id_008fc08e29e3bf19179abebec59be58b:|:excerpt_id_a04d28950802508f2641ac651fc3089f:|:excerpt_id_349e9f1cbc2638830c72cc4737f1ee78:|:excerpt_id_4202bb5aefcb4272e5fc2efebff6fc46:|:excerpt_id_e7b71f4ba0f007f7f8bb0625c3380566:|:excerpt_id_9f38386a54b86fba1c3f321720fea020</data>
    </node>
    <node id="api" />
    <node id="Environment Variable">
      <data key="d1">variable</data>
      <data key="d2">An Environment Variable is a dynamic value that can affect the processes running on a computer, often used for configuring system properties or preferences.:|:An Environment Variable is a dynamic value that can affect the way running processes behave on a computer, often used to configure system settings and control the behavior of applications.</data>
      <data key="d3">excerpt_id_0e92237057b8eb7d2f235070a1c761b4:|:excerpt_id_af055bf8f3e96bea176933dcc3d83179</data>
    </node>
    <node id="Setting Directly" />
    <node id="sk-your-api-key">
      <data key="d1">example</data>
      <data key="d2">sk-your-api-key is a placeholder example representing a specific OpenAI API key that users need to replace with their own.</data>
      <data key="d3">excerpt_id_e6ed2f63115ab3925c9e8de1512e5ac8</data>
    </node>
    <node id="Verify">
      <data key="d1">function</data>
      <data key="d2">Verify is a function or process that checks whether a specific condition, in this case the loading of an environment variable, has been met.</data>
      <data key="d3">excerpt_id_0e92237057b8eb7d2f235070a1c761b4</data>
    </node>
    <node id="os">
      <data key="d1">api:|:interface:|:module</data>
      <data key="d2">os is a Python module that provides a portable way of using operating system dependent functionality, such as reading or writing to the file system.:|:os is a standard Python module that provides functions for interacting with the operating system, used here to handle directories and file paths.:|:os is a library in Python that provides a way of using operating system-dependent functionality such as reading or writing to the file system and managing environment variables.:|:os is a Python standard library module that provides a way of using operating system-dependent functionality like reading or writing to the file system.:|:os is a Python module that provides a way of using operating system dependent functionality, including file and directory manipulation.:|:os is a Python module providing functionalities for interacting with the operating system, including file operations.:|:The os module provides a way of using operating system-dependent functionality like reading or writing to the file system.</data>
      <data key="d3">excerpt_id_275a22b53aa6a7d5660862773c4c8e7e:|:excerpt_id_9b0ddf2d56a8171a094bf3c9776b6538:|:excerpt_id_9bebde77788b480bb0dca061281305da:|:excerpt_id_31ed7da5fc9ca5d1a0bfafd709a014df:|:excerpt_id_d84d634f6486e1594aa2243ec3a2d0e4:|:excerpt_id_53cdd140e8895a35a045a5efd1c35efd:|:excerpt_id_e7b71f4ba0f007f7f8bb0625c3380566</data>
    </node>
    <node id="Documents Not Being Ingested">
      <data key="d1">feature</data>
      <data key="d2">This feature addresses issues related to the ingestion of documents, highlighting the symptoms and potential causes for failures in processing.</data>
      <data key="d3">excerpt_id_1b9b34f38e3a6e537a09855823465ad1</data>
    </node>
    <node id="Potential Causes">
      <data key="d1">configuration:|:variable</data>
      <data key="d2">Potential Causes refers to the various reasons identified that may prevent documents from being ingested properly, including directory issues, file format compatibility, and permissions.:|:Potential Causes serve as a list of reasons why the identified symptoms may occur, highlighting various factors like prompt engineering problems.:|:Potential Causes outlines the various reasons that may lead to vector store errors, allowing for targeted troubleshooting.</data>
      <data key="d3">excerpt_id_1b9b34f38e3a6e537a09855823465ad1:|:excerpt_id_77b6fe94a073645e5b6b2eb8d96ea848:|:excerpt_id_c9ce0a52dd8e0d214e0d319600722c10</data>
    </node>
    <node id="Verify Documents Directory">
      <data key="d1">function</data>
      <data key="d2">Verify Documents Directory is a function that checks whether documents are placed in the correct directory, a step crucial for successful ingestion.</data>
      <data key="d3">excerpt_id_1b9b34f38e3a6e537a09855823465ad1</data>
    </node>
    <node id="Documents">
      <data key="d1">variable</data>
      <data key="d2">Documents are files that can be in various supported formats, such as text documents that hold information.</data>
      <data key="d3">excerpt_id_71bde0cbd0d94f0ec00163fb1787d319</data>
    </node>
    <node id="Supported Formats">
      <data key="d1">configuration</data>
      <data key="d2">Supported Formats refer to the specific file types that the system can process, including .txt and .md files.</data>
      <data key="d3">excerpt_id_71bde0cbd0d94f0ec00163fb1787d319</data>
    </node>
    <node id="File Permissions">
      <data key="d1">configuration:|:variable</data>
      <data key="d2">File Permissions determine the accessibility levels and security for documents, indicating who can read or modify them.:|:File Permissions involve the settings that determine the level of access that users have to files within a system or application.</data>
      <data key="d3">excerpt_id_29fadc56a1b3e0876038076d49363785:|:excerpt_id_71bde0cbd0d94f0ec00163fb1787d319</data>
    </node>
    <node id="u+r">
      <data key="d1">variable</data>
      <data key="d2">u+r refers to the permission setting in the chmod command that grants read access to the user for the specified files or directories.</data>
      <data key="d3">excerpt_id_a0530857217125f4a562cdad49a728ee</data>
    </node>
    <node id="app/input_docs/">
      <data key="d1">configuration</data>
      <data key="d2">app/input_docs/ is a specified directory path that is being modified in its permissions through the chmod command.</data>
      <data key="d3">excerpt_id_a0530857217125f4a562cdad49a728ee</data>
    </node>
    <node id="Slow Document Ingestion">
      <data key="d1">feature</data>
      <data key="d2">Slow Document Ingestion refers to the inefficiency in processing documents that affects the overall performance of document management systems.</data>
      <data key="d3">excerpt_id_0855936cd92f59f3d2fc63b7823a045c</data>
    </node>
    <node id="Large Documents">
      <data key="d1">variable</data>
      <data key="d2">Large Documents are files that may be contributing to slow ingestion rates due to their size, which can overload processing capabilities.</data>
      <data key="d3">excerpt_id_0855936cd92f59f3d2fc63b7823a045c</data>
    </node>
    <node id="Many Documents Being Processed at Once">
      <data key="d1">variable</data>
      <data key="d2">Many Documents Being Processed at Once refers to a scenario where the simultaneous handling of numerous files may lead to resource strain and slower processing speeds.</data>
      <data key="d3">excerpt_id_0855936cd92f59f3d2fc63b7823a045c</data>
    </node>
    <node id="API Rate Limits">
      <data key="d1">configuration</data>
      <data key="d2">API Rate Limits are restrictions set by APIs that control the number of requests that can be made in a certain timeframe, potentially affecting document ingestion performance.</data>
      <data key="d3">excerpt_id_0855936cd92f59f3d2fc63b7823a045c</data>
    </node>
    <node id="Insufficient Resources">
      <data key="d1">configuration</data>
      <data key="d2">Insufficient Resources refers to a lack of necessary computing power or memory that can impede the document ingestion process.</data>
      <data key="d3">excerpt_id_0855936cd92f59f3d2fc63b7823a045c</data>
    </node>
    <node id="Process Documents in Smaller Batches">
      <data key="d1">solution</data>
      <data key="d2">Process Documents in Smaller Batches is a proposed solution to improve ingestion speed by dividing large tasks into more manageable sizes.</data>
      <data key="d3">excerpt_id_0855936cd92f59f3d2fc63b7823a045c</data>
    </node>
    <node id="INPUT_DOCS_DIR">
      <data key="d1">configuration:|:variable</data>
      <data key="d2">INPUT_DOCS_DIR is a predefined path constant that represents the directory where input documents are stored, with a default value of 'app/input_docs'.:|:INPUT_DOCS_DIR is a variable that stores the directory path for input documents, which are to be processed in batches.:|:INPUT_DOCS_DIR is a constant representing the path to the input documents directory, used for storing and accessing input files.:|:INPUT_DOCS_DIR is a predefined constant that represents the directory path where input documents are stored.:|:INPUT_DOCS_DIR is a configuration variable that defines the directory containing input documents for processing.</data>
      <data key="d3">excerpt_id_b0d4e3abf98287ec9c0b65e83c50a4f5:|:excerpt_id_275a22b53aa6a7d5660862773c4c8e7e:|:excerpt_id_3ce40acc1fea7738cf20ce8f1ac25b52:|:excerpt_id_18b7236af033065c11ace3034fa8761a:|:excerpt_id_53cdd140e8895a35a045a5efd1c35efd</data>
    </node>
    <node id="files">
      <data key="d1">variable</data>
      <data key="d2">files is a variable that contains a list of file names from the INPUT_DOCS_DIR that are confirmed to be files.</data>
      <data key="d3">excerpt_id_53cdd140e8895a35a045a5efd1c35efd</data>
    </node>
    <node id="batch_size">
      <data key="d1">variable</data>
      <data key="d2">batch_size is a variable that represents the number of texts to be processed in each API call, allowing for efficient handling of larger datasets.:|:batch_size is a variable that determines the number of documents to process in each batch, set to 5.:|:batch_size is a variable that defines the number of vectors to process at a time during the querying of the vector store.:|:batch_size defines the size of each batch of items to be processed, set to 100 in this case.:|:batch_size is a variable that defines the number of files to be processed in each batch, set to 5 in this instance.</data>
      <data key="d3">excerpt_id_92852caa5644169ca9dd067510644fa8:|:excerpt_id_7427e209fc13ae7cacd434f823963545:|:excerpt_id_3ce40acc1fea7738cf20ce8f1ac25b52:|:excerpt_id_53cdd140e8895a35a045a5efd1c35efd:|:excerpt_id_902f74e2a13563ad2b6088a90d1308d6</data>
    </node>
    <node id="app.definitions">
      <data key="d1">configuration</data>
      <data key="d2">app.definitions is a module from which the INPUT_DOCS_DIR variable is imported, indicating the structure of the application.</data>
      <data key="d3">excerpt_id_53cdd140e8895a35a045a5efd1c35efd</data>
    </node>
    <node id="for loop">
      <data key="d1">function</data>
      <data key="d2">for loop is a programming construct that iterates over a sequence, in this case, processing files in batches.</data>
      <data key="d3">excerpt_id_53cdd140e8895a35a045a5efd1c35efd</data>
    </node>
    <node id="rate_limited_api_call">
      <data key="d1">function</data>
      <data key="d2">rate_limited_api_call is a function designed to invoke another function while imposing a delay to avoid exceeding API rate limits.</data>
      <data key="d3">excerpt_id_16f71311b97f8fce93210488e3e69110</data>
    </node>
    <node id="time">
      <data key="d1">module</data>
      <data key="d2">time is a standard Python module that provides various time-related functions used to manage request timing in the class implementation.:|:The time module provides various time-related functions, including the ability to get the current time and manipulate time values.:|:time is a standard Python module that provides various time-related functions, including time.sleep for pausing execution.</data>
      <data key="d3">excerpt_id_16f71311b97f8fce93210488e3e69110:|:excerpt_id_a95ed36ca9d76b512d84de6b0725fbf9:|:excerpt_id_d84d634f6486e1594aa2243ec3a2d0e4</data>
    </node>
    <node id="func">
      <data key="d1">variable</data>
      <data key="d2">func is a variable representing a function that will be called with specified arguments and keyword arguments.:|:func is a parameter representing the function to be retried in the retry_with_exponential_backoff function.:|:func is a variable that represents the function to be profiled within the profile_function context.:|:func is a parameter that represents the function to be executed and retried upon failure.</data>
      <data key="d3">excerpt_id_16f71311b97f8fce93210488e3e69110:|:excerpt_id_1def6bdd950a1221491ad5bc7859d768:|:excerpt_id_8fda81c68b75421d305c4c8c5587399b:|:excerpt_id_18eb722b0284987e15a3c2a74fe78578</data>
    </node>
    <node id="args">
      <data key="d1">variable</data>
      <data key="d2">args is a variable that collects additional positional arguments passed to the profiled function.:|:args is a variable that captures additional positional arguments passed to the function being called.:|:args are the positional arguments passed to the constructor of the CustomSmolRag class, enabling flexibility in instantiation.</data>
      <data key="d3">excerpt_id_16f71311b97f8fce93210488e3e69110:|:excerpt_id_8fda81c68b75421d305c4c8c5587399b:|:excerpt_id_19166492bd9b3932cb606850e071caa4</data>
    </node>
    <node id="kwargs">
      <data key="d1">variable</data>
      <data key="d2">kwargs is a variable that collects additional keyword arguments passed to the profiled function.:|:kwargs is a variable that captures additional keyword arguments passed to the function being called.:|:kwargs are the keyword arguments passed to the constructor of the CustomSmolRag class, allowing for additional custom parameters during initialization.</data>
      <data key="d3">excerpt_id_16f71311b97f8fce93210488e3e69110:|:excerpt_id_8fda81c68b75421d305c4c8c5587399b:|:excerpt_id_19166492bd9b3932cb606850e071caa4</data>
    </node>
    <node id="Monitor Resource Usage">
      <data key="d1">function</data>
      <data key="d2">Monitor Resource Usage refers to the function of keeping track of the consumption of resources and making adjustments as necessary to optimize performance.</data>
      <data key="d3">excerpt_id_29cd2640f2f3b3ac46eb7ec796c7cfda</data>
    </node>
    <node id="Adjust Accordingly">
      <data key="d1">function</data>
      <data key="d2">Adjust Accordingly pertains to the function of making necessary changes based on the monitored resource usage to ensure optimal performance.</data>
      <data key="d3">excerpt_id_29cd2640f2f3b3ac46eb7ec796c7cfda</data>
    </node>
    <node id="psutil">
      <data key="d1">api</data>
      <data key="d2">psutil is a Python library used for retrieving information on system utilization (CPU, memory, disks, network) and system uptime.:|:psutil is a Python library used to retrieve information on system utilization (CPU, memory, disks, network, sensors) and system uptime.:|:psutil is a Python library used for retrieving information on system utilization, including memory usage.:|:psutil is a library in Python used to retrieve information about system utilization (CPU, memory, disks, network) and system uptime.</data>
      <data key="d3">excerpt_id_d6593324775191da0523fe9381efdd81:|:excerpt_id_4830c3d5b96dabdfe4b90539f6735766:|:excerpt_id_2249047f50897aaf33539b74ade53916:|:excerpt_id_162e6c9e88d526c7cda8c551479b1fb1</data>
    </node>
    <node id="check_resources">
      <data key="d1">function</data>
      <data key="d2">check_resources is a function that checks the CPU and memory utilization, printing their percentages and warning if memory usage is high.</data>
      <data key="d3">excerpt_id_4830c3d5b96dabdfe4b90539f6735766</data>
    </node>
    <node id="cpu_percent">
      <data key="d1">variable</data>
      <data key="d2">cpu_percent is a variable that holds the percentage of CPU usage, retrieved via the psutil library.:|:cpu_percent is a variable that holds the current CPU usage percentage as retrieved from the psutil library.</data>
      <data key="d3">excerpt_id_4830c3d5b96dabdfe4b90539f6735766:|:excerpt_id_2249047f50897aaf33539b74ade53916</data>
    </node>
    <node id="memory_percent">
      <data key="d1">variable</data>
      <data key="d2">memory_percent is a variable that holds the current memory usage percentage as retrieved from the psutil library.</data>
      <data key="d3">excerpt_id_4830c3d5b96dabdfe4b90539f6735766</data>
    </node>
    <node id="Warning: High memory usage">
      <data key="d1">feature</data>
      <data key="d2">Warning: High memory usage is a feature of the function that alerts the user if memory usage exceeds 90%.</data>
      <data key="d3">excerpt_id_4830c3d5b96dabdfe4b90539f6735766</data>
    </node>
    <node id="Symptom">
      <data key="d1">feature:|:configuration</data>
      <data key="d2">Symptom refers to the performance issue of slow queries, indicating a problem that needs to be addressed in the system.:|:Symptom refers to the errors that occur during the entity extraction process, indicating problems in the system.:|:Symptom is a specific indication of a problem, in this case related to errors or corruption within the vector store.</data>
      <data key="d3">excerpt_id_758911f7a3b7423722f9670b9e41f6b7:|:excerpt_id_c9ce0a52dd8e0d214e0d319600722c10:|:excerpt_id_da73f7a48b1cde40e03e26bb73a1a07f</data>
    </node>
    <node id="Errors during entity extraction">
      <data key="d1">example</data>
      <data key="d2">Errors during entity extraction are specific occurrences that disrupt the process of identifying entities, highlighting the need for troubleshooting.</data>
      <data key="d3">excerpt_id_758911f7a3b7423722f9670b9e41f6b7</data>
    </node>
    <node id="LLM API">
      <data key="d1">api</data>
      <data key="d2">LLM API is an application programming interface that may encounter issues affecting entity extraction, such as errors or timeouts.</data>
      <data key="d3">excerpt_id_758911f7a3b7423722f9670b9e41f6b7</data>
    </node>
    <node id="Malformed content">
      <data key="d1">configuration</data>
      <data key="d2">Malformed content refers to improperly formatted data that can cause errors during entity extraction.</data>
      <data key="d3">excerpt_id_758911f7a3b7423722f9670b9e41f6b7</data>
    </node>
    <node id="Timeout issues">
      <data key="d1">variable</data>
      <data key="d2">Timeout issues are variables that can lead to failures in entity extraction, indicating poor response from the API.</data>
      <data key="d3">excerpt_id_758911f7a3b7423722f9670b9e41f6b7</data>
    </node>
    <node id="Implement robust error handling">
      <data key="d1">function</data>
      <data key="d2">Implement robust error handling is a function that aims to improve the stability of the entity extraction process by addressing potential errors.</data>
      <data key="d3">excerpt_id_758911f7a3b7423722f9670b9e41f6b7</data>
    </node>
    <node id="llm">
      <data key="d1">api:|:variable</data>
      <data key="d2">llm is an API that is used to get a completion based on a provided prompt, playing a crucial role in the program's functionality.:|:llm is a variable that holds an instance of the OpenAiLlm API, enabling its usage in the code.:|:llm represents the LLM interface instance used, with a default value of a new OpenAiLlm instance.:|:llm is a variable that likely represents a large language model instance for natural language processing tasks.:|:llm is a variable initialized with an instance of OpenAiLlm, representing the language model that will be used for generating completions.</data>
      <data key="d3">excerpt_id_3349f76d73e7efb0528eeee4c6101216:|:excerpt_id_cf3cd9ded1fbc94e0796c2e9873e597c:|:excerpt_id_626b4e89f477fe66f0fb4bd4a4928418:|:excerpt_id_7632c4b619e7677d548ca2cb0924040f:|:excerpt_id_6aad6436e24fdc08b2a945d47b297b8b</data>
    </node>
    <node id="prompt">
      <data key="d1">variable</data>
      <data key="d2">prompt is a variable that holds the generated prompt for the language model, based on the user's query.:|:prompt is a variable that stores the generated prompt to be sent to the LLM for processing.:|:prompt is a variable that stores the prompt string generated by the rag instance to obtain high and low-level keywords based on the query.:|:prompt is a variable that contains the input provided to the llm API, which determines the output generated by the model.</data>
      <data key="d3">excerpt_id_cf3cd9ded1fbc94e0796c2e9873e597c:|:excerpt_id_7632c4b619e7677d548ca2cb0924040f:|:excerpt_id_6aad6436e24fdc08b2a945d47b297b8b:|:excerpt_id_39d726c9a9c2f837ce789e9198c54c73</data>
    </node>
    <node id="logger">
      <data key="d1">feature:|:configuration:|:variable:|:api</data>
      <data key="d2">logger is a variable representing the logging instance that can be configured to record messages to the log file.:|:logger is an instance of a logging object that captures log messages and writes them to a specific handler.:|:logger is a feature used within the function to log errors that occur during the processing of queries for monitoring and debugging purposes.:|:Logger is a variable that is used to record performance-related log messages, either provided or defaulted to a new logger instance.:|:logger is an API component that facilitates logging in the application, which can log messages based on the current log level configuration set by the set_logger function.:|:logger is a variable that holds the instance of the configured logger which can be used to log messages.:|:logger is a configuration for logging errors that occur during the entity extraction process, ensuring that issues can be tracked.</data>
      <data key="d3">excerpt_id_47020e878f0731a6b5359fed2e4f08fa:|:excerpt_id_9bcab0017708cc906fc0c391ec015f1e:|:excerpt_id_1b2e40e76edb8537fc654b87660704c7:|:excerpt_id_cf3cd9ded1fbc94e0796c2e9873e597c:|:excerpt_id_d2c1e8835d374f0d3253b7ad5939d44b:|:excerpt_id_03b1ea2fb1b6593ee34fd158bd82fcb4:|:excerpt_id_ff2948688845f254196d48787ccadd8f</data>
    </node>
    <node id="Malformed Content Handler">
      <data key="d1">function</data>
      <data key="d2">Malformed Content Handler is a function responsible for checking the format of inputs and handling any inconsistencies or errors, ensuring data integrity.</data>
      <data key="d3">excerpt_id_c54d2fcf2dc9d7413c2b160c37e905d3</data>
    </node>
    <node id="Content Checking">
      <data key="d1">feature</data>
      <data key="d2">Content Checking refers to the feature that identifies and addresses potential issues in the data inputs, enhancing overall system reliability.</data>
      <data key="d3">excerpt_id_c54d2fcf2dc9d7413c2b160c37e905d3</data>
    </node>
    <node id="Error Handling Procedures">
      <data key="d1">configuration</data>
      <data key="d2">Error Handling Procedures outline the methods and strategies implemented to manage errors and maintain system functionality during malfunctions.</data>
      <data key="d3">excerpt_id_c54d2fcf2dc9d7413c2b160c37e905d3</data>
    </node>
    <node id="sanitize_content">
      <data key="d1">function</data>
      <data key="d2">sanitize_content is a Python function designed to remove problematic characters or patterns from a given content.</data>
      <data key="d3">excerpt_id_e2ff8c4e1eb5e26d4ebd38bd08351d99</data>
    </node>
    <node id="content">
      <data key="d1">variable</data>
      <data key="d2">content is a variable that stores the loaded document content after it is read by the read_file function.:|:content is a variable that represents the input data which is to be sanitized in the sanitize_content function.</data>
      <data key="d3">excerpt_id_e2ff8c4e1eb5e26d4ebd38bd08351d99:|:excerpt_id_c1b3890c12c9544c940bd001ae647dce</data>
    </node>
    <node id="Retries">
      <data key="d1">feature:|:variable</data>
      <data key="d2">Retries refer to the number of attempts made to perform a certain action after it fails, often used in the context of network requests.:|:Retries refer to a feature that allows a process to attempt re-execution after a failure, implemented with an exponential backoff strategy to gradually increase the wait time between attempts.</data>
      <data key="d3">excerpt_id_93b4c740010415302d5766760124eb53:|:excerpt_id_ac3061b3455aa69d48ce1e141615842e</data>
    </node>
    <node id="Exponential Backoff">
      <data key="d1">algorithm:|:function</data>
      <data key="d2">Exponential Backoff is an algorithm used in network protocols and other contexts to slow down the retries in a controlled manner by increasing delay exponentially after each unsuccessful attempt.:|:Exponential Backoff is a method used in network communications to manage retries for failed requests by progressively increasing the wait time between each attempt.</data>
      <data key="d3">excerpt_id_93b4c740010415302d5766760124eb53:|:excerpt_id_ac3061b3455aa69d48ce1e141615842e</data>
    </node>
    <node id="retry_with_backoff">
      <data key="d1">function</data>
      <data key="d2">retry_with_backoff is a function designed to execute another function with a specified number of retry attempts in case of an exception, utilizing an exponential backoff strategy for wait times.</data>
      <data key="d3">excerpt_id_18eb722b0284987e15a3c2a74fe78578</data>
    </node>
    <node id="max_retries">
      <data key="d1">variable</data>
      <data key="d2">max_retries is a parameter that sets the maximum number of retry attempts that can be made before raising an exception.:|:max_retries is a variable that defines the maximum number of retry attempts for the function execution.</data>
      <data key="d3">excerpt_id_1def6bdd950a1221491ad5bc7859d768:|:excerpt_id_18eb722b0284987e15a3c2a74fe78578</data>
    </node>
    <node id="Exception">
      <data key="d1">api</data>
      <data key="d2">Exception is a built-in Python class that represents an error state in the program, which can be raised and caught during error handling.</data>
      <data key="d3">excerpt_id_18eb722b0284987e15a3c2a74fe78578</data>
    </node>
    <node id="time.sleep">
      <data key="d1">api:|:function</data>
      <data key="d2">time.sleep is a function from the time module that pauses the execution of the program for a specified number of seconds.:|:time.sleep is a function call used to pause execution for a specified delay period between retries.:|:time.sleep is a function from the time module that pauses the execution for a specified duration, here used optionally to delay between processing batches.</data>
      <data key="d3">excerpt_id_92852caa5644169ca9dd067510644fa8:|:excerpt_id_1def6bdd950a1221491ad5bc7859d768:|:excerpt_id_18eb722b0284987e15a3c2a74fe78578</data>
    </node>
    <node id="Vector Store Issues">
      <data key="d1">feature</data>
      <data key="d2">Vector Store Issues refers to the problems or errors that can arise in a vector storage system, particularly related to data management and access.</data>
      <data key="d3">excerpt_id_c9ce0a52dd8e0d214e0d319600722c10</data>
    </node>
    <node id="Disk Space Issues">
      <data key="d1">variable</data>
      <data key="d2">Disk Space Issues refer to the lack of sufficient disk space, which can be a cause of vector store errors or corruption.</data>
      <data key="d3">excerpt_id_c9ce0a52dd8e0d214e0d319600722c10</data>
    </node>
    <node id="File Permission Problems">
      <data key="d1">variable</data>
      <data key="d2">File Permission Problems pertain to the improper access rights that can prevent effective operation of the vector store.</data>
      <data key="d3">excerpt_id_c9ce0a52dd8e0d214e0d319600722c10</data>
    </node>
    <node id="Concurrent Access Issues">
      <data key="d1">variable</data>
      <data key="d2">Concurrent Access Issues describe complications when multiple processes attempt to access the vector store simultaneously, leading to potential errors.</data>
      <data key="d3">excerpt_id_c9ce0a52dd8e0d214e0d319600722c10</data>
    </node>
    <node id="Power Loss During Write Operations">
      <data key="d1">variable</data>
      <data key="d2">Power Loss During Write Operations signifies the failure of power supply while data is being written, leading to data corruption.</data>
      <data key="d3">excerpt_id_c9ce0a52dd8e0d214e0d319600722c10</data>
    </node>
    <node id="df">
      <data key="d1">function</data>
      <data key="d2">The 'df' command is a function in bash that displays the amount of disk space used and available on file systems.</data>
      <data key="d3">excerpt_id_47218e1145ec0db43b32aaa7eb9abfc9</data>
    </node>
    <node id="-h">
      <data key="d1">feature</data>
      <data key="d2">The '-h' option is a feature of the 'df' function that allows the output to be presented in a human-readable format, usually by converting the size into the nearest higher unit (e.g., KB, MB, GB).</data>
      <data key="d3">excerpt_id_47218e1145ec0db43b32aaa7eb9abfc9</data>
    </node>
    <node id="-la">
      <data key="d1">option</data>
      <data key="d2">-la is an option for the ls command that shows detailed information about each file, including hidden files.</data>
      <data key="d3">excerpt_id_da963b955867ad307c665992c7d9c84b</data>
    </node>
    <node id="file locking">
      <data key="d1">feature</data>
      <data key="d2">File locking is a feature that prevents concurrent access to a file, ensuring data integrity during operations by multiple users or processes.</data>
      <data key="d3">excerpt_id_a7f43545a6845f6befef5c90090e5fd4</data>
    </node>
    <node id="concurrent access" />
    <node id="fcntl">
      <data key="d1">api</data>
      <data key="d2">fcntl is a module in Python used for file control operations, which provides the capability to manage file locks among other functionalities.</data>
      <data key="d3">excerpt_id_3cc193697557fdc7837ce2d2af4daebf</data>
    </node>
    <node id="with_file_lock">
      <data key="d1">function</data>
      <data key="d2">with_file_lock is a function that accepts a file path and a callback function, managing file access through locks to ensure data integrity during concurrent writes.</data>
      <data key="d3">excerpt_id_3cc193697557fdc7837ce2d2af4daebf</data>
    </node>
    <node id="file_path">
      <data key="d1">variable</data>
      <data key="d2">file_path is a variable that stores the path to the memory-mapped file associated with the MemmapVectorStore class.:|:file_path is a variable representing the path of the file that the function 'with_file_lock' intends to operate on.:|:file_path is a variable that holds the path to the file where vectors are stored or loaded from.</data>
      <data key="d3">excerpt_id_3cc193697557fdc7837ce2d2af4daebf:|:excerpt_id_902f74e2a13563ad2b6088a90d1308d6:|:excerpt_id_c3a0fa38348959d09c359e84ea7a68b0</data>
    </node>
    <node id="callback">
      <data key="d1">variable</data>
      <data key="d2">callback is a variable representing a function passed to 'with_file_lock' that defines the operations to perform on the file.</data>
      <data key="d3">excerpt_id_3cc193697557fdc7837ce2d2af4daebf</data>
    </node>
    <node id="Backup and Recovery">
      <data key="d1">function</data>
      <data key="d2">Backup and Recovery refers to the processes and actions taken to create copies of data and restore it in case of loss or damage.</data>
      <data key="d3">excerpt_id_af20c5a0f07d65f9778fca7aae894352</data>
    </node>
    <node id="None" />
    <node id="backup_vector_store">
      <data key="d1">function</data>
      <data key="d2">backup_vector_store is a function that creates a backup of a specified vector store by copying it to a designated backup directory.</data>
      <data key="d3">excerpt_id_31ed7da5fc9ca5d1a0bfafd709a014df</data>
    </node>
    <node id="vector_store_path">
      <data key="d1">variable</data>
      <data key="d2">vector_store_path is a variable representing the path to the vector store that is to be backed up.</data>
      <data key="d3">excerpt_id_31ed7da5fc9ca5d1a0bfafd709a014df</data>
    </node>
    <node id="backup_dir">
      <data key="d1">variable</data>
      <data key="d2">backup_dir is a variable indicating the directory where the backup of the vector store will be stored.</data>
      <data key="d3">excerpt_id_31ed7da5fc9ca5d1a0bfafd709a014df</data>
    </node>
    <node id="shutil">
      <data key="d1">api:|:interface</data>
      <data key="d2">shutil is a Python module that provides a higher-level interface for file operations, such as copying files.:|:shutil is a Python module that offers functions for high-level file operations, such as file copying and removal.</data>
      <data key="d3">excerpt_id_31ed7da5fc9ca5d1a0bfafd709a014df:|:excerpt_id_275a22b53aa6a7d5660862773c4c8e7e</data>
    </node>
    <node id="Embeddings">
      <data key="d1">feature</data>
      <data key="d2">Embeddings are representations of data points in a high-dimensional space, used for various machine learning tasks but can be missing or incorrect.</data>
      <data key="d3">excerpt_id_2f5858762a069fdb43f74be5bc9207ba</data>
    </node>
    <node id="Embedding Generation Failures">
      <data key="d1">example</data>
      <data key="d2">Embedding Generation Failures refer to issues that occur during the process of creating embeddings, leading to missing entries.</data>
      <data key="d3">excerpt_id_2f5858762a069fdb43f74be5bc9207ba</data>
    </node>
    <node id="Embedding Model Issues">
      <data key="d1">example</data>
      <data key="d2">Embedding Model Issues pertain to problems related to the model used for generating embeddings, impacting their accuracy or existence.</data>
      <data key="d3">excerpt_id_2f5858762a069fdb43f74be5bc9207ba</data>
    </node>
    <node id="Caching Problems">
      <data key="d1">example</data>
      <data key="d2">Caching Problems refer to difficulties that arise from stored data that may be outdated or incorrect, affecting the retrieval of embeddings.</data>
      <data key="d3">excerpt_id_2f5858762a069fdb43f74be5bc9207ba</data>
    </node>
    <node id="check_embeddings">
      <data key="d1">function</data>
      <data key="d2">check_embeddings is a function that verifies the existence of excerpts for a given document ID in the RAG (Retrieval-Augmented Generation) system, returning a boolean indicating success or failure.</data>
      <data key="d3">excerpt_id_0c3b9b9d2eed503f31ef54165eeb03b2</data>
    </node>
    <node id="rag">
      <data key="d1">configuration:|:variable:|:api:|:function</data>
      <data key="d2">rag is a variable representing a graph structure that is passed as an argument to the inspect_graph function.:|:rag is a variable representing a data structure that holds information about documents, used within the prune_old_documents function to manage document operations.:|:rag is a variable representing a Remote Access Gateway or similar service, used to perform queries in the memory_safe_query function.:|:rag is a variable that is initialized as an instance of the SmolRag class, allowing interaction with the API's functionalities.:|:rag is an instance of the SmolRag class, initialized to handle document operations.:|:rag is an instance of the SmolRag class, serving as the main object for executing methods related to document management.:|:rag is a variable representing an object that has methods for executing vector search and knowledge graph queries.:|:rag is a variable representing an instance of a RAG system, which is used to manage and retrieve document excerpts based on their IDs.:|:rag is an instance of the SmolRag class, used to access and manipulate the functionalities of the SmolRag API.:|:rag is a variable that is assigned an instance of the SmolRag class, utilizing a specific excerpt function tailored to a custom chunking strategy.:|:rag is a variable representing a data structure or system that supports querying, passed to the memory_efficient_query function.:|:rag is an instance of the SmolRag class, used to access its methods for managing documents and processing queries.:|:rag is a function or instance of a class defined as SmolRag, which utilizes the OpenAiLlm for various operations.:|:rag is a variable instance of the SmolRag class, initialized for use in document management.:|:rag is an instance of SmolRag initialized with the custom chunking strategy for document management.:|:rag is a variable representing an object that contains an 'embeddings_db' from which embeddings are queried.:|:rag is a variable that holds a reference to a resource or model used in performing the vector search query.:|:rag is a variable that holds the instance of the SmolRag class, used to interact with the functionalities provided by SmolRag.:|:rag is a variable representing an object that contains methods and properties required to perform the query and embedding operations.:|:rag is an API that facilitates querying different knowledge graph types, returning various results based on the query executed.:|:rag is a variable representing an instance that contains various methods and utilities for handling prompts, completions, and database queries related to entity and relationship searches.</data>
      <data key="d3">excerpt_id_d6593324775191da0523fe9381efdd81:|:excerpt_id_8e62d1d1488a79e4b7909d04ec095dd6:|:excerpt_id_f23f1c9ec24d0c56c84d4dea02a31e9c:|:excerpt_id_a8ba44e624cea2552a723858adb3841b:|:excerpt_id_37be0a25cbf8d078251a96284455700d:|:excerpt_id_183160e7c61e5a6948ec0efb28fbec13:|:excerpt_id_b68d9f283d4ab863a5fff4c63759e843:|:excerpt_id_39d726c9a9c2f837ce789e9198c54c73:|:excerpt_id_ffe66db99045699917cf675f9252c0dd:|:excerpt_id_b448f2ca1ed64ac27b528bb6bed67d93:|:excerpt_id_e7f63efacb3d60d28f1de8f3c979dba1:|:excerpt_id_65a129aef3eaf89c18fa1a71ffe3a597:|:excerpt_id_dc21ac5f2d4427c7d6691673b8a43559:|:excerpt_id_aac33e6269e8908ac443bfb0712e8462:|:excerpt_id_275a22b53aa6a7d5660862773c4c8e7e:|:excerpt_id_2aec78b1c9251a3e46cf4a0fc90b5ce4:|:excerpt_id_63f1d846feb405f4334159c9dbab8e54:|:excerpt_id_bc521abc84233a86888a005c7e9c0668:|:excerpt_id_8410a7e36eb3c87c25483898c18044a2:|:excerpt_id_0c3b9b9d2eed503f31ef54165eeb03b2:|:excerpt_id_391d9b7fd00abda862a1d6576fee1918</data>
    </node>
    <node id="doc_id">
      <data key="d1">variable</data>
      <data key="d2">doc_id is a variable representing the unique identifier of a document whose excerpts are being checked in the check_embeddings function.</data>
      <data key="d3">excerpt_id_0c3b9b9d2eed503f31ef54165eeb03b2</data>
    </node>
    <node id="excerpt_ids">
      <data key="d1">variable</data>
      <data key="d2">excerpt_ids is a variable that stores a list of excerpt IDs retrieved from the RAG system corresponding to the given doc_id.:|:excerpt_ids is a variable that contains the IDs of excerpts associated with a specific document, retrieved for timestamp validation.</data>
      <data key="d3">excerpt_id_8410a7e36eb3c87c25483898c18044a2:|:excerpt_id_0c3b9b9d2eed503f31ef54165eeb03b2</data>
    </node>
    <node id="excerpt_id">
      <data key="d1">variable</data>
      <data key="d2">excerpt_id is a variable used to hold the identifier for each retrieved excerpt during the results' enumeration.:|:excerpt_id is a variable representing an individual ID of the excerpt that is checked for its presence in the embeddings database.</data>
      <data key="d3">excerpt_id_a8ba44e624cea2552a723858adb3841b:|:excerpt_id_0c3b9b9d2eed503f31ef54165eeb03b2</data>
    </node>
    <node id="results">
      <data key="d1">variable</data>
      <data key="d2">results is a variable that stores the top query results obtained from the embeddings database after executing the query.:|:results is a variable that stores the output of the benchmark_queries function, which contains statistics about the performance of the queries executed.:|:results is a list that stores the output of the processed queries, which includes each query alongside its type and result.:|:results is a variable that stores the output of a query to the embeddings database, containing sample embeddings.:|:results is a list that stores the results obtained from processing all batches of items.:|:Results is a variable that contains the output from the embeddings database query, representing the top matching results based on the query.:|:results is a variable that holds the outcome of a query to the embeddings database, indicating whether embeddings for the excerpt exist or not.</data>
      <data key="d3">excerpt_id_f23f1c9ec24d0c56c84d4dea02a31e9c:|:excerpt_id_ebe249d0dd90f1c72f8bdf533997e6aa:|:excerpt_id_63f1d846feb405f4334159c9dbab8e54:|:excerpt_id_871ea4244ed66d033bd333acf9bf3bc4:|:excerpt_id_92852caa5644169ca9dd067510644fa8:|:excerpt_id_a8ba44e624cea2552a723858adb3841b:|:excerpt_id_0c3b9b9d2eed503f31ef54165eeb03b2</data>
    </node>
    <node id="Embedding Cache">
      <data key="d1">feature:|:configuration</data>
      <data key="d2">The Embedding Cache refers to a storage mechanism that can be cleared and regenerated to ensure updated embeddings are used in processing tasks.:|:Embedding Cache is a configuration that stores previously computed embeddings to avoid redundant API calls, enhancing performance.</data>
      <data key="d3">excerpt_id_c243822dc40a7530f6d52689d09a9771:|:excerpt_id_0758031048f3438910733878e3670905</data>
    </node>
    <node id="Clear embedding cache" />
    <node id="CACHE_DIR">
      <data key="d1">configuration:|:variable</data>
      <data key="d2">CACHE_DIR is a constant representing the path to the cache directory, used for temporarily storing information to speed up processing.:|:CACHE_DIR is a variable that refers to the path where cache files are stored, specifically used in the context of clearing caches.:|:CACHE_DIR is a configuration variable that specifies the directory used for caching data.:|:CACHE_DIR is a predefined path constant representing the directory for storing cached data, with a default value of 'app/cache'.</data>
      <data key="d3">excerpt_id_fcb87a80b68c38981b549c5658a74b5b:|:excerpt_id_9b0ddf2d56a8171a094bf3c9776b6538:|:excerpt_id_18b7236af033065c11ace3034fa8761a:|:excerpt_id_b0d4e3abf98287ec9c0b65e83c50a4f5</data>
    </node>
    <node id="clear_embedding_cache">
      <data key="d1">function</data>
      <data key="d2">clear_embedding_cache is a function that checks for the existence of a cache file and removes it if present, logging the action taken.</data>
      <data key="d3">excerpt_id_9b0ddf2d56a8171a094bf3c9776b6538</data>
    </node>
    <node id="embedding_cache.json">
      <data key="d1">file</data>
      <data key="d2">embedding_cache.json is a file that stores embedding data and is located in the path defined by CACHE_DIR.</data>
      <data key="d3">excerpt_id_9b0ddf2d56a8171a094bf3c9776b6538</data>
    </node>
    <node id="Embedding Dimensions">
      <data key="d1">feature</data>
      <data key="d2">Embedding Dimensions refer to the number of features or attributes that are used in the embedding process, which can significantly impact the performance of machine learning models.</data>
      <data key="d3">excerpt_id_8ef4523bb17dba7afcff56ff9c11fd27</data>
    </node>
    <node id="Check embedding dimensions" />
    <node id="verify_embedding_dimensions">
      <data key="d1">function</data>
      <data key="d2">The function verify_embedding_dimensions checks if the dimensions of an embedding match an expected dimension, retrieving a sample embedding from a database.</data>
      <data key="d3">excerpt_id_63f1d846feb405f4334159c9dbab8e54</data>
    </node>
    <node id="expected_dim">
      <data key="d1">variable</data>
      <data key="d2">expected_dim is a variable set to a default value of 1536, representing the expected dimension size for the embeddings.</data>
      <data key="d3">excerpt_id_63f1d846feb405f4334159c9dbab8e54</data>
    </node>
    <node id="sample_id">
      <data key="d1">variable</data>
      <data key="d2">sample_id is a variable that stores the ID of the first sample embedding retrieved from the results.</data>
      <data key="d3">excerpt_id_63f1d846feb405f4334159c9dbab8e54</data>
    </node>
    <node id="sample_vector">
      <data key="d1">variable</data>
      <data key="d2">sample_vector is a variable that holds the vector data of the sampled embedding, extracted from the results.</data>
      <data key="d3">excerpt_id_63f1d846feb405f4334159c9dbab8e54</data>
    </node>
    <node id="Knowledge Graph Issues">
      <data key="d1">feature</data>
      <data key="d2">Knowledge Graph Issues refer to problems related to the identification and representation of entities and relationships within a knowledge graph.</data>
      <data key="d3">excerpt_id_77b6fe94a073645e5b6b2eb8d96ea848</data>
    </node>
    <node id="Symptom: Missing or incorrect entities and relationships">
      <data key="d1">feature</data>
      <data key="d2">A symptom indicating that there are deficiencies in the knowledge graph, such as missing entities or incorrect relationships between them.</data>
      <data key="d3">excerpt_id_77b6fe94a073645e5b6b2eb8d96ea848</data>
    </node>
    <node id="Entity extraction failures">
      <data key="d1">example</data>
      <data key="d2">Entity extraction failures represent instances where the process of identifying entities from data does not function correctly, resulting in gaps in information.</data>
      <data key="d3">excerpt_id_77b6fe94a073645e5b6b2eb8d96ea848</data>
    </node>
    <node id="Graph storage issues">
      <data key="d1">example</data>
      <data key="d2">Graph storage issues refer to complications in how entities and relationships are stored within the graph database, potentially leading to data loss or inaccessibility.</data>
      <data key="d3">excerpt_id_77b6fe94a073645e5b6b2eb8d96ea848</data>
    </node>
    <node id="Prompt engineering problems">
      <data key="d1">example</data>
      <data key="d2">Prompt engineering problems describe issues arising from inadequately designed prompts that lead to unsatisfactory results in entity extraction.</data>
      <data key="d3">excerpt_id_77b6fe94a073645e5b6b2eb8d96ea848</data>
    </node>
    <node id="Check entity extraction prompt">
      <data key="d1">function</data>
      <data key="d2">Check entity extraction prompt is a recommended action that involves reviewing and potentially refining the prompts used for entity extraction.</data>
      <data key="d3">excerpt_id_77b6fe94a073645e5b6b2eb8d96ea848</data>
    </node>
    <node id="get_extract_entities_prompt">
      <data key="d1">function</data>
      <data key="d2">Gets the prompt for extracting entities and relationships from a given excerpt, critical for understanding interconnections.:|:get_extract_entities_prompt is a function that is imported from the app.prompts module, designed to generate prompts for extracting entities from text.:|:get_extract_entities_prompt is a function that generates a prompt for extracting entities from a given text excerpt.</data>
      <data key="d3">excerpt_id_900d5e18a5cfe07ed9e4aa24282973e4:|:excerpt_id_5b5656bc367f1681de72d78598ec16a2:|:excerpt_id_7632c4b619e7677d548ca2cb0924040f</data>
    </node>
    <node id="sample_excerpt">
      <data key="d1">variable</data>
      <data key="d2">sample_excerpt is a variable containing a string intended to hold a sample text for processing with the get_extract_entities_prompt function.:|:sample_excerpt is a variable that contains a placeholder text, illustrating an example of input for entity extraction.</data>
      <data key="d3">excerpt_id_5b5656bc367f1681de72d78598ec16a2:|:excerpt_id_7632c4b619e7677d548ca2cb0924040f</data>
    </node>
    <node id="app.prompts">
      <data key="d1">api</data>
      <data key="d2">app.prompts is an API module from which the function get_extract_entities_prompt is imported, serving as a library for prompt management.</data>
      <data key="d3">excerpt_id_5b5656bc367f1681de72d78598ec16a2</data>
    </node>
    <node id="entity extraction">
      <data key="d1">function</data>
      <data key="d2">Entity extraction is the process of identifying and classifying key elements from text data, aiding in information retrieval and analysis.</data>
      <data key="d3">excerpt_id_162699c849de99a31c41ca7c0b7fcc62</data>
    </node>
    <node id="manual testing">
      <data key="d1">example</data>
      <data key="d2">Manual testing involves verifying the performance of entity extraction through hands-on evaluation, ensuring its functionality and accuracy.</data>
      <data key="d3">excerpt_id_162699c849de99a31c41ca7c0b7fcc62</data>
    </node>
    <node id="Graph Structure">
      <data key="d1">configuration</data>
      <data key="d2">Graph Structure refers to the way data is organized and represented in graph format, which is critical for visualization and analysis.:|:Graph Structure refers to how a NetworkX graph organizes nodes (entities) and edges (relationships).</data>
      <data key="d3">excerpt_id_50024a3e54a6af26f2a3993aa6d9e612:|:excerpt_id_3035cb75d6b97ba6fb9b87ed5dc8e31e</data>
    </node>
    <node id="inspect_graph">
      <data key="d1">function</data>
      <data key="d2">inspect_graph is a function that inspects a graph structure provided by the rag parameter, printing its nodes and edges along with their attributes.</data>
      <data key="d3">excerpt_id_65a129aef3eaf89c18fa1a71ffe3a597</data>
    </node>
    <node id="nodes">
      <data key="d1">feature</data>
      <data key="d2">nodes refer to the individual elements within the graph that are being printed and inspected in the inspect_graph function.</data>
      <data key="d3">excerpt_id_65a129aef3eaf89c18fa1a71ffe3a597</data>
    </node>
    <node id="edges">
      <data key="d1">feature</data>
      <data key="d2">edges represent the connections between nodes in the graph, which are also printed and inspected in the inspect_graph function.</data>
      <data key="d3">excerpt_id_65a129aef3eaf89c18fa1a71ffe3a597</data>
    </node>
    <node id="Keyword Extraction">
      <data key="d1">feature:|:configuration:|:function</data>
      <data key="d2">Keyword Extraction is the initial step in the process where high-level keywords are extracted from a given query to aid in relationship searches.:|:Keyword Extraction involves the process of identifying and extracting relevant keywords from text data, which may affect the results of the knowledge graph query.:|:Keyword Extraction is the process by which the system identifies low-level keywords from a query to facilitate targeted entity searches.</data>
      <data key="d3">excerpt_id_4869439483a23885f8fdf7f5e9c7039f:|:excerpt_id_65cb890bd3f9ceeaeaba0e1a329ba460:|:excerpt_id_bb83e035cbe37d34b4684d22bfa2ceb5</data>
    </node>
    <node id="Graph Traversal Problems">
      <data key="d1">configuration</data>
      <data key="d2">Graph Traversal Problems refer to issues encountered when navigating through a knowledge graph, potentially leading to unexpected query outcomes.</data>
      <data key="d3">excerpt_id_65cb890bd3f9ceeaeaba0e1a329ba460</data>
    </node>
    <node id="Ranking Issues">
      <data key="d1">configuration</data>
      <data key="d2">Ranking Issues involve the methods of organizing query results, which could impact the effectiveness of the knowledge graph query.</data>
      <data key="d3">excerpt_id_65cb890bd3f9ceeaeaba0e1a329ba460</data>
    </node>
    <node id="get_high_low_level_keywords_prompt">
      <data key="d1">function</data>
      <data key="d2">Gets the prompt for extracting high and low-level keywords, which help in summarizing key concepts.:|:get_high_low_level_keywords_prompt is a function imported from app.prompts, used to generate prompts for extracting high and low level keywords based on a query.</data>
      <data key="d3">excerpt_id_900d5e18a5cfe07ed9e4aa24282973e4:|:excerpt_id_6aad6436e24fdc08b2a945d47b297b8b</data>
    </node>
    <node id="extract_json_from_text">
      <data key="d1">function</data>
      <data key="d2">extract_json_from_text is a function imported from app.utilities, utilized to extract JSON data from text results generated by the language model.:|:Extracts JSON from text, allowing structured data handling and storage.</data>
      <data key="d3">excerpt_id_900d5e18a5cfe07ed9e4aa24282973e4:|:excerpt_id_6aad6436e24fdc08b2a945d47b297b8b</data>
    </node>
    <node id="keyword_data">
      <data key="d1">variable</data>
      <data key="d2">keyword_data is a variable that holds the extracted JSON data containing low-level and high-level keywords from the completion result.:|:keyword_data is a variable that contains the extracted JSON data from the result output, usually representing structured keyword information.</data>
      <data key="d3">excerpt_id_6aad6436e24fdc08b2a945d47b297b8b:|:excerpt_id_39d726c9a9c2f837ce789e9198c54c73</data>
    </node>
    <node id="Trace Graph Traversal">
      <data key="d1">function</data>
      <data key="d2">Trace Graph Traversal is a function that likely involves the process of navigating through a graph structure to track or visualize paths taken or information flow.</data>
      <data key="d3">excerpt_id_110f3f75cb3a86e39e9110c692d94ef0</data>
    </node>
    <node id="trace_kg_query">
      <data key="d1">function</data>
      <data key="d2">trace_kg_query is a Python function that processes a query to extract low-level and high-level keywords, queries an entity database for matches, and queries a relationships database for relationships relevant to the keywords.</data>
      <data key="d3">excerpt_id_39d726c9a9c2f837ce789e9198c54c73</data>
    </node>
    <node id="ll_keywords">
      <data key="d1">variable</data>
      <data key="d2">ll_keywords is a variable that retrieves low-level keywords from the keyword_data and is used to generate an embedding for querying entities.</data>
      <data key="d3">excerpt_id_39d726c9a9c2f837ce789e9198c54c73</data>
    </node>
    <node id="hl_keywords">
      <data key="d1">variable</data>
      <data key="d2">hl_keywords is a variable that retrieves high-level keywords from the keyword_data and is used to generate an embedding for querying relationships.</data>
      <data key="d3">excerpt_id_39d726c9a9c2f837ce789e9198c54c73</data>
    </node>
    <node id="ll_embedding">
      <data key="d1">variable</data>
      <data key="d2">ll_embedding is a variable that stores the embedding of low-level keywords created by the rag's llm method for entity querying.</data>
      <data key="d3">excerpt_id_39d726c9a9c2f837ce789e9198c54c73</data>
    </node>
    <node id="hl_embedding">
      <data key="d1">variable</data>
      <data key="d2">hl_embedding is a variable that stores the embedding of high-level keywords created by the rag's llm method for relationship querying.</data>
      <data key="d3">excerpt_id_39d726c9a9c2f837ce789e9198c54c73</data>
    </node>
    <node id="ll_results">
      <data key="d1">variable</data>
      <data key="d2">ll_results is a variable that holds the results of the entity database query using the ll_embedding.</data>
      <data key="d3">excerpt_id_39d726c9a9c2f837ce789e9198c54c73</data>
    </node>
    <node id="hl_results">
      <data key="d1">variable</data>
      <data key="d2">hl_results is a variable that holds the results of the relationships database query using the hl_embedding.</data>
      <data key="d3">excerpt_id_39d726c9a9c2f837ce789e9198c54c73</data>
    </node>
    <node id="rag.prompts.get_high_low_level_keywords_prompt">
      <data key="d1">api</data>
      <data key="d2">get_high_low_level_keywords_prompt is an API method from the rag instance that generates a prompt to obtain keywords from the provided query.</data>
      <data key="d3">excerpt_id_39d726c9a9c2f837ce789e9198c54c73</data>
    </node>
    <node id="rag.llm.get_completion">
      <data key="d1">api</data>
      <data key="d2">get_completion is an API method from the rag instance's llm that retrieves the completion result based on the prompt provided.</data>
      <data key="d3">excerpt_id_39d726c9a9c2f837ce789e9198c54c73</data>
    </node>
    <node id="rag.utilities.extract_json_from_text">
      <data key="d1">api</data>
      <data key="d2">extract_json_from_text is an API method that processes the completion result to extract JSON data, specifically keywords.</data>
      <data key="d3">excerpt_id_39d726c9a9c2f837ce789e9198c54c73</data>
    </node>
    <node id="rag.llm.get_embedding">
      <data key="d1">api</data>
      <data key="d2">get_embedding is an API method from the rag instance's llm that generates embeddings for keywords for querying.</data>
      <data key="d3">excerpt_id_39d726c9a9c2f837ce789e9198c54c73</data>
    </node>
    <node id="rag.entities_db.query">
      <data key="d1">api</data>
      <data key="d2">query is an API method from the entities_db that performs a search for entities based on the provided embedding and returns the top matches.</data>
      <data key="d3">excerpt_id_39d726c9a9c2f837ce789e9198c54c73</data>
    </node>
    <node id="rag.relationships_db.query">
      <data key="d1">api</data>
      <data key="d2">query is an API method from the relationships_db that performs a search for relationships based on the provided embedding and returns the top matches.</data>
      <data key="d3">excerpt_id_39d726c9a9c2f837ce789e9198c54c73</data>
    </node>
    <node id="Ranking Parameters">
      <data key="d1">configuration</data>
      <data key="d2">Ranking Parameters are settings that can be adjusted within a system to influence the outcomes of ranking algorithms, allowing users to customize how results are prioritized or evaluated.</data>
      <data key="d3">excerpt_id_4c63bae7215d8a91077bbbf95f0a5bc2</data>
    </node>
    <node id="Adjusting" />
    <node id="CustomSmolRag">
      <data key="d1">class</data>
      <data key="d2">CustomSmolRag is a subclass of SmolRag designed to modify context truncation behavior by limiting the number of excerpts for context retrieval.:|:CustomSmolRag is a user-defined class that inherits from SmolRag, allowing for custom functionalities and initialization.:|:CustomSmolRag is a custom subclass derived from SmolRag, designed to override the method for extracting query excerpts.:|:CustomSmolRag is a subclass of SmolRag that overrides the method _get_entities_from_relationships to modify the ranking logic for prioritizing entities based on their degree.</data>
      <data key="d3">excerpt_id_ebe249d0dd90f1c72f8bdf533997e6aa:|:excerpt_id_2d8913758c4289f01071f578d422c0d5:|:excerpt_id_19166492bd9b3932cb606850e071caa4:|:excerpt_id_451a74f3189766e5f74d735e4bd4d846</data>
    </node>
    <node id="SmolRag">
      <data key="d1">class:|:api:|:function</data>
      <data key="d2">SmolRag is a class used to manage the import and removal of documents within an application, providing functionalities to update its internal representation.:|:SmolRag is a class used within the application for managing data retrieval and processing, initialized with specific settings to customize its functionality.:|:SmolRag is an application programming interface that facilitates various queries related to knowledge graphs and document processing.:|:SmolRag is a class used for initializing and handling document operations, such as importing documents and processing queries.:|:SmolRag represents a function or class that possibly handles or combines the various JsonKvStore instances to facilitate efficient data access and manipulation.:|:SmolRag is a function that interacts with a graph database, allowing for operations defined by its parameters.:|:SmolRag is a base class within which CustomSmolRag is defined; it provides the foundational implementation for the ranking logic being customized.:|:SmolRag is an API that serves as a base class for constructing custom retrieval-augmented generation applications.:|:SmolRag is an API that allows for querying and processing documents in a system designed for information retrieval and research.:|:SmolRag is a class designed for importing documents and managing related functionalities in a system.:|:SmolRag is an API that is instantiated with a function for customizing how text is chunked, potentially integrating special handling of text excerpts.:|:SmolRag is an API designed for managing the retrieval of relevant documents through customizable chunking strategies.:|:SmolRag is an advanced retrieval-augmented generation system designed to efficiently handle queries and manage documents in an ecosystem of various data stores and AI components.:|:SmolRag is an API class that is imported from the app.smol_rag module, used for managing document-related functionalities.:|:SmolRag is an API class within the application that manages document importing and querying functionalities.:|:SmolRag is an API that handles the importation of documents and enables various types of knowledge graph queries.:|:SmolRag is an API from the app that facilitates the processing of documents in batches, indicating its core functionality.:|:SmolRag is a function defined in the application which likely handles document retrieval and processing for queries.:|:SmolRag is an API that provides functionality for document chunking and customizing the chunking process.:|:SmolRag is an API designed for efficient retrieval and management of relevant documents based on specific parameters.:|:SmolRag is a function that initializes the use of multiple databases including embeddings, entities, and relationships, providing a cohesive interface for interacting with them.</data>
      <data key="d3">excerpt_id_8e62d1d1488a79e4b7909d04ec095dd6:|:excerpt_id_f23f1c9ec24d0c56c84d4dea02a31e9c:|:excerpt_id_0fe32e6885f5b985ccdafa775b1e90c3:|:excerpt_id_0f09ea93b0147ae060748c2d7d541cd0:|:excerpt_id_fcb87a80b68c38981b549c5658a74b5b:|:excerpt_id_3ce40acc1fea7738cf20ce8f1ac25b52:|:excerpt_id_ffe66db99045699917cf675f9252c0dd:|:excerpt_id_b448f2ca1ed64ac27b528bb6bed67d93:|:excerpt_id_dc21ac5f2d4427c7d6691673b8a43559:|:excerpt_id_3349f76d73e7efb0528eeee4c6101216:|:excerpt_id_aac33e6269e8908ac443bfb0712e8462:|:excerpt_id_275a22b53aa6a7d5660862773c4c8e7e:|:excerpt_id_32599e1b552f26ddce9129b57e04566f:|:excerpt_id_871ea4244ed66d033bd333acf9bf3bc4:|:excerpt_id_391d9b7fd00abda862a1d6576fee1918:|:excerpt_id_1886dbfbe4d28a804d7c671e8aba5c2c:|:excerpt_id_cbbeef7dc6ce1662aa9990abd0d0a080:|:excerpt_id_bc521abc84233a86888a005c7e9c0668:|:excerpt_id_bc4e6aac2a735309400738bd11c772ba:|:excerpt_id_19166492bd9b3932cb606850e071caa4:|:excerpt_id_451a74f3189766e5f74d735e4bd4d846</data>
    </node>
    <node id="_get_entities_from_relationships">
      <data key="d1">function</data>
      <data key="d2">_get_entities_from_relationships is a method that processes a knowledge graph dataset to extract entities based on their relationships and adjust the ranking logic.</data>
      <data key="d3">excerpt_id_451a74f3189766e5f74d735e4bd4d846</data>
    </node>
    <node id="rank">
      <data key="d1">variable</data>
      <data key="d2">rank is a metric used to influence the sorting of the data variable, affecting the prioritization of entities in the knowledge graph.</data>
      <data key="d3">excerpt_id_451a74f3189766e5f74d735e4bd4d846</data>
    </node>
    <node id="weight">
      <data key="d1">variable</data>
      <data key="d2">weight is another metric that contributes to the sorting mechanism in the ranking logic of the entities within the CustomSmolRag subclass.</data>
      <data key="d3">excerpt_id_451a74f3189766e5f74d735e4bd4d846</data>
    </node>
    <node id="Query Issues">
      <data key="d1">feature</data>
      <data key="d2">Query Issues refer to problems encountered when queries yield irrelevant or incorrect information in a system.</data>
      <data key="d3">excerpt_id_da40f838ece0ed80f75b0542ad37f765</data>
    </node>
    <node id="Poor Document Quality">
      <data key="d1">cause</data>
      <data key="d2">Poor Document Quality indicates that the documents being queried may have low accuracy or relevance, affecting the results.</data>
      <data key="d3">excerpt_id_da40f838ece0ed80f75b0542ad37f765</data>
    </node>
    <node id="Inappropriate Query Type">
      <data key="d1">cause</data>
      <data key="d2">Inappropriate Query Type suggests that the type of query run does not match the information being sought, leading to incorrect results.</data>
      <data key="d3">excerpt_id_da40f838ece0ed80f75b0542ad37f765</data>
    </node>
    <node id="Embedding Quality Issues">
      <data key="d1">cause</data>
      <data key="d2">Embedding Quality Issues highlight potential problems with how data is represented within the system, impacting the query outcomes.</data>
      <data key="d3">excerpt_id_da40f838ece0ed80f75b0542ad37f765</data>
    </node>
    <node id="Prompt Engineering Problems">
      <data key="d1">cause</data>
      <data key="d2">Prompt Engineering Problems signify issues in the construction of queries that lead to suboptimal retrieval of data.</data>
      <data key="d3">excerpt_id_da40f838ece0ed80f75b0542ad37f765</data>
    </node>
    <node id="Different Query Types">
      <data key="d1">solution</data>
      <data key="d2">Different Query Types recommend using various formats or styles of queries to optimize the results.</data>
      <data key="d3">excerpt_id_da40f838ece0ed80f75b0542ad37f765</data>
    </node>
    <node id="standard_result">
      <data key="d1">variable</data>
      <data key="d2">standard_result stores the output obtained from executing the standard query type on the specified query.</data>
      <data key="d3">excerpt_id_2aec78b1c9251a3e46cf4a0fc90b5ce4</data>
    </node>
    <node id="local_kg_result">
      <data key="d1">variable</data>
      <data key="d2">local_kg_result stores the output obtained from executing a query on the local knowledge graph.</data>
      <data key="d3">excerpt_id_2aec78b1c9251a3e46cf4a0fc90b5ce4</data>
    </node>
    <node id="global_kg_result">
      <data key="d1">variable</data>
      <data key="d2">global_kg_result stores the output from the global knowledge graph query executed on the specified query.</data>
      <data key="d3">excerpt_id_2aec78b1c9251a3e46cf4a0fc90b5ce4</data>
    </node>
    <node id="hybrid_kg_result">
      <data key="d1">variable</data>
      <data key="d2">hybrid_kg_result holds the result obtained by executing a hybrid query type on the specified query.</data>
      <data key="d3">excerpt_id_2aec78b1c9251a3e46cf4a0fc90b5ce4</data>
    </node>
    <node id="mix_result">
      <data key="d1">variable</data>
      <data key="d2">mix_result stores the output obtained from executing a mixed query type on the specified query.</data>
      <data key="d3">excerpt_id_2aec78b1c9251a3e46cf4a0fc90b5ce4</data>
    </node>
    <node id="Retrieved Excerpts">
      <data key="d1">example</data>
      <data key="d2">Retrieved excerpts refer to the data or snippets obtained from a specific source, often used for analysis or review.</data>
      <data key="d3">excerpt_id_de4337904a4bfecc541e8547ba685ade</data>
    </node>
    <node id="Inspection" />
    <node id="inspect_query_excerpts">
      <data key="d1">function</data>
      <data key="d2">inspect_query_excerpts is a function that takes a rag object and a query as input, calling methods to obtain embeddings and query a database for top excerpts.</data>
      <data key="d3">excerpt_id_a8ba44e624cea2552a723858adb3841b</data>
    </node>
    <node id="embedding">
      <data key="d1">variable</data>
      <data key="d2">embedding is a variable that stores the result of the LLM's embedding of the input query, which is used for similarity search.:|:embedding is a variable that holds the generated embedding for the test text, represented as a numerical vector.:|:Embedding is a variable that stores the result of the LLM's embedding method for the provided text, used for similarity searching.</data>
      <data key="d3">excerpt_id_a8ba44e624cea2552a723858adb3841b:|:excerpt_id_ebe249d0dd90f1c72f8bdf533997e6aa:|:excerpt_id_c1b3890c12c9544c940bd001ae647dce</data>
    </node>
    <node id="embedding_array">
      <data key="d1">variable</data>
      <data key="d2">embedding_array is a NumPy array representation of the embedding, which facilitates querying the embeddings database.:|:Embedding_array is a NumPy array conversion of the embedding variable, facilitating numerical operations and queries.</data>
      <data key="d3">excerpt_id_a8ba44e624cea2552a723858adb3841b:|:excerpt_id_ebe249d0dd90f1c72f8bdf533997e6aa</data>
    </node>
    <node id="score">
      <data key="d1">variable</data>
      <data key="d2">score is a variable that captures the relevance score for each result returned from the query.</data>
      <data key="d3">excerpt_id_a8ba44e624cea2552a723858adb3841b</data>
    </node>
    <node id="excerpt_data">
      <data key="d1">variable</data>
      <data key="d2">excerpt_data is a variable that retrieves complete data associated with the respective excerpt ID, including summary and text.:|:excerpt_data is a variable that stores the information of an excerpt, particularly its timestamp, used to determine if a document is outdated.</data>
      <data key="d3">excerpt_id_8410a7e36eb3c87c25483898c18044a2:|:excerpt_id_a8ba44e624cea2552a723858adb3841b</data>
    </node>
    <node id="Top Excerpts">
      <data key="d1">feature</data>
      <data key="d2">Top Excerpts is a feature of the function that prints the most relevant excerpts based on their scores for the given query.</data>
      <data key="d3">excerpt_id_a8ba44e624cea2552a723858adb3841b</data>
    </node>
    <node id="Similarity Threshold">
      <data key="d1">variable</data>
      <data key="d2">Similarity Threshold refers to a parameter used to determine how similar two items must be for a certain action or result to occur, particularly in processes that require comparison or matching.</data>
      <data key="d3">excerpt_id_8404c8083357f5647561b745cf7e76b4</data>
    </node>
    <node id="_get_query_excerpts">
      <data key="d1">function</data>
      <data key="d2">The _get_query_excerpts function is responsible for modifying query processing by generating embedding, querying the embeddings database, and truncating the resulting excerpts based on token size.</data>
      <data key="d3">excerpt_id_ebe249d0dd90f1c72f8bdf533997e6aa</data>
    </node>
    <node id="excerpts">
      <data key="d1">variable</data>
      <data key="d2">Excerpts is a variable that stores a list of relevant excerpts derived from the queried results after processing.:|:excerpts is a variable representing a collection of excerpt data passed to the _get_excerpt_context function, which dictates how many excerpts will be processed.</data>
      <data key="d3">excerpt_id_ebe249d0dd90f1c72f8bdf533997e6aa:|:excerpt_id_2d8913758c4289f01071f578d422c0d5</data>
    </node>
    <node id="self.embeddings_db.query">
      <data key="d1">api</data>
      <data key="d2">self.embeddings_db.query is an API method to fetch the top-k results based on a query and specified criteria, influencing the output of the function.</data>
      <data key="d3">excerpt_id_ebe249d0dd90f1c72f8bdf533997e6aa</data>
    </node>
    <node id="truncate_list_by_token_size">
      <data key="d1">function</data>
      <data key="d2">Truncates a list to fit within a token limit, ensuring that data remains within processing constraints.:|:truncate_list_by_token_size is a function used to limit the length of the excerpts based on a maximum token size, ensuring brevity and relevance in results.</data>
      <data key="d3">excerpt_id_900d5e18a5cfe07ed9e4aa24282973e4:|:excerpt_id_ebe249d0dd90f1c72f8bdf533997e6aa</data>
    </node>
    <node id="get_text_for_row">
      <data key="d1">function</data>
      <data key="d2">get_text_for_row is a function lambda used to extract text from a given excerpt row, facilitating the truncation process.</data>
      <data key="d3">excerpt_id_ebe249d0dd90f1c72f8bdf533997e6aa</data>
    </node>
    <node id="max_token_size">
      <data key="d1">variable</data>
      <data key="d2">max_token_size represents the upper limit for the number of tokens allowed in the final output excerpts to maintain quality.</data>
      <data key="d3">excerpt_id_ebe249d0dd90f1c72f8bdf533997e6aa</data>
    </node>
    <node id="Large Vector Database">
      <data key="d1">configuration</data>
      <data key="d2">Large Vector Database is identified as a potential cause of slow query performance, suggesting a significant volume of data affecting speed.</data>
      <data key="d3">excerpt_id_da73f7a48b1cde40e03e26bb73a1a07f</data>
    </node>
    <node id="Complex Knowledge Graph">
      <data key="d1">configuration</data>
      <data key="d2">Complex Knowledge Graph serves as a potential issue that could result in inefficient query processing, impacting overall performance.</data>
      <data key="d3">excerpt_id_da73f7a48b1cde40e03e26bb73a1a07f</data>
    </node>
    <node id="API Latency">
      <data key="d1">variable</data>
      <data key="d2">API Latency refers to the delay experienced in the processing time of API requests, which could contribute to slow queries.</data>
      <data key="d3">excerpt_id_da73f7a48b1cde40e03e26bb73a1a07f</data>
    </node>
    <node id="Resource Constraints">
      <data key="d1">variable</data>
      <data key="d2">Resource Constraints are limitations related to server resources (CPU, memory) that can affect the operation of the FastAPI.:|:Resource Constraints indicate limitations in available resources that might hinder optimal query performance.</data>
      <data key="d3">excerpt_id_53ae527cec786bde0d38d922738f582d:|:excerpt_id_da73f7a48b1cde40e03e26bb73a1a07f</data>
    </node>
    <node id="Query Caching">
      <data key="d1">configuration:|:function</data>
      <data key="d2">Query Caching is a strategy to store query results temporarily, allowing for quick retrieval of previously processed identical queries to improve performance.:|:Query Caching is a proposed solution designed to save previously computed query results to improve performance and speed up responses.</data>
      <data key="d3">excerpt_id_da73f7a48b1cde40e03e26bb73a1a07f:|:excerpt_id_0cb743ef78a1b56785a004b70800d537</data>
    </node>
    <node id="QueryCache">
      <data key="d1">class</data>
      <data key="d2">QueryCache is a class designed to handle caching of query results based on given parameters, including managing cache directories and file storage.:|:QueryCache is a Python class designed to manage caching for query results, storing and retrieving them from the file system based on a unique cache key.</data>
      <data key="d3">excerpt_id_6d5e3b714d13f4cccc13c6ddccfafca3:|:excerpt_id_9bebde77788b480bb0dca061281305da</data>
    </node>
    <node id="cache_dir">
      <data key="d1">variable</data>
      <data key="d2">cache_dir is a variable in the QueryCache class that specifies the directory where cached files will be stored.:|:cache_dir is a parameter in the clean_old_cache_files function that specifies the directory where cache files are stored.:|:cache_dir is a variable that holds the directory path where cached files are stored, ensuring they exist before any cache operations.</data>
      <data key="d3">excerpt_id_6d5e3b714d13f4cccc13c6ddccfafca3:|:excerpt_id_d84d634f6486e1594aa2243ec3a2d0e4:|:excerpt_id_9bebde77788b480bb0dca061281305da</data>
    </node>
    <node id="query_text">
      <data key="d1">variable</data>
      <data key="d2">query_text is a variable that holds the text input for querying the rag data structure within the memory_efficient_query function.:|:query_text is a variable that stores the text of the query sent in the request, which is essential for retrieving relevant information.:|:query_text is a variable representing the text of the query being processed for caching or retrieval.:|:query_text is a variable that holds the actual text of the query to be executed within the memory_safe_query function.:|:query_text is a variable that contains the input text for which the vector search query is being executed.:|:query_text is a variable that represents the text of the query for which the cache key is generated and cached results are retrieved or stored.</data>
      <data key="d3">excerpt_id_d6593324775191da0523fe9381efdd81:|:excerpt_id_e7f63efacb3d60d28f1de8f3c979dba1:|:excerpt_id_9bebde77788b480bb0dca061281305da:|:excerpt_id_6d5e3b714d13f4cccc13c6ddccfafca3:|:excerpt_id_b68d9f283d4ab863a5fff4c63759e843:|:excerpt_id_32599e1b552f26ddce9129b57e04566f</data>
    </node>
    <node id="get_cache_key">
      <data key="d1">function</data>
      <data key="d2">get_cache_key is a method in the QueryCache class that generates a unique key for a query based on its text and type by using an MD5 hash.:|:get_cache_key is a method that generates a unique MD5 hash key based on the query text and type, which is essential for identifying cached results.</data>
      <data key="d3">excerpt_id_6d5e3b714d13f4cccc13c6ddccfafca3:|:excerpt_id_9bebde77788b480bb0dca061281305da</data>
    </node>
    <node id="get_from_cache">
      <data key="d1">function</data>
      <data key="d2">get_from_cache is a method that retrieves cached results from the cache directory based on a query's unique key, returning None if the cache file does not exist.:|:get_from_cache is a method that retrieves results from the cache by loading the JSON file associated with the cache key, returning the stored data if it exists.</data>
      <data key="d3">excerpt_id_6d5e3b714d13f4cccc13c6ddccfafca3:|:excerpt_id_9bebde77788b480bb0dca061281305da</data>
    </node>
    <node id="save_to_cache">
      <data key="d1">function</data>
      <data key="d2">save_to_cache is a method that saves the query results to a cache file in JSON format, using the cache key for file naming.:|:save_to_cache is a method that saves the query result to a cache file in JSON format based on its unique key.</data>
      <data key="d3">excerpt_id_6d5e3b714d13f4cccc13c6ddccfafca3:|:excerpt_id_9bebde77788b480bb0dca061281305da</data>
    </node>
    <node id="hashlib">
      <data key="d1">api</data>
      <data key="d2">hashlib is a standard Python library for creating secure hash functions, used here for generating MD5 cache keys.</data>
      <data key="d3">excerpt_id_9bebde77788b480bb0dca061281305da</data>
    </node>
    <node id="Vector Search">
      <data key="d1">feature:|:function</data>
      <data key="d2">Vector Search is a query type known for its speed, offering medium detail level and high semantic understanding while utilizing low resources.:|:Vector Search is the fastest query type, with performance influenced primarily by the size of the vector database.:|:Vector Search is a function used in the mix query method to find relevant results based on similarity in a multi-dimensional space.:|:Vector Search is a feature that allows for semantic relevance in queries, making it useful for retrieving information based on meaning rather than keywords.:|:Vector Search is a method to search through a collection of vectors, which can encounter performance bottlenecks when handling large datasets.:|:Vector Search is a feature that enhances search capabilities by enabling searching through large datasets using vector representations, improving the accuracy and efficiency of search results.</data>
      <data key="d3">excerpt_id_8a0247b8e1267963faeba1c255657e41:|:excerpt_id_0cb743ef78a1b56785a004b70800d537:|:excerpt_id_e477d31a3d287e5594aac260eb346c86:|:excerpt_id_ef4071e96daa9945373d57af00e57426:|:excerpt_id_f18a098e46a2044eb43b0d2c58ecc3e2:|:excerpt_id_86ba72aabf2293e7a459f9e7845c2894</data>
    </node>
    <node id="Optimize" />
    <node id="approximate_vector_search">
      <data key="d1">function</data>
      <data key="d2">approximate_vector_search is a function that implements an approximate nearest neighbor search algorithm for large datasets, sampling a subset for efficiency.</data>
      <data key="d3">excerpt_id_7e1edb87d36ca88fec588c38ccc08d2a</data>
    </node>
    <node id="vectors">
      <data key="d1">variable</data>
      <data key="d2">vectors is a variable representing a collection of vector data on which similarity searches are performed using the function.:|:vectors is a variable that acts as a memory-mapped array for storing the vectors, allowing for efficient access and manipulation.:|:vectors is a variable representing a collection of vectors used as input for calculating similarities in the optimized_similarity function.</data>
      <data key="d3">excerpt_id_7e1edb87d36ca88fec588c38ccc08d2a:|:excerpt_id_902f74e2a13563ad2b6088a90d1308d6:|:excerpt_id_a42be424d0cd15ace0d1782e4ae169e9</data>
    </node>
    <node id="query_vector">
      <data key="d1">variable</data>
      <data key="d2">query_vector is a variable that holds the vector against which other vectors are compared to determine similarity.:|:query_vector is a variable representing a single vector against which the similarities of other vectors are computed in the optimized_similarity function.</data>
      <data key="d3">excerpt_id_7e1edb87d36ca88fec588c38ccc08d2a:|:excerpt_id_a42be424d0cd15ace0d1782e4ae169e9</data>
    </node>
    <node id="top_k">
      <data key="d1">variable</data>
      <data key="d2">top_k is a parameter for the query method that specifies the number of top similar vectors to return.:|:top_k is a variable representing the number of top similar vectors to return from the search function.</data>
      <data key="d3">excerpt_id_7e1edb87d36ca88fec588c38ccc08d2a:|:excerpt_id_902f74e2a13563ad2b6088a90d1308d6</data>
    </node>
    <node id="sample_size">
      <data key="d1">variable</data>
      <data key="d2">sample_size is a variable that determines the number of vectors sampled for initial comparison in the approximation process.</data>
      <data key="d3">excerpt_id_7e1edb87d36ca88fec588c38ccc08d2a</data>
    </node>
    <node id="sample_indices">
      <data key="d1">variable</data>
      <data key="d2">sample_indices is a variable that holds the indices of the sampled vectors used for initial filtering of the dataset.</data>
      <data key="d3">excerpt_id_7e1edb87d36ca88fec588c38ccc08d2a</data>
    </node>
    <node id="similarities">
      <data key="d1">variable</data>
      <data key="d2">similarities is a variable storing the computed similarity scores between the query vector and each sampled vector.:|:similarities is a list that accumulates the similarity scores during the query process.:|:similarities is a variable that stores the final computed similarity scores between the input vectors and the query vector.</data>
      <data key="d3">excerpt_id_7e1edb87d36ca88fec588c38ccc08d2a:|:excerpt_id_902f74e2a13563ad2b6088a90d1308d6:|:excerpt_id_a42be424d0cd15ace0d1782e4ae169e9</data>
    </node>
    <node id="top_sample_indices">
      <data key="d1">variable</data>
      <data key="d2">top_sample_indices is a variable that contains indices of the sample candidates ranked by their similarity scores.</data>
      <data key="d3">excerpt_id_7e1edb87d36ca88fec588c38ccc08d2a</data>
    </node>
    <node id="top_candidates">
      <data key="d1">variable</data>
      <data key="d2">top_candidates is a collection of indices representing the best performing candidates from the sampled vectors.</data>
      <data key="d3">excerpt_id_7e1edb87d36ca88fec588c38ccc08d2a</data>
    </node>
    <node id="candidate_vectors">
      <data key="d1">variable</data>
      <data key="d2">candidate_vectors is a variable that stores actual vector data corresponding to the top candidates selected for a precise similarity computation.</data>
      <data key="d3">excerpt_id_7e1edb87d36ca88fec588c38ccc08d2a</data>
    </node>
    <node id="candidate_similarities">
      <data key="d1">variable</data>
      <data key="d2">candidate_similarities holds the calculated similarity scores for the candidate vectors against the query vector.</data>
      <data key="d3">excerpt_id_7e1edb87d36ca88fec588c38ccc08d2a</data>
    </node>
    <node id="top_k_indices">
      <data key="d1">variable</data>
      <data key="d2">top_k_indices is a variable that identifies the final indices of the best matching vectors after the precise scoring.</data>
      <data key="d3">excerpt_id_7e1edb87d36ca88fec588c38ccc08d2a</data>
    </node>
    <node id="Simpler Query Type">
      <data key="d1">function</data>
      <data key="d2">Simpler Query Type refers to a function designed for time-sensitive applications, facilitating quick and efficient data retrieval.</data>
      <data key="d3">excerpt_id_1ed21094d7f4ae665ee11cf1896c7904</data>
    </node>
    <node id="time-sensitive applications" />
    <node id="fast_query">
      <data key="d1">function</data>
      <data key="d2">fast_query is a function designed to execute a vector search query, optimized for speed, using the rag parameter and query_text.</data>
      <data key="d3">excerpt_id_b68d9f283d4ab863a5fff4c63759e843</data>
    </node>
    <node id="Out of Memory Errors">
      <data key="d1">feature</data>
      <data key="d2">Out of Memory Errors are symptoms indicating that the system has exceeded its available memory during queries, leading to performance issues.</data>
      <data key="d3">excerpt_id_54d4734c1f93d3075b0b82d4e50ffc45</data>
    </node>
    <node id="Large Context Size">
      <data key="d1">configuration</data>
      <data key="d2">Large Context Size refers to a setting that may increase memory usage, making it a potential cause for Out of Memory Errors.</data>
      <data key="d3">excerpt_id_54d4734c1f93d3075b0b82d4e50ffc45</data>
    </node>
    <node id="Memory Leaks">
      <data key="d1">variable:|:function</data>
      <data key="d2">Memory Leaks describe a scenario where the system fails to release memory that is no longer needed, thus consuming increasing amounts of memory.:|:Memory Leaks are flaws in software that cause memory to be consumed without being released, affecting performance.</data>
      <data key="d3">excerpt_id_d51ed839a3e8d83bf62dabc2376c5057:|:excerpt_id_54d4734c1f93d3075b0b82d4e50ffc45</data>
    </node>
    <node id="Insufficient System Resources">
      <data key="d1">variable</data>
      <data key="d2">Insufficient System Resources refers to a condition where the available system memory is not adequate to handle operations, leading to errors.</data>
      <data key="d3">excerpt_id_54d4734c1f93d3075b0b82d4e50ffc45</data>
    </node>
    <node id="Limit Context Size">
      <data key="d1">solution</data>
      <data key="d2">Limit Context Size is a proposed solution aimed at reducing memory usage to prevent Out of Memory Errors during queries.</data>
      <data key="d3">excerpt_id_54d4734c1f93d3075b0b82d4e50ffc45</data>
    </node>
    <node id="_get_excerpt_context">
      <data key="d1">function</data>
      <data key="d2">_get_excerpt_context is a function within the CustomSmolRag class that processes provided excerpts, truncating them to a specified limit and formatting them for context output.</data>
      <data key="d3">excerpt_id_2d8913758c4289f01071f578d422c0d5</data>
    </node>
    <node id="context">
      <data key="d1">variable</data>
      <data key="d2">context is a variable that accumulates the formatted excerpt summaries, prepared as structured output for readability.</data>
      <data key="d3">excerpt_id_2d8913758c4289f01071f578d422c0d5</data>
    </node>
    <node id="inspect">
      <data key="d1">module</data>
      <data key="d2">inspect is a Python module utilized to clean up the formatting of the excerpt data for neat output in the context.</data>
      <data key="d3">excerpt_id_2d8913758c4289f01071f578d422c0d5</data>
    </node>
    <node id="Garbage Collection">
      <data key="d1">function</data>
      <data key="d2">Garbage Collection refers to the explicit triggering of memory cleanup after processing large batches, helping to free up memory resources.:|:Garbage Collection is a programming function that automatically reclaims memory that is no longer in use, preventing memory leaks and optimizing performance.</data>
      <data key="d3">excerpt_id_bb648165c3476d5efccf479db06c8bae:|:excerpt_id_8d580efe0a0849a9ed415edb7a33f22e</data>
    </node>
    <node id="function" />
    <node id="gc">
      <data key="d1">api</data>
      <data key="d2">gc is the built-in garbage collection module in Python, which is used to manage memory and clean up unused objects.:|:gc is the garbage collection interface in Python, enabling control over the memory management process.</data>
      <data key="d3">excerpt_id_e7f63efacb3d60d28f1de8f3c979dba1:|:excerpt_id_162e6c9e88d526c7cda8c551479b1fb1</data>
    </node>
    <node id="memory_efficient_query">
      <data key="d1">function</data>
      <data key="d2">memory_efficient_query is a function designed to perform a query efficiently while ensuring memory is managed properly through garbage collection.</data>
      <data key="d3">excerpt_id_e7f63efacb3d60d28f1de8f3c979dba1</data>
    </node>
    <node id="Monitor Memory Usage">
      <data key="d1">function</data>
      <data key="d2">Monitor Memory Usage is a function designed to track and report the amount of memory consumed by applications or processes in a system.</data>
      <data key="d3">excerpt_id_bacd61f1b7614999059be554ade297ab</data>
    </node>
    <node id="memory_safe_query">
      <data key="d1">function</data>
      <data key="d2">memory_safe_query is a function that checks system memory usage before executing a query to ensure it does not exceed a specified memory limit.</data>
      <data key="d3">excerpt_id_d6593324775191da0523fe9381efdd81</data>
    </node>
    <node id="max_memory_percent">
      <data key="d1">variable</data>
      <data key="d2">max_memory_percent is a variable that sets the threshold for maximum allowable memory percentage before executing the query.</data>
      <data key="d3">excerpt_id_d6593324775191da0523fe9381efdd81</data>
    </node>
    <node id="OpenAI API">
      <data key="d1">api</data>
      <data key="d2">OpenAI API is an application programming interface that facilitates access to OpenAI's services and functionalities, but may encounter issues such as invalid keys or rate limits.</data>
      <data key="d3">excerpt_id_d41d4522e6a3cf4c0b8733e72233523a</data>
    </node>
    <node id="Invalid API Key">
      <data key="d1">configuration</data>
      <data key="d2">Invalid API Key is a configuration error that occurs when the authentication key used to access the OpenAI API is incorrect or not recognized.</data>
      <data key="d3">excerpt_id_d41d4522e6a3cf4c0b8733e72233523a</data>
    </node>
    <node id="Quota Exceeded">
      <data key="d1">configuration</data>
      <data key="d2">Quota Exceeded refers to a situation where the user surpasses their allotted usage limits for the API, resulting in an inability to make further requests.</data>
      <data key="d3">excerpt_id_d41d4522e6a3cf4c0b8733e72233523a</data>
    </node>
    <node id="API Service Disruption">
      <data key="d1">feature</data>
      <data key="d2">API Service Disruption is a feature that indicates temporary unavailability of the API services due to technical issues or maintenance.</data>
      <data key="d3">excerpt_id_d41d4522e6a3cf4c0b8733e72233523a</data>
    </node>
    <node id="Verify API Key">
      <data key="d1">function</data>
      <data key="d2">Verify API Key is a function that involves checking the validity of the API key to ensure successful authentication and access to the API.</data>
      <data key="d3">excerpt_id_d41d4522e6a3cf4c0b8733e72233523a</data>
    </node>
    <node id="OpenAI">
      <data key="d1">api</data>
      <data key="d2">OpenAI is the API client being utilized to generate embeddings for text, requiring an API key for access.:|:OpenAI is an API provided for accessing advanced AI functionalities, specifically designed for tasks like generating embeddings from text.</data>
      <data key="d3">excerpt_id_f72624f4124b364e9f6e3cabefc26dcb:|:excerpt_id_7427e209fc13ae7cacd434f823963545</data>
    </node>
    <node id="verify_openai_api_key">
      <data key="d1">function</data>
      <data key="d2">verify_openai_api_key is a function implemented to check the validity of the OpenAI API key by making a simple API call.</data>
      <data key="d3">excerpt_id_f72624f4124b364e9f6e3cabefc26dcb</data>
    </node>
    <node id="API key">
      <data key="d1">variable</data>
      <data key="d2">API key is a variable that holds the key required to authenticate and authorize access to the OpenAI API.</data>
      <data key="d3">excerpt_id_f72624f4124b364e9f6e3cabefc26dcb</data>
    </node>
    <node id="client.embeddings.create">
      <data key="d1">function</data>
      <data key="d2">client.embeddings.create is a function call used to create an embedding from provided input using the OpenAI API.</data>
      <data key="d3">excerpt_id_f72624f4124b364e9f6e3cabefc26dcb</data>
    </node>
    <node id="test">
      <data key="d1">example</data>
      <data key="d2">test is a sample input used to validate the API key during the verification process.</data>
      <data key="d3">excerpt_id_f72624f4124b364e9f6e3cabefc26dcb</data>
    </node>
    <node id="RateLimitedOpenAiLlm">
      <data key="d1">class</data>
      <data key="d2">RateLimitedOpenAiLlm is a class designed to manage requests to a language model by limiting the rate at which requests can be made, ensuring that the specified requests per minute are not exceeded.</data>
      <data key="d3">excerpt_id_a95ed36ca9d76b512d84de6b0725fbf9</data>
    </node>
    <node id="base_llm">
      <data key="d1">variable</data>
      <data key="d2">base_llm is an instance variable representing the underlying language model that this class interacts with.</data>
      <data key="d3">excerpt_id_a95ed36ca9d76b512d84de6b0725fbf9</data>
    </node>
    <node id="requests_per_minute">
      <data key="d1">variable</data>
      <data key="d2">requests_per_minute is a configurable parameter indicating the maximum number of requests that can be made to the language model in a minute.</data>
      <data key="d3">excerpt_id_a95ed36ca9d76b512d84de6b0725fbf9</data>
    </node>
    <node id="min_seconds_per_request">
      <data key="d1">variable</data>
      <data key="d2">min_seconds_per_request is a computed variable that defines the minimum time in seconds that should elapse between consecutive requests based on the requests_per_minute.</data>
      <data key="d3">excerpt_id_a95ed36ca9d76b512d84de6b0725fbf9</data>
    </node>
    <node id="last_request_time">
      <data key="d1">variable</data>
      <data key="d2">last_request_time is an instance variable that tracks the timestamp of the last request made to the language model.</data>
      <data key="d3">excerpt_id_a95ed36ca9d76b512d84de6b0725fbf9</data>
    </node>
    <node id="get_embedding">
      <data key="d1">function</data>
      <data key="d2">get_embedding is a method that retrieves an embedding for the provided text while respecting the rate limit.</data>
      <data key="d3">excerpt_id_a95ed36ca9d76b512d84de6b0725fbf9</data>
    </node>
    <node id="get_completion">
      <data key="d1">function</data>
      <data key="d2">get_completion is a method that retrieves a completion for a given prompt, context, and cache option while also respecting the rate limit.</data>
      <data key="d3">excerpt_id_a95ed36ca9d76b512d84de6b0725fbf9</data>
    </node>
    <node id="_wait_for_rate_limit">
      <data key="d1">function</data>
      <data key="d2">_wait_for_rate_limit is a private method that pauses execution if the rate limit has not been met since the last request.</data>
      <data key="d3">excerpt_id_a95ed36ca9d76b512d84de6b0725fbf9</data>
    </node>
    <node id="retry_with_exponential_backoff">
      <data key="d1">function</data>
      <data key="d2">retry_with_exponential_backoff is a function designed to retry executing another function with an exponential backoff strategy, managing delays and retry attempts based on specified parameters.</data>
      <data key="d3">excerpt_id_1def6bdd950a1221491ad5bc7859d768</data>
    </node>
    <node id="initial_delay">
      <data key="d1">variable</data>
      <data key="d2">initial_delay is a parameter that sets the starting delay time before the first retry attempt.</data>
      <data key="d3">excerpt_id_1def6bdd950a1221491ad5bc7859d768</data>
    </node>
    <node id="exponential_base">
      <data key="d1">variable</data>
      <data key="d2">exponential_base is a parameter which determines the base for the exponential delay between retry attempts.</data>
      <data key="d3">excerpt_id_1def6bdd950a1221491ad5bc7859d768</data>
    </node>
    <node id="jitter">
      <data key="d1">variable</data>
      <data key="d2">jitter is a boolean parameter that, when true, adds randomness to the delay to prevent synchronized retry attempts across multiple clients.</data>
      <data key="d3">excerpt_id_1def6bdd950a1221491ad5bc7859d768</data>
    </node>
    <node id="errors">
      <data key="d1">variable</data>
      <data key="d2">errors is a parameter that specifies which exceptions should trigger a retry of the function.</data>
      <data key="d3">excerpt_id_1def6bdd950a1221491ad5bc7859d768</data>
    </node>
    <node id="wrapper">
      <data key="d1">function</data>
      <data key="d2">wrapper is an inner function which performs the actual retry logic, including handling retries and delays.</data>
      <data key="d3">excerpt_id_1def6bdd950a1221491ad5bc7859d768</data>
    </node>
    <node id="Server Configuration">
      <data key="d1">configuration:|:function</data>
      <data key="d2">Server Configuration refers to the setup and parameters defined for the server that runs the FastAPI application, affecting its performance and behavior.:|:Server Configuration involves specifying settings such as host and port when starting the API server, allowing control over the API's accessibility.</data>
      <data key="d3">excerpt_id_8ae4948b96c52786e166f40ab294103d:|:excerpt_id_53ae527cec786bde0d38d922738f582d</data>
    </node>
    <node id="Validate Request Format">
      <data key="d1">function</data>
      <data key="d2">Validate Request Format is a function that ensures the requests sent to FastAPI adhere to the expected structure and constraints.</data>
      <data key="d3">excerpt_id_53ae527cec786bde0d38d922738f582d</data>
    </node>
    <node id="BaseModel">
      <data key="d1">configuration:|:interface</data>
      <data key="d2">BaseModel is a class from the Pydantic library used for creating data models that validate input data through Python type annotations.:|:BaseModel is a class provided by Pydantic that allows data validation and parsing through type annotations, serving as the foundation for QueryRequest.</data>
      <data key="d3">excerpt_id_24d76bde5328dc16ace5722740c74eb7:|:excerpt_id_27249d9d3f94ef9651b9eb1eaf1ed6e3</data>
    </node>
    <node id="validator">
      <data key="d1">function</data>
      <data key="d2">validator is a decorator in Pydantic that allows for defining custom validation rules for model fields.</data>
      <data key="d3">excerpt_id_27249d9d3f94ef9651b9eb1eaf1ed6e3</data>
    </node>
    <node id="valid_types">
      <data key="d1">variable</data>
      <data key="d2">valid_types is a list of strings that defines the allowable values for the query_type variable within the QueryRequest model.</data>
      <data key="d3">excerpt_id_27249d9d3f94ef9651b9eb1eaf1ed6e3</data>
    </node>
    <node id="query_map">
      <data key="d1">configuration:|:variable</data>
      <data key="d2">query_map is a mapping of query types to corresponding processing functions, ensuring the correct method is used for each query type.:|:query_map is a mapping that associates string representations of query types with their corresponding SmolRAG methods for processing.:|:query_map is a variable that holds a mapping of query types to their corresponding processing functions.</data>
      <data key="d3">excerpt_id_dc931d71f7d6a347aaaa011838c3efaf:|:excerpt_id_18b7236af033065c11ace3034fa8761a:|:excerpt_id_9bcab0017708cc906fc0c391ec015f1e</data>
    </node>
    <node id="request timeouts">
      <data key="d1">feature</data>
      <data key="d2">Request timeouts are a feature that allows a system to define how long a request should wait for a response before timing out, ensuring efficient resource management.</data>
      <data key="d3">excerpt_id_3eece1a0072ec193d86a75de1e566ff3</data>
    </node>
    <node id="process_query_with_timeout">
      <data key="d1">function</data>
      <data key="d2">process_query_with_timeout is an asynchronous function designed to run a query with a specified timeout, handling potential delay issues.</data>
      <data key="d3">excerpt_id_dc931d71f7d6a347aaaa011838c3efaf</data>
    </node>
    <node id="timeout">
      <data key="d1">variable</data>
      <data key="d2">timeout refers to the maximum duration (in seconds) allowed for processing a query before raising an error.</data>
      <data key="d3">excerpt_id_dc931d71f7d6a347aaaa011838c3efaf</data>
    </node>
    <node id="Performance Issues">
      <data key="d1">feature</data>
      <data key="d2">Performance Issues refers to the section addressing symptoms that lead to system slowdowns over time and includes possible causes and solutions.</data>
      <data key="d3">excerpt_id_d51ed839a3e8d83bf62dabc2376c5057</data>
    </node>
    <node id="Vector Database">
      <data key="d1">configuration</data>
      <data key="d2">Vector Database is part of the system that may grow and potentially contribute to performance issues.</data>
      <data key="d3">excerpt_id_d51ed839a3e8d83bf62dabc2376c5057</data>
    </node>
    <node id="Cache Bloat">
      <data key="d1">variable</data>
      <data key="d2">Cache Bloat signifies the excess cache storage that can accumulate and lead to slower system performance.</data>
      <data key="d3">excerpt_id_d51ed839a3e8d83bf62dabc2376c5057</data>
    </node>
    <node id="Database Pruning">
      <data key="d1">function</data>
      <data key="d2">Database Pruning is a solution suggested to mitigate performance issues by regularly removing unnecessary data from the database.</data>
      <data key="d3">excerpt_id_d51ed839a3e8d83bf62dabc2376c5057</data>
    </node>
    <node id="prune_old_documents">
      <data key="d1">function</data>
      <data key="d2">prune_old_documents is a function that removes documents from a collection if they are older than a specified threshold, indicated in days.</data>
      <data key="d3">excerpt_id_8410a7e36eb3c87c25483898c18044a2</data>
    </node>
    <node id="days_threshold">
      <data key="d1">variable</data>
      <data key="d2">days_threshold is a parameter in the clean_old_cache_files function that sets the age in days that files must exceed to be deleted.:|:days_threshold is a variable specifying the number of days used to determine whether documents should be removed in the prune_old_documents function.</data>
      <data key="d3">excerpt_id_8410a7e36eb3c87c25483898c18044a2:|:excerpt_id_d84d634f6486e1594aa2243ec3a2d0e4</data>
    </node>
    <node id="current_time">
      <data key="d1">variable</data>
      <data key="d2">current_time is a variable that stores the current timestamp, which is used to calculate the threshold time for removing old documents.</data>
      <data key="d3">excerpt_id_8410a7e36eb3c87c25483898c18044a2</data>
    </node>
    <node id="threshold_time">
      <data key="d1">variable</data>
      <data key="d2">threshold_time is a variable that calculates the cutoff point for which documents are considered old based on the current time and days_threshold.</data>
      <data key="d3">excerpt_id_8410a7e36eb3c87c25483898c18044a2</data>
    </node>
    <node id="all_doc_ids">
      <data key="d1">variable</data>
      <data key="d2">all_doc_ids is a variable that holds a list of all document IDs managed by the rag data structure.</data>
      <data key="d3">excerpt_id_8410a7e36eb3c87c25483898c18044a2</data>
    </node>
    <node id="remove_document_by_id">
      <data key="d1">function</data>
      <data key="d2">remove_document_by_id is a function called on rag to remove a document from its collection given a document ID.:|:remove_document_by_id is a function within the SmolRag class that allows the removal of a document using its unique identifier.</data>
      <data key="d3">excerpt_id_8410a7e36eb3c87c25483898c18044a2:|:excerpt_id_bc521abc84233a86888a005c7e9c0668</data>
    </node>
    <node id="excerpts_ids" />
    <node id="Cache Cleanup">
      <data key="d1">function</data>
      <data key="d2">Cache Cleanup is a function that is implemented to manage and remove unnecessary files or data stored temporarily to improve system performance.</data>
      <data key="d3">excerpt_id_667fc1581f36a093dc54fe4120a50e3c</data>
    </node>
    <node id="clean_old_cache_files">
      <data key="d1">function</data>
      <data key="d2">clean_old_cache_files is a function that removes cache files from a specified directory that are older than a specified number of days.</data>
      <data key="d3">excerpt_id_d84d634f6486e1594aa2243ec3a2d0e4</data>
    </node>
    <node id="Monitoring">
      <data key="d1">function</data>
      <data key="d2">Monitoring is the process of continuously observing and checking the memory usage to ensure it operates within acceptable levels.</data>
      <data key="d3">excerpt_id_73511a8e00d53872966dbd2a0639babc</data>
    </node>
    <node id="Optimization">
      <data key="d1">function</data>
      <data key="d2">Optimization involves adjusting the system or application parameters to enhance memory usage efficiency and overall performance.</data>
      <data key="d3">excerpt_id_73511a8e00d53872966dbd2a0639babc</data>
    </node>
    <node id="optimize_memory">
      <data key="d1">function</data>
      <data key="d2">optimize_memory is a function that forces garbage collection and reports the memory usage before and after garbage collection.</data>
      <data key="d3">excerpt_id_162e6c9e88d526c7cda8c551479b1fb1</data>
    </node>
    <node id="initial_memory">
      <data key="d1">variable</data>
      <data key="d2">initial_memory is a variable that holds the memory usage in megabytes before garbage collection.</data>
      <data key="d3">excerpt_id_162e6c9e88d526c7cda8c551479b1fb1</data>
    </node>
    <node id="final_memory">
      <data key="d1">variable</data>
      <data key="d2">final_memory is a variable that holds the memory usage in megabytes after garbage collection.</data>
      <data key="d3">excerpt_id_162e6c9e88d526c7cda8c551479b1fb1</data>
    </node>
    <node id="High CPU usage">
      <data key="d1">symptom</data>
      <data key="d2">High CPU usage is an indicator that the system is experiencing excessive load on its processor, potentially leading to decreased performance.</data>
      <data key="d3">excerpt_id_9ff4f0f1af9ef907c4af65e8a5e3c1aa</data>
    </node>
    <node id="Inefficient vector operations">
      <data key="d1">potential cause</data>
      <data key="d2">Inefficient vector operations refer to suboptimal algorithms or coding practices that cause CPU resources to be used wastefully.</data>
      <data key="d3">excerpt_id_9ff4f0f1af9ef907c4af65e8a5e3c1aa</data>
    </node>
    <node id="Large batch processing">
      <data key="d1">potential cause</data>
      <data key="d2">Large batch processing describes scenarios where extensive data handling occurs simultaneously, potentially overwhelming the CPU.</data>
      <data key="d3">excerpt_id_9ff4f0f1af9ef907c4af65e8a5e3c1aa</data>
    </node>
    <node id="Excessive parallel processing">
      <data key="d1">potential cause</data>
      <data key="d2">Excessive parallel processing indicates too many processes running concurrently, leading to CPU contention and high load.</data>
      <data key="d3">excerpt_id_9ff4f0f1af9ef907c4af65e8a5e3c1aa</data>
    </node>
    <node id="Background tasks">
      <data key="d1">potential cause</data>
      <data key="d2">Background tasks are processes that run behind the scenes, consuming CPU resources that can impact performance.</data>
      <data key="d3">excerpt_id_9ff4f0f1af9ef907c4af65e8a5e3c1aa</data>
    </node>
    <node id="Profile CPU usage">
      <data key="d1">solution</data>
      <data key="d2">Profile CPU usage is an action taken to analyze how CPU resources are being allocated and utilized, helping to identify and resolve performance issues.</data>
      <data key="d3">excerpt_id_9ff4f0f1af9ef907c4af65e8a5e3c1aa</data>
    </node>
    <node id="cProfile">
      <data key="d1">api</data>
      <data key="d2">cProfile is a Python module used for profiling performance of code, enabling developers to identify bottlenecks.</data>
      <data key="d3">excerpt_id_8fda81c68b75421d305c4c8c5587399b</data>
    </node>
    <node id="pstats">
      <data key="d1">api</data>
      <data key="d2">pstats is a Python module that provides a way to work with profiling results from cProfile, allowing detailed analysis of function performance.</data>
      <data key="d3">excerpt_id_8fda81c68b75421d305c4c8c5587399b</data>
    </node>
    <node id="profile_function">
      <data key="d1">function</data>
      <data key="d2">profile_function is a custom function that takes another function and its arguments, profiles its performance, and returns the result.</data>
      <data key="d3">excerpt_id_8fda81c68b75421d305c4c8c5587399b</data>
    </node>
    <node id="stats">
      <data key="d1">variable</data>
      <data key="d2">stats is a variable that holds the profiling statistics and is used to print out the top performing functions.</data>
      <data key="d3">excerpt_id_8fda81c68b75421d305c4c8c5587399b</data>
    </node>
    <node id="Usage">
      <data key="d1">example</data>
      <data key="d2">Usage demonstrates how to instantiate the BatchEmbedder class and call the embed_texts method with sample texts.:|:Usage illustrates how to call the profile_function with a specific function and its arguments, demonstrating practical application.</data>
      <data key="d3">excerpt_id_8fda81c68b75421d305c4c8c5587399b:|:excerpt_id_7427e209fc13ae7cacd434f823963545</data>
    </node>
    <node id="Vector Operations">
      <data key="d1">function</data>
      <data key="d2">Vector Operations refer to mathematical operations applied to vectors, aiming to improve computational efficiency and performance in algorithms.</data>
      <data key="d3">excerpt_id_b9a283d89c9ac9a2502511d2ad1a0b47</data>
    </node>
    <node id="Numpy">
      <data key="d1">api</data>
      <data key="d2">Numpy is a fundamental package for scientific computing in Python, providing support for large multi-dimensional arrays and matrices, along with a collection of mathematical functions to operate on these arrays.</data>
      <data key="d3">excerpt_id_a42be424d0cd15ace0d1782e4ae169e9</data>
    </node>
    <node id="optimized_similarity">
      <data key="d1">function</data>
      <data key="d2">optimized_similarity is a function that calculates the similarity between a set of vectors and a query vector through vectorized operations, improving performance over traditional looping methods.</data>
      <data key="d3">excerpt_id_a42be424d0cd15ace0d1782e4ae169e9</data>
    </node>
    <node id="dot_products">
      <data key="d1">variable</data>
      <data key="d2">dot_products is a variable used to store the result of the dot product calculation between all vectors and the query vector.</data>
      <data key="d3">excerpt_id_a42be424d0cd15ace0d1782e4ae169e9</data>
    </node>
    <node id="vector_norms">
      <data key="d1">variable</data>
      <data key="d2">vector_norms is a variable that holds the calculated norms of the input vectors, which are necessary for determining the similarity scores.</data>
      <data key="d3">excerpt_id_a42be424d0cd15ace0d1782e4ae169e9</data>
    </node>
    <node id="Batch Size Control">
      <data key="d1">feature</data>
      <data key="d2">Batch Size Control is a feature that allows users to specify the number of items to be processed in a single operation, enabling more efficient management of system resources.</data>
      <data key="d3">excerpt_id_bb35f27247abbcfb17fbdf6ba97943fa</data>
    </node>
    <node id="process_with_controlled_batches">
      <data key="d1">function</data>
      <data key="d2">process_with_controlled_batches is a function designed to handle a list of items in controlled batch sizes to optimize CPU usage during processing.</data>
      <data key="d3">excerpt_id_92852caa5644169ca9dd067510644fa8</data>
    </node>
    <node id="items">
      <data key="d1">variable</data>
      <data key="d2">items represents the list of elements that need to be processed in batches.</data>
      <data key="d3">excerpt_id_92852caa5644169ca9dd067510644fa8</data>
    </node>
    <node id="process_func">
      <data key="d1">variable</data>
      <data key="d2">process_func is a function that will be applied to each batch of items during processing.</data>
      <data key="d3">excerpt_id_92852caa5644169ca9dd067510644fa8</data>
    </node>
    <node id="Disk I/O Bottlenecks">
      <data key="d1">feature</data>
      <data key="d2">Disk I/O Bottlenecks refer to problems encountered during disk input/output operations, which can significantly impact system performance.</data>
      <data key="d3">excerpt_id_634cb690e8983101d35edd7bb2263ee6</data>
    </node>
    <node id="Vector Store Saves">
      <data key="d1">configuration</data>
      <data key="d2">Vector Store Saves are operations that involve the storage of vectors, which can lead to bottlenecks when performed frequently.</data>
      <data key="d3">excerpt_id_634cb690e8983101d35edd7bb2263ee6</data>
    </node>
    <node id="Large Log Files">
      <data key="d1">variable</data>
      <data key="d2">Large Log Files are substantial files created by applications that can consume significant I/O resources, leading to performance issues.</data>
      <data key="d3">excerpt_id_634cb690e8983101d35edd7bb2263ee6</data>
    </node>
    <node id="Inefficient File Operations">
      <data key="d1">function</data>
      <data key="d2">Inefficient File Operations refer to actions taken on files that do not optimize usage of disk resources, contributing to bottlenecks.</data>
      <data key="d3">excerpt_id_634cb690e8983101d35edd7bb2263ee6</data>
    </node>
    <node id="Slow Storage Media">
      <data key="d1">variable</data>
      <data key="d2">Slow Storage Media includes storage solutions that have limited speed capabilities, further exacerbating I/O bottlenecks.</data>
      <data key="d3">excerpt_id_634cb690e8983101d35edd7bb2263ee6</data>
    </node>
    <node id="Reduce Save Frequency">
      <data key="d1">function</data>
      <data key="d2">Reduce Save Frequency is a proposed solution to mitigate I/O bottlenecks by decreasing how often data is saved to disk.</data>
      <data key="d3">excerpt_id_634cb690e8983101d35edd7bb2263ee6</data>
    </node>
    <node id="BufferedVectorStore">
      <data key="d1">class</data>
      <data key="d2">BufferedVectorStore is a class designed to manage a buffered storage system, allowing for items to be temporarily held before being saved to a base storage system.</data>
      <data key="d3">excerpt_id_a68564adae713623b80263ca809403a7</data>
    </node>
    <node id="__init__">
      <data key="d1">function</data>
      <data key="d2">__init__ is the constructor method of the BufferedVectorStore class, initializing base_store with a reference to the base storage and setting the buffer size and initial empty buffer.:|:__init__ is a constructor function in Python used to initialize the attributes of a class instance with the parameters provided.</data>
      <data key="d3">excerpt_id_626b4e89f477fe66f0fb4bd4a4928418:|:excerpt_id_a68564adae713623b80263ca809403a7</data>
    </node>
    <node id="upsert">
      <data key="d1">function</data>
      <data key="d2">upsert method allows items to be added to the buffer and manages the transition of items from the buffer to the base store when the buffer reaches its defined size.</data>
      <data key="d3">excerpt_id_a68564adae713623b80263ca809403a7</data>
    </node>
    <node id="save">
      <data key="d1">function</data>
      <data key="d2">save method ensures any remaining items in the buffer are pushed to the base store and clears the buffer, allowing for data persistence.</data>
      <data key="d3">excerpt_id_a68564adae713623b80263ca809403a7</data>
    </node>
    <node id="base_store">
      <data key="d1">variable</data>
      <data key="d2">base_store is a variable that holds a reference to the underlying storage system used to persist items when the buffer is full or when manually saving.</data>
      <data key="d3">excerpt_id_a68564adae713623b80263ca809403a7</data>
    </node>
    <node id="buffer_size">
      <data key="d1">variable</data>
      <data key="d2">buffer_size is a variable that specifies the maximum number of items that can be held in the buffer before being sent to the base store.</data>
      <data key="d3">excerpt_id_a68564adae713623b80263ca809403a7</data>
    </node>
    <node id="buffer">
      <data key="d1">variable</data>
      <data key="d2">buffer is a list used to temporarily hold items before they are transferred to the base storage.</data>
      <data key="d3">excerpt_id_a68564adae713623b80263ca809403a7</data>
    </node>
    <node id="Log Rotation">
      <data key="d1">function</data>
      <data key="d2">Log Rotation is a method used to manage log files, preventing them from growing excessively large over time.:|:Log Rotation is a process that involves the management and maintenance of log files to ensure they do not consume excessive disk space and to keep track of system events.</data>
      <data key="d3">excerpt_id_2abe19f408197fa7fd5a9132768660f8:|:excerpt_id_8a2aba64b4fd7ed53252f4a12ec587b7</data>
    </node>
    <node id="RotatingFileHandler">
      <data key="d1">api</data>
      <data key="d2">RotatingFileHandler is a handler provided by the logging library that allows for the automatic management of log file rotation, ensuring logs do not exceed a specific size.:|:RotatingFileHandler is a logging handler that manages file rotation, creating new log files based on specified size limits and allowing for backup counts.</data>
      <data key="d3">excerpt_id_1b2e40e76edb8537fc654b87660704c7:|:excerpt_id_03b1ea2fb1b6593ee34fd158bd82fcb4</data>
    </node>
    <node id="setup_rotating_logger">
      <data key="d1">function</data>
      <data key="d2">setup_rotating_logger is a function that configures a rotating logger, specifying the log path, maximum bytes, and a backup count to manage log file sizes.</data>
      <data key="d3">excerpt_id_03b1ea2fb1b6593ee34fd158bd82fcb4</data>
    </node>
    <node id="log_path">
      <data key="d1">variable</data>
      <data key="d2">log_path is a variable that represents the full path to the log file, combining the log directory and the log file name.:|:log_path is a variable that stores the file path where the log files will be created or stored.</data>
      <data key="d3">excerpt_id_1b2e40e76edb8537fc654b87660704c7:|:excerpt_id_03b1ea2fb1b6593ee34fd158bd82fcb4</data>
    </node>
    <node id="max_bytes">
      <data key="d1">variable</data>
      <data key="d2">max_bytes is a variable that defines the maximum allowable size of the log file before it is rotated.</data>
      <data key="d3">excerpt_id_03b1ea2fb1b6593ee34fd158bd82fcb4</data>
    </node>
    <node id="backup_count">
      <data key="d1">variable</data>
      <data key="d2">backup_count is a variable that determines the number of backup log files to retain when the current log file is rotated.:|:backup_count is a variable indicating how many backup log files to keep after rotation.</data>
      <data key="d3">excerpt_id_1b2e40e76edb8537fc654b87660704c7:|:excerpt_id_03b1ea2fb1b6593ee34fd158bd82fcb4</data>
    </node>
    <node id="formatter">
      <data key="d1">configuration:|:variable</data>
      <data key="d2">formatter is an instance of logging.Formatter that defines the format of log messages, including timestamp, logger name, log level, and the actual log message.:|:formatter is a variable that defines the formatting style of log messages within the logger.</data>
      <data key="d3">excerpt_id_1b2e40e76edb8537fc654b87660704c7:|:excerpt_id_03b1ea2fb1b6593ee34fd158bd82fcb4</data>
    </node>
    <node id="smolrag">
      <data key="d1">feature</data>
      <data key="d2">smolrag is the name of the logger that is being configured, used to categorise and filter log messages.</data>
      <data key="d3">excerpt_id_03b1ea2fb1b6593ee34fd158bd82fcb4</data>
    </node>
    <node id="handler" />
    <node id="Memory-mapped Files">
      <data key="d1">feature</data>
      <data key="d2">Memory-mapped files are a feature that allows large datasets to be manipulated and accessed more efficiently by mapping them into memory.</data>
      <data key="d3">excerpt_id_d30c64f1e14764398992e0084b90178e</data>
    </node>
    <node id="Large Datasets">
      <data key="d1">variable</data>
      <data key="d2">Large datasets refer to substantial volumes of data that may require specific techniques, such as memory-mapped files, for effective processing.</data>
      <data key="d3">excerpt_id_d30c64f1e14764398992e0084b90178e</data>
    </node>
    <node id="MemmapVectorStore">
      <data key="d1">class</data>
      <data key="d2">MemmapVectorStore is a class that manages a memory-mapped array for storing vectors, with attributes for dimensions, max vectors, and associated metadata.</data>
      <data key="d3">excerpt_id_c3a0fa38348959d09c359e84ea7a68b0</data>
    </node>
    <node id="dimensions">
      <data key="d1">configuration:|:variable</data>
      <data key="d2">dimensions refers to the embedding dimensions, with a default value of 1536.:|:Dimensions refer to the parameter defining the dimensionality of the embeddings in the vector store, with a default value of 1536.:|:dimensions is a variable that defines the dimensionality of the vectors being stored in the MemmapVectorStore class.:|:dimensions is a variable that likely defines the dimensionality for data structures or embeddings being worked with.:|:dimensions is a variable that specifies the size of the vector dimensions used in the embeddings, critical for performance tuning of the system.:|:dimensions is a parameter representing the size of the embedding used in the SmolRag instance, influencing the model's performance and capabilities.:|:dimensions refers to the dimensionality of the vectors being stored in the vector store.</data>
      <data key="d3">excerpt_id_8c0374f7cf68e5fd2e81a44aabeb6e31:|:excerpt_id_3349f76d73e7efb0528eeee4c6101216:|:excerpt_id_c3a0fa38348959d09c359e84ea7a68b0:|:excerpt_id_902f74e2a13563ad2b6088a90d1308d6:|:excerpt_id_626b4e89f477fe66f0fb4bd4a4928418:|:excerpt_id_ffe66db99045699917cf675f9252c0dd:|:excerpt_id_bc4e6aac2a735309400738bd11c772ba</data>
    </node>
    <node id="max_vectors">
      <data key="d1">variable</data>
      <data key="d2">max_vectors is a variable that indicates the maximum number of vectors that can be stored in the MemmapVectorStore class, with a default value of 10000.</data>
      <data key="d3">excerpt_id_c3a0fa38348959d09c359e84ea7a68b0</data>
    </node>
    <node id="metadata_file">
      <data key="d1">variable</data>
      <data key="d2">metadata_file is a variable that stores the path to the metadata file corresponding to the MemmapVectorStore class.</data>
      <data key="d3">excerpt_id_c3a0fa38348959d09c359e84ea7a68b0</data>
    </node>
    <node id="initialize">
      <data key="d1">function</data>
      <data key="d2">initialize is a method that sets up the memory-mapped array, either by creating a new empty array or loading an existing one based on the file path.:|:initialize is a method that sets up the memory-mapped array, either creating it or loading it based on the existence of the file.</data>
      <data key="d3">excerpt_id_902f74e2a13563ad2b6088a90d1308d6:|:excerpt_id_c3a0fa38348959d09c359e84ea7a68b0</data>
    </node>
    <node id="save_metadata">
      <data key="d1">function</data>
      <data key="d2">save_metadata is a method that saves the current count of vectors to the metadata file.</data>
      <data key="d3">excerpt_id_c3a0fa38348959d09c359e84ea7a68b0</data>
    </node>
    <node id="load_metadata">
      <data key="d1">function</data>
      <data key="d2">load_metadata is a method that retrieves the count of vectors from the metadata file.</data>
      <data key="d3">excerpt_id_c3a0fa38348959d09c359e84ea7a68b0</data>
    </node>
    <node id="np.memmap">
      <data key="d1">api</data>
      <data key="d2">np.memmap is an API from the NumPy library that facilitates creating and managing memory-mapped arrays.</data>
      <data key="d3">excerpt_id_c3a0fa38348959d09c359e84ea7a68b0</data>
    </node>
    <node id="os.path.exists">
      <data key="d1">api</data>
      <data key="d2">os.path.exists is an API function that checks the existence of a specified file path.</data>
      <data key="d3">excerpt_id_c3a0fa38348959d09c359e84ea7a68b0</data>
    </node>
    <node id="app/logs/">
      <data key="d1">interface</data>
      <data key="d2">The app/logs/ interface is a directory where SmolRAG stores its logs, allowing users to access important troubleshooting information.</data>
      <data key="d3">excerpt_id_774f4016ba53a64bd395a960e0ffcab8</data>
    </node>
    <node id="General Troubleshooting Strategies">
      <data key="d1">function</data>
      <data key="d2">General Troubleshooting Strategies are a set of guidelines designed to assist users in resolving issues not covered by specific scenarios.</data>
      <data key="d3">excerpt_id_774f4016ba53a64bd395a960e0ffcab8</data>
    </node>
    <node id="app/logs/main.log">
      <data key="d1">file</data>
      <data key="d2">app/logs/main.log is the path to the main log file used to store application log data.</data>
      <data key="d3">excerpt_id_2367c566864db88a866eced295cee581</data>
    </node>
    <node id="grep">
      <data key="d1">function</data>
      <data key="d2">grep is a command-line utility used to search for specific patterns in files, here employed to identify errors in the main log file.</data>
      <data key="d3">excerpt_id_2367c566864db88a866eced295cee581</data>
    </node>
    <node id="tail">
      <data key="d1">function</data>
      <data key="d2">tail is a command-line utility used to output the last part of files, which is utilized to follow the log in real-time.</data>
      <data key="d3">excerpt_id_2367c566864db88a866eced295cee581</data>
    </node>
    <node id="Debug Logging">
      <data key="d1">feature</data>
      <data key="d2">Debug Logging is a feature that can be enabled to capture more detailed information for troubleshooting or analysis purposes.</data>
      <data key="d3">excerpt_id_ab02f18a374cc195067b1255afc706d5</data>
    </node>
    <node id="set_logger">
      <data key="d1">function</data>
      <data key="d2">set_logger is a function imported from the app.logger module that is used to configure logging to a specified file, in this case, 'custom_log.log'.:|:set_logger is a function that initializes a logger using a specified log file name, enabling logging at different levels.:|:set_logger is a function defined in app/logger.py that is used to configure the logging mechanism of an application, specifically allowing the log level to be set for debugging purposes.</data>
      <data key="d3">excerpt_id_fb156a74395538c246ac8cbb120b84be:|:excerpt_id_d2c1e8835d374f0d3253b7ad5939d44b:|:excerpt_id_ff2948688845f254196d48787ccadd8f</data>
    </node>
    <node id="log_file_name">
      <data key="d1">variable</data>
      <data key="d2">log_file_name is a variable that represents the name of the file where logs will be recorded, serving as an input parameter for the set_logger function.:|:log_file_name is a variable that holds the name of the log file to be used by the set_logger function.</data>
      <data key="d3">excerpt_id_d2c1e8835d374f0d3253b7ad5939d44b:|:excerpt_id_ff2948688845f254196d48787ccadd8f</data>
    </node>
    <node id="DEBUG">
      <data key="d1">configuration</data>
      <data key="d2">DEBUG is a configuration setting indicating the verbosity level of logging, allowing for detailed log messages during the application's execution.</data>
      <data key="d3">excerpt_id_ff2948688845f254196d48787ccadd8f</data>
    </node>
    <node id="Data Files">
      <data key="d1">variable</data>
      <data key="d2">Data Files refers to collections of data stored in a particular format, which can be examined to identify issues in the information contained within.</data>
      <data key="d3">excerpt_id_66acf30f4fead90713b8fa60aa8c8fcd</data>
    </node>
    <node id="Inspect">
      <data key="d1">function</data>
      <data key="d2">Inspect refers to the function of examining or analyzing data files to help identify any potential issues or errors present.</data>
      <data key="d3">excerpt_id_66acf30f4fead90713b8fa60aa8c8fcd</data>
    </node>
    <node id="data files">
      <data key="d1">variable</data>
      <data key="d2">Data files refer to the various files stored in the app/data/ directory, which can be listed using the command 'ls -la app/data/'.</data>
      <data key="d3">excerpt_id_a3aaac715dfc16efed6435e6b910c223</data>
    </node>
    <node id="file sizes">
      <data key="d1">variable</data>
      <data key="d2">File sizes refer to the sizes of the files listed in the app/data/ directory, which can be checked using the command 'du -h app/data/'.</data>
      <data key="d3">excerpt_id_a3aaac715dfc16efed6435e6b910c223</data>
    </node>
    <node id="vector store files">
      <data key="d1">variable</data>
      <data key="d2">Vector store files are specific files checked for existence in the app/data/ directory, specifically 'embeddings.db'.</data>
      <data key="d3">excerpt_id_a3aaac715dfc16efed6435e6b910c223</data>
    </node>
    <node id="embeddings.db">
      <data key="d1">file</data>
      <data key="d2">embeddings.db is a specific file in the app/data/ directory pertaining to the vector store, which is checked for its existence.</data>
      <data key="d3">excerpt_id_a3aaac715dfc16efed6435e6b910c223</data>
    </node>
    <node id="Test Components in Isolation">
      <data key="d1">function</data>
      <data key="d2">Test Components in Isolation refers to the practice of debugging or troubleshooting by examining each component separately to identify issues.</data>
      <data key="d3">excerpt_id_65c122c9d01f4ebb02fb60678b37f3a5</data>
    </node>
    <node id="read_file">
      <data key="d1">function</data>
      <data key="d2">Reads a file from disk, enabling content access for further processing.:|:read_file is a function within the app.utilities module designed to load a document and return its content.</data>
      <data key="d3">excerpt_id_900d5e18a5cfe07ed9e4aa24282973e4:|:excerpt_id_c1b3890c12c9544c940bd001ae647dce</data>
    </node>
    <node id="preserve_markdown_code_excerpts">
      <data key="d1">function</data>
      <data key="d2">preserve_markdown_code_excerpts is a function that chunks a given content into smaller pieces while preserving markdown code excerpts, maintaining readability and structure.:|:preserve_markdown_code_excerpts is an advanced strategy that respects Markdown structure and code blocks during text segmentation.:|:preserve_markdown_code_excerpts is an advanced chunking function that respects Markdown structure and code blocks.:|:preserve_markdown_code_excerpts is a function that allows customization of the chunking strategy for the SmolRag instance, ensuring specific formatting is retained.</data>
      <data key="d3">excerpt_id_ffe66db99045699917cf675f9252c0dd:|:excerpt_id_c1b3890c12c9544c940bd001ae647dce:|:excerpt_id_3349f76d73e7efb0528eeee4c6101216:|:excerpt_id_2bc6d678c54740db5acd63566371648d</data>
    </node>
    <node id="len">
      <data key="d1">function</data>
      <data key="d2">len is a built-in function in Python used to determine the length of an object, such as a string or list.</data>
      <data key="d3">excerpt_id_c1b3890c12c9544c940bd001ae647dce</data>
    </node>
    <node id="chunks">
      <data key="d1">variable</data>
      <data key="d2">chunks is a variable that stores the result of the chunking process, holding smaller pieces of the content for further processing.:|:chunks is a list that collects all the created text chunks after applying the custom chunking logic.</data>
      <data key="d3">excerpt_id_b448f2ca1ed64ac27b528bb6bed67d93:|:excerpt_id_c1b3890c12c9544c940bd001ae647dce</data>
    </node>
    <node id="app.utilities">
      <data key="d1">configuration</data>
      <data key="d2">app.utilities is a module that includes utility functions for the application, such as read_file.</data>
      <data key="d3">excerpt_id_c1b3890c12c9544c940bd001ae647dce</data>
    </node>
    <node id="app.chunking">
      <data key="d1">configuration</data>
      <data key="d2">app.chunking is a module that provides functionality related to chunking content, particularly preserving markdown code.</data>
      <data key="d3">excerpt_id_c1b3890c12c9544c940bd001ae647dce</data>
    </node>
    <node id="app.openai_llm">
      <data key="d1">configuration</data>
      <data key="d2">app.openai_llm is a module that handles interactions with OpenAI's language model API.</data>
      <data key="d3">excerpt_id_c1b3890c12c9544c940bd001ae647dce</data>
    </node>
    <node id="Minimal Reproduction">
      <data key="d1">feature</data>
      <data key="d2">Minimal Reproduction is a method used to isolate problems by creating a simplified version of the issue, which can assist in troubleshooting and debugging.</data>
      <data key="d3">excerpt_id_a9ebd5c6976d32616fc23555151992cf</data>
    </node>
    <node id="Issue">
      <data key="d1">variable</data>
      <data key="d2">The Issue refers to the problem that needs to be isolated and understood in order to facilitate effective troubleshooting.</data>
      <data key="d3">excerpt_id_a9ebd5c6976d32616fc23555151992cf</data>
    </node>
    <node id="DATA_DIR">
      <data key="d1">configuration:|:variable</data>
      <data key="d2">DATA_DIR is a predefined path constant that indicates the directory for storing vector databases and other data, set by default to 'app/data'.:|:DATA_DIR is a configuration variable that specifies the directory where data files are stored.:|:DATA_DIR is a constant representing the path to the data directory, used for storing processed data.</data>
      <data key="d3">excerpt_id_fcb87a80b68c38981b549c5658a74b5b:|:excerpt_id_18b7236af033065c11ace3034fa8761a:|:excerpt_id_b0d4e3abf98287ec9c0b65e83c50a4f5</data>
    </node>
    <node id="LOG_DIR">
      <data key="d1">configuration:|:variable</data>
      <data key="d2">LOG_DIR is a configuration variable that indicates the directory for logging purposes.:|:LOG_DIR is a predefined path constant that specifies the directory for storing log files, with a default value of 'app/logs'.:|:LOG_DIR is a constant representing the path to the log directory, used for storing log files generated by the system.</data>
      <data key="d3">excerpt_id_fcb87a80b68c38981b549c5658a74b5b:|:excerpt_id_18b7236af033065c11ace3034fa8761a:|:excerpt_id_b0d4e3abf98287ec9c0b65e83c50a4f5</data>
    </node>
    <node id="excerpt_size">
      <data key="d1">configuration:|:variable</data>
      <data key="d2">excerpt_size signifies the target size for document chunks in characters, defaulting to 2000.:|:excerpt_size is a variable that defines the maximum size of excerpts to be processed or retrieved.:|:excerpt_size is a parameter that defines the size of the text chunks returned by the custom function.:|:excerpt_size is a variable defined to set the size of document excerpts for processing.:|:excerpt_size is a configuration parameter that determines the maximum size of text excerpts processed by SmolRag for data retrieval.</data>
      <data key="d3">excerpt_id_3349f76d73e7efb0528eeee4c6101216:|:excerpt_id_d256b3e352fdb14aff55223ceb48a24a:|:excerpt_id_626b4e89f477fe66f0fb4bd4a4928418:|:excerpt_id_fcb87a80b68c38981b549c5658a74b5b:|:excerpt_id_ffe66db99045699917cf675f9252c0dd</data>
    </node>
    <node id="overlap">
      <data key="d1">configuration:|:variable</data>
      <data key="d2">overlap indicates the overlap between chunks in characters, defaulting to 200.:|:overlap is a configuration parameter that sets the amount of text overlap between excerpts, which can affect the consistency and context of the retrieved data.:|:overlap is a parameter that determines how much the text chunks should overlap when they are created.:|:overlap is a variable that specifies the amount of overlap between excerpts when processing.:|:overlap is a variable defined to manage the amount of overlap between document excerpts.</data>
      <data key="d3">excerpt_id_3349f76d73e7efb0528eeee4c6101216:|:excerpt_id_d256b3e352fdb14aff55223ceb48a24a:|:excerpt_id_626b4e89f477fe66f0fb4bd4a4928418:|:excerpt_id_fcb87a80b68c38981b549c5658a74b5b:|:excerpt_id_ffe66db99045699917cf675f9252c0dd</data>
    </node>
    <node id="import_documents">
      <data key="d1">function</data>
      <data key="d2">import_documents is a function within SmolRag that appears to handle the importing of necessary documents for the application's operation.:|:import_documents is a function that facilitates the importing of documents into the SmolRag instance.:|:import_documents is a method of the SmolRag class that allows for the import of documents from the specified directory into the system.:|:import_documents is a function used to import documents into the SmolRag system for processing.:|:import_documents is a method called on the rag instance to import documents into the SmolRag for processing.:|:import_documents is a function within the SmolRag class that imports documents into the system and updates the internal representation.:|:import_documents is a method of the SmolRag class that is called to ensure that documents are loaded into the system for processing.:|:import_documents is a function of the SmolRag class used to import documents into the system.:|:import_documents is a function within the SmolRag API that is used to ensure the necessary documents are loaded into the system.:|:import_documents is the method to be executed for processing new documents added to the SmolRAG input directory.</data>
      <data key="d3">excerpt_id_b448f2ca1ed64ac27b528bb6bed67d93:|:excerpt_id_8e62d1d1488a79e4b7909d04ec095dd6:|:excerpt_id_aac33e6269e8908ac443bfb0712e8462:|:excerpt_id_f23f1c9ec24d0c56c84d4dea02a31e9c:|:excerpt_id_275a22b53aa6a7d5660862773c4c8e7e:|:excerpt_id_f2b7fbadfa83b8b0ea536a4b85fef7d6:|:excerpt_id_fcb87a80b68c38981b549c5658a74b5b:|:excerpt_id_bc521abc84233a86888a005c7e9c0668:|:excerpt_id_32599e1b552f26ddce9129b57e04566f:|:excerpt_id_391d9b7fd00abda862a1d6576fee1918</data>
    </node>
    <node id="System Resources">
      <data key="d1">feature</data>
      <data key="d2">System Resources refer to the essential computational resources such as memory, CPU, and storage that a system requires to function properly and effectively.</data>
      <data key="d3">excerpt_id_fcfeaf32d1f7d79c36beb5b1e1ee4576</data>
    </node>
    <node id="Check System Resources">
      <data key="d1">function</data>
      <data key="d2">Check System Resources is a function designed to monitor and verify the availability and performance of the system's computational resources.</data>
      <data key="d3">excerpt_id_fcfeaf32d1f7d79c36beb5b1e1ee4576</data>
    </node>
    <node id="check_system_resources">
      <data key="d1">function</data>
      <data key="d2">check_system_resources is a function that checks and prints the CPU, memory, and disk usage of the system.</data>
      <data key="d3">excerpt_id_2249047f50897aaf33539b74ade53916</data>
    </node>
    <node id="memory">
      <data key="d1">variable</data>
      <data key="d2">memory is a variable that stores information about the system's virtual memory usage, including total, available, and is expressed in MB.</data>
      <data key="d3">excerpt_id_2249047f50897aaf33539b74ade53916</data>
    </node>
    <node id="disk">
      <data key="d1">variable</data>
      <data key="d2">disk is a variable that contains information about the system's disk usage, including the percentage used and free space in GB.</data>
      <data key="d3">excerpt_id_2249047f50897aaf33539b74ade53916</data>
    </node>
    <node id="CPU Usage">
      <data key="d1">feature:|:variable</data>
      <data key="d2">CPU Usage denotes the processing power needed by the SmolRAG system, especially during document ingestion and complex queries.:|:CPU Usage is a feature displayed in the output that shows the current percentage of CPU being used.</data>
      <data key="d3">excerpt_id_9b3e7699a2ad7cd3ed369e4a0e702290:|:excerpt_id_2249047f50897aaf33539b74ade53916</data>
    </node>
    <node id="Available Memory">
      <data key="d1">feature</data>
      <data key="d2">Available Memory is a feature that displays how much memory is free and available for use in MB.</data>
      <data key="d3">excerpt_id_2249047f50897aaf33539b74ade53916</data>
    </node>
    <node id="Disk Usage">
      <data key="d1">feature:|:variable</data>
      <data key="d2">Disk Usage represents the storage space requirements for the vector database, knowledge graph, and other data in the SmolRAG system.:|:Disk Usage shows the percentage of disk space currently in use.</data>
      <data key="d3">excerpt_id_9b3e7699a2ad7cd3ed369e4a0e702290:|:excerpt_id_2249047f50897aaf33539b74ade53916</data>
    </node>
    <node id="Free Disk Space">
      <data key="d1">feature</data>
      <data key="d2">Free Disk Space features the amount of disk space available in GB.</data>
      <data key="d3">excerpt_id_2249047f50897aaf33539b74ade53916</data>
    </node>
    <node id="Issue Tracker">
      <data key="d1">configuration</data>
      <data key="d2">The Issue Tracker is a tool used to identify similar problems and solutions related to SmolRAG, aiding in troubleshooting.</data>
      <data key="d3">excerpt_id_ff13dc4b945b67da62f3fade912e8d3f</data>
    </node>
    <node id="Community Forums">
      <data key="d1">interface</data>
      <data key="d2">Community Forums provide a platform for users to discuss issues, share solutions, and seek help from other users regarding SmolRAG.</data>
      <data key="d3">excerpt_id_ff13dc4b945b67da62f3fade912e8d3f</data>
    </node>
    <node id="Project Maintainers">
      <data key="d1">person</data>
      <data key="d2">Project Maintainers are individuals responsible for overseeing the SmolRAG project and addressing user-reported issues.</data>
      <data key="d3">excerpt_id_ff13dc4b945b67da62f3fade912e8d3f</data>
    </node>
    <node id="Source Code">
      <data key="d1">configuration</data>
      <data key="d2">The Source Code represents the underlying behavior of SmolRAG and is reviewed for understanding and troubleshooting issues.</data>
      <data key="d3">excerpt_id_ff13dc4b945b67da62f3fade912e8d3f</data>
    </node>
    <node id="Usage Examples">
      <data key="d1">example</data>
      <data key="d2">Usage Examples refer to practical scenarios provided to demonstrate how to effectively use SmolRAG, including code snippets and explanations.</data>
      <data key="d3">excerpt_id_4aef7238aeefda715071f4fd758b3293</data>
    </node>
    <node id="Basic Setup and Initialization">
      <data key="d1">function</data>
      <data key="d2">Basic Setup and Initialization is a preliminary function that entails configuring the environment and initializing SmolRAG for use.</data>
      <data key="d3">excerpt_id_4aef7238aeefda715071f4fd758b3293</data>
    </node>
    <node id="Code Snippets">
      <data key="d1">feature</data>
      <data key="d2">Code Snippets are included within the Usage Examples to illustrate the implementation of SmolRAG functionality in real applications.</data>
      <data key="d3">excerpt_id_4aef7238aeefda715071f4fd758b3293</data>
    </node>
    <node id="Instance">
      <data key="d1">configuration</data>
      <data key="d2">An Instance is a configured setup of SmolRAG that is prepared to import documents and process queries based on user-defined or default parameters.</data>
      <data key="d3">excerpt_id_7e70042d92c65d0381abf750e7b75435</data>
    </node>
    <node id="Document Ingestion Example">
      <data key="d1">example</data>
      <data key="d2">Document Ingestion Example illustrates the procedure for using SmolRAG to import documents, guiding users through the ingestion process.</data>
      <data key="d3">excerpt_id_7e70042d92c65d0381abf750e7b75435</data>
    </node>
    <node id="source_file">
      <data key="d1">variable</data>
      <data key="d2">source_file refers to the original file path of the document that is to be copied to the input_docs directory.</data>
      <data key="d3">excerpt_id_275a22b53aa6a7d5660862773c4c8e7e</data>
    </node>
    <node id="destination">
      <data key="d1">variable</data>
      <data key="d2">destination is a variable that stores the combined path for where the document will be copied in the input_docs directory.</data>
      <data key="d3">excerpt_id_275a22b53aa6a7d5660862773c4c8e7e</data>
    </node>
    <node id="input_docs">
      <data key="d1">directory</data>
      <data key="d2">input_docs is the default directory where documents can be imported manually or programmatically before the ingestion process.</data>
      <data key="d3">excerpt_id_205fdf069c880aa423620b06adfdb6c1</data>
    </node>
    <node id="Import Documents">
      <data key="d1">function</data>
      <data key="d2">Import Documents is a function that facilitates the ingestion of documents from a specified directory into a system.</data>
      <data key="d3">excerpt_id_205fdf069c880aa423620b06adfdb6c1</data>
    </node>
    <node id="Query">
      <data key="d1">function</data>
      <data key="d2">Query is a method in the NanoVectorStore class that retrieves similar vectors from the store based on a given query.:|:Query refers to the process of searching or retrieving information from the ingested documents using a vector search.</data>
      <data key="d3">excerpt_id_c14bcfff661cc7a5b7c70532fd0b5d83:|:excerpt_id_205fdf069c880aa423620b06adfdb6c1</data>
    </node>
    <node id="Vector Search Query">
      <data key="d1">function</data>
      <data key="d2">Vector Search Query is a type of search query used to retrieve documents based on vector representations.:|:Vector Search Query is a function used to query the SmolRag API with the aim of obtaining information regarding specific topics like SmolRAG.:|:The Vector Search Query is a straightforward query type in SmolRAG that utilizes semantic similarity to find relevant excerpts.</data>
      <data key="d3">excerpt_id_205fdf069c880aa423620b06adfdb6c1:|:excerpt_id_f1ef3b38067579dab39116dbfeca6ddc:|:excerpt_id_0fe32e6885f5b985ccdafa775b1e90c3</data>
    </node>
    <node id="document chunking">
      <data key="d1">feature</data>
      <data key="d2">document chunking is a feature of SmolRag that organizes documents into smaller, manageable parts for improved querying.</data>
      <data key="d3">excerpt_id_391d9b7fd00abda862a1d6576fee1918</data>
    </node>
    <node id="use cases">
      <data key="d1">example</data>
      <data key="d2">use cases refer to practical scenarios where SmolRag can be applied effectively.</data>
      <data key="d3">excerpt_id_391d9b7fd00abda862a1d6576fee1918</data>
    </node>
    <node id="Vector Search Method">
      <data key="d1">function</data>
      <data key="d2">The Vector Search Method is a function in SmolRAG that allows for fast and efficient querying, particularly for straightforward document-related questions.</data>
      <data key="d3">excerpt_id_4eaabbb94075ebadba59d18cde321d42</data>
    </node>
    <node id="Knowledge Graph Query Examples">
      <data key="d1">example</data>
      <data key="d2">Knowledge Graph Query Examples are provided to illustrate the various methods available for making complex queries using SmolRAG.</data>
      <data key="d3">excerpt_id_4eaabbb94075ebadba59d18cde321d42</data>
    </node>
    <node id="local_kg_query">
      <data key="d1">function</data>
      <data key="d2">local_kg_query is a function that performs an entity-focused query on a local knowledge graph, used to retrieve related entities.:|:local_kg_query is a method that handles queries related to local knowledge graphs and returns relevant results.</data>
      <data key="d3">excerpt_id_aac33e6269e8908ac443bfb0712e8462:|:excerpt_id_f23f1c9ec24d0c56c84d4dea02a31e9c</data>
    </node>
    <node id="global_kg_query">
      <data key="d1">function</data>
      <data key="d2">global_kg_query is a function that executes a relationship-focused query on a global knowledge graph to understand connections among components.:|:global_kg_query is a method that processes queries pertaining to global knowledge graphs, yielding appropriate results.</data>
      <data key="d3">excerpt_id_aac33e6269e8908ac443bfb0712e8462:|:excerpt_id_f23f1c9ec24d0c56c84d4dea02a31e9c</data>
    </node>
    <node id="hybrid_kg_query">
      <data key="d1">function</data>
      <data key="d2">hybrid_kg_query is a function that combines local and global queries to investigate the relationship between embeddings and queries.:|:hybrid_kg_query is a method for querying that merges results from multiple knowledge graphs to deliver comprehensive answers.</data>
      <data key="d3">excerpt_id_aac33e6269e8908ac443bfb0712e8462:|:excerpt_id_f23f1c9ec24d0c56c84d4dea02a31e9c</data>
    </node>
    <node id="embeddings">
      <data key="d1">feature:|:variable</data>
      <data key="d2">embeddings are representations used in knowledge graphs to capture semantics and relationships of data for queries.:|:embeddings is the result of the embed_texts function, containing the text embeddings generated from the input texts.</data>
      <data key="d3">excerpt_id_aac33e6269e8908ac443bfb0712e8462:|:excerpt_id_7427e209fc13ae7cacd434f823963545</data>
    </node>
    <node id="queries">
      <data key="d1">feature:|:variable</data>
      <data key="d2">queries are requests made to knowledge graphs to retrieve information, which can be local or global in scope.:|:queries is a list of dictionaries where each dictionary contains a text query and its type, which is used for querying the SmolRag instance.</data>
      <data key="d3">excerpt_id_aac33e6269e8908ac443bfb0712e8462:|:excerpt_id_f23f1c9ec24d0c56c84d4dea02a31e9c</data>
    </node>
    <node id="Knowledge Graph Query Methods">
      <data key="d1">feature</data>
      <data key="d2">Knowledge Graph Query Methods include various techniques for retrieving information from knowledge graphs, each designed for specific query types.</data>
      <data key="d3">excerpt_id_f18a098e46a2044eb43b0d2c58ecc3e2</data>
    </node>
    <node id="Mix Query Example">
      <data key="d1">example</data>
      <data key="d2">Mix Query Example is an example showcasing the use of a query method that combines vector search and knowledge graph approaches for comprehensive results.</data>
      <data key="d3">excerpt_id_f18a098e46a2044eb43b0d2c58ecc3e2</data>
    </node>
    <node id="mix_query">
      <data key="d1">function</data>
      <data key="d2">mix_query is a function in the SmolRag class that combines vector search and knowledge graph capabilities to process queries.:|:mix_query is a method that combines different query types to generate results that utilize aspects from both local and global knowledge.</data>
      <data key="d3">excerpt_id_f23f1c9ec24d0c56c84d4dea02a31e9c:|:excerpt_id_8e62d1d1488a79e4b7909d04ec095dd6</data>
    </node>
    <node id="Mix Query Method">
      <data key="d1">function</data>
      <data key="d2">The Mix Query Method is a function that seamlessly combines the benefits of vector search and knowledge graph approaches to deliver comprehensive search results.</data>
      <data key="d3">excerpt_id_8a0247b8e1267963faeba1c255657e41</data>
    </node>
    <node id="API Endpoint">
      <data key="d1">api</data>
      <data key="d2">The API Endpoint is specified as a URL (http://localhost:8000/query) where HTTP requests can be made to interact with the function.</data>
      <data key="d3">excerpt_id_04b29d6443a2c6106c835c2ddeda4287</data>
    </node>
    <node id="Payload for Vector Search Query">
      <data key="d1">configuration</data>
      <data key="d2">The Payload for Vector Search Query consists of a structured request including 'text' and 'query_type' attributes designed for querying SmolRAG.</data>
      <data key="d3">excerpt_id_04b29d6443a2c6106c835c2ddeda4287</data>
    </node>
    <node id="Headers">
      <data key="d1">configuration</data>
      <data key="d2">Headers are configuration details included in the request, specifying content type as 'application/json' to inform the server how to process the request.</data>
      <data key="d3">excerpt_id_04b29d6443a2c6106c835c2ddeda4287</data>
    </node>
    <node id="Knowledge Graph Query Payload">
      <data key="d1">configuration</data>
      <data key="d2">The Knowledge Graph Query Payload is another structured request format that focuses on asking about entities related to document chunking.</data>
      <data key="d3">excerpt_id_04b29d6443a2c6106c835c2ddeda4287</data>
    </node>
    <node id="Mix Query Payload">
      <data key="d1">configuration</data>
      <data key="d2">The Mix Query Payload is meant to ask how SmolRAG processes and retrieves information, incorporating different query types.</data>
      <data key="d3">excerpt_id_04b29d6443a2c6106c835c2ddeda4287</data>
    </node>
    <node id="Response Object">
      <data key="d1">variable</data>
      <data key="d2">The Response Object is a variable that stores the output received from the API after a POST request is made.</data>
      <data key="d3">excerpt_id_04b29d6443a2c6106c835c2ddeda4287</data>
    </node>
    <node id="Python Requests Library">
      <data key="d1">interface</data>
      <data key="d2">The Python Requests Library is an interface used for making requests to the SmolRAG API, facilitating interaction with its functionality.</data>
      <data key="d3">excerpt_id_dc5eb8ded0d63524675f654a6fc91d2d</data>
    </node>
    <node id="source_to_doc_kv">
      <data key="d1">interface:|:variable</data>
      <data key="d2">source_to_doc_kv is an interface used to map file paths to document IDs, allowing for easy retrieval and removal of documents.:|:source_to_doc_kv is a variable that maps sources to their corresponding documents in a key-value format for easy lookup.:|:source_to_doc_kv is a variable that holds an instance of JsonKvStore, specifically designed to manage the relationship between source files and document entries for efficient data retrieval.</data>
      <data key="d3">excerpt_id_626b4e89f477fe66f0fb4bd4a4928418:|:excerpt_id_bc521abc84233a86888a005c7e9c0668:|:excerpt_id_cbbeef7dc6ce1662aa9990abd0d0a080</data>
    </node>
    <node id="document.md">
      <data key="d1">example</data>
      <data key="d2">document.md is an example file whose path can be used to retrieve the document ID and remove it from the system.</data>
      <data key="d3">excerpt_id_bc521abc84233a86888a005c7e9c0668</data>
    </node>
    <node id="Custom Chunking Strategy">
      <data key="d1">feature</data>
      <data key="d2">Custom Chunking Strategy refers to a tailored method of splitting documents into manageable parts, which allows for specific adaptation to different requirements.:|:Custom Chunking Strategy refers to a user-defined method for chunking data that can be utilized when default strategies are not suitable.</data>
      <data key="d3">excerpt_id_f27852542198490011a0063a5b735acb:|:excerpt_id_2a207df76f08f6572a56d121a4af7e96</data>
    </node>
    <node id="custom_chunking_strategy">
      <data key="d1">function</data>
      <data key="d2">custom_chunking_strategy is a function defined to apply a custom logic for chunking text into specified sizes with an overlap feature, taking parameters for the text, excerpt size, and overlap.:|:custom_chunking_strategy is a function that takes text, excerpt size, and overlap as parameters to create custom chunks from the input text.</data>
      <data key="d3">excerpt_id_b448f2ca1ed64ac27b528bb6bed67d93:|:excerpt_id_dc21ac5f2d4427c7d6691673b8a43559</data>
    </node>
    <node id="excerpt_fn">
      <data key="d1">variable:|:function</data>
      <data key="d2">excerpt_fn is a variable that can hold a function reference for processing excerpts.:|:excerpt_fn is a variable that stores the reference to the custom chunking strategy function used during the initialization of SmolRag.:|:excerpt_fn is a function used for chunking documents, with a default value of naive_overlap_excerpts.</data>
      <data key="d3">excerpt_id_b448f2ca1ed64ac27b528bb6bed67d93:|:excerpt_id_626b4e89f477fe66f0fb4bd4a4928418:|:excerpt_id_3349f76d73e7efb0528eeee4c6101216</data>
    </node>
    <node id="paragraphs">
      <data key="d1">variable</data>
      <data key="d2">paragraphs is a variable that stores the result of splitting the input text into separate paragraphs based on double line breaks.</data>
      <data key="d3">excerpt_id_b448f2ca1ed64ac27b528bb6bed67d93</data>
    </node>
    <node id="current_chunk">
      <data key="d1">variable</data>
      <data key="d2">current_chunk is a variable that holds the currently accumulating string of text chunks being created during the chunking process.</data>
      <data key="d3">excerpt_id_b448f2ca1ed64ac27b528bb6bed67d93</data>
    </node>
    <node id="Flask">
      <data key="d1">technology:|:api</data>
      <data key="d2">Flask is a web framework used to build web applications in Python, providing tools and libraries to develop and serve applications easily.:|:Flask is a lightweight web application framework for Python, used to integrate SmolRAG into web applications seamlessly.</data>
      <data key="d3">excerpt_id_32599e1b552f26ddce9129b57e04566f:|:excerpt_id_2a207df76f08f6572a56d121a4af7e96</data>
    </node>
    <node id="Flask Web Application">
      <data key="d1">configuration</data>
      <data key="d2">Flask Web Application is a framework for building web applications in Python, which can be integrated with APIs like SmolRAG.</data>
      <data key="d3">excerpt_id_a0f941d65b7b426fcf7651ac77c9eefd</data>
    </node>
    <node id="Batch Processing Example">
      <data key="d1">example</data>
      <data key="d2">Batch Processing Example illustrates a method for efficiently processing multiple queries at once.</data>
      <data key="d3">excerpt_id_a0f941d65b7b426fcf7651ac77c9eefd</data>
    </node>
    <node id="Advanced Configuration Example">
      <data key="d1">example</data>
      <data key="d2">The Advanced Configuration Example provides a guideline for experienced users on how to set up SmolRAG with custom features.</data>
      <data key="d3">excerpt_id_30a123552bb5d444811933f9adae9eba</data>
    </node>
    <node id="embeddings_path">
      <data key="d1">variable</data>
      <data key="d2">embeddings_path is a variable that defines a custom file path for storing embeddings, crucial for efficient data organization in the system.</data>
      <data key="d3">excerpt_id_bc4e6aac2a735309400738bd11c772ba</data>
    </node>
    <node id="Custom Components">
      <data key="d1">configuration</data>
      <data key="d2">Custom Components refer to the configurable elements in SmolRAG that allow users to tailor the API to their integration needs.</data>
      <data key="d3">excerpt_id_c5fc9102d2349644a3809cad72f71169</data>
    </node>
    <node id="Paths">
      <data key="d1">configuration</data>
      <data key="d2">Paths represent the defined routes within SmolRAG's configuration that direct how data is processed and retrieved.</data>
      <data key="d3">excerpt_id_c5fc9102d2349644a3809cad72f71169</data>
    </node>
    <node id="Document Querying">
      <data key="d1">function</data>
      <data key="d2">Document Querying is a function offered by SmolRAG that enables users to extract information from documents efficiently.</data>
      <data key="d3">excerpt_id_c5fc9102d2349644a3809cad72f71169</data>
    </node>
    <node id="Knowledge Extraction">
      <data key="d1">function</data>
      <data key="d2">Knowledge Extraction is a function that allows SmolRAG to pull relevant information from various data sources.</data>
      <data key="d3">excerpt_id_c5fc9102d2349644a3809cad72f71169</data>
    </node>
    <node id="Integration with Web Applications">
      <data key="d1">feature</data>
      <data key="d2">Integration with Web Applications is a feature of SmolRAG that facilitates connection and interaction with other online platforms and services.</data>
      <data key="d3">excerpt_id_c5fc9102d2349644a3809cad72f71169</data>
    </node>
    <node id="Various Use Cases">
      <data key="d1">example</data>
      <data key="d2">Various Use Cases illustrate the multiple applications of SmolRAG in real-world scenarios, emphasizing its adaptability for diverse tasks.</data>
      <data key="d3">excerpt_id_c5fc9102d2349644a3809cad72f71169</data>
    </node>
    <node id="Excerpt Embeddings">
      <data key="d1">feature:|:example</data>
      <data key="d2">Excerpt Embeddings are techniques used in SmolRAG to transform text excerpts into vector representations that capture semantic meaning effectively.:|:Excerpt embeddings are a feature of SmolRAG that transform text chunks into high-dimensional vector representations, capturing semantic meaning for improved retrieval capabilities.</data>
      <data key="d3">excerpt_id_57292a4a5cf5ae55025a640b2ddac8b8:|:excerpt_id_dc80c8904c8ce4e245e92a5bec8771ed</data>
    </node>
    <node id="OpenAI's Embedding API">
      <data key="d1">api</data>
      <data key="d2">OpenAI's embedding API is used to generate high-dimensional vector representations for the combined content of excerpt and summary.</data>
      <data key="d3">excerpt_id_dc80c8904c8ce4e245e92a5bec8771ed</data>
    </node>
    <node id="Embedding Generation Process">
      <data key="d1">function</data>
      <data key="d2">The embedding generation process involves several steps including excerpt preparation, API call to OpenAI, and vector storage.</data>
      <data key="d3">excerpt_id_dc80c8904c8ce4e245e92a5bec8771ed</data>
    </node>
    <node id="text-embedding-3-small">
      <data key="d1">api</data>
      <data key="d2">text-embedding-3-small is the default embedding model provided by the system, intended for various retrieval tasks.</data>
      <data key="d3">excerpt_id_96986ce98a0ff5dd646eb68683799151</data>
    </node>
    <node id="OpenAI embedding models">
      <data key="d1">configuration</data>
      <data key="d2">OpenAI embedding models refer to alternative models that can be configured by the system for embedding purposes.</data>
      <data key="d3">excerpt_id_96986ce98a0ff5dd646eb68683799151</data>
    </node>
    <node id="1536">
      <data key="d1">variable</data>
      <data key="d2">1536 is the default embedding dimension that represents a balance between expressiveness and efficiency for the default model.</data>
      <data key="d3">excerpt_id_96986ce98a0ff5dd646eb68683799151</data>
    </node>
    <node id="Configurable Dimensions">
      <data key="d1">feature</data>
      <data key="d2">Configurable Dimensions allows users to adjust the dimension of embeddings based on specific needs and the models used.</data>
      <data key="d3">excerpt_id_96986ce98a0ff5dd646eb68683799151</data>
    </node>
    <node id="Summary Integration">
      <data key="d1">feature</data>
      <data key="d2">Summary Integration involves including each excerpt's summary in the embedding process to enhance content representation.</data>
      <data key="d3">excerpt_id_96986ce98a0ff5dd646eb68683799151</data>
    </node>
    <node id="Contextual Awareness">
      <data key="d1">feature</data>
      <data key="d2">Contextual Awareness refers to the ability of the enhanced embeddings to capture content significance within documents.</data>
      <data key="d3">excerpt_id_96986ce98a0ff5dd646eb68683799151</data>
    </node>
    <node id="Improved Retrieval">
      <data key="d1">feature</data>
      <data key="d2">Improved Retrieval indicates that the enhanced embeddings lead to more contextually relevant search results.</data>
      <data key="d3">excerpt_id_96986ce98a0ff5dd646eb68683799151</data>
    </node>
    <node id="Coherence Preservation">
      <data key="d1">feature</data>
      <data key="d2">Coherence Preservation helps maintain narrative flow and logical connections in the embedded content.</data>
      <data key="d3">excerpt_id_96986ce98a0ff5dd646eb68683799151</data>
    </node>
    <node id="Metadata Association">
      <data key="d1">feature</data>
      <data key="d2">Metadata Association involves linking each embedding with metadata such as document ID, excerpt ID, and timestamp for contextual reference.</data>
      <data key="d3">excerpt_id_4b68104ae9ba6f2fafa3669fefa1839b</data>
    </node>
    <node id="Indexing">
      <data key="d1">feature:|:function</data>
      <data key="d2">Indexing is the process that supports efficient similarity search by organizing the embeddings for quick access and retrieval.:|:Indexing refers to the implementation of approximate nearest neighbor (ANN) indexing to improve search speed and performance during vector searches.</data>
      <data key="d3">excerpt_id_773dc5e90c361202bafd4c70106e3c4a:|:excerpt_id_4b68104ae9ba6f2fafa3669fefa1839b</data>
    </node>
    <node id="Similarity Search Mechanisms">
      <data key="d1">feature</data>
      <data key="d2">Similarity Search Mechanisms outline how SmolRAG uses embedding-based techniques to find relevant information based on semantic meaning.</data>
      <data key="d3">excerpt_id_4b68104ae9ba6f2fafa3669fefa1839b</data>
    </node>
    <node id="Similarity Computation">
      <data key="d1">function</data>
      <data key="d2">Similarity Computation is the method of comparing query embeddings to all excerpt embeddings using cosine similarity to determine relevance.</data>
      <data key="d3">excerpt_id_4b68104ae9ba6f2fafa3669fefa1839b</data>
    </node>
    <node id="Entity Embeddings">
      <data key="d1">feature</data>
      <data key="d2">Entity Embeddings are a method of representing entities based on their names and descriptions, facilitating their identification and processing within the system.:|:Entity Embeddings are generated for each entity based on their name and description for effective representation in the system.</data>
      <data key="d3">excerpt_id_4869439483a23885f8fdf7f5e9c7039f:|:excerpt_id_4b68104ae9ba6f2fafa3669fefa1839b</data>
    </node>
    <node id="Relationship Embeddings">
      <data key="d1">feature</data>
      <data key="d2">Relationship Embeddings represent relationships based on keywords, sources, targets, and descriptions, allowing for better semantic understanding and processing of connections.:|:Relationship Embeddings capture the relationships between entities based on their descriptions and categorized keywords.</data>
      <data key="d3">excerpt_id_4869439483a23885f8fdf7f5e9c7039f:|:excerpt_id_4b68104ae9ba6f2fafa3669fefa1839b</data>
    </node>
    <node id="Separate Storage">
      <data key="d1">configuration</data>
      <data key="d2">Separate Storage refers to the practice of keeping entity and relationship embeddings distinct from excerpt embeddings for better organization.</data>
      <data key="d3">excerpt_id_4b68104ae9ba6f2fafa3669fefa1839b</data>
    </node>
    <node id="Cross-Referencing">
      <data key="d1">function</data>
      <data key="d2">Cross-Referencing is the capability to maintain links between the graph structure and embeddings, ensuring cohesive data retrieval and analysis.:|:Cross-Referencing is the system's method of maintaining connections between entities, relationships, and their originating excerpts.</data>
      <data key="d3">excerpt_id_4869439483a23885f8fdf7f5e9c7039f:|:excerpt_id_4b68104ae9ba6f2fafa3669fefa1839b</data>
    </node>
    <node id="High-Quality Models">
      <data key="d1">feature</data>
      <data key="d2">High-Quality Models feature state-of-the-art embedding models from OpenAI, which improve the performance and quality of embeddings in SmolRAG.</data>
      <data key="d3">excerpt_id_0758031048f3438910733878e3670905</data>
    </node>
    <node id="Contextual Enhancement">
      <data key="d1">feature</data>
      <data key="d2">Contextual Enhancement is a feature that improves embedding quality by including summaries, thus adding context to the embeddings.</data>
      <data key="d3">excerpt_id_0758031048f3438910733878e3670905</data>
    </node>
    <node id="Evaluation Framework">
      <data key="d1">feature</data>
      <data key="d2">Evaluation Framework provides tools for assessing retrieval performance on test queries, ensuring the effectiveness of the embeddings.</data>
      <data key="d3">excerpt_id_0758031048f3438910733878e3670905</data>
    </node>
    <node id="Continuous Improvement">
      <data key="d1">feature</data>
      <data key="d2">Continuous Improvement is a feature that allows SmolRAG to incorporate new embedding models easily as they become available to enhance performance.</data>
      <data key="d3">excerpt_id_0758031048f3438910733878e3670905</data>
    </node>
    <node id="Semantic Drift">
      <data key="d1">feature:|:variable</data>
      <data key="d2">Semantic Drift refers to the challenge of representing very long or complex documents with fixed-length vectors, which may lead to loss of important information.:|:Semantic Drift refers to the retrieval of excerpts that are semantically similar, yet not directly relevant.</data>
      <data key="d3">excerpt_id_57292a4a5cf5ae55025a640b2ddac8b8:|:excerpt_id_fd5970a76cf7d27c6af5388563268de1</data>
    </node>
    <node id="Domain Specificity">
      <data key="d1">feature:|:limitation</data>
      <data key="d2">Domain Specificity points out that the efficacy of extraction and representation may vary depending on the specific domain of application.:|:Domain Specificity is the limitation where general-purpose embedding models may fail to capture nuances specific to particular domains.</data>
      <data key="d3">excerpt_id_57292a4a5cf5ae55025a640b2ddac8b8:|:excerpt_id_c911a970aeaf57b302869e9d148ac6c8</data>
    </node>
    <node id="Language Limitations">
      <data key="d1">feature</data>
      <data key="d2">Language Limitations denote the variability in performance of embedding models across different languages and technical fields.</data>
      <data key="d3">excerpt_id_57292a4a5cf5ae55025a640b2ddac8b8</data>
    </node>
    <node id="Computational Cost">
      <data key="d1">feature</data>
      <data key="d2">Computational Cost highlights the significant resources required for generating and storing embeddings for large document collections.</data>
      <data key="d3">excerpt_id_57292a4a5cf5ae55025a640b2ddac8b8</data>
    </node>
    <node id="API Dependency">
      <data key="d1">feature</data>
      <data key="d2">API Dependency is the risk introduced by reliance on external embedding APIs, which can lead to potential points of failure in the system.</data>
      <data key="d3">excerpt_id_57292a4a5cf5ae55025a640b2ddac8b8</data>
    </node>
    <node id="Model Upgrades">
      <data key="d1">function</data>
      <data key="d2">Model Upgrades involve supporting newer and more advanced embedding models as they are developed, ensuring continuous improvement.</data>
      <data key="d3">excerpt_id_57292a4a5cf5ae55025a640b2ddac8b8</data>
    </node>
    <node id="Local Embeddings">
      <data key="d1">function</data>
      <data key="d2">Local Embeddings refer to the potential integration with local models to reduce reliance on APIs, thereby mitigating risks.</data>
      <data key="d3">excerpt_id_57292a4a5cf5ae55025a640b2ddac8b8</data>
    </node>
    <node id="Multi-Modal Support">
      <data key="d1">function</data>
      <data key="d2">Multi-Modal Support indicates the possibility of extending the system to handle embeddings for multiple types of content, including images.</data>
      <data key="d3">excerpt_id_57292a4a5cf5ae55025a640b2ddac8b8</data>
    </node>
    <node id="Hierarchical Embeddings">
      <data key="d1">function</data>
      <data key="d2">Hierarchical Embeddings explore methods to better manage long documents by using layered approaches to represent information.</data>
      <data key="d3">excerpt_id_57292a4a5cf5ae55025a640b2ddac8b8</data>
    </node>
    <node id="Fine-Tuning">
      <data key="d1">function</data>
      <data key="d2">Fine-Tuning suggests that the system may support customized embedding models that are fine-tuned for specific use cases or domains.</data>
      <data key="d3">excerpt_id_57292a4a5cf5ae55025a640b2ddac8b8</data>
    </node>
    <node id="Retrieval Capabilities">
      <data key="d1">example</data>
      <data key="d2">Retrieval Capabilities refer to SmolRAG's ability to accurately extract relevant information based on the embeddings created from texts.</data>
      <data key="d3">excerpt_id_57292a4a5cf5ae55025a640b2ddac8b8</data>
    </node>
    <node id="High-quality Embeddings">
      <data key="d1">feature</data>
      <data key="d2">High-quality Embeddings are used in SmolRAG to enhance the semantic understanding of the data, improving retrieval accuracy.</data>
      <data key="d3">excerpt_id_2a3a2def38291bcc747a40723d311218</data>
    </node>
    <node id="Sophisticated Similarity Search Mechanisms">
      <data key="d1">feature</data>
      <data key="d2">Sophisticated Similarity Search Mechanisms are integral to SmolRAG's operation, allowing it to match queries with relevant information even when wording differs.</data>
      <data key="d3">excerpt_id_2a3a2def38291bcc747a40723d311218</data>
    </node>
    <node id="RAG Approach">
      <data key="d1">configuration</data>
      <data key="d2">RAG Approach is a configuration used by SmolRAG that focuses on enabling semantic understanding for improved information retrieval.</data>
      <data key="d3">excerpt_id_2a3a2def38291bcc747a40723d311218</data>
    </node>
    <node id="COMPLETION_MODEL">
      <data key="d1">configuration:|:variable</data>
      <data key="d2">COMPLETION_MODEL is a constant that specifies the default OpenAI model for generating text completions.:|:COMPLETION_MODEL is an optional environment variable that defines the OpenAI model used for generating text completions.:|:COMPLETION_MODEL refers to the configuration setting for the language model used for text completions, with a default of gpt-3.5-turbo.:|:COMPLETION_MODEL refers to a variable used to specify the model being utilized for generating completions, in this case, gpt-4.</data>
      <data key="d3">excerpt_id_d256b3e352fdb14aff55223ceb48a24a:|:excerpt_id_a04d28950802508f2641ac651fc3089f:|:excerpt_id_349e9f1cbc2638830c72cc4737f1ee78:|:excerpt_id_18b7236af033065c11ace3034fa8761a</data>
    </node>
    <node id="EMBEDDING_MODEL">
      <data key="d1">configuration:|:variable</data>
      <data key="d2">EMBEDDING_MODEL indicates a variable that specifies the model used for generating embeddings, specifically text-embedding-3-large.:|:EMBEDDING_MODEL refers to the configuration setting for the model used for text embeddings, with a default of text-embedding-3-small.:|:EMBEDDING_MODEL is an optional environment variable that specifies the OpenAI model used for creating embeddings for text.:|:EMBEDDING_MODEL is a constant that specifies the default OpenAI model for generating text embeddings.</data>
      <data key="d3">excerpt_id_d256b3e352fdb14aff55223ceb48a24a:|:excerpt_id_a04d28950802508f2641ac651fc3089f:|:excerpt_id_349e9f1cbc2638830c72cc4737f1ee78:|:excerpt_id_18b7236af033065c11ace3034fa8761a</data>
    </node>
    <node id="definitions.py">
      <data key="d1">configuration</data>
      <data key="d2">definitions.py is a configuration file in which the directory structure for the SmolRAG application is defined and can be customized according to user needs.:|:definitions.py contains constants and path definitions that are essential for the operation of SmolRAG.:|:A file containing constants and path definitions used throughout the system to streamline access to resources.</data>
      <data key="d3">excerpt_id_900d5e18a5cfe07ed9e4aa24282973e4:|:excerpt_id_f1fae642defef59936a03b705fb37221:|:excerpt_id_b0d4e3abf98287ec9c0b65e83c50a4f5</data>
    </node>
    <node id="embeddings_db">
      <data key="d1">variable</data>
      <data key="d2">embeddings_db is a variable that stores the database of embeddings used for locating data representations.:|:embeddings_db is a variable referencing a NanoVectorStore instance set to manage embeddings stored in 'custom/path/to/embeddings.db' with 1536 dimensions.</data>
      <data key="d3">excerpt_id_1886dbfbe4d28a804d7c671e8aba5c2c:|:excerpt_id_626b4e89f477fe66f0fb4bd4a4928418</data>
    </node>
    <node id="entities_db">
      <data key="d1">variable</data>
      <data key="d2">entities_db is a variable referencing a NanoVectorStore instance for managing entity data, located at 'custom/path/to/entities.db' and also with 1536 dimensions.:|:entities_db is a variable holding the database where entities are stored, aiding in reference and retrieval.</data>
      <data key="d3">excerpt_id_1886dbfbe4d28a804d7c671e8aba5c2c:|:excerpt_id_626b4e89f477fe66f0fb4bd4a4928418</data>
    </node>
    <node id="relationships_db">
      <data key="d1">variable</data>
      <data key="d2">relationships_db is a variable representing a NanoVectorStore instance for handling relationships, stored in 'custom/path/to/relationships.db' with 1536 dimensions.:|:relationships_db is a variable that stores relationships between entities, essential for understanding connections.</data>
      <data key="d3">excerpt_id_1886dbfbe4d28a804d7c671e8aba5c2c:|:excerpt_id_626b4e89f477fe66f0fb4bd4a4928418</data>
    </node>
    <node id="doc_to_source_kv">
      <data key="d1">variable</data>
      <data key="d2">doc_to_source_kv is a variable that maps documents back to their sources in a key-value format for reverse lookup.:|:doc_to_source_kv is a variable that holds an instance of JsonKvStore, aimed at mapping document entries back to their corresponding source files.</data>
      <data key="d3">excerpt_id_626b4e89f477fe66f0fb4bd4a4928418:|:excerpt_id_cbbeef7dc6ce1662aa9990abd0d0a080</data>
    </node>
    <node id="doc_to_excerpt_kv">
      <data key="d1">variable</data>
      <data key="d2">doc_to_excerpt_kv is a variable that holds mappings between documents and their respective excerpts.:|:doc_to_excerpt_kv is a variable containing a JsonKvStore instance that applies to managing excerpts associated with documents, enhancing data organization.</data>
      <data key="d3">excerpt_id_626b4e89f477fe66f0fb4bd4a4928418:|:excerpt_id_cbbeef7dc6ce1662aa9990abd0d0a080</data>
    </node>
    <node id="excerpt_kv">
      <data key="d1">variable</data>
      <data key="d2">excerpt_kv is a variable that represents mappings or collections of excerpts.:|:excerpt_kv is a variable that stores an instance of JsonKvStore, used for handling excerpts of documents, allowing for quick access and retrieval.</data>
      <data key="d3">excerpt_id_626b4e89f477fe66f0fb4bd4a4928418:|:excerpt_id_cbbeef7dc6ce1662aa9990abd0d0a080</data>
    </node>
    <node id="query_cache_kv">
      <data key="d1">variable</data>
      <data key="d2">query_cache_kv is a variable that defines the key-value store for caching query results.:|:query_cache_kv is a variable for caching queries to optimize performance and reduce load time.</data>
      <data key="d3">excerpt_id_626b4e89f477fe66f0fb4bd4a4928418:|:excerpt_id_37be0a25cbf8d078251a96284455700d</data>
    </node>
    <node id="embedding_cache_kv">
      <data key="d1">variable</data>
      <data key="d2">embedding_cache_kv is a variable that stores cached embeddings to speed up access to previously computed values.:|:embedding_cache_kv is a variable that defines the key-value store for caching embedding results.</data>
      <data key="d3">excerpt_id_626b4e89f477fe66f0fb4bd4a4928418:|:excerpt_id_37be0a25cbf8d078251a96284455700d</data>
    </node>
    <node id="graph_db">
      <data key="d1">variable</data>
      <data key="d2">graph_db is a variable that holds the instance of NetworkXGraphStore, serving as a connection to a specific graph database.:|:graph_db is a variable that holds a graph database for representing entities and their relationships.</data>
      <data key="d3">excerpt_id_626b4e89f477fe66f0fb4bd4a4928418:|:excerpt_id_0f09ea93b0147ae060748c2d7d541cd0</data>
    </node>
    <node id="naive_overlap_excerpts">
      <data key="d1">function</data>
      <data key="d2">naive_overlap_excerpts is a built-in chunking function that splits text at regular intervals with overlap.:|:naive_overlap_excerpts is a simple chunking strategy that splits text at regular intervals while incorporating overlap between chunks.</data>
      <data key="d3">excerpt_id_2bc6d678c54740db5acd63566371648d:|:excerpt_id_3349f76d73e7efb0528eeee4c6101216</data>
    </node>
    <node id="Your Custom Function">
      <data key="d1">function</data>
      <data key="d2">Your Custom Function is designed to accept three parameters: `text`, `excerpt_size`, and `overlap`, returning a list of text chunks.</data>
      <data key="d3">excerpt_id_d256b3e352fdb14aff55223ceb48a24a</data>
    </node>
    <node id="completion_model">
      <data key="d1">variable</data>
      <data key="d2">completion_model is a variable that specifies the model used for generating text completions in the OpenAiLlm API.</data>
      <data key="d3">excerpt_id_37be0a25cbf8d078251a96284455700d</data>
    </node>
    <node id="embedding_model">
      <data key="d1">variable</data>
      <data key="d2">embedding_model is a variable that indicates which model is used for generating embeddings in the OpenAiLlm API.</data>
      <data key="d3">excerpt_id_37be0a25cbf8d078251a96284455700d</data>
    </node>
    <node id="Vector Store Configuration">
      <data key="d1">configuration</data>
      <data key="d2">Vector Store Configuration refers to the settings and parameters that dictate how embeddings are stored and retrieved in the NanoVectorStore.</data>
      <data key="d3">excerpt_id_8c0374f7cf68e5fd2e81a44aabeb6e31</data>
    </node>
    <node id="Vector Stores">
      <data key="d1">variable</data>
      <data key="d2">Vector Stores refers to storage systems designed to hold vector data, allowing for customization of their location and dimensionality.</data>
      <data key="d3">excerpt_id_11ec8cca8bde6a6c952520bf8d71db92</data>
    </node>
    <node id="Knowledge Graph Configuration">
      <data key="d1">configuration</data>
      <data key="d2">Knowledge Graph Configuration involves setting up the framework for storing entities and relationships derived from various documents, utilizing the SmolRAG tool.</data>
      <data key="d3">excerpt_id_11ec8cca8bde6a6c952520bf8d71db92</data>
    </node>
    <node id="Custom Graph Store">
      <data key="d1">function</data>
      <data key="d2">Custom Graph Store refers to a specific configuration option within the knowledge graph that allows users to customize how entities and relationships are stored.</data>
      <data key="d3">excerpt_id_11ec8cca8bde6a6c952520bf8d71db92</data>
    </node>
    <node id="Graph Extraction Parameters">
      <data key="d1">configuration</data>
      <data key="d2">Graph Extraction Parameters are settings that guide the extraction process of entities and relationships within the knowledge graph.</data>
      <data key="d3">excerpt_id_48308b4707045e24b9b6c640c0048cbd</data>
    </node>
    <node id="prompts.py">
      <data key="d1">configuration:|:variable:|:function</data>
      <data key="d2">prompts.py is the file containing crafted prompts for various operations.:|:prompts.py includes predefined system prompts utilized in various operations of the SmolRAG system.:|:prompts.py is a file that contains the prompts used in the entity and relationship extraction process, allowing customization.</data>
      <data key="d3">excerpt_id_8080c1c6669176557a9fdbafc319a94c:|:excerpt_id_f1fae642defef59936a03b705fb37221:|:excerpt_id_48308b4707045e24b9b6c640c0048cbd</data>
    </node>
    <node id="Key-Value Store Configuration">
      <data key="d1">configuration</data>
      <data key="d2">Key-Value Store Configuration refers to the setup of various key-value stores used for handling metadata and caching.</data>
      <data key="d3">excerpt_id_48308b4707045e24b9b6c640c0048cbd</data>
    </node>
    <node id="Custom Key-Value Stores">
      <data key="d1">feature</data>
      <data key="d2">Custom Key-Value Stores are specific implementations that allow for the customization of how metadata, mappings, and caching are managed.</data>
      <data key="d3">excerpt_id_48308b4707045e24b9b6c640c0048cbd</data>
    </node>
    <node id="query()">
      <data key="d1">function</data>
      <data key="d2">query() is a function in SmolRAG that executes a vector search query as part of its query processing capabilities.</data>
      <data key="d3">excerpt_id_c289d1319a7b3fb8268c5d19dc2d9f0b</data>
    </node>
    <node id="local_kg_query()">
      <data key="d1">function</data>
      <data key="d2">local_kg_query() is a function in SmolRAG that facilitates querying a local knowledge graph.</data>
      <data key="d3">excerpt_id_c289d1319a7b3fb8268c5d19dc2d9f0b</data>
    </node>
    <node id="global_kg_query()">
      <data key="d1">function</data>
      <data key="d2">global_kg_query() is a function in SmolRAG designed to query a global knowledge graph.</data>
      <data key="d3">excerpt_id_c289d1319a7b3fb8268c5d19dc2d9f0b</data>
    </node>
    <node id="hybrid_kg_query()">
      <data key="d1">function</data>
      <data key="d2">hybrid_kg_query() is a function in SmolRAG that allows for querying both local and global knowledge graphs simultaneously.</data>
      <data key="d3">excerpt_id_c289d1319a7b3fb8268c5d19dc2d9f0b</data>
    </node>
    <node id="mix_query()">
      <data key="d1">function</data>
      <data key="d2">mix_query() combines vector search and knowledge graph querying within SmolRAG.</data>
      <data key="d3">excerpt_id_c289d1319a7b3fb8268c5d19dc2d9f0b</data>
    </node>
    <node id="Query Configuration">
      <data key="d1">feature</data>
      <data key="d2">Query Configuration refers to the various settings and options available for customizing how queries are processed in SmolRAG.</data>
      <data key="d3">excerpt_id_c289d1319a7b3fb8268c5d19dc2d9f0b</data>
    </node>
    <node id="System Prompts">
      <data key="d1">feature</data>
      <data key="d2">System Prompts guide the query processing in SmolRAG and can be modified for customization.</data>
      <data key="d3">excerpt_id_c289d1319a7b3fb8268c5d19dc2d9f0b</data>
    </node>
    <node id="Log Level">
      <data key="d1">variable</data>
      <data key="d2">Log Level is a variable within SmolRAG that determines the severity level of logs generated by the system.</data>
      <data key="d3">excerpt_id_c289d1319a7b3fb8268c5d19dc2d9f0b</data>
    </node>
    <node id="app/logger.py">
      <data key="d1">configuration</data>
      <data key="d2">app/logger.py is a configuration file in SmolRAG where the log level can be set for the logging system.:|:app/logger.py is a script file that can be modified for advanced logging configurations, allowing customization of log management.</data>
      <data key="d3">excerpt_id_8ae4948b96c52786e166f40ab294103d:|:excerpt_id_c289d1319a7b3fb8268c5d19dc2d9f0b</data>
    </node>
    <node id="logging">
      <data key="d1">feature</data>
      <data key="d2">logging is a feature that provides a way to configure levels of message recording and control the verbosity of logs.</data>
      <data key="d3">excerpt_id_d2c1e8835d374f0d3253b7ad5939d44b</data>
    </node>
    <node id="Log File">
      <data key="d1">configuration</data>
      <data key="d2">The Log File is a record generated to store events or errors, specified during the logger setup using the set_logger function.</data>
      <data key="d3">excerpt_id_3fd1a58eeaa912433874e73ee5da0842</data>
    </node>
    <node id="set_logger()">
      <data key="d1">function</data>
      <data key="d2">set_logger() is a function that initializes the logger and specifies the log file to be used for logging events.:|:set_logger() is a function within the logging system that initializes logging with a specified output file.</data>
      <data key="d3">excerpt_id_3fd1a58eeaa912433874e73ee5da0842:|:excerpt_id_18b7236af033065c11ace3034fa8761a</data>
    </node>
    <node id="custom_log.log">
      <data key="d1">variable</data>
      <data key="d2">custom_log.log is the name of the log file where logging output will be written, indicating the customization of the logging setup.</data>
      <data key="d3">excerpt_id_fb156a74395538c246ac8cbb120b84be</data>
    </node>
    <node id="Custom Logging">
      <data key="d1">feature</data>
      <data key="d2">Custom Logging refers to the ability to modify logging configurations and implement a unique logging system within the application.</data>
      <data key="d3">excerpt_id_8ae4948b96c52786e166f40ab294103d</data>
    </node>
    <node id="main.py">
      <data key="d1">configuration:|:function</data>
      <data key="d2">main.py defines the API endpoints and handles requests for the SmolRAG system.:|:main.py is the main file in the FastAPI application structure where the application setup and configuration takes place.</data>
      <data key="d3">excerpt_id_f1fae642defef59936a03b705fb37221:|:excerpt_id_07384bef2559980ac5dc719b7a30dc2d</data>
    </node>
    <node id="middleware">
      <data key="d1">feature</data>
      <data key="d2">Middleware is a feature in FastAPI that allows for the execution of code before and after the request is processed, useful for various needs such as logging, authentication, and more.</data>
      <data key="d3">excerpt_id_07384bef2559980ac5dc719b7a30dc2d</data>
    </node>
    <node id="error handlers">
      <data key="d1">feature</data>
      <data key="d2">Error handlers in FastAPI are used to customize how the application responds to different types of errors, allowing for better error management and user experience.</data>
      <data key="d3">excerpt_id_07384bef2559980ac5dc719b7a30dc2d</data>
    </node>
    <node id="allow_credentials">
      <data key="d1">configuration</data>
      <data key="d2">allow_credentials is a configuration setting that allows browsers to include credentials like cookies in cross-origin requests.</data>
      <data key="d3">excerpt_id_db532a32078ae304c7d23c29df7effc8</data>
    </node>
    <node id="Query Endpoint Configuration">
      <data key="d1">configuration</data>
      <data key="d2">The Query Endpoint Configuration specifies how the endpoint in 'api/main.py' can be customized, allowing for additional parameters and validation.</data>
      <data key="d3">excerpt_id_bd16dc4528b3a8fec2746d31d98360e2</data>
    </node>
    <node id="api/main.py">
      <data key="d1">api</data>
      <data key="d2">The 'api/main.py' file serves as the main script for the API, enabling the customization of the query endpoint.</data>
      <data key="d3">excerpt_id_bd16dc4528b3a8fec2746d31d98360e2</data>
    </node>
    <node id="max_results">
      <data key="d1">variable</data>
      <data key="d2">The 'max_results' variable within QueryRequest is an integer that indicates the maximum number of query results to return, defaulting to 5.</data>
      <data key="d3">excerpt_id_24d76bde5328dc16ace5722740c74eb7</data>
    </node>
    <node id="Field">
      <data key="d1">feature</data>
      <data key="d2">Field is a function from Pydantic that allows the specification of metadata about model attributes, such as descriptions and default values.</data>
      <data key="d3">excerpt_id_24d76bde5328dc16ace5722740c74eb7</data>
    </node>
    <node id="Core Classes">
      <data key="d1">configuration</data>
      <data key="d2">Core Classes are the foundational components of SmolRAG that can be customized for advanced usage.</data>
      <data key="d3">excerpt_id_fa8eff5daa3ccebd7d707f836f2eef0c</data>
    </node>
    <node id="custom_query">
      <data key="d1">function</data>
      <data key="d2">custom_query is a method within the CustomSmolRag class specifically designed to implement a custom approach to querying.</data>
      <data key="d3">excerpt_id_19166492bd9b3932cb606850e071caa4</data>
    </node>
    <node id="Custom LLM Interface">
      <data key="d1">interface</data>
      <data key="d2">Custom LLM Interface refers to a user-defined version of the core interface component designed for interacting with language models.</data>
      <data key="d3">excerpt_id_da7254efa9566860b06caf2d81ce9bf9</data>
    </node>
    <node id="Custom Vector Store">
      <data key="d1">interface</data>
      <data key="d2">Custom Vector Store is a user-implemented storage system for vectors, allowing for tailored data retrieval strategies.</data>
      <data key="d3">excerpt_id_da7254efa9566860b06caf2d81ce9bf9</data>
    </node>
    <node id="Custom Knowledge Graph Store">
      <data key="d1">interface</data>
      <data key="d2">Custom Knowledge Graph Store is a personalized storage solution for knowledge graphs, adapting to specific use cases.</data>
      <data key="d3">excerpt_id_da7254efa9566860b06caf2d81ce9bf9</data>
    </node>
    <node id="Custom Key-Value Store">
      <data key="d1">interface</data>
      <data key="d2">Custom Key-Value Store provides a personalized method for storing and retrieving key-value pairs, enhancing data management.</data>
      <data key="d3">excerpt_id_da7254efa9566860b06caf2d81ce9bf9</data>
    </node>
    <node id="Custom Chunking Strategies">
      <data key="d1">function</data>
      <data key="d2">Custom Chunking Strategies involve user-defined methods for dividing documents into manageable segments based on particular attributes.</data>
      <data key="d3">excerpt_id_da7254efa9566860b06caf2d81ce9bf9</data>
    </node>
    <node id="Resource Efficiency">
      <data key="d1">configuration</data>
      <data key="d2">Resource Efficiency involves practices to manage and optimize resource usage effectively while using the SmolRAG API.</data>
      <data key="d3">excerpt_id_da7254efa9566860b06caf2d81ce9bf9</data>
    </node>
    <node id="Customization Strategy">
      <data key="d1">configuration</data>
      <data key="d2">Customization Strategy refers to the approach taken to adjust and document the configurations of the SmolRAG API according to user needs.</data>
      <data key="d3">excerpt_id_da7254efa9566860b06caf2d81ce9bf9</data>
    </node>
    <node id="SmolRAG Document Ingestion Process">
      <data key="d1">feature</data>
      <data key="d2">The SmolRAG Document Ingestion Process is a critical component of the SmolRAG pipeline that transforms raw documents into a format suitable for querying and analysis.</data>
      <data key="d3">excerpt_id_f2b7fbadfa83b8b0ea536a4b85fef7d6</data>
    </node>
    <node id="&quot;app/input_docs/">
      <data key="d1">directory</data>
      <data key="d2">The directory 'app/input_docs/' is where SmolRAG ingests documents from, supporting various text-based formats.</data>
      <data key="d3">excerpt_id_f2b7fbadfa83b8b0ea536a4b85fef7d6</data>
    </node>
    <node id="Markdown files">
      <data key="d1">configuration</data>
      <data key="d2">Markdown files are one of the key supported text-based formats that SmolRAG can ingest, alongside plain text.</data>
      <data key="d3">excerpt_id_f2b7fbadfa83b8b0ea536a4b85fef7d6</data>
    </node>
    <node id="supported formats">
      <data key="d1">configuration</data>
      <data key="d2">Supported formats refer to the file types that SmolRAG can ingest, specifically plain text (.txt) and Markdown (.md) files.</data>
      <data key="d3">excerpt_id_f2b7fbadfa83b8b0ea536a4b85fef7d6</data>
    </node>
    <node id="File Identification">
      <data key="d1">feature</data>
      <data key="d2">File Identification is a feature ensuring that each file in the ingestion process is identified by its path and content hash for change detection.</data>
      <data key="d3">excerpt_id_f2b7fbadfa83b8b0ea536a4b85fef7d6</data>
    </node>
    <node id="Metadata Extraction">
      <data key="d1">feature</data>
      <data key="d2">Metadata Extraction preserves important file paths and other metadata during the ingestion process for context and reference.</data>
      <data key="d3">excerpt_id_f2b7fbadfa83b8b0ea536a4b85fef7d6</data>
    </node>
    <node id="Default Chunking">
      <data key="d1">function</data>
      <data key="d2">Default Chunking is a function that splits documents into overlapping chunks of approximately 2,000 characters to facilitate processing.</data>
      <data key="d3">excerpt_id_2bc6d678c54740db5acd63566371648d</data>
    </node>
    <node id="Overlap Mechanism">
      <data key="d1">feature</data>
      <data key="d2">Overlap Mechanism allows for an overlap of 200 characters between chunks to ensure context continuity throughout the document.</data>
      <data key="d3">excerpt_id_2bc6d678c54740db5acd63566371648d</data>
    </node>
    <node id="Code Block Preservation">
      <data key="d1">feature</data>
      <data key="d2">Code Block Preservation is a feature that keeps Markdown code blocks intact during the chunking process to maintain their meaning and structure.</data>
      <data key="d3">excerpt_id_2bc6d678c54740db5acd63566371648d</data>
    </node>
    <node id="Paragraph Awareness">
      <data key="d1">feature</data>
      <data key="d2">Paragraph Awareness refers to the ability to segment text at paragraph boundaries when possible, enhancing the flow of the document.</data>
      <data key="d3">excerpt_id_2bc6d678c54740db5acd63566371648d</data>
    </node>
    <node id="Sentence Boundaries">
      <data key="d1">feature</data>
      <data key="d2">Sentence Boundaries pertains to dividing long paragraphs further at sentence boundaries to avoid splitting words and maintain readability.</data>
      <data key="d3">excerpt_id_2bc6d678c54740db5acd63566371648d</data>
    </node>
    <node id="Contextual Summarization">
      <data key="d1">feature</data>
      <data key="d2">Contextual Summarization enhances each chunk by summarizing it with the entire document as context to maintain quality in content understanding.</data>
      <data key="d3">excerpt_id_2bc6d678c54740db5acd63566371648d</data>
    </node>
    <node id="Summary Purpose">
      <data key="d1">variable</data>
      <data key="d2">Summary Purpose defines the objective of creating summaries to help preserve the relationship between excerpts and broader documents.</data>
      <data key="d3">excerpt_id_2bc6d678c54740db5acd63566371648d</data>
    </node>
    <node id="LLM-Based Approach">
      <data key="d1">configuration</data>
      <data key="d2">LLM-Based Approach utilizes language models like OpenAI's to generate summaries using carefully crafted prompts to ensure quality.</data>
      <data key="d3">excerpt_id_2bc6d678c54740db5acd63566371648d</data>
    </node>
    <node id="Fallback Mechanism">
      <data key="d1">configuration</data>
      <data key="d2">Fallback Mechanism is a strategy used to ensure that if summarization fails, a default summary is employed to maintain processing continuity.</data>
      <data key="d3">excerpt_id_2bc6d678c54740db5acd63566371648d</data>
    </node>
    <node id="Vector Embedding Generation">
      <data key="d1">function</data>
      <data key="d2">Vector Embedding Generation involves creating vector embeddings for each excerpt to enable semantic search capabilities.</data>
      <data key="d3">excerpt_id_2bc6d678c54740db5acd63566371648d</data>
    </node>
    <node id="OpenAI's Embedding Models">
      <data key="d1">api</data>
      <data key="d2">OpenAI's embedding models, such as text-embedding-3-small, are used for generating vectors from text, forming the basis for semantic search capabilities.</data>
      <data key="d3">excerpt_id_2000936bfa184ddaaecfee9d1339bf97</data>
    </node>
    <node id="Dimensionality">
      <data key="d1">configuration</data>
      <data key="d2">Dimensionality refers to the number of dimensions in the embedding vectors, with a default of 1536, which can be customized based on requirements.</data>
      <data key="d3">excerpt_id_2000936bfa184ddaaecfee9d1339bf97</data>
    </node>
    <node id="Metadata">
      <data key="d1">variable</data>
      <data key="d2">Metadata includes document ID, excerpt ID, and timestamp, and is associated with each embedding for information tracking and retrieval.</data>
      <data key="d3">excerpt_id_2000936bfa184ddaaecfee9d1339bf97</data>
    </node>
    <node id="Entity Extraction">
      <data key="d1">feature:|:function</data>
      <data key="d2">Entity Extraction retrieves entities that are linked through the top-ranked relationships identified in the previous steps.:|:Entity Extraction is a function that utilizes LLM-based analysis to identify key entities in document excerpts.:|:Entity Extraction is a feature of SmolRAG that identifies key concepts, terms, and names within the text excerpts to build a knowledge graph.:|:Entity Extraction is the process of identifying and extracting entities and relationships from document chunks, crucial for data analysis.:|:Entity Extraction is the process of identifying and extracting important elements from the content, also dependent on LLM API calls.</data>
      <data key="d3">excerpt_id_410400e8efb55e29eb563d4e92c76993:|:excerpt_id_50024a3e54a6af26f2a3993aa6d9e612:|:excerpt_id_8ec1e476798fb46038b3e8a5c5907ec5:|:excerpt_id_bb83e035cbe37d34b4684d22bfa2ceb5:|:excerpt_id_2000936bfa184ddaaecfee9d1339bf97</data>
    </node>
    <node id="Relationship Identification">
      <data key="d1">feature</data>
      <data key="d2">Relationship Identification is a feature that extracts connections between entities, providing descriptions and weights to understand their interactions.</data>
      <data key="d3">excerpt_id_2000936bfa184ddaaecfee9d1339bf97</data>
    </node>
    <node id="LLM-Based Extraction">
      <data key="d1">function</data>
      <data key="d2">LLM-Based Extraction utilizes OpenAI's language models to analyze text for identifying relevant entities and relationships for knowledge graph creation.</data>
      <data key="d3">excerpt_id_2000936bfa184ddaaecfee9d1339bf97</data>
    </node>
    <node id="Structured Format">
      <data key="d1">example</data>
      <data key="d2">Structured Format refers to the method of representing extracted information in a consistent manner for processing and querying.</data>
      <data key="d3">excerpt_id_2000936bfa184ddaaecfee9d1339bf97</data>
    </node>
    <node id="Change Detection Mechanism">
      <data key="d1">feature</data>
      <data key="d2">Change Detection Mechanism in SmolRAG ensures that the information represented in the knowledge graph is kept current and relevant by detecting updates.:|:The Change Detection Mechanism is a feature that keeps the information current within the SmolRAG system, ensuring relevance.</data>
      <data key="d3">excerpt_id_04830b46c6b9fee612a7e80e9b24cec2:|:excerpt_id_2000936bfa184ddaaecfee9d1339bf97</data>
    </node>
    <node id="Content Hashing">
      <data key="d1">function</data>
      <data key="d2">Content Hashing is a function that hashes the content of each document to detect changes in the document's data.</data>
      <data key="d3">excerpt_id_efce5aab9b4130a5bb56f788c7389339</data>
    </node>
    <node id="Path-Based Tracking">
      <data key="d1">function</data>
      <data key="d2">Path-Based Tracking is a function that tracks documents by their file path and content hash to monitor updates efficiently.</data>
      <data key="d3">excerpt_id_efce5aab9b4130a5bb56f788c7389339</data>
    </node>
    <node id="Automatic Updates">
      <data key="d1">function</data>
      <data key="d2">Automatic Updates refer to the process where, upon a document change, old embeddings and graph entries are removed and new ones are created.</data>
      <data key="d3">excerpt_id_efce5aab9b4130a5bb56f788c7389339</data>
    </node>
    <node id="Selective Processing">
      <data key="d1">function</data>
      <data key="d2">Selective Processing is a function that only reprocesses documents that have changed, optimizing time and resources used.</data>
      <data key="d3">excerpt_id_efce5aab9b4130a5bb56f788c7389339</data>
    </node>
    <node id="Consistency Maintenance">
      <data key="d1">function</data>
      <data key="d2">Consistency Maintenance ensures that all components, including the vector store and knowledge graph, remain synchronized.</data>
      <data key="d3">excerpt_id_efce5aab9b4130a5bb56f788c7389339</data>
    </node>
    <node id="Key-Value Stores">
      <data key="d1">configuration</data>
      <data key="d2">Key-Value Stores are employed to store metadata, mappings, and caches, impacting storage requirements.:|:Key-Value Stores, such as JsonKvStore, manage metadata, mappings, and caches, integral for quick data retrieval.</data>
      <data key="d3">excerpt_id_efce5aab9b4130a5bb56f788c7389339:|:excerpt_id_8a2aba64b4fd7ed53252f4a12ec587b7</data>
    </node>
    <node id="File Structure">
      <data key="d1">configuration</data>
      <data key="d2">File Structure organizes data within the app/data directory, with dedicated files for different system components.</data>
      <data key="d3">excerpt_id_efce5aab9b4130a5bb56f788c7389339</data>
    </node>
    <node id="Serialization">
      <data key="d1">function</data>
      <data key="d2">Serialization is the process where data is converted into a format that can be stored and persisted between runs of the system.:|:Serialization describes the process of saving the graph to disk for persistence between runs.</data>
      <data key="d3">excerpt_id_50024a3e54a6af26f2a3993aa6d9e612:|:excerpt_id_efce5aab9b4130a5bb56f788c7389339</data>
    </node>
    <node id="Graceful Degradation">
      <data key="d1">feature</data>
      <data key="d2">Graceful Degradation allows the system to continue processing even when some individual steps encounter failures.</data>
      <data key="d3">excerpt_id_efce5aab9b4130a5bb56f788c7389339</data>
    </node>
    <node id="Performance Metrics">
      <data key="d1">feature</data>
      <data key="d2">Performance Metrics involve tracking and logging processing time and resource usage for efficiency assessment.</data>
      <data key="d3">excerpt_id_efce5aab9b4130a5bb56f788c7389339</data>
    </node>
    <node id="Warning System">
      <data key="d1">feature</data>
      <data key="d2">Warning System is a feature that flags potential issues with warnings for user attention during the ingestion process.</data>
      <data key="d3">excerpt_id_efce5aab9b4130a5bb56f788c7389339</data>
    </node>
    <node id="Document Ingestion Process">
      <data key="d1">function</data>
      <data key="d2">The Document Ingestion Process in SmolRAG is a sophisticated pipeline that reliably handles and transforms problematic documents for knowledge extraction.</data>
      <data key="d3">excerpt_id_04830b46c6b9fee612a7e80e9b24cec2</data>
    </node>
    <node id="Modular Design">
      <data key="d1">configuration</data>
      <data key="d2">Modular Design refers to the aspect of SmolRAG that allows for customization and extension of its ingestion process.</data>
      <data key="d3">excerpt_id_04830b46c6b9fee612a7e80e9b24cec2</data>
    </node>
    <node id="Performance">
      <data key="d1">feature</data>
      <data key="d2">Performance refers to the critical aspects of the SmolRAG API, including response times, resource usage, and user experience in the context of text data processing.</data>
      <data key="d3">excerpt_id_9b3e7699a2ad7cd3ed369e4a0e702290</data>
    </node>
    <node id="Document Ingestion Time">
      <data key="d1">variable</data>
      <data key="d2">Document Ingestion Time is a metric indicating the duration required to process and index new documents within the SmolRAG system.</data>
      <data key="d3">excerpt_id_9b3e7699a2ad7cd3ed369e4a0e702290</data>
    </node>
    <node id="Query Response Time">
      <data key="d1">variable</data>
      <data key="d2">Query Response Time is a metric reflecting the time taken to process a query and return a response from SmolRAG.</data>
      <data key="d3">excerpt_id_9b3e7699a2ad7cd3ed369e4a0e702290</data>
    </node>
    <node id="Embedding Generation Time">
      <data key="d1">variable</data>
      <data key="d2">Embedding Generation Time measures the duration required to create embeddings for documents and queries, impacting overall performance.</data>
      <data key="d3">excerpt_id_9b3e7699a2ad7cd3ed369e4a0e702290</data>
    </node>
    <node id="API Calls">
      <data key="d1">variable</data>
      <data key="d2">API Calls track the number of requests made to external APIs, such as OpenAI, which can influence both cost and performance.:|:API Calls pertain to the tracking of the number and cost of API interactions within the SmolRAG system, important for understanding usage and expenses.</data>
      <data key="d3">excerpt_id_9b3e7699a2ad7cd3ed369e4a0e702290:|:excerpt_id_1240c160e7b3db62fbd1d9af5733d19e</data>
    </node>
    <node id="Retrieval Precision">
      <data key="d1">variable</data>
      <data key="d2">Retrieval Precision measures the relevance of the excerpts retrieved by the SmolRAG system in response to a query.</data>
      <data key="d3">excerpt_id_9b3e7699a2ad7cd3ed369e4a0e702290</data>
    </node>
    <node id="Retrieval Recall">
      <data key="d1">variable</data>
      <data key="d2">Retrieval Recall indicates how many relevant excerpts are actually retrieved by the SmolRAG API in relation to the complete set of relevant excerpts.</data>
      <data key="d3">excerpt_id_9b3e7699a2ad7cd3ed369e4a0e702290</data>
    </node>
    <node id="Response Quality">
      <data key="d1">variable</data>
      <data key="d2">Response Quality evaluates the accuracy and helpfulness of the final responses provided by the SmolRAG system.</data>
      <data key="d3">excerpt_id_9b3e7699a2ad7cd3ed369e4a0e702290</data>
    </node>
    <node id="Document Ingestion Performance">
      <data key="d1">feature</data>
      <data key="d2">Document Ingestion Performance refers to the efficiency and effectiveness of the process by which documents are ingested into the system, focusing on resource intensity and potential bottlenecks.</data>
      <data key="d3">excerpt_id_410400e8efb55e29eb563d4e92c76993</data>
    </node>
    <node id="Chunking">
      <data key="d1">function</data>
      <data key="d2">Chunking is a process involved in breaking down large documents into manageable pieces, which can be resource-intensive.</data>
      <data key="d3">excerpt_id_410400e8efb55e29eb563d4e92c76993</data>
    </node>
    <node id="Summarization">
      <data key="d1">function</data>
      <data key="d2">Summarization involves generating concise summaries for each chunk of a document, often relying on LLM API calls that can be slow and costly.</data>
      <data key="d3">excerpt_id_410400e8efb55e29eb563d4e92c76993</data>
    </node>
    <node id="Embedding Generation">
      <data key="d1">function</data>
      <data key="d2">Embedding Generation involves creating embeddings for document chunks and queries, which is essential for semantic understanding.:|:Embedding Generation is the process of creating vector representations for document chunks, requiring API calls and time.</data>
      <data key="d3">excerpt_id_410400e8efb55e29eb563d4e92c76993:|:excerpt_id_8ec1e476798fb46038b3e8a5c5907ec5</data>
    </node>
    <node id="Parallel Processing">
      <data key="d1">optimization strategy:|:feature:|:function</data>
      <data key="d2">Parallel Processing refers to executing knowledge graph queries alongside vector searches simultaneously to enhance the retrieval process.:|:Parallel Processing is an optimization strategy that allows independent operations like embedding generation to occur simultaneously, improving performance.:|:Parallel Processing allows for simultaneous execution of vector search and knowledge graph queries to enhance overall performance.</data>
      <data key="d3">excerpt_id_410400e8efb55e29eb563d4e92c76993:|:excerpt_id_773dc5e90c361202bafd4c70106e3c4a:|:excerpt_id_bb83e035cbe37d34b4684d22bfa2ceb5</data>
    </node>
    <node id="Chunking Strategy">
      <data key="d1">optimization strategy</data>
      <data key="d2">Chunking Strategy involves selecting the most suitable method for dividing documents based on their types to optimize performance.</data>
      <data key="d3">excerpt_id_410400e8efb55e29eb563d4e92c76993</data>
    </node>
    <node id="Batch Processing Implementation">
      <data key="d1">example</data>
      <data key="d2">Batch Processing Implementation serves as a concrete illustration of the strategy to optimize document ingestion and processing.</data>
      <data key="d3">excerpt_id_410400e8efb55e29eb563d4e92c76993</data>
    </node>
    <node id="all_files">
      <data key="d1">variable</data>
      <data key="d2">all_files is a variable that stores a list of all files in the input documents directory that are eligible for processing.</data>
      <data key="d3">excerpt_id_3ce40acc1fea7738cf20ce8f1ac25b52</data>
    </node>
    <node id="Processing Documents">
      <data key="d1">function</data>
      <data key="d2">Processing Documents is a function that involves reading and managing the input files in specified batches for further operations.</data>
      <data key="d3">excerpt_id_3ce40acc1fea7738cf20ce8f1ac25b52</data>
    </node>
    <node id="print statement">
      <data key="d1">example</data>
      <data key="d2">The print statement outputs the progress of the batch processing to the console, indicating which batch has been processed.</data>
      <data key="d3">excerpt_id_3ce40acc1fea7738cf20ce8f1ac25b52</data>
    </node>
    <node id="Query Performance">
      <data key="d1">feature</data>
      <data key="d2">Query Performance refers to the efficiency and speed of retrieving responses to user queries, which impacts user experience directly.</data>
      <data key="d3">excerpt_id_0cb743ef78a1b56785a004b70800d537</data>
    </node>
    <node id="Knowledge Graph Queries">
      <data key="d1">feature:|:function</data>
      <data key="d2">Knowledge Graph Queries rely on the size and complexity of the knowledge graph to determine performance.:|:Knowledge Graph Queries encompass various query types that interact with the knowledge graph to retrieve relevant entities and relationships based on different approaches.:|:Knowledge Graph Queries involves complex operations on a graph structure, which can be computationally expensive and may slow down query performance.</data>
      <data key="d3">excerpt_id_4869439483a23885f8fdf7f5e9c7039f:|:excerpt_id_e477d31a3d287e5594aac260eb346c86:|:excerpt_id_0cb743ef78a1b56785a004b70800d537</data>
    </node>
    <node id="LLM Generation">
      <data key="d1">function</data>
      <data key="d2">LLM Generation is the process by which large language models produce a response, and can be time-consuming with extensive contexts.</data>
      <data key="d3">excerpt_id_0cb743ef78a1b56785a004b70800d537</data>
    </node>
    <node id="Context Size">
      <data key="d1">variable</data>
      <data key="d2">Context Size refers to the amount of information retrieved and considered during query processing, which can affect performance.</data>
      <data key="d3">excerpt_id_0cb743ef78a1b56785a004b70800d537</data>
    </node>
    <node id="Embedding Caching">
      <data key="d1">configuration</data>
      <data key="d2">Embedding Caching involves storing the results of query embeddings to optimize the process of future queries by avoiding regeneration.</data>
      <data key="d3">excerpt_id_0cb743ef78a1b56785a004b70800d537</data>
    </node>
    <node id="Query Type Selection">
      <data key="d1">feature:|:configuration</data>
      <data key="d2">Query Type Selection entails choosing the most suitable query method based on the user's question and desired performance outcomes.:|:Query Type Selection is the strategic process involved in choosing the optimal type of query to enhance both response quality and system performance during API integration.</data>
      <data key="d3">excerpt_id_88e075052f43c91ba2dc0e70fd71388d:|:excerpt_id_0cb743ef78a1b56785a004b70800d537</data>
    </node>
    <node id="Context Limitation">
      <data key="d1">configuration</data>
      <data key="d2">Context Limitation is a strategy used to restrict the number of excerpts included in the context during query processing to enhance efficiency.</data>
      <data key="d3">excerpt_id_0cb743ef78a1b56785a004b70800d537</data>
    </node>
    <node id="Query Caching Implementation">
      <data key="d1">example</data>
      <data key="d2">Query Caching Implementation provides a practical example of how to use caching techniques to improve query performance.</data>
      <data key="d3">excerpt_id_0cb743ef78a1b56785a004b70800d537</data>
    </node>
    <node id="app/cache/query_cache">
      <data key="d1">configuration</data>
      <data key="d2">app/cache/query_cache is the specified path where the cache files are stored for the QueryCache class, indicating the structure of application directory for caching.</data>
      <data key="d3">excerpt_id_6d5e3b714d13f4cccc13c6ddccfafca3</data>
    </node>
    <node id="cached_result">
      <data key="d1">variable</data>
      <data key="d2">cached_result is a variable that stores the result retrieved from the cache if it exists, allowing the application to use precomputed responses.</data>
      <data key="d3">excerpt_id_6d5e3b714d13f4cccc13c6ddccfafca3</data>
    </node>
    <node id="Caches">
      <data key="d1">configuration</data>
      <data key="d2">Caches store embeddings and query results, enhancing performance but increasing overall memory usage.</data>
      <data key="d3">excerpt_id_8d580efe0a0849a9ed415edb7a33f22e</data>
    </node>
    <node id="Lazy Loading">
      <data key="d1">feature</data>
      <data key="d2">Lazy Loading is an optimization strategy that involves loading vectors and graph components only when they are needed, reducing initial memory consumption.</data>
      <data key="d3">excerpt_id_8d580efe0a0849a9ed415edb7a33f22e</data>
    </node>
    <node id="Memory-Mapped Files">
      <data key="d1">feature</data>
      <data key="d2">Memory-Mapped Files are used for vector storage to decrease RAM usage by mapping file data to memory, facilitating access without fully loading into RAM.</data>
      <data key="d3">excerpt_id_8d580efe0a0849a9ed415edb7a33f22e</data>
    </node>
    <node id="Pruning">
      <data key="d1">feature</data>
      <data key="d2">Pruning is a technique to reduce memory usage by removing less important entities and relationships from the knowledge graph.</data>
      <data key="d3">excerpt_id_8d580efe0a0849a9ed415edb7a33f22e</data>
    </node>
    <node id="Resource Monitoring">
      <data key="d1">function</data>
      <data key="d2">Resource Monitoring involves tracking memory usage to help identify leaks and optimize memory allocation during processing.</data>
      <data key="d3">excerpt_id_8d580efe0a0849a9ed415edb7a33f22e</data>
    </node>
    <node id="Memory-Efficient Vector Store">
      <data key="d1">example</data>
      <data key="d2">Memory-Efficient Vector Store serves as an example of implementing memory optimization techniques for better resource management.</data>
      <data key="d3">excerpt_id_8d580efe0a0849a9ed415edb7a33f22e</data>
    </node>
    <node id="MemoryEfficientVectorStore">
      <data key="d1">class</data>
      <data key="d2">MemoryEfficientVectorStore is a class designed to manage a memory-efficient vector store, allowing for the addition and querying of vectors, while handling the file operations necessary for persistence.</data>
      <data key="d3">excerpt_id_902f74e2a13563ad2b6088a90d1308d6</data>
    </node>
    <node id="metadata">
      <data key="d1">variable</data>
      <data key="d2">metadata is a dictionary that stores additional information about the vectors, separate from the vectors themselves.</data>
      <data key="d3">excerpt_id_902f74e2a13563ad2b6088a90d1308d6</data>
    </node>
    <node id="add_vector">
      <data key="d1">function</data>
      <data key="d2">add_vector is a method that is intended to add a new vector to the vector store, although the implementation is simplified in this example.</data>
      <data key="d3">excerpt_id_902f74e2a13563ad2b6088a90d1308d6</data>
    </node>
    <node id="batch">
      <data key="d1">variable</data>
      <data key="d2">batch is a temporary variable that holds a subset of vectors that are processed together during the querying phase.</data>
      <data key="d3">excerpt_id_902f74e2a13563ad2b6088a90d1308d6</data>
    </node>
    <node id="Disk Usage Optimization">
      <data key="d1">feature</data>
      <data key="d2">Disk Usage Optimization refers to the strategies employed to manage and minimize the storage space used by disk-intensive components as a document collection grows.</data>
      <data key="d3">excerpt_id_8a2aba64b4fd7ed53252f4a12ec587b7</data>
    </node>
    <node id="Vector Database Files">
      <data key="d1">configuration</data>
      <data key="d2">Vector Database Files are crucial components for storing embeddings for all document chunks, which can consume significant disk space.</data>
      <data key="d3">excerpt_id_8a2aba64b4fd7ed53252f4a12ec587b7</data>
    </node>
    <node id="Knowledge Graph Files">
      <data key="d1">configuration</data>
      <data key="d2">Knowledge Graph Files are used to store the graph structure and properties, contributing to the overall disk usage.</data>
      <data key="d3">excerpt_id_8a2aba64b4fd7ed53252f4a12ec587b7</data>
    </node>
    <node id="Log Files">
      <data key="d1">configuration</data>
      <data key="d2">Log Files are utilized for storing detailed logs, particularly at the DEBUG level, which can contribute to disk usage over time.</data>
      <data key="d3">excerpt_id_8a2aba64b4fd7ed53252f4a12ec587b7</data>
    </node>
    <node id="Compression">
      <data key="d1">function</data>
      <data key="d2">Compression is a strategy used to reduce the size of stored data wherever applicable, aiding in disk space management.</data>
      <data key="d3">excerpt_id_8a2aba64b4fd7ed53252f4a12ec587b7</data>
    </node>
    <node id="Selective Storage">
      <data key="d1">function</data>
      <data key="d2">Selective Storage refers to a practice where only essential information is stored, and other data is derived as required.</data>
      <data key="d3">excerpt_id_8a2aba64b4fd7ed53252f4a12ec587b7</data>
    </node>
    <node id="Regular Cleanup">
      <data key="d1">function</data>
      <data key="d2">Regular Cleanup involves implementing policies to remove old or unused data to optimize disk usage.</data>
      <data key="d3">excerpt_id_8a2aba64b4fd7ed53252f4a12ec587b7</data>
    </node>
    <node id="Efficient Serialization">
      <data key="d1">function</data>
      <data key="d2">Efficient Serialization involves utilizing optimal formats for storing data, enhancing storage efficiency.</data>
      <data key="d3">excerpt_id_8a2aba64b4fd7ed53252f4a12ec587b7</data>
    </node>
    <node id="setup_logger">
      <data key="d1">function</data>
      <data key="d2">setup_logger is a function that configures a logger for logging events to a specified file directory, including the filename, maximum size of the log file, and the number of backup files.</data>
      <data key="d3">excerpt_id_1b2e40e76edb8537fc654b87660704c7</data>
    </node>
    <node id="log_dir">
      <data key="d1">variable</data>
      <data key="d2">log_dir is a variable that specifies the directory where log files will be stored.</data>
      <data key="d3">excerpt_id_1b2e40e76edb8537fc654b87660704c7</data>
    </node>
    <node id="log_file">
      <data key="d1">variable</data>
      <data key="d2">log_file is a variable representing the name of the log file to be created and used for logging.</data>
      <data key="d3">excerpt_id_1b2e40e76edb8537fc654b87660704c7</data>
    </node>
    <node id="max_size_mb">
      <data key="d1">variable</data>
      <data key="d2">max_size_mb is a variable that indicates the maximum size of the log file before it is rotated, specified in megabytes.</data>
      <data key="d3">excerpt_id_1b2e40e76edb8537fc654b87660704c7</data>
    </node>
    <node id="smolrag.log">
      <data key="d1">example</data>
      <data key="d2">smolrag.log is an example of a log file name that will be created in the specified log directory.</data>
      <data key="d3">excerpt_id_1b2e40e76edb8537fc654b87660704c7</data>
    </node>
    <node id="OpenAI's API">
      <data key="d1">api</data>
      <data key="d2">OpenAI's API is a service that provides functionalities for embeddings and completions, and is utilized by SmolRAG for various operations.</data>
      <data key="d3">excerpt_id_8ec1e476798fb46038b3e8a5c5907ec5</data>
    </node>
    <node id="Excerpt Summarization">
      <data key="d1">function</data>
      <data key="d2">Excerpt Summarization refers to generating summaries for each document chunk to enhance information retrieval and comprehension.</data>
      <data key="d3">excerpt_id_8ec1e476798fb46038b3e8a5c5907ec5</data>
    </node>
    <node id="Response Generation">
      <data key="d1">function</data>
      <data key="d2">Response Generation is the final step where a comprehensive response is generated based on queries and processed embeddings.</data>
      <data key="d3">excerpt_id_8ec1e476798fb46038b3e8a5c5907ec5</data>
    </node>
    <node id="Batching">
      <data key="d1">feature</data>
      <data key="d2">Batching is a technique to group multiple API requests into a single call to enhance efficiency and minimize overhead.</data>
      <data key="d3">excerpt_id_8ec1e476798fb46038b3e8a5c5907ec5</data>
    </node>
    <node id="Retry Logic">
      <data key="d1">feature</data>
      <data key="d2">Retry Logic is a mechanism to handle API failures by attempting to retry the request, ensuring robustness in response generation.</data>
      <data key="d3">excerpt_id_8ec1e476798fb46038b3e8a5c5907ec5</data>
    </node>
    <node id="API Batching for Embeddings">
      <data key="d1">example</data>
      <data key="d2">API Batching for Embeddings is an illustrative example of applying batching to optimize the process of generating embeddings.</data>
      <data key="d3">excerpt_id_8ec1e476798fb46038b3e8a5c5907ec5</data>
    </node>
    <node id="BatchEmbedder">
      <data key="d1">configuration</data>
      <data key="d2">BatchEmbedder is a class designed to handle the process of embedding multiple texts in batches using the OpenAI API.</data>
      <data key="d3">excerpt_id_7427e209fc13ae7cacd434f823963545</data>
    </node>
    <node id="embed_texts">
      <data key="d1">function</data>
      <data key="d2">embed_texts is a method of BatchEmbedder that accepts a list of texts to be embedded in batches, handling the API calls and response processing.</data>
      <data key="d3">excerpt_id_7427e209fc13ae7cacd434f823963545</data>
    </node>
    <node id="api_key">
      <data key="d1">variable</data>
      <data key="d2">api_key is a variable representing the authentication key required to access the OpenAI API.</data>
      <data key="d3">excerpt_id_7427e209fc13ae7cacd434f823963545</data>
    </node>
    <node id="model">
      <data key="d1">variable</data>
      <data key="d2">model is a variable indicating the machine learning model utilized for generating text embeddings, with a default value set.</data>
      <data key="d3">excerpt_id_7427e209fc13ae7cacd434f823963545</data>
    </node>
    <node id="texts">
      <data key="d1">variable</data>
      <data key="d2">texts is a variable representing the list of strings that are intended to be embedded by the embed_texts method.</data>
      <data key="d3">excerpt_id_7427e209fc13ae7cacd434f823963545</data>
    </node>
    <node id="Vertical Scaling">
      <data key="d1">feature</data>
      <data key="d2">Vertical Scaling involves enhancing single machine capabilities such as increasing memory, CPU power, and using SSD storage to improve performance.</data>
      <data key="d3">excerpt_id_9c072e3e78902159765fef2d7578e992</data>
    </node>
    <node id="Distributed Processing">
      <data key="d1">configuration</data>
      <data key="d2">Distributed Processing allows document ingestion to be split across multiple machines, enhancing throughput and efficiency.</data>
      <data key="d3">excerpt_id_9c072e3e78902159765fef2d7578e992</data>
    </node>
    <node id="Sharded Vector Store">
      <data key="d1">configuration</data>
      <data key="d2">Sharded Vector Store involves dividing the vector store into shards, distributed across different instances for better resource utilization.</data>
      <data key="d3">excerpt_id_9c072e3e78902159765fef2d7578e992</data>
    </node>
    <node id="Load Balancing">
      <data key="d1">configuration</data>
      <data key="d2">Load Balancing distributes incoming queries across multiple API instances to ensure efficient resource usage and response times.</data>
      <data key="d3">excerpt_id_9c072e3e78902159765fef2d7578e992</data>
    </node>
    <node id="Microservices Architecture">
      <data key="d1">architecture</data>
      <data key="d2">Microservices Architecture allows for the division of functionality into individual services, enabling independent scaling and deployment.</data>
      <data key="d3">excerpt_id_9c072e3e78902159765fef2d7578e992</data>
    </node>
    <node id="Cloud Deployment">
      <data key="d1">feature</data>
      <data key="d2">Cloud Deployment involves using cloud services for deploying applications and scaling components as needed.</data>
      <data key="d3">excerpt_id_9c072e3e78902159765fef2d7578e992</data>
    </node>
    <node id="Containerization">
      <data key="d1">function</data>
      <data key="d2">Containerization refers to the practice of using Docker to create lightweight, stand-alone environments for deploying applications consistently.:|:Containerization refers to the process of encapsulating applications in containers, emphasizing aspects such as resource limits and image optimization.</data>
      <data key="d3">excerpt_id_9c072e3e78902159765fef2d7578e992:|:excerpt_id_14e13330c8ba86a6d13d53a1fb558359</data>
    </node>
    <node id="Kubernetes">
      <data key="d1">api</data>
      <data key="d2">Kubernetes is an orchestration tool used for managing containerized applications, providing automatic scaling and deployment capabilities.</data>
      <data key="d3">excerpt_id_9c072e3e78902159765fef2d7578e992</data>
    </node>
    <node id="Serverless">
      <data key="d1">function</data>
      <data key="d2">Serverless architecture enables components to scale automatically without managing servers, allowing developers to focus on code.</data>
      <data key="d3">excerpt_id_9c072e3e78902159765fef2d7578e992</data>
    </node>
    <node id="Docker Compose">
      <data key="d1">example</data>
      <data key="d2">Docker Compose is an example of a tool used to define and run multi-container Docker applications, facilitating scaling.</data>
      <data key="d3">excerpt_id_9c072e3e78902159765fef2d7578e992</data>
    </node>
    <node id="smolrag-api-1">
      <data key="d1">api</data>
      <data key="d2">smolrag-api-1 is an API service defined in the configuration that is built from the current directory, exposing port 8000 and using specific volumes and environment variables.</data>
      <data key="d3">excerpt_id_008fc08e29e3bf19179abebec59be58b</data>
    </node>
    <node id="smolrag-api-2">
      <data key="d1">api</data>
      <data key="d2">smolrag-api-2 is another API service in the configuration, also built from the current directory, exposing port 8000 and sharing similar volumes and environment variables as smolrag-api-1.</data>
      <data key="d3">excerpt_id_008fc08e29e3bf19179abebec59be58b</data>
    </node>
    <node id="nginx">
      <data key="d1">configuration</data>
      <data key="d2">nginx is a service defined in the configuration that uses the latest nginx image, exposing port 80 and configured with a default.conf file from a local path, dependent on the two smolrag APIs.</data>
      <data key="d3">excerpt_id_008fc08e29e3bf19179abebec59be58b</data>
    </node>
    <node id="version">
      <data key="d1">configuration</data>
      <data key="d2">version denotes the version number of the configuration file, which is set to '3' in this context.</data>
      <data key="d3">excerpt_id_008fc08e29e3bf19179abebec59be58b</data>
    </node>
    <node id="Response Times">
      <data key="d1">variable</data>
      <data key="d2">Response Times refer to the duration of different operations in the SmolRAG system, serving as a key metric for performance evaluation.</data>
      <data key="d3">excerpt_id_1240c160e7b3db62fbd1d9af5733d19e</data>
    </node>
    <node id="Resource Usage">
      <data key="d1">variable</data>
      <data key="d2">Resource Usage quantifies the amount of CPU, memory, and disk used during operations, essential for optimizing system performance.:|:Resource Usage encompasses the monitoring of CPU, memory, and disk usage, which are critical for assessing the system's performance.</data>
      <data key="d3">excerpt_id_455d1784b9bb6032796cf79e353f8434:|:excerpt_id_1240c160e7b3db62fbd1d9af5733d19e</data>
    </node>
    <node id="Error Rates">
      <data key="d1">variable</data>
      <data key="d2">Error Rates represent the monitoring of errors and exceptions occurring in the SmolRAG system, crucial for identifying issues and improving reliability.:|:Error Rates track how many operations fail under load, an important metric for assessing the reliability of the system.</data>
      <data key="d3">excerpt_id_455d1784b9bb6032796cf79e353f8434:|:excerpt_id_1240c160e7b3db62fbd1d9af5733d19e</data>
    </node>
    <node id="Python Profilers">
      <data key="d1">feature</data>
      <data key="d2">Python Profilers, such as cProfile and line_profiler, are tools used to identify performance bottlenecks within the SmolRAG system.</data>
      <data key="d3">excerpt_id_1240c160e7b3db62fbd1d9af5733d19e</data>
    </node>
    <node id="Memory Profilers">
      <data key="d1">feature</data>
      <data key="d2">Memory Profilers, like memory_profiler, are tools that track memory usage in the SmolRAG system to identify potential inefficiencies.</data>
      <data key="d3">excerpt_id_1240c160e7b3db62fbd1d9af5733d19e</data>
    </node>
    <node id="Tracing">
      <data key="d1">feature</data>
      <data key="d2">Tracing involves using tools like OpenTelemetry for distributed tracing, allowing for monitoring system interactions and performance across services.</data>
      <data key="d3">excerpt_id_1240c160e7b3db62fbd1d9af5733d19e</data>
    </node>
    <node id="Simple Performance Monitoring">
      <data key="d1">example</data>
      <data key="d2">Simple Performance Monitoring serves as a practical illustration of how to implement monitoring and profiling for SmolRAG's performance.</data>
      <data key="d3">excerpt_id_1240c160e7b3db62fbd1d9af5733d19e</data>
    </node>
    <node id="PerformanceMonitor">
      <data key="d1">class</data>
      <data key="d2">PerformanceMonitor is a class designed to monitor performance metrics such as duration and memory usage of operations in a Python application.</data>
      <data key="d3">excerpt_id_47020e878f0731a6b5359fed2e4f08fa</data>
    </node>
    <node id="start">
      <data key="d1">function</data>
      <data key="d2">The start function initializes the operation by recording the start time and memory usage, and logs this information.</data>
      <data key="d3">excerpt_id_47020e878f0731a6b5359fed2e4f08fa</data>
    </node>
    <node id="end">
      <data key="d1">function</data>
      <data key="d2">The end function finalizes the operation, calculates duration and memory changes, and logs the results for performance analysis.</data>
      <data key="d3">excerpt_id_47020e878f0731a6b5359fed2e4f08fa</data>
    </node>
    <node id="operation_name">
      <data key="d1">variable</data>
      <data key="d2">Operation_name is a variable that stores the name of the operation currently being monitored, critical for tracking.</data>
      <data key="d3">excerpt_id_47020e878f0731a6b5359fed2e4f08fa</data>
    </node>
    <node id="memory_change">
      <data key="d1">variable</data>
      <data key="d2">Memory_change is a variable that calculates the difference between the end and start memory usage during an operation.</data>
      <data key="d3">excerpt_id_47020e878f0731a6b5359fed2e4f08fa</data>
    </node>
    <node id="monitor">
      <data key="d1">interface</data>
      <data key="d2">Monitor is an instance of the PerformanceMonitor class used to monitor specific operations, such as document ingestion and query processing.</data>
      <data key="d3">excerpt_id_47020e878f0731a6b5359fed2e4f08fa</data>
    </node>
    <node id="ingestion_stats">
      <data key="d1">variable</data>
      <data key="d2">Ingestion_stats is a variable that holds performance statistics returned after monitoring the document ingestion operation.</data>
      <data key="d3">excerpt_id_47020e878f0731a6b5359fed2e4f08fa</data>
    </node>
    <node id="query_stats">
      <data key="d1">variable</data>
      <data key="d2">Query_stats is a variable that holds performance statistics returned after monitoring the query processing operation.</data>
      <data key="d3">excerpt_id_47020e878f0731a6b5359fed2e4f08fa</data>
    </node>
    <node id="Vector Search Query Optimization">
      <data key="d1">feature</data>
      <data key="d2">Vector Search Query Optimization involves various techniques to enhance the efficiency and effectiveness of search queries, particularly in processing embedding queries.</data>
      <data key="d3">excerpt_id_773dc5e90c361202bafd4c70106e3c4a</data>
    </node>
    <node id="Dimensionality Reduction">
      <data key="d1">function</data>
      <data key="d2">Dimensionality Reduction is a technique used to reduce the number of dimensions in embedding data to facilitate faster query processing.</data>
      <data key="d3">excerpt_id_773dc5e90c361202bafd4c70106e3c4a</data>
    </node>
    <node id="Query Preprocessing">
      <data key="d1">function</data>
      <data key="d2">Query Preprocessing encompasses simplifying and normalizing user queries before they are transformed into embeddings for more efficient processing.</data>
      <data key="d3">excerpt_id_773dc5e90c361202bafd4c70106e3c4a</data>
    </node>
    <node id="Knowledge Graph Query Optimization">
      <data key="d1">feature</data>
      <data key="d2">Knowledge Graph Query Optimization consists of strategies tailored to enhance the performance of queries conducted over knowledge graphs.</data>
      <data key="d3">excerpt_id_773dc5e90c361202bafd4c70106e3c4a</data>
    </node>
    <node id="Graph Indexing">
      <data key="d1">function</data>
      <data key="d2">Graph Indexing is a technique used to organize and structure graph data to enable faster traversal and querying.</data>
      <data key="d3">excerpt_id_773dc5e90c361202bafd4c70106e3c4a</data>
    </node>
    <node id="Query Planning">
      <data key="d1">function</data>
      <data key="d2">Query Planning involves determining the most efficient order of operations to execute graph queries smoothly.</data>
      <data key="d3">excerpt_id_773dc5e90c361202bafd4c70106e3c4a</data>
    </node>
    <node id="Mix Query Optimization">
      <data key="d1">feature</data>
      <data key="d2">Mix Query Optimization refers to the use of combined strategies to optimize both vector search and knowledge graph queries.</data>
      <data key="d3">excerpt_id_773dc5e90c361202bafd4c70106e3c4a</data>
    </node>
    <node id="Adaptive Strategies">
      <data key="d1">function</data>
      <data key="d2">Adaptive Strategies involve dynamically adjusting the selection of query types based on the characteristics of incoming queries.</data>
      <data key="d3">excerpt_id_773dc5e90c361202bafd4c70106e3c4a</data>
    </node>
    <node id="Result Merging">
      <data key="d1">function</data>
      <data key="d2">Result Merging focuses on optimizing how outputs from vector searches and knowledge graph queries are combined to produce final results.</data>
      <data key="d3">excerpt_id_773dc5e90c361202bafd4c70106e3c4a</data>
    </node>
    <node id="Example: Parallel Query Processing">
      <data key="d1">example</data>
      <data key="d2">Example: Parallel Query Processing illustrates the practical application of executing different query types simultaneously to achieve efficiency.</data>
      <data key="d3">excerpt_id_773dc5e90c361202bafd4c70106e3c4a</data>
    </node>
    <node id="parallel_query">
      <data key="d1">function</data>
      <data key="d2">parallel_query is a function that runs vector search and knowledge graph queries concurrently using a thread pool executor, improving efficiency in querying.</data>
      <data key="d3">excerpt_id_183160e7c61e5a6948ec0efb28fbec13</data>
    </node>
    <node id="ThreadPoolExecutor">
      <data key="d1">interface</data>
      <data key="d2">ThreadPoolExecutor is an interface from the concurrent.futures module that allows the execution of callables asynchronously using a pool of threads.</data>
      <data key="d3">excerpt_id_183160e7c61e5a6948ec0efb28fbec13</data>
    </node>
    <node id="vector_search">
      <data key="d1">feature</data>
      <data key="d2">vector_search refers to a method used by the rag object to perform searches based on vector representations of data.</data>
      <data key="d3">excerpt_id_183160e7c61e5a6948ec0efb28fbec13</data>
    </node>
    <node id="knowledge_graph_query">
      <data key="d1">feature</data>
      <data key="d2">knowledge_graph_query refers to a method used by the rag object to perform queries against a knowledge graph.</data>
      <data key="d3">excerpt_id_183160e7c61e5a6948ec0efb28fbec13</data>
    </node>
    <node id="combined_result">
      <data key="d1">variable</data>
      <data key="d2">combined_result is a variable that holds the final string result combining the outputs of both vector and knowledge graph queries.</data>
      <data key="d3">excerpt_id_183160e7c61e5a6948ec0efb28fbec13</data>
    </node>
    <node id="CPU Considerations">
      <data key="d1">feature</data>
      <data key="d2">CPU Considerations encompass the core count, clock speed, and cache size, which together enhance SmolRAG's performance during various computational tasks.</data>
      <data key="d3">excerpt_id_f23cfae03c6ea9dae127b21ad7657454</data>
    </node>
    <node id="Memory Considerations">
      <data key="d1">feature</data>
      <data key="d2">Memory Considerations include RAM capacity, speed, and configuration, ensuring that the system operates efficiently without running out of memory.</data>
      <data key="d3">excerpt_id_f23cfae03c6ea9dae127b21ad7657454</data>
    </node>
    <node id="Storage Considerations">
      <data key="d1">feature</data>
      <data key="d2">Storage Considerations address the type of storage (SSD vs. HDD), capacity requirements, and I/O performance for optimal operation of the system.</data>
      <data key="d3">excerpt_id_f23cfae03c6ea9dae127b21ad7657454</data>
    </node>
    <node id="Network Considerations">
      <data key="d1">feature</data>
      <data key="d2">Network Considerations focus on the necessary bandwidth, latency, and reliability for making API calls and conducting distributed deployments effectively.</data>
      <data key="d3">excerpt_id_f23cfae03c6ea9dae127b21ad7657454</data>
    </node>
    <node id="Small Deployments">
      <data key="d1">example</data>
      <data key="d2">Small Deployments refer to configurations recommended for systems handling less than 1,000 documents, outlining specific hardware specifications necessary for success.</data>
      <data key="d3">excerpt_id_f23cfae03c6ea9dae127b21ad7657454</data>
    </node>
    <node id="Medium Deployments">
      <data key="d1">example</data>
      <data key="d2">Medium Deployments cater to setups for managing 1,000 to 10,000 documents, providing appropriate hardware recommendations for performance.</data>
      <data key="d3">excerpt_id_f23cfae03c6ea9dae127b21ad7657454</data>
    </node>
    <node id="Large Deployments">
      <data key="d1">example</data>
      <data key="d2">Large Deployments suggest hardware configurations for systems operating with more than 10,000 documents, including distributed deployment considerations.</data>
      <data key="d3">excerpt_id_f23cfae03c6ea9dae127b21ad7657454</data>
    </node>
    <node id="Benchmark Tests">
      <data key="d1">function</data>
      <data key="d2">Benchmark Tests are designed to measure performance metrics for standard operations, assessing the basic capabilities of the system.</data>
      <data key="d3">excerpt_id_455d1784b9bb6032796cf79e353f8434</data>
    </node>
    <node id="Load Tests">
      <data key="d1">function</data>
      <data key="d2">Load Tests evaluate the system's performance under various load conditions, ensuring it can handle expected traffic and resource demands.</data>
      <data key="d3">excerpt_id_455d1784b9bb6032796cf79e353f8434</data>
    </node>
    <node id="Stress Tests">
      <data key="d1">function</data>
      <data key="d2">Stress Tests are conducted to determine how the system performs at or beyond expected capacity, identifying breaking points.</data>
      <data key="d3">excerpt_id_455d1784b9bb6032796cf79e353f8434</data>
    </node>
    <node id="Endurance Tests">
      <data key="d1">function</data>
      <data key="d2">Endurance Tests assess the system's performance over extended periods, ensuring sustained efficiency and reliability.</data>
      <data key="d3">excerpt_id_455d1784b9bb6032796cf79e353f8434</data>
    </node>
    <node id="Throughput">
      <data key="d1">variable</data>
      <data key="d2">Throughput refers to the number of operations that can be processed per unit of time, serving as a critical performance indicator.</data>
      <data key="d3">excerpt_id_455d1784b9bb6032796cf79e353f8434</data>
    </node>
    <node id="Latency">
      <data key="d1">variable</data>
      <data key="d2">Latency measures how long each operation takes, impacting the user experience and system responsiveness.</data>
      <data key="d3">excerpt_id_455d1784b9bb6032796cf79e353f8434</data>
    </node>
    <node id="Simple Benchmark Script">
      <data key="d1">example</data>
      <data key="d2">Simple Benchmark Script illustrates a practical demonstration of how to implement benchmark testing to measure system performance.</data>
      <data key="d3">excerpt_id_455d1784b9bb6032796cf79e353f8434</data>
    </node>
    <node id="benchmark_queries">
      <data key="d1">function</data>
      <data key="d2">benchmark_queries is a function that assesses the performance of querying different types of queries on the SmolRag system over a specified number of runs.</data>
      <data key="d3">excerpt_id_871ea4244ed66d033bd333acf9bf3bc4</data>
    </node>
    <node id="test_queries">
      <data key="d1">variable</data>
      <data key="d2">test_queries is a list of predefined queries that are used to evaluate the performance of the querying functions within SmolRag.</data>
      <data key="d3">excerpt_id_871ea4244ed66d033bd333acf9bf3bc4</data>
    </node>
    <node id="standard_results">
      <data key="d1">variable</data>
      <data key="d2">standard_results is a variable that holds the benchmarking results specifically for standard queries.</data>
      <data key="d3">excerpt_id_871ea4244ed66d033bd333acf9bf3bc4</data>
    </node>
    <node id="kg_results">
      <data key="d1">variable</data>
      <data key="d2">kg_results is a variable that contains the benchmarking results for queries run under the hybrid knowledge graph configuration.</data>
      <data key="d3">excerpt_id_871ea4244ed66d033bd333acf9bf3bc4</data>
    </node>
    <node id="mix_results">
      <data key="d1">variable</data>
      <data key="d2">mix_results stores the results of the benchmarking for mixed query types that leverage different querying methodologies.</data>
      <data key="d3">excerpt_id_871ea4244ed66d033bd333acf9bf3bc4</data>
    </node>
    <node id="Average Time">
      <data key="d1">feature</data>
      <data key="d2">Average Time refers to the average duration taken to execute a query during the benchmarking process.</data>
      <data key="d3">excerpt_id_871ea4244ed66d033bd333acf9bf3bc4</data>
    </node>
    <node id="Minimum Time">
      <data key="d1">feature</data>
      <data key="d2">Minimum Time refers to the shortest execution time recorded for a particular query during the benchmarks.</data>
      <data key="d3">excerpt_id_871ea4244ed66d033bd333acf9bf3bc4</data>
    </node>
    <node id="Maximum Time">
      <data key="d1">feature</data>
      <data key="d2">Maximum Time refers to the longest execution time recorded for a specific query throughout the benchmarking tests.</data>
      <data key="d3">excerpt_id_871ea4244ed66d033bd333acf9bf3bc4</data>
    </node>
    <node id="Cloud Provider Selection">
      <data key="d1">configuration</data>
      <data key="d2">Cloud Provider Selection encompasses guidelines for choosing a cloud provider based on compute options, managed services, and pricing models.</data>
      <data key="d3">excerpt_id_14e13330c8ba86a6d13d53a1fb558359</data>
    </node>
    <node id="Serverless Considerations">
      <data key="d1">function</data>
      <data key="d2">Serverless Considerations involve key factors for deploying serverless functions, such as latency, memory allocation, and execution limits.</data>
      <data key="d3">excerpt_id_14e13330c8ba86a6d13d53a1fb558359</data>
    </node>
    <node id="Kubernetes Resource Configuration">
      <data key="d1">example</data>
      <data key="d2">Kubernetes Resource Configuration serves as an example of how to configure resources in a Kubernetes environment for optimal performance.</data>
      <data key="d3">excerpt_id_14e13330c8ba86a6d13d53a1fb558359</data>
    </node>
    <node id="smolrag-api">
      <data key="d1">api</data>
      <data key="d2">smolrag-api is an API deployment defined in a YAML configuration for managing application containers with specified resources and environment variable setups.</data>
      <data key="d3">excerpt_id_4202bb5aefcb4272e5fc2efebff6fc46</data>
    </node>
    <node id="Deployment">
      <data key="d1">configuration</data>
      <data key="d2">Deployment refers to a Kubernetes configuration that orchestrates multiple replicas of the smolrag-api, ensuring high availability.</data>
      <data key="d3">excerpt_id_4202bb5aefcb4272e5fc2efebff6fc46</data>
    </node>
    <node id="replicas">
      <data key="d1">variable</data>
      <data key="d2">replicas is a variable that specifies the number of instances of the smolrag-api that should be running, set to 3 in this context.</data>
      <data key="d3">excerpt_id_4202bb5aefcb4272e5fc2efebff6fc46</data>
    </node>
    <node id="resources">
      <data key="d1">configuration</data>
      <data key="d2">resources specify the memory and CPU requirements for the smolrag-api containers, defining requests and limits for performance.</data>
      <data key="d3">excerpt_id_4202bb5aefcb4272e5fc2efebff6fc46</data>
    </node>
    <node id="data-volume">
      <data key="d1">feature</data>
      <data key="d2">data-volume is a persistent volume mount used by smolrag-api for storing application data.</data>
      <data key="d3">excerpt_id_4202bb5aefcb4272e5fc2efebff6fc46</data>
    </node>
    <node id="docs-volume">
      <data key="d1">feature</data>
      <data key="d2">docs-volume is a persistent volume mount designated for input documents needed by the smolrag-api.</data>
      <data key="d3">excerpt_id_4202bb5aefcb4272e5fc2efebff6fc46</data>
    </node>
    <node id="smolrag-data-pvc">
      <data key="d1">configuration</data>
      <data key="d2">smolrag-data-pvc is a persistent volume claim in Kubernetes that provides storage for the data-volume.</data>
      <data key="d3">excerpt_id_4202bb5aefcb4272e5fc2efebff6fc46</data>
    </node>
    <node id="smolrag-docs-pvc">
      <data key="d1">configuration</data>
      <data key="d2">smolrag-docs-pvc is a persistent volume claim in Kubernetes that provides storage for the docs-volume.</data>
      <data key="d3">excerpt_id_4202bb5aefcb4272e5fc2efebff6fc46</data>
    </node>
    <node id="Query Processing">
      <data key="d1">function</data>
      <data key="d2">Query Processing involves handling user queries in a way that maximizes efficiency and speed, contributing to the responsiveness of SmolRAG.</data>
      <data key="d3">excerpt_id_33ec53332806b9871abe7246fe9d300e</data>
    </node>
    <node id="Resource Management">
      <data key="d1">function</data>
      <data key="d2">Resource Management in SmolRAG involves optimizing memory, disk, and API usage to ensure smooth operation under varying loads.</data>
      <data key="d3">excerpt_id_33ec53332806b9871abe7246fe9d300e</data>
    </node>
    <node id="Scaling Strategy">
      <data key="d1">configuration</data>
      <data key="d2">Scaling Strategy outlines the methods used to adjust resources in SmolRAG based on changing demands, enhancing its performance capabilities.</data>
      <data key="d3">excerpt_id_33ec53332806b9871abe7246fe9d300e</data>
    </node>
    <node id="Performance Optimization Techniques">
      <data key="d1">example</data>
      <data key="d2">Performance Optimization Techniques are specific methods applied to improve the efficiency and reliability of the SmolRAG system.</data>
      <data key="d3">excerpt_id_33ec53332806b9871abe7246fe9d300e</data>
    </node>
    <node id="Entities">
      <data key="d1">variable</data>
      <data key="d2">Entities are distinct concepts, terms, or objects extracted from documents and serve as fundamental building blocks of the knowledge graph.</data>
      <data key="d3">excerpt_id_9e82c97bd0829ec40084f1a45d364353</data>
    </node>
    <node id="Entity Properties">
      <data key="d1">configuration</data>
      <data key="d2">Entity Properties include attributes like Name, Category, Description, and Excerpt ID that define each entity within the knowledge graph.</data>
      <data key="d3">excerpt_id_9e82c97bd0829ec40084f1a45d364353</data>
    </node>
    <node id="Relationships">
      <data key="d1">variable</data>
      <data key="d2">Relationships are the connections between entities within the knowledge graph, capturing how they relate to one another.</data>
      <data key="d3">excerpt_id_9e82c97bd0829ec40084f1a45d364353</data>
    </node>
    <node id="Knowledge Graph Structure">
      <data key="d1">function</data>
      <data key="d2">Knowledge Graph Structure refers to the organized layout of components in SmolRAG including entities and their relationships, facilitating efficient querying and traversal.</data>
      <data key="d3">excerpt_id_9e82c97bd0829ec40084f1a45d364353</data>
    </node>
    <node id="Knowledge Graph Construction">
      <data key="d1">function</data>
      <data key="d2">Knowledge Graph Construction is the process by which SmolRAG builds its knowledge graph during the document ingestion process, transforming raw data into structured knowledge.</data>
      <data key="d3">excerpt_id_9e82c97bd0829ec40084f1a45d364353</data>
    </node>
    <node id="Relationship Extraction">
      <data key="d1">function</data>
      <data key="d2">Relationship Extraction is the step where relationships related to top-ranked entities are retrieved to provide contextual insights.:|:Relationship Extraction refers to the function that identifies relationships between entities in the same document excerpt.</data>
      <data key="d3">excerpt_id_50024a3e54a6af26f2a3993aa6d9e612:|:excerpt_id_4869439483a23885f8fdf7f5e9c7039f</data>
    </node>
    <node id="Property Assignment">
      <data key="d1">function</data>
      <data key="d2">Property Assignment involves assigning properties to both entities and relationships identified in the text.</data>
      <data key="d3">excerpt_id_50024a3e54a6af26f2a3993aa6d9e612</data>
    </node>
    <node id="Deduplication and Merging">
      <data key="d1">function</data>
      <data key="d2">Deduplication and Merging is the process of merging properties of an entity if it already exists during entity identification.</data>
      <data key="d3">excerpt_id_50024a3e54a6af26f2a3993aa6d9e612</data>
    </node>
    <node id="Graph Storage">
      <data key="d1">function</data>
      <data key="d2">Graph Storage pertains to storing the entities and relationships in a NetworkXGraphStore for further usage.</data>
      <data key="d3">excerpt_id_50024a3e54a6af26f2a3993aa6d9e612</data>
    </node>
    <node id="NetworkX">
      <data key="d1">api</data>
      <data key="d2">NetworkX is a Python library used for graph analysis and serves as the foundation for the knowledge graph in SmolRAG.</data>
      <data key="d3">excerpt_id_50024a3e54a6af26f2a3993aa6d9e612</data>
    </node>
    <node id="Property Storage">
      <data key="d1">configuration</data>
      <data key="d2">Property Storage pertains to how attributes of nodes and edges maintain the properties of entities and relationships.</data>
      <data key="d3">excerpt_id_50024a3e54a6af26f2a3993aa6d9e612</data>
    </node>
    <node id="Graph Operations">
      <data key="d1">function</data>
      <data key="d2">Graph Operations encompass efficient algorithms provided by NetworkX for graph traversal and analysis.</data>
      <data key="d3">excerpt_id_50024a3e54a6af26f2a3993aa6d9e612</data>
    </node>
    <node id="Extensibility">
      <data key="d1">feature</data>
      <data key="d2">Extensibility is a feature allowing the implementation to be enhanced with additional graph algorithms when needed.</data>
      <data key="d3">excerpt_id_50024a3e54a6af26f2a3993aa6d9e612</data>
    </node>
    <node id="Entity and Relationship Embeddings">
      <data key="d1">example</data>
      <data key="d2">Entity and Relationship Embeddings involve creating vector representations for entities and relationships to facilitate their use in certain applications.</data>
      <data key="d3">excerpt_id_50024a3e54a6af26f2a3993aa6d9e612</data>
    </node>
    <node id="Dedicated Vector Stores">
      <data key="d1">configuration</data>
      <data key="d2">Dedicated Vector Stores are storage systems designed specifically to hold embeddings, thereby optimizing the retrieval and analysis of entities and relationships.</data>
      <data key="d3">excerpt_id_4869439483a23885f8fdf7f5e9c7039f</data>
    </node>
    <node id="Local Knowledge Graph Query">
      <data key="d1">function</data>
      <data key="d2">Local Knowledge Graph Query is a function that allows users to query local knowledge graphs for information related to document chunking.:|:The Local Knowledge Graph Query focuses on low-level keywords to identify relevant entities and their relationships.:|:Local Knowledge Graph Query is a function that focuses on entities and their immediate relationships within a graph.:|:Local Knowledge Graph Query is a specific type of query focusing on low-level keywords to find relevant entities and their relationships effectively.</data>
      <data key="d3">excerpt_id_f1ef3b38067579dab39116dbfeca6ddc:|:excerpt_id_4869439483a23885f8fdf7f5e9c7039f:|:excerpt_id_fd5970a76cf7d27c6af5388563268de1:|:excerpt_id_0fe32e6885f5b985ccdafa775b1e90c3</data>
    </node>
    <node id="Global Knowledge Graph Query">
      <data key="d1">function</data>
      <data key="d2">The Global Knowledge Graph Query emphasizes high-level keywords to discover relevant relationships and connected entities.:|:Global Knowledge Graph Query aims at finding relevant relationships and connected entities by concentrating on high-level keywords.:|:Global Knowledge Graph Query describes the implementation focus on relationships and broader connections in data.:|:Global Knowledge Graph Query is a function used to gather information on the connections between different components across global knowledge graphs.</data>
      <data key="d3">excerpt_id_0fe32e6885f5b985ccdafa775b1e90c3:|:excerpt_id_4869439483a23885f8fdf7f5e9c7039f:|:excerpt_id_f1ef3b38067579dab39116dbfeca6ddc:|:excerpt_id_52cf87d011ec9029460148508a439403</data>
    </node>
    <node id="Hybrid Knowledge Graph Query">
      <data key="d1">function</data>
      <data key="d2">Hybrid Knowledge Graph Query combines both local and global strategies to comprehensively cover queries, enhancing result accuracy.:|:Hybrid Knowledge Graph Query is a function that combines different querying methods to find relationships between embeddings and queries.:|:The Hybrid Knowledge Graph Query merges both local and global knowledge graph approaches for enhanced querying.:|:The Hybrid Knowledge Graph Query is a function that integrates both local and global approaches to enhance query performance and coverage.</data>
      <data key="d3">excerpt_id_4cd06704221cc59374c46e3d685f2e24:|:excerpt_id_4869439483a23885f8fdf7f5e9c7039f:|:excerpt_id_f1ef3b38067579dab39116dbfeca6ddc:|:excerpt_id_0fe32e6885f5b985ccdafa775b1e90c3</data>
    </node>
    <node id="Entity Search">
      <data key="d1">function</data>
      <data key="d2">Entity Search refers to the method of utilizing embedded keywords to locate relevant entities within the stored data.</data>
      <data key="d3">excerpt_id_4869439483a23885f8fdf7f5e9c7039f</data>
    </node>
    <node id="Entity Ranking">
      <data key="d1">function</data>
      <data key="d2">Entity Ranking involves scoring entities based on their connectivity and relevance to ensure the most pertinent entities are surfaced in responses.</data>
      <data key="d3">excerpt_id_4869439483a23885f8fdf7f5e9c7039f</data>
    </node>
    <node id="Context Construction">
      <data key="d1">function</data>
      <data key="d2">Context Construction creates a structured overview of related entities, relationships, and relevant excerpts to offer clarity in responses.:|:Context Construction creates a structured overview from the identified relationships, entities, and corresponding excerpts for enhanced understanding.</data>
      <data key="d3">excerpt_id_4869439483a23885f8fdf7f5e9c7039f:|:excerpt_id_bb83e035cbe37d34b4684d22bfa2ceb5</data>
    </node>
    <node id="Global Knowledge Graph Query Process">
      <data key="d1">function</data>
      <data key="d2">The Global Knowledge Graph Query Process focuses on extracting keywords, finding relationships, ranking them, extracting entities, and constructing context to emphasize interconnected concepts.</data>
      <data key="d3">excerpt_id_bb83e035cbe37d34b4684d22bfa2ceb5</data>
    </node>
    <node id="Relationship Search">
      <data key="d1">function</data>
      <data key="d2">Relationship Search involves finding relevant relationships using embedded keywords from the extracted query.</data>
      <data key="d3">excerpt_id_bb83e035cbe37d34b4684d22bfa2ceb5</data>
    </node>
    <node id="Relationship Ranking">
      <data key="d1">function</data>
      <data key="d2">Relationship Ranking assesses the relationships based on their weight and connectivity to prioritize the most relevant connections.</data>
      <data key="d3">excerpt_id_bb83e035cbe37d34b4684d22bfa2ceb5</data>
    </node>
    <node id="Hybrid Knowledge Graph Query Process">
      <data key="d1">function</data>
      <data key="d2">The Hybrid Knowledge Graph Query Process combines local and global query approaches to extract and rank relevant entities and relationships from both perspectives.</data>
      <data key="d3">excerpt_id_bb83e035cbe37d34b4684d22bfa2ceb5</data>
    </node>
    <node id="Dual Search">
      <data key="d1">function</data>
      <data key="d2">Dual Search performs both entity-focused and relationship-focused searches to capture a comprehensive view of available data.</data>
      <data key="d3">excerpt_id_bb83e035cbe37d34b4684d22bfa2ceb5</data>
    </node>
    <node id="Result Combination">
      <data key="d1">function</data>
      <data key="d2">Result Combination integrates outcomes from both the entity-focused and relationship-focused searches and ranks them to ensure relevance.</data>
      <data key="d3">excerpt_id_bb83e035cbe37d34b4684d22bfa2ceb5</data>
    </node>
    <node id="Knowledge Graph and Vector Search Integration">
      <data key="d1">function</data>
      <data key="d2">This Integration merges the results of knowledge graph queries with vector search results to leverage both structured data and semantic understandings.</data>
      <data key="d3">excerpt_id_bb83e035cbe37d34b4684d22bfa2ceb5</data>
    </node>
    <node id="Context Structuring">
      <data key="d1">function</data>
      <data key="d2">Context Structuring organizes the combined results to underscore both semantic similarities and explicit connections among entities and relationships.</data>
      <data key="d3">excerpt_id_bb83e035cbe37d34b4684d22bfa2ceb5</data>
    </node>
    <node id="LLM Processing">
      <data key="d1">function</data>
      <data key="d2">LLM Processing involves providing the structured context to a language model for generating appropriate responses based on the integrated data.</data>
      <data key="d3">excerpt_id_bb83e035cbe37d34b4684d22bfa2ceb5</data>
    </node>
    <node id="Knowledge Graph Maintenance and Updates">
      <data key="d1">function</data>
      <data key="d2">This function encompasses several mechanisms for managing the knowledge graph, including incremental updates, consistency checks, orphan handling, graph pruning, and performance optimization.</data>
      <data key="d3">excerpt_id_c911a970aeaf57b302869e9d148ac6c8</data>
    </node>
    <node id="Consistency Checks">
      <data key="d1">function</data>
      <data key="d2">Consistency Checks are mechanisms that maintain the integrity and consistency of the knowledge graph during updates.</data>
      <data key="d3">excerpt_id_c911a970aeaf57b302869e9d148ac6c8</data>
    </node>
    <node id="Orphan Handling">
      <data key="d1">function</data>
      <data key="d2">Orphan Handling refers to the management of entities and relationships that no longer have associated excerpts within the knowledge graph.</data>
      <data key="d3">excerpt_id_c911a970aeaf57b302869e9d148ac6c8</data>
    </node>
    <node id="Graph Pruning">
      <data key="d1">function</data>
      <data key="d2">Graph Pruning is an optional mechanism for removing less important entities and relationships from the knowledge graph to enhance clarity and focus.</data>
      <data key="d3">excerpt_id_c911a970aeaf57b302869e9d148ac6c8</data>
    </node>
    <node id="Strengths and Limitations of the Knowledge Graph Approach">
      <data key="d1">concept</data>
      <data key="d2">This concept encompasses both the advantages and drawbacks of using knowledge graphs, providing insights into their effectiveness in representing information.</data>
      <data key="d3">excerpt_id_c911a970aeaf57b302869e9d148ac6c8</data>
    </node>
    <node id="Explicit Connections">
      <data key="d1">feature:|:function</data>
      <data key="d2">Explicit Connections refer to the knowledge graph's ability to capture clear relationships between different concepts and entities.:|:Explicit Connections indicate that the system captures clear links mentioned within the documents.</data>
      <data key="d3">excerpt_id_c911a970aeaf57b302869e9d148ac6c8:|:excerpt_id_52cf87d011ec9029460148508a439403</data>
    </node>
    <node id="Structured Reasoning">
      <data key="d1">feature</data>
      <data key="d2">Structured Reasoning is the capability of the knowledge graph to enable logical analyses regarding entities and their interconnections.</data>
      <data key="d3">excerpt_id_c911a970aeaf57b302869e9d148ac6c8</data>
    </node>
    <node id="Complementary to Vectors">
      <data key="d1">feature</data>
      <data key="d2">This feature highlights how the knowledge graph provides insights that may not be represented in vector embeddings, enhancing understanding.</data>
      <data key="d3">excerpt_id_c911a970aeaf57b302869e9d148ac6c8</data>
    </node>
    <node id="Multi-Hop Reasoning">
      <data key="d1">feature</data>
      <data key="d2">Multi-Hop Reasoning indicates the knowledge graph's ability to support reasoning across several interconnected nodes or relationships.</data>
      <data key="d3">excerpt_id_c911a970aeaf57b302869e9d148ac6c8</data>
    </node>
    <node id="Explainability">
      <data key="d1">feature</data>
      <data key="d2">Explainability signifies that the graph structure offers a clearer interpretation of relationships compared to vector embeddings, making it more user-friendly.</data>
      <data key="d3">excerpt_id_c911a970aeaf57b302869e9d148ac6c8</data>
    </node>
    <node id="Extraction Quality">
      <data key="d1">limitation</data>
      <data key="d2">Extraction Quality denotes the dependence of the knowledge graph's effectiveness on the accuracy of the mechanisms used to extract entities and their relationships.</data>
      <data key="d3">excerpt_id_c911a970aeaf57b302869e9d148ac6c8</data>
    </node>
    <node id="Coverage">
      <data key="d1">limitation</data>
      <data key="d2">Coverage refers to the potential limitation of the knowledge graph in capturing all relevant information from documents.</data>
      <data key="d3">excerpt_id_c911a970aeaf57b302869e9d148ac6c8</data>
    </node>
    <node id="Complexity">
      <data key="d1">feature:|:limitation:|:variable</data>
      <data key="d2">Complexity indicates that more advanced processing can lead to increased query times, affecting the performance of the system.:|:Complexity highlights that operations involving graph queries can be intricate as compared to simpler vector searches.:|:Complexity signifies the intricate processing pipeline that is involved with the query type, making it the most complex to navigate.</data>
      <data key="d3">excerpt_id_c911a970aeaf57b302869e9d148ac6c8:|:excerpt_id_86ba72aabf2293e7a459f9e7845c2894:|:excerpt_id_9320c4230ec563f6b23dbe9d38b855e0</data>
    </node>
    <node id="Scaling">
      <data key="d1">limitation</data>
      <data key="d2">Scaling is a limitation pertaining to the increase of resource demands on graph operations as the size of the knowledge graph expands.</data>
      <data key="d3">excerpt_id_c911a970aeaf57b302869e9d148ac6c8</data>
    </node>
    <node id="Enhanced Extraction">
      <data key="d1">function</data>
      <data key="d2">Enhanced Extraction is a function related to improving the quality of entity and relationship extraction within the knowledge graph.</data>
      <data key="d3">excerpt_id_53fcb2b3968172f6a84ec306bc995c22</data>
    </node>
    <node id="Graph Algorithms">
      <data key="d1">function</data>
      <data key="d2">Graph Algorithms refer to the incorporation of more sophisticated algorithms for analyzing graphs within SmolRAG's knowledge graph capabilities.</data>
      <data key="d3">excerpt_id_53fcb2b3968172f6a84ec306bc995c22</data>
    </node>
    <node id="Temporal Aspects">
      <data key="d1">feature</data>
      <data key="d2">Temporal Aspects is a feature that allows the knowledge graph to support and incorporate temporal information.</data>
      <data key="d3">excerpt_id_53fcb2b3968172f6a84ec306bc995c22</data>
    </node>
    <node id="Multi-Document Reasoning">
      <data key="d1">function</data>
      <data key="d2">Multi-Document Reasoning is a function that enhances the ability to reason across multiple documents within the knowledge graph framework.</data>
      <data key="d3">excerpt_id_53fcb2b3968172f6a84ec306bc995c22</data>
    </node>
    <node id="User Feedback Integration">
      <data key="d1">function</data>
      <data key="d2">User Feedback Integration refers to the function of incorporating user feedback to improve the performance of SmolRAG's knowledge graph.</data>
      <data key="d3">excerpt_id_53fcb2b3968172f6a84ec306bc995c22</data>
    </node>
    <node id="Local Query Type">
      <data key="d1">example</data>
      <data key="d2">Local Query Type is an example of the different query types available in SmolRAG for accessing specific entity details.</data>
      <data key="d3">excerpt_id_53fcb2b3968172f6a84ec306bc995c22</data>
    </node>
    <node id="Global Query Type">
      <data key="d1">example</data>
      <data key="d2">Global Query Type is another example of SmolRAG’s query types, focusing on broader conceptual connections.</data>
      <data key="d3">excerpt_id_53fcb2b3968172f6a84ec306bc995c22</data>
    </node>
    <node id="Hybrid Query Type">
      <data key="d1">example</data>
      <data key="d2">Hybrid Query Type combines elements of both local and global queries for flexible information access.</data>
      <data key="d3">excerpt_id_53fcb2b3968172f6a84ec306bc995c22</data>
    </node>
    <node id="Mix Query Type">
      <data key="d1">example</data>
      <data key="d2">Mix Query Type refers to a category of queries in SmolRAG that allow for varied access to information.</data>
      <data key="d3">excerpt_id_53fcb2b3968172f6a84ec306bc995c22</data>
    </node>
    <node id="smol_rag.py">
      <data key="d1">interface</data>
      <data key="d2">smol_rag.py is the core file in the app directory that orchestrates the entire SmolRAG system by integrating all components.</data>
      <data key="d3">excerpt_id_f1fae642defef59936a03b705fb37221</data>
    </node>
    <node id="chunking.py">
      <data key="d1">function</data>
      <data key="d2">chunking.py implements document chunking strategies to facilitate efficient processing and retrieval of information.</data>
      <data key="d3">excerpt_id_f1fae642defef59936a03b705fb37221</data>
    </node>
    <node id="openai_llm.py">
      <data key="d1">interface</data>
      <data key="d2">openai_llm.py serves as an interface to OpenAI's API, enabling integration with external machine learning functionalities.</data>
      <data key="d3">excerpt_id_f1fae642defef59936a03b705fb37221</data>
    </node>
    <node id="vector_store.py">
      <data key="d1">configuration</data>
      <data key="d2">vector_store.py contains the implementation of a vector database used for storing and querying document representations.</data>
      <data key="d3">excerpt_id_f1fae642defef59936a03b705fb37221</data>
    </node>
    <node id="graph_store.py">
      <data key="d1">configuration</data>
      <data key="d2">graph_store.py is the file that contains the implementation of the NetworkXGraphStore class.:|:graph_store.py provides the implementation for a knowledge graph, which is essential for organizing and retrieving interconnected data.</data>
      <data key="d3">excerpt_id_8080c1c6669176557a9fdbafc319a94c:|:excerpt_id_f1fae642defef59936a03b705fb37221</data>
    </node>
    <node id="kv_store.py">
      <data key="d1">configuration</data>
      <data key="d2">kv_store.py is the file that contains the implementation of the JsonKvStore class.:|:kv_store.py is responsible for the key-value store implementation, allowing for efficient data management.</data>
      <data key="d3">excerpt_id_8080c1c6669176557a9fdbafc319a94c:|:excerpt_id_f1fae642defef59936a03b705fb37221</data>
    </node>
    <node id="utilities.py">
      <data key="d1">configuration:|:function</data>
      <data key="d2">utilities.py features general utility functions that assist with various tasks and operations within SmolRAG.:|:A file containing various utility functions used throughout the system for common operations and enhancements.</data>
      <data key="d3">excerpt_id_900d5e18a5cfe07ed9e4aa24282973e4:|:excerpt_id_f1fae642defef59936a03b705fb37221</data>
    </node>
    <node id="logger.py">
      <data key="d1">configuration</data>
      <data key="d2">logger.py is a module that configures the logging system, establishing how log messages are formatted and stored.:|:logger.py handles the logging configuration for tracking system activity and debugging.</data>
      <data key="d3">excerpt_id_f1fae642defef59936a03b705fb37221:|:excerpt_id_18b7236af033065c11ace3034fa8761a</data>
    </node>
    <node id="&quot;evaluation/">
      <data key="d1">feature</data>
      <data key="d2">evaluation/ is an evaluation framework that allows for assessing the performance and effectiveness of the SmolRAG system.</data>
      <data key="d3">excerpt_id_f1fae642defef59936a03b705fb37221</data>
    </node>
    <node id="&quot;api/">
      <data key="d1">configuration</data>
      <data key="d2">The api directory hosts the FastAPI implementation that provides REST API functionalities for SmolRAG.</data>
      <data key="d3">excerpt_id_f1fae642defef59936a03b705fb37221</data>
    </node>
    <node id="evaluation/" />
    <node id="api/" />
    <node id="Document Chunking Implementation">
      <data key="d1">feature</data>
      <data key="d2">Document Chunking Implementation refers to a feature that enables splitting documents into manageable pieces using various strategies.</data>
      <data key="d3">excerpt_id_c14bcfff661cc7a5b7c70532fd0b5d83</data>
    </node>
    <node id="Naive Overlap Excerpts">
      <data key="d1">function</data>
      <data key="d2">Naive Overlap Excerpts is a function that splits text at regular intervals with a specified overlap, providing a simple chunking strategy.</data>
      <data key="d3">excerpt_id_c14bcfff661cc7a5b7c70532fd0b5d83</data>
    </node>
    <node id="Preserve Markdown Code Excerpts">
      <data key="d1">function</data>
      <data key="d2">Preserve Markdown Code Excerpts is an advanced function designed to split text while respecting Markdown structure and code blocks.</data>
      <data key="d3">excerpt_id_c14bcfff661cc7a5b7c70532fd0b5d83</data>
    </node>
    <node id="Get Embedding">
      <data key="d1">function</data>
      <data key="d2">Get Embedding is a method within the OpenAiLlm class that retrieves an embedding for a given text input.</data>
      <data key="d3">excerpt_id_c14bcfff661cc7a5b7c70532fd0b5d83</data>
    </node>
    <node id="Get Completion">
      <data key="d1">function</data>
      <data key="d2">Get Completion is a method within the OpenAiLlm class that generates text completions based on a provided prompt.</data>
      <data key="d3">excerpt_id_c14bcfff661cc7a5b7c70532fd0b5d83</data>
    </node>
    <node id="Upsert">
      <data key="d1">function</data>
      <data key="d2">Upsert is a method in the NanoVectorStore class that inserts or updates items within the vector store.</data>
      <data key="d3">excerpt_id_c14bcfff661cc7a5b7c70532fd0b5d83</data>
    </node>
    <node id="Delete">
      <data key="d1">function</data>
      <data key="d2">Delete is a method in the NanoVectorStore class that removes items from the vector store.</data>
      <data key="d3">excerpt_id_c14bcfff661cc7a5b7c70532fd0b5d83</data>
    </node>
    <node id="Save">
      <data key="d1">function</data>
      <data key="d2">Save is a method in the NanoVectorStore class that persists the current state of the vector store to disk.</data>
      <data key="d3">excerpt_id_c14bcfff661cc7a5b7c70532fd0b5d83</data>
    </node>
    <node id="__init__(path)">
      <data key="d1">function</data>
      <data key="d2">__init__(path) is a method that initializes the graph store with a specified path.</data>
      <data key="d3">excerpt_id_8080c1c6669176557a9fdbafc319a94c</data>
    </node>
    <node id="add_node(name, **attrs)">
      <data key="d1">function</data>
      <data key="d2">add_node(name, **attrs) method is used to add a node (entity) to the graph with the given attributes.</data>
      <data key="d3">excerpt_id_8080c1c6669176557a9fdbafc319a94c</data>
    </node>
    <node id="add_edge(source, target, **attrs)">
      <data key="d1">function</data>
      <data key="d2">add_edge(source, target, **attrs) method is for adding an edge (relationship) between two nodes in the graph.</data>
      <data key="d3">excerpt_id_8080c1c6669176557a9fdbafc319a94c</data>
    </node>
    <node id="get_node(name)">
      <data key="d1">function</data>
      <data key="d2">get_node(name) method retrieves a node by its name from the graph.</data>
      <data key="d3">excerpt_id_8080c1c6669176557a9fdbafc319a94c</data>
    </node>
    <node id="get_edge((source, target))">
      <data key="d1">function</data>
      <data key="d2">get_edge((source, target)) method retrieves an edge based on source and target nodes.</data>
      <data key="d3">excerpt_id_8080c1c6669176557a9fdbafc319a94c</data>
    </node>
    <node id="get_node_edges(name)">
      <data key="d1">function</data>
      <data key="d2">get_node_edges(name) method retrieves all edges that are connected to a specified node.</data>
      <data key="d3">excerpt_id_8080c1c6669176557a9fdbafc319a94c</data>
    </node>
    <node id="degree(name)">
      <data key="d1">function</data>
      <data key="d2">degree(name) method calculates the degree (number of connections) of a node in the graph.</data>
      <data key="d3">excerpt_id_8080c1c6669176557a9fdbafc319a94c</data>
    </node>
    <node id="save()">
      <data key="d1">function</data>
      <data key="d2">save() method saves the current state of the graph to disk.:|:save() method saves the current state of the key-value store to disk.</data>
      <data key="d3">excerpt_id_8080c1c6669176557a9fdbafc319a94c</data>
    </node>
    <node id="add(key, value)">
      <data key="d1">function</data>
      <data key="d2">add(key, value) method adds a key-value pair to the key-value store.</data>
      <data key="d3">excerpt_id_8080c1c6669176557a9fdbafc319a94c</data>
    </node>
    <node id="get_by_key(key)">
      <data key="d1">function</data>
      <data key="d2">get_by_key(key) method retrieves a value associated with a specified key from the store.</data>
      <data key="d3">excerpt_id_8080c1c6669176557a9fdbafc319a94c</data>
    </node>
    <node id="has(key)">
      <data key="d1">function</data>
      <data key="d2">has(key) method checks if a key exists in the key-value store.</data>
      <data key="d3">excerpt_id_8080c1c6669176557a9fdbafc319a94c</data>
    </node>
    <node id="remove(key)">
      <data key="d1">function</data>
      <data key="d2">remove(key) method deletes a key-value pair from the store by the specified key.</data>
      <data key="d3">excerpt_id_8080c1c6669176557a9fdbafc319a94c</data>
    </node>
    <node id="equal(key, value)">
      <data key="d1">function</data>
      <data key="d2">equal(key, value) method checks if the value of a specified key equals a given value.</data>
      <data key="d3">excerpt_id_8080c1c6669176557a9fdbafc319a94c</data>
    </node>
    <node id="get_query_system_prompt">
      <data key="d1">function</data>
      <data key="d2">Gets the system prompt for vector search queries, assisting in formulating queries for data retrieval.</data>
      <data key="d3">excerpt_id_900d5e18a5cfe07ed9e4aa24282973e4</data>
    </node>
    <node id="excerpt_summary_prompt">
      <data key="d1">function</data>
      <data key="d2">Gets the prompt for summarizing excerpts, enabling a concise overview of document sections.</data>
      <data key="d3">excerpt_id_900d5e18a5cfe07ed9e4aa24282973e4</data>
    </node>
    <node id="get_kg_query_system_prompt">
      <data key="d1">function</data>
      <data key="d2">Gets the system prompt for knowledge graph queries, facilitating the retrieval of related data nodes.</data>
      <data key="d3">excerpt_id_900d5e18a5cfe07ed9e4aa24282973e4</data>
    </node>
    <node id="get_mix_system_prompt">
      <data key="d1">function</data>
      <data key="d2">Gets the system prompt for mix queries, allowing for combined search mechanisms in the database.</data>
      <data key="d3">excerpt_id_900d5e18a5cfe07ed9e4aa24282973e4</data>
    </node>
    <node id="get_docs">
      <data key="d1">function</data>
      <data key="d2">Gets all documents in a directory, facilitating batch processing of multiple files.</data>
      <data key="d3">excerpt_id_900d5e18a5cfe07ed9e4aa24282973e4</data>
    </node>
    <node id="make_hash">
      <data key="d1">function</data>
      <data key="d2">Creates a hash of content, providing a unique identifier for data integrity and retrieval.</data>
      <data key="d3">excerpt_id_900d5e18a5cfe07ed9e4aa24282973e4</data>
    </node>
    <node id="split_string_by_multi_markers">
      <data key="d1">function</data>
      <data key="d2">Splits a string by multiple markers, aiding in natural language processing tasks.</data>
      <data key="d3">excerpt_id_900d5e18a5cfe07ed9e4aa24282973e4</data>
    </node>
    <node id="clean_str">
      <data key="d1">function</data>
      <data key="d2">Cleans a string, removing unwanted characters for optimal data handling.</data>
      <data key="d3">excerpt_id_900d5e18a5cfe07ed9e4aa24282973e4</data>
    </node>
    <node id="list_of_list_to_csv">
      <data key="d1">function</data>
      <data key="d2">Converts a list of lists to CSV format for easier data manipulation and export.</data>
      <data key="d3">excerpt_id_900d5e18a5cfe07ed9e4aa24282973e4</data>
    </node>
    <node id="EMBEDDINGS_DB">
      <data key="d1">variable</data>
      <data key="d2">EMBEDDINGS_DB is a constant representing the path to the embeddings database, used for storing vector representations of data.</data>
      <data key="d3">excerpt_id_18b7236af033065c11ace3034fa8761a</data>
    </node>
    <node id="KG_DB">
      <data key="d1">variable</data>
      <data key="d2">KG_DB is a constant representing the path to the knowledge graph database, used for structuring and querying knowledge data.</data>
      <data key="d3">excerpt_id_18b7236af033065c11ace3034fa8761a</data>
    </node>
    <node id="QueryResponse">
      <data key="d1">interface</data>
      <data key="d2">QueryResponse is a Pydantic model serving as the schema for query responses, designed to standardize the output format of API responses.</data>
      <data key="d3">excerpt_id_18b7236af033065c11ace3034fa8761a</data>
    </node>
    <node id="validate_request()">
      <data key="d1">function</data>
      <data key="d2">validate_request() is a function that checks the validity of incoming query requests against defined criteria.</data>
      <data key="d3">excerpt_id_18b7236af033065c11ace3034fa8761a</data>
    </node>
    <node id="query_endpoint()">
      <data key="d1">function</data>
      <data key="d2">query_endpoint() is a function that processes incoming query requests and sends back appropriate responses to the client.</data>
      <data key="d3">excerpt_id_18b7236af033065c11ace3034fa8761a</data>
    </node>
    <node id="performance_metrics">
      <data key="d1">feature</data>
      <data key="d2">performance_metrics refers to logged data that measures the performance and efficiency of the system during operations.</data>
      <data key="d3">excerpt_id_18b7236af033065c11ace3034fa8761a</data>
    </node>
    <node id="error_handling">
      <data key="d1">feature</data>
      <data key="d2">error_handling encompasses mechanisms like try-except blocks to manage exceptions and ensure system reliability.</data>
      <data key="d3">excerpt_id_18b7236af033065c11ace3034fa8761a</data>
    </node>
    <node id="Graceful degradation">
      <data key="d1">feature</data>
      <data key="d2">Graceful degradation is a feature that allows the system to continue operating even when certain processes fail.</data>
      <data key="d3">excerpt_id_18b7236af033065c11ace3034fa8761a</data>
    </node>
    <node id="QUERY_REQUEST" />
    <node id="Document Ingestion Pipeline">
      <data key="d1">function</data>
      <data key="d2">The Document Ingestion Pipeline describes the sequence of processes for reading, chunking, summarizing, embedding, and extracting entities and relationships from documents.</data>
      <data key="d3">excerpt_id_e87481ca8b130695eba22131f0d98381</data>
    </node>
    <node id="Query Processing Pipeline">
      <data key="d1">function</data>
      <data key="d2">The Query Processing Pipeline outlines the steps for receiving, validating, processing, and returning query results based on specific methods.</data>
      <data key="d3">excerpt_id_e87481ca8b130695eba22131f0d98381</data>
    </node>
    <node id="SmolRag class">
      <data key="d1">api</data>
      <data key="d2">The SmolRag class encapsulates the core functionality implemented within the SmolRAG system, orchestrating its components for seamless user interaction.</data>
      <data key="d3">excerpt_id_e87481ca8b130695eba22131f0d98381</data>
    </node>
    <node id="Components">
      <data key="d1">feature</data>
      <data key="d2">Components are the individual modules within SmolRAG that work together, allowing for a well-defined interaction and separation of concerns within the system.</data>
      <data key="d3">excerpt_id_e87481ca8b130695eba22131f0d98381</data>
    </node>
    <node id="REST API">
      <data key="d1">api</data>
      <data key="d2">REST API is a type of web service that allows for communication between client and server using HTTP requests to access and manipulate data.:|:The REST API allows users to access various query types in the SmolRAG system, facilitating integration with external applications.</data>
      <data key="d3">excerpt_id_fbbd596684389658aff8fe6c6ef7eb82:|:excerpt_id_f1ef3b38067579dab39116dbfeca6ddc</data>
    </node>
    <node id="Python API">
      <data key="d1">api</data>
      <data key="d2">The Python API enables integration of query type selection functionalities into applications, facilitating improved interaction with the SmolRAG system.:|:The Python API provides programmatic access to SmolRAG's functionality, enabling users to tap into its querying capabilities through Python.</data>
      <data key="d3">excerpt_id_88e075052f43c91ba2dc0e70fd71388d:|:excerpt_id_f1ef3b38067579dab39116dbfeca6ddc</data>
    </node>
    <node id="Strengths">
      <data key="d1">feature</data>
      <data key="d2">Strengths refer to the positive attributes of a query type, including its speed, simplicity, and direct matching capabilities.:|:Strengths are positive attributes or capabilities that highlight advantages in a given context, encompassing conceptual focus, high-level connections, and thematic understanding.:|:Strengths refers to the positive attributes and capabilities of the system, highlighting its effectiveness in identifying entities and relationships.:|:Strengths denote the advantages of the Mix Query function, such as maximum coverage, complementary methods, robust performance, rich context, and fallback mechanisms.</data>
      <data key="d3">excerpt_id_9320c4230ec563f6b23dbe9d38b855e0:|:excerpt_id_4cd06704221cc59374c46e3d685f2e24:|:excerpt_id_fd5970a76cf7d27c6af5388563268de1:|:excerpt_id_52cf87d011ec9029460148508a439403</data>
    </node>
    <node id="Speed">
      <data key="d1">variable</data>
      <data key="d2">Speed indicates the performance level of a query, noted for being the fastest due to a single vector comparison operation.</data>
      <data key="d3">excerpt_id_fd5970a76cf7d27c6af5388563268de1</data>
    </node>
    <node id="Simplicity">
      <data key="d1">variable</data>
      <data key="d2">Simplicity highlights the ease of implementation with minimal processing steps required.</data>
      <data key="d3">excerpt_id_fd5970a76cf7d27c6af5388563268de1</data>
    </node>
    <node id="Direct Matching">
      <data key="d1">feature</data>
      <data key="d2">Direct Matching refers to the capability of the query type to find excerpts that directly correlate with the query topic.</data>
      <data key="d3">excerpt_id_fd5970a76cf7d27c6af5388563268de1</data>
    </node>
    <node id="Broad Coverage">
      <data key="d1">feature</data>
      <data key="d2">Broad Coverage reflects the query type's ability to find relevant information even with different terminology used.</data>
      <data key="d3">excerpt_id_fd5970a76cf7d27c6af5388563268de1</data>
    </node>
    <node id="Weaknesses">
      <data key="d1">feature</data>
      <data key="d2">Weaknesses pertain to the limitations of the query type, including limited context and lack of structured reasoning.:|:Weaknesses are limitations or drawbacks that detail potential issues or challenges associated with a given context, such as less detail and abstraction challenges.:|:Weaknesses outlines the limitations or challenges faced by the system, discussing areas where it may fall short.:|:Weaknesses refer to inherent challenges related to the complexity, information overload, resource intensity, balancing, and dependency issues in the querying process.</data>
      <data key="d3">excerpt_id_9320c4230ec563f6b23dbe9d38b855e0:|:excerpt_id_4cd06704221cc59374c46e3d685f2e24:|:excerpt_id_fd5970a76cf7d27c6af5388563268de1:|:excerpt_id_52cf87d011ec9029460148508a439403</data>
    </node>
    <node id="Limited Context">
      <data key="d1">variable</data>
      <data key="d2">Limited Context refers to the inability to consider the connections of individual excerpts to other information.</data>
      <data key="d3">excerpt_id_fd5970a76cf7d27c6af5388563268de1</data>
    </node>
    <node id="No Structured Reasoning">
      <data key="d1">variable</data>
      <data key="d2">No Structured Reasoning indicates the absence of capability to deduce relationships between concepts.</data>
      <data key="d3">excerpt_id_fd5970a76cf7d27c6af5388563268de1</data>
    </node>
    <node id="Missing Connections">
      <data key="d1">variable</data>
      <data key="d2">Missing Connections signifies the limitation in identifying multi-hop connections requiring traversing relationships.</data>
      <data key="d3">excerpt_id_fd5970a76cf7d27c6af5388563268de1</data>
    </node>
    <node id="Ambiguity Handling">
      <data key="d1">variable</data>
      <data key="d2">Ambiguity Handling is the ability of a query type to manage ambiguous queries with multiple interpretations.</data>
      <data key="d3">excerpt_id_fd5970a76cf7d27c6af5388563268de1</data>
    </node>
    <node id="Implementation">
      <data key="d1">configuration</data>
      <data key="d2">Implementation refers to the process of executing the global knowledge graph query to derive insights and relationships.:|:Implementation outlines the structured process for conducting the local knowledge graph query operation.:|:Implementation defines the steps involved in executing the Mix Query function, including combining results from both vector search and knowledge graph queries.:|:Implementation refers to the specific processes and steps undertaken to execute the Hybrid Knowledge Graph Query effectively.</data>
      <data key="d3">excerpt_id_9320c4230ec563f6b23dbe9d38b855e0:|:excerpt_id_4cd06704221cc59374c46e3d685f2e24:|:excerpt_id_fd5970a76cf7d27c6af5388563268de1:|:excerpt_id_52cf87d011ec9029460148508a439403</data>
    </node>
    <node id="Entity Focus">
      <data key="d1">variable</data>
      <data key="d2">Entity Focus emphasizes the capability of the system to find information about specific entities effectively.</data>
      <data key="d3">excerpt_id_52cf87d011ec9029460148508a439403</data>
    </node>
    <node id="Relationship Awareness">
      <data key="d1">variable</data>
      <data key="d2">Relationship Awareness denotes the ability of the system to recognize and identify connections between different entities.</data>
      <data key="d3">excerpt_id_52cf87d011ec9029460148508a439403</data>
    </node>
    <node id="Fine-Grained Information">
      <data key="d1">variable</data>
      <data key="d2">Fine-Grained Information refers to the system's ability to provide detailed insights about specific concepts.</data>
      <data key="d3">excerpt_id_52cf87d011ec9029460148508a439403</data>
    </node>
    <node id="Structured Context">
      <data key="d1">configuration</data>
      <data key="d2">Structured Context describes how information is presented in a logical format that highlights various relationships.</data>
      <data key="d3">excerpt_id_52cf87d011ec9029460148508a439403</data>
    </node>
    <node id="Limited Scope">
      <data key="d1">variable</data>
      <data key="d2">Limited Scope refers to the system's focus on specific entities, potentially overlooking broader concepts.</data>
      <data key="d3">excerpt_id_52cf87d011ec9029460148508a439403</data>
    </node>
    <node id="Extraction Dependence">
      <data key="d1">variable</data>
      <data key="d2">Extraction Dependence highlights the reliance of the system's quality on the entity extraction process.</data>
      <data key="d3">excerpt_id_52cf87d011ec9029460148508a439403</data>
    </node>
    <node id="Missing Semantics">
      <data key="d1">variable</data>
      <data key="d2">Missing Semantics indicates potential gaps in the system's ability to recognize relevant information not explicitly structured.</data>
      <data key="d3">excerpt_id_52cf87d011ec9029460148508a439403</data>
    </node>
    <node id="Narrow Context">
      <data key="d1">variable</data>
      <data key="d2">Narrow Context describes how the system primarily considers the immediate connections of entities.</data>
      <data key="d3">excerpt_id_52cf87d011ec9029460148508a439403</data>
    </node>
    <node id="Keyword Sensitivity">
      <data key="d1">variable</data>
      <data key="d2">Keyword Sensitivity points out that the performance of the system relies heavily on the quality of extracted keywords.</data>
      <data key="d3">excerpt_id_52cf87d011ec9029460148508a439403</data>
    </node>
    <node id="Conceptual Focus">
      <data key="d1">variable</data>
      <data key="d2">Conceptual Focus refers to the ability to find information about broader concepts and themes, showcasing a strength in understanding general ideas.</data>
      <data key="d3">excerpt_id_4cd06704221cc59374c46e3d685f2e24</data>
    </node>
    <node id="High-Level Connections">
      <data key="d1">variable</data>
      <data key="d2">High-Level Connections indicate the capacity to identify relationships between different areas of knowledge, providing insight into interconnectedness.</data>
      <data key="d3">excerpt_id_4cd06704221cc59374c46e3d685f2e24</data>
    </node>
    <node id="Bird's-Eye View">
      <data key="d1">variable</data>
      <data key="d2">Bird's-Eye View represents a broader perspective on a topic, allowing for overarching insights that encompass multiple facets.</data>
      <data key="d3">excerpt_id_4cd06704221cc59374c46e3d685f2e24</data>
    </node>
    <node id="Thematic Understanding">
      <data key="d1">variable</data>
      <data key="d2">Thematic Understanding highlights the capability to capture and interpret thematic relationships across documents, enhancing comprehension.</data>
      <data key="d3">excerpt_id_4cd06704221cc59374c46e3d685f2e24</data>
    </node>
    <node id="Less Detail" />
    <node id="Information Overload">
      <data key="d1">feature:|:variable</data>
      <data key="d2">Information Overload describes the tendency to provide excessive information, which may overwhelm users seeking concise answers.:|:Information Overload occurs when the output from the query type contains excessive information that can overwhelm processing capabilities.</data>
      <data key="d3">excerpt_id_9320c4230ec563f6b23dbe9d38b855e0:|:excerpt_id_86ba72aabf2293e7a459f9e7845c2894</data>
    </node>
    <node id="Resource Intensity">
      <data key="d1">feature:|:variable</data>
      <data key="d2">Resource Intensity refers to the computational demands associated with a specific query type, indicating it is the most resource-heavy option available.:|:Resource Intensity highlights the greater computational resources required for more complex query types, making them less efficient.</data>
      <data key="d3">excerpt_id_9320c4230ec563f6b23dbe9d38b855e0:|:excerpt_id_86ba72aabf2293e7a459f9e7845c2894</data>
    </node>
    <node id="Balancing Challenge">
      <data key="d1">variable</data>
      <data key="d2">Balancing Challenge refers to the difficulty in achieving an optimal mix of local and global information in responses.</data>
      <data key="d3">excerpt_id_9320c4230ec563f6b23dbe9d38b855e0</data>
    </node>
    <node id="Dependency Chain">
      <data key="d1">variable</data>
      <data key="d2">Dependency Chain points to the reliance on the quality of both entity and relationship extraction processes, impacting overall effectiveness.</data>
      <data key="d3">excerpt_id_9320c4230ec563f6b23dbe9d38b855e0</data>
    </node>
    <node id="Query Time">
      <data key="d1">feature</data>
      <data key="d2">Query Time describes the duration typically required to execute a particular query, highlighting that this type usually takes the longest to process.</data>
      <data key="d3">excerpt_id_86ba72aabf2293e7a459f9e7845c2894</data>
    </node>
    <node id="Context Limit Challenges">
      <data key="d1">feature</data>
      <data key="d2">Context Limit Challenges refers to the potential limitations in token processing that may affect queries ran with this type more frequently.</data>
      <data key="d3">excerpt_id_86ba72aabf2293e7a459f9e7845c2894</data>
    </node>
    <node id="Local KG">
      <data key="d1">function</data>
      <data key="d2">Local KG is a query type that provides high detail level related to specific entities, with medium resource usage.</data>
      <data key="d3">excerpt_id_86ba72aabf2293e7a459f9e7845c2894</data>
    </node>
    <node id="Global KG">
      <data key="d1">function</data>
      <data key="d2">Global KG allows for high-detail conceptual relationships, operating at medium resource usage levels.</data>
      <data key="d3">excerpt_id_86ba72aabf2293e7a459f9e7845c2894</data>
    </node>
    <node id="Hybrid KG">
      <data key="d1">function</data>
      <data key="d2">Hybrid KG serves balanced entity-concept questions but is noted for its slow speed and high resource demands.</data>
      <data key="d3">excerpt_id_86ba72aabf2293e7a459f9e7845c2894</data>
    </node>
    <node id="Mix">
      <data key="d1">function</data>
      <data key="d2">Mix is characterized by being the slowest query type with the highest resource usage, ideal for complex queries requiring both highest detail and semantic understanding.</data>
      <data key="d3">excerpt_id_86ba72aabf2293e7a459f9e7845c2894</data>
    </node>
    <node id="Comparative Analysis">
      <data key="d1">example</data>
      <data key="d2">Comparative Analysis provides an overview of different query types, comparing their dimensions to aid in selecting the appropriate type for particular needs.</data>
      <data key="d3">excerpt_id_86ba72aabf2293e7a459f9e7845c2894</data>
    </node>
    <node id="Query Type Selection Strategies">
      <data key="d1">example</data>
      <data key="d2">Query Type Selection Strategies outlines guidelines for choosing the right query type to enhance response quality based on specific requirements.</data>
      <data key="d3">excerpt_id_86ba72aabf2293e7a459f9e7845c2894</data>
    </node>
    <node id="Question Analysis">
      <data key="d1">function</data>
      <data key="d2">Question Analysis involves evaluating a query to determine its focus, whether it's on specific entities from a local knowledge graph or broader concepts from a global knowledge graph.</data>
      <data key="d3">excerpt_id_88e075052f43c91ba2dc0e70fd71388d</data>
    </node>
    <node id="Iterative Refinement">
      <data key="d1">function</data>
      <data key="d2">Iterative Refinement is the process of starting with simple query types and progressing to more complex ones to enhance response accuracy when initial answers are not sufficient.</data>
      <data key="d3">excerpt_id_88e075052f43c91ba2dc0e70fd71388d</data>
    </node>
    <node id="Domain-Specific Defaults">
      <data key="d1">feature</data>
      <data key="d2">Domain-Specific Defaults refers to predefined query types that perform consistently well for specific domains or document types, improving query handling efficiency.</data>
      <data key="d3">excerpt_id_88e075052f43c91ba2dc0e70fd71388d</data>
    </node>
    <node id="Response Time Requirements">
      <data key="d1">variable</data>
      <data key="d2">Response Time Requirements define the acceptable duration for delivering responses and the potential trade-offs between response quality and speed, depending on application needs.</data>
      <data key="d3">excerpt_id_88e075052f43c91ba2dc0e70fd71388d</data>
    </node>
    <node id="Computational Resource Constraints">
      <data key="d1">variable</data>
      <data key="d2">Computational Resource Constraints outline the limitations of available resources, guiding the prioritization of more efficient query types in resource-limited scenarios.</data>
      <data key="d3">excerpt_id_88e075052f43c91ba2dc0e70fd71388d</data>
    </node>
    <node id="Query Type">
      <data key="d1">variable</data>
      <data key="d2">Query Type specifies the type of query being conducted, which can be one of several options including standard, local_kg, global_kg, hybrid_kg, or mix.</data>
      <data key="d3">excerpt_id_09efdd02089d4d4a3aa99a252d672b58</data>
    </node>
    <node id="Local KG Query">
      <data key="d1">function</data>
      <data key="d2">Local KG Query refers to a query method that focuses on extracting information from a local knowledge graph.</data>
      <data key="d3">excerpt_id_09efdd02089d4d4a3aa99a252d672b58</data>
    </node>
    <node id="Global KG Query">
      <data key="d1">function</data>
      <data key="d2">Global KG Query indicates a query that retrieves information from a global knowledge graph, encompassing broader data sources.</data>
      <data key="d3">excerpt_id_09efdd02089d4d4a3aa99a252d672b58</data>
    </node>
    <node id="Hybrid KG Query">
      <data key="d1">function</data>
      <data key="d2">Hybrid KG Query combines aspects of both local and global knowledge graph queries for more comprehensive data retrieval.</data>
      <data key="d3">excerpt_id_09efdd02089d4d4a3aa99a252d672b58</data>
    </node>
    <node id="JSON Configuration">
      <data key="d1">configuration</data>
      <data key="d2">JSON Configuration is a structured format used for data representation, allowing queries and parameters to be specified.</data>
      <data key="d3">excerpt_id_09efdd02089d4d4a3aa99a252d672b58</data>
    </node>
    <node id="API Configuration">
      <data key="d1">api</data>
      <data key="d2">API Configuration outlines the specifications needed to interface and interact with software applications through defined protocols.</data>
      <data key="d3">excerpt_id_09efdd02089d4d4a3aa99a252d672b58</data>
    </node>
    <node id="Adaptive Query Selection">
      <data key="d1">feature</data>
      <data key="d2">Adaptive Query Selection automatically selects the optimal query type based on the user's question.</data>
      <data key="d3">excerpt_id_e477d31a3d287e5594aac260eb346c86</data>
    </node>
    <node id="Personalized Query Processing">
      <data key="d1">feature</data>
      <data key="d2">Personalized Query Processing adapts the query processing based on user preferences and history.</data>
      <data key="d3">excerpt_id_e477d31a3d287e5594aac260eb346c86</data>
    </node>
    <node id="Multi-Stage Querying">
      <data key="d1">feature</data>
      <data key="d2">Multi-Stage Querying implements iterative processes to refine query results progressively.</data>
      <data key="d3">excerpt_id_e477d31a3d287e5594aac260eb346c86</data>
    </node>
    <node id="Domain-Specific Optimizations">
      <data key="d1">feature</data>
      <data key="d2">Domain-Specific Optimizations aim to create specialized query types tailored for specific domains or document types.</data>
      <data key="d3">excerpt_id_e477d31a3d287e5594aac260eb346c86</data>
    </node>
    <node id="Interactive Querying">
      <data key="d1">feature</data>
      <data key="d2">Interactive Querying supports refinement of queries based on the results from initial requests.</data>
      <data key="d3">excerpt_id_e477d31a3d287e5594aac260eb346c86</data>
    </node>
    <node id="Query Types">
      <data key="d1">feature</data>
      <data key="d2">Query Types are capabilities within SmolRAG that allow for different approaches to handling questions, enhancing user experience and response quality.</data>
      <data key="d3">excerpt_id_a5e5cdf3e51d57cc6dcc1078d00dca43</data>
    </node>
    <edge source="SmolRAG" target="LightRAG">
      <data key="d4">SmolRAG is inspired by LightRAG, sharing fundamental principles for document retrieval and generation.</data>
      <data key="d5">inspiration, similarity</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_cb26db70dcd624e7b0e4b4273956b799</data>
    </edge>
    <edge source="SmolRAG" target="Vector Embeddings">
      <data key="d4">SmolRAG uses Vector Embeddings to enhance its querying capabilities based on contextual representations of text.</data>
      <data key="d5">core functionality, technology</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_cb26db70dcd624e7b0e4b4273956b799</data>
    </edge>
    <edge source="SmolRAG" target="Knowledge Graphs">
      <data key="d4">SmolRAG integrates Knowledge Graphs to deepen the contextual understanding of the data it processes.:|:SmolRAG utilizes Knowledge Graphs as a feature to complement vector embeddings, enhancing information retrieval capabilities.:|:SmolRAG integrates Knowledge Graphs to improve semantic search and understanding of information.</data>
      <data key="d5">integration, semantic search:|:functionality, enhancement:|:feature integration, contextual understanding</data>
      <data key="d6">26.0</data>
      <data key="d7">excerpt_id_cb26db70dcd624e7b0e4b4273956b799:|:excerpt_id_9e82c97bd0829ec40084f1a45d364353:|:excerpt_id_830011071c115f9a27db96ac1fa737b1</data>
    </edge>
    <edge source="SmolRAG" target="Large Language Models">
      <data key="d4">SmolRAG relies on Large Language Models to generate relevant answers to queries, enhancing user interaction.:|:SmolRAG employs Large Language Models to bolster its generative capabilities and language understanding.</data>
      <data key="d5">feature utilization, generative capability:|:foundation technology, user experience</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_cb26db70dcd624e7b0e4b4273956b799:|:excerpt_id_830011071c115f9a27db96ac1fa737b1</data>
    </edge>
    <edge source="SmolRAG" target="Document Processing">
      <data key="d4">Document Processing is a crucial function within SmolRAG, ensuring information remains current by managing document changes.</data>
      <data key="d5">functionality, information accuracy</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_cb26db70dcd624e7b0e4b4273956b799</data>
    </edge>
    <edge source="SmolRAG" target="Contextual Understanding">
      <data key="d4">SmolRAG's ability for Contextual Understanding allows it to maintain and convey document context effectively.</data>
      <data key="d5">core principle, user experience</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_cb26db70dcd624e7b0e4b4273956b799</data>
    </edge>
    <edge source="SmolRAG" target="Flexible Querying">
      <data key="d4">Flexible Querying capabilities of SmolRAG enable it to address diverse user inquiries efficiently.</data>
      <data key="d5">capability, user interaction</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_cb26db70dcd624e7b0e4b4273956b799</data>
    </edge>
    <edge source="SmolRAG" target="Code Preservation">
      <data key="d4">SmolRAG's Code Preservation feature ensures that technical content is retained during document processing.</data>
      <data key="d5">functionality, technical integrity</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_cb26db70dcd624e7b0e4b4273956b799</data>
    </edge>
    <edge source="SmolRAG" target="Retrieval-Augmented Generation">
      <data key="d4">SmolRAG implements Retrieval-Augmented Generation to provide enhanced capabilities for generating accurate and relevant answers.</data>
      <data key="d5">implementation, enhancement</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_830011071c115f9a27db96ac1fa737b1</data>
    </edge>
    <edge source="SmolRAG" target="Semantic Search">
      <data key="d4">SmolRAG includes Semantic Search as a key feature to improve the relevance of the responses it generates.</data>
      <data key="d5">feature inclusion, relevance enhancement</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_830011071c115f9a27db96ac1fa737b1</data>
    </edge>
    <edge source="SmolRAG" target="Documentation Search System">
      <data key="d4">SmolRAG can be used to create a Documentation Search System that benefits from its advanced search capabilities.</data>
      <data key="d5">application potential, use case</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_830011071c115f9a27db96ac1fa737b1</data>
    </edge>
    <edge source="SmolRAG" target="Knowledge Base">
      <data key="d4">SmolRAG supports the development of Knowledge Bases, enhancing information organization and retrieval.</data>
      <data key="d5">application potential, efficiency</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_830011071c115f9a27db96ac1fa737b1</data>
    </edge>
    <edge source="SmolRAG" target="Question-Answering Application">
      <data key="d4">SmolRAG serves as a foundation for Question-Answering Applications, providing accurate responses to queries.</data>
      <data key="d5">application potential, accuracy</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_830011071c115f9a27db96ac1fa737b1</data>
    </edge>
    <edge source="SmolRAG" target="Similarity Search">
      <data key="d4">SmolRAG implements the Similarity Search function as part of its capabilities to retrieve semantic information.:|:The Similarity Search function operates as a primary feature of the SmolRAG API, enabling effective information retrieval based on semantic understanding.</data>
      <data key="d5">information retrieval, functionality:|:core functionality, information retrieval</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_d18b53e295f2d7f1d8c1de2dd0ca1da8:|:excerpt_id_8e74fbca347d63700a75f9a44ad95dec</data>
    </edge>
    <edge source="SmolRAG" target="Efficient Vector Operations">
      <data key="d4">SmolRAG employs Efficient Vector Operations for high-performance vector calculations using NumPy.</data>
      <data key="d5">performance techniques, optimization</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_22c851b59e941d90f109fdbe5227ad21</data>
    </edge>
    <edge source="SmolRAG" target="Batch Processing">
      <data key="d4">Batch Processing is one of the strategies implemented by SmolRAG to improve processing efficiency.:|:Batch Processing is implemented in SmolRAG to reduce API costs and enhance efficiency by processing multiple items at once.:|:Batch Processing is a feature that can be utilized within the SmolRAG configuration to optimize query processing.</data>
      <data key="d5">optimization, processing efficiency:|:efficiency, cost reduction:|:efficiency improvement, strategy</data>
      <data key="d6">25.0</data>
      <data key="d7">excerpt_id_30a123552bb5d444811933f9adae9eba:|:excerpt_id_22c851b59e941d90f109fdbe5227ad21:|:excerpt_id_0758031048f3438910733878e3670905</data>
    </edge>
    <edge source="SmolRAG" target="Caching">
      <data key="d4">Caching helps SmolRAG enhance its performance by storing query embeddings and avoiding redundant calls.</data>
      <data key="d5">performance optimization, caching</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_22c851b59e941d90f109fdbe5227ad21</data>
    </edge>
    <edge source="SmolRAG" target="Incremental Updates">
      <data key="d4">Incremental Updates ensure that SmolRAG updates the vector store only when necessary, improving overall efficiency.:|:Incremental Updates in SmolRAG ensures that only modified parts of documents are re-embedded, thus optimizing resource use.</data>
      <data key="d5">efficiency improvement, update strategy:|:resource optimization, adaptability</data>
      <data key="d6">15.0</data>
      <data key="d7">excerpt_id_22c851b59e941d90f109fdbe5227ad21:|:excerpt_id_0758031048f3438910733878e3670905</data>
    </edge>
    <edge source="SmolRAG" target="Dimensionality Management">
      <data key="d4">Dimensionality Management is critical in SmolRAG to balance performance with vector dimensionality needs.</data>
      <data key="d5">performance balancing, strategy</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_22c851b59e941d90f109fdbe5227ad21</data>
    </edge>
    <edge source="SmolRAG" target="Query Ambiguity">
      <data key="d4">SmolRAG addresses the challenge of Query Ambiguity to improve similarity search effectiveness.</data>
      <data key="d5">problem-solving, search improvement</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_202adb0bb512738fa7d6f938caa6321b</data>
    </edge>
    <edge source="SmolRAG" target="Semantic Gaps">
      <data key="d4">SmolRAG incorporates methods to bridge Semantic Gaps enhancing search capability.</data>
      <data key="d5">problem-solving, search enhancement</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_202adb0bb512738fa7d6f938caa6321b</data>
    </edge>
    <edge source="SmolRAG" target="Out-of-Domain Queries">
      <data key="d4">SmolRAG can handle Out-of-Domain Queries to maintain search functionality even with unmatched queries.</data>
      <data key="d5">problem-solving, system robustness</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_202adb0bb512738fa7d6f938caa6321b</data>
    </edge>
    <edge source="SmolRAG" target="Long Documents">
      <data key="d4">SmolRAG implements strategies for handling Long Documents to enhance user experience during search.</data>
      <data key="d5">document handling, user experience</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_202adb0bb512738fa7d6f938caa6321b</data>
    </edge>
    <edge source="SmolRAG" target="Rare Terms">
      <data key="d4">SmolRAG balances the importance of Rare Terms to ensure comprehensive search results.</data>
      <data key="d5">term importance, search results</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_202adb0bb512738fa7d6f938caa6321b</data>
    </edge>
    <edge source="SmolRAG" target="Knowledge Graph Integration">
      <data key="d4">SmolRAG utilizes Knowledge Graph Integration to enhance search accuracy through vector and graph methods.</data>
      <data key="d5">search enhancement, accuracy</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_202adb0bb512738fa7d6f938caa6321b</data>
    </edge>
    <edge source="SmolRAG" target="Entity-Based Search">
      <data key="d4">SmolRAG employs Entity-Based Search to effectively locate entities in the knowledge graph.</data>
      <data key="d5">search functionality, entity recognition</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_202adb0bb512738fa7d6f938caa6321b</data>
    </edge>
    <edge source="SmolRAG" target="Relationship-Based Search">
      <data key="d4">SmolRAG supports Relationship-Based Search for identifying entity connections based on semantic similarity.</data>
      <data key="d5">semantic discovery, connectivity</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_202adb0bb512738fa7d6f938caa6321b</data>
    </edge>
    <edge source="SmolRAG" target="Hybrid Approaches">
      <data key="d4">SmolRAG is enhanced by Hybrid Approaches, blending strategies for improved search results.</data>
      <data key="d5">strategy blending, search improvement</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_202adb0bb512738fa7d6f938caa6321b</data>
    </edge>
    <edge source="SmolRAG" target="Weighted Combinations">
      <data key="d4">SmolRAG applies Weighted Combinations to fine-tune the effectiveness of various search methods.</data>
      <data key="d5">strategy refinement, search effectiveness</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_202adb0bb512738fa7d6f938caa6321b</data>
    </edge>
    <edge source="SmolRAG" target="Evaluating Search Quality">
      <data key="d4">SmolRAG includes Evaluating Search Quality mechanisms to continually assess and improve performance.</data>
      <data key="d5">quality assurance, performance improvement</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_202adb0bb512738fa7d6f938caa6321b</data>
    </edge>
    <edge source="SmolRAG" target="Response Text">
      <data key="d4">The SmolRAG API generates the Response Text containing the result of its operation.</data>
      <data key="d5">data generation, API response</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_9d9cc347ab952fb9a4b25bd3a1a18919</data>
    </edge>
    <edge source="SmolRAG" target="JSON">
      <data key="d4">SmolRAG outputs its results in JSON format, indicating the structure of the response data.</data>
      <data key="d5">data format, output structure</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_9d9cc347ab952fb9a4b25bd3a1a18919</data>
    </edge>
    <edge source="SmolRAG" target="result">
      <data key="d4">SmolRAG generates the `result` variable, which contains the output based on the given query, illustrating the API's core functionality.</data>
      <data key="d5">response generation, functionality</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_87dae939db470195b9a1c5b5ab8cca31</data>
    </edge>
    <edge source="SmolRAG" target="Error Handling">
      <data key="d4">The API incorporates Error Handling to improve user experience by providing feedback for potential issues during operation.:|:Error Handling capabilities in SmolRAG maintain operational continuity despite issues that may arise during embedding generation.</data>
      <data key="d5">user experience, error management:|:reliability, stability</data>
      <data key="d6">15.0</data>
      <data key="d7">excerpt_id_87dae939db470195b9a1c5b5ab8cca31:|:excerpt_id_0758031048f3438910733878e3670905</data>
    </edge>
    <edge source="SmolRAG" target="Standard Query">
      <data key="d4">SmolRAG provides the Standard Query function, allowing users to perform basic information retrieval.</data>
      <data key="d5">functionality, data retrieval</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_fddc660eda213cec6e37412bf400333b</data>
    </edge>
    <edge source="SmolRAG" target="Knowledge Graph Query">
      <data key="d4">SmolRAG offers the Knowledge Graph Query function to explore relationships between different entities.</data>
      <data key="d5">functionality, entity relationships</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_fddc660eda213cec6e37412bf400333b</data>
    </edge>
    <edge source="SmolRAG" target="Mix Query">
      <data key="d4">SmolRAG includes the Mix Query function, which merges elements of standard querying and knowledge graph exploration.:|:SmolRAG provides Mix Query as a resource-intensive option to enhance query capabilities.:|:The Mix Query is a feature of SmolRAG, combining different querying methodologies for enhanced functionality.".</data>
      <data key="d5">query capability, resource management:|:feature support, enhancement:|:functionality, integrated approach</data>
      <data key="d6">24.0</data>
      <data key="d7">excerpt_id_fddc660eda213cec6e37412bf400333b:|:excerpt_id_e477d31a3d287e5594aac260eb346c86:|:excerpt_id_f1ef3b38067579dab39116dbfeca6ddc</data>
    </edge>
    <edge source="SmolRAG" target="payload">
      <data key="d4">SmolRAG processes the information contained within the payload based on the query type provided.</data>
      <data key="d5">function processing</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_f867ac5b5c6b6493fa80e156c12f2998</data>
    </edge>
    <edge source="SmolRAG" target="Troubleshooting Guide">
      <data key="d4">The Troubleshooting Guide provides guidance on resolving issues specifically related to the SmolRAG system.</data>
      <data key="d5">support, resolution</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_ab9a95edcb52c69f2a75ee555f1b7457</data>
    </edge>
    <edge source="SmolRAG" target="Document Ingestion">
      <data key="d4">Document Ingestion is a critical feature within SmolRAG that allows it to process and manage documents effectively.:|:SmolRAG relies on Document Ingestion for acquiring documents, which is crucial for its efficiency and performance.</data>
      <data key="d5">functionality, processing:|:system performance, efficiency improvement</data>
      <data key="d6">17.0</data>
      <data key="d7">excerpt_id_33ec53332806b9871abe7246fe9d300e:|:excerpt_id_ab9a95edcb52c69f2a75ee555f1b7457</data>
    </edge>
    <edge source="SmolRAG" target="Querying">
      <data key="d4">Querying is a feature within SmolRAG that enables users to retrieve information from ingested documents.</data>
      <data key="d5">functionality, user interaction</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_ab9a95edcb52c69f2a75ee555f1b7457</data>
    </edge>
    <edge source="SmolRAG" target="app/logs/">
      <data key="d4">SmolRAG logs important data to the app/logs/ directory, enabling users to reference it for troubleshooting.</data>
      <data key="d5">logging, troubleshooting</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_774f4016ba53a64bd395a960e0ffcab8</data>
    </edge>
    <edge source="SmolRAG" target="General Troubleshooting Strategies">
      <data key="d4">The General Troubleshooting Strategies offer guidance on how to effectively utilize SmolRAG for problem resolution.</data>
      <data key="d5">guidance, problem-solving</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_774f4016ba53a64bd395a960e0ffcab8</data>
    </edge>
    <edge source="SmolRAG" target="Issue Tracker">
      <data key="d4">SmolRAG utilizes the Issue Tracker to manage and resolve common issues faced by users.</data>
      <data key="d5">troubleshooting, issue management</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_ff13dc4b945b67da62f3fade912e8d3f</data>
    </edge>
    <edge source="SmolRAG" target="Community Forums">
      <data key="d4">SmolRAG is supported by Community Forums where users can discuss and troubleshoot related issues.</data>
      <data key="d5">user support, collaboration</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_ff13dc4b945b67da62f3fade912e8d3f</data>
    </edge>
    <edge source="SmolRAG" target="Source Code">
      <data key="d4">Reviewing the Source Code helps users understand SmolRAG's behavior for effective troubleshooting.</data>
      <data key="d5">understanding, diagnostics</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_ff13dc4b945b67da62f3fade912e8d3f</data>
    </edge>
    <edge source="SmolRAG" target="Usage Examples">
      <data key="d4">SmolRAG is illustrated through Usage Examples, showcasing its capabilities in practical scenarios.</data>
      <data key="d5">demonstration, application</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_4aef7238aeefda715071f4fd758b3293</data>
    </edge>
    <edge source="SmolRAG" target="Basic Setup and Initialization">
      <data key="d4">Basic Setup and Initialization is a necessary step before implementing and using SmolRAG effectively.</data>
      <data key="d5">pre-requisite, setup</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_4aef7238aeefda715071f4fd758b3293</data>
    </edge>
    <edge source="SmolRAG" target="Instance">
      <data key="d4">SmolRAG creates an Instance that is used specifically to manage the ingestion of documents and query processing.</data>
      <data key="d5">functionality, configuration</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_7e70042d92c65d0381abf750e7b75435</data>
    </edge>
    <edge source="SmolRAG" target="Vector Search Method">
      <data key="d4">SmolRAG includes the Vector Search Method as a key function for performing queries in an efficient manner.</data>
      <data key="d5">functionality, efficiency</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_4eaabbb94075ebadba59d18cde321d42</data>
    </edge>
    <edge source="SmolRAG" target="Knowledge Graph Query Examples">
      <data key="d4">SmolRAG is demonstrated through Knowledge Graph Query Examples that show how to utilize its querying capabilities.</data>
      <data key="d5">demonstration, application</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_4eaabbb94075ebadba59d18cde321d42</data>
    </edge>
    <edge source="SmolRAG" target="API Endpoint">
      <data key="d4">SmolRAG function is accessed via the API Endpoint, necessitating communication through this URL to perform its operations.</data>
      <data key="d5">function access, interaction</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_04b29d6443a2c6106c835c2ddeda4287</data>
    </edge>
    <edge source="SmolRAG" target="Payload for Vector Search Query">
      <data key="d4">The Payload for Vector Search Query is used to interact specifically with SmolRAG to retrieve information based on a vector-based search.</data>
      <data key="d5">query interaction, information retrieval</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_04b29d6443a2c6106c835c2ddeda4287</data>
    </edge>
    <edge source="SmolRAG" target="Knowledge Graph Query Payload">
      <data key="d4">The Knowledge Graph Query Payload allows interaction with SmolRAG to gather information about entities related to a specific context, enhancing its querying capabilities.</data>
      <data key="d5">query interaction, contextual information</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_04b29d6443a2c6106c835c2ddeda4287</data>
    </edge>
    <edge source="SmolRAG" target="Mix Query Payload">
      <data key="d4">The Mix Query Payload facilitates interactions with SmolRAG to obtain details on the processing and retrieval of information across multiple query types.</data>
      <data key="d5">query interaction, multifaceted querying</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_04b29d6443a2c6106c835c2ddeda4287</data>
    </edge>
    <edge source="SmolRAG" target="Python Requests Library">
      <data key="d4">SmolRAG API utilizes the Python Requests Library for functionality related to making requests and interacting with its services.</data>
      <data key="d5">interaction, integration</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_dc5eb8ded0d63524675f654a6fc91d2d</data>
    </edge>
    <edge source="SmolRAG" target="Document Management">
      <data key="d4">Document Management is a specific functionality provided by the SmolRAG API for handling documents.</data>
      <data key="d5">functionality, feature</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_dc5eb8ded0d63524675f654a6fc91d2d</data>
    </edge>
    <edge source="SmolRAG" target="Custom Chunking Strategy">
      <data key="d4">SmolRAG allows the implementation of a Custom Chunking Strategy for managing documents when default methods are inadequate.:|:The implementation of a Custom Chunking Strategy is facilitated by using the SmolRAG API, highlighting its functional capabilities.</data>
      <data key="d5">functional capability, implementation:|:functionality, customization</data>
      <data key="d6">17.0</data>
      <data key="d7">excerpt_id_f27852542198490011a0063a5b735acb:|:excerpt_id_2a207df76f08f6572a56d121a4af7e96</data>
    </edge>
    <edge source="SmolRAG" target="Flask">
      <data key="d4">SmolRAG can be integrated into Flask web applications, showcasing compatibility between the API and the web framework.</data>
      <data key="d5">integration, compatibility</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_2a207df76f08f6572a56d121a4af7e96</data>
    </edge>
    <edge source="SmolRAG" target="Flask Web Application">
      <data key="d4">SmolRAG can be integrated into a Flask Web Application to enhance its functionality with document querying capabilities.</data>
      <data key="d5">integration, functionality enhancement</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_a0f941d65b7b426fcf7651ac77c9eefd</data>
    </edge>
    <edge source="SmolRAG" target="Batch Processing Example">
      <data key="d4">Batch Processing Example uses SmolRAG to demonstrate how to efficiently process multiple queries together.</data>
      <data key="d5">example use case, efficiency</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_a0f941d65b7b426fcf7651ac77c9eefd</data>
    </edge>
    <edge source="SmolRAG" target="Advanced Configuration Example">
      <data key="d4">The Advanced Configuration Example illustrates how to configure SmolRAG with customized components for enhanced functionality.</data>
      <data key="d5">configuration, customization</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_30a123552bb5d444811933f9adae9eba</data>
    </edge>
    <edge source="SmolRAG" target="Custom Components">
      <data key="d4">SmolRAG utilizes Custom Components in its configuration to provide flexibility for users creating unique setups.</data>
      <data key="d5">configuration, adaptability</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_c5fc9102d2349644a3809cad72f71169</data>
    </edge>
    <edge source="SmolRAG" target="Paths">
      <data key="d4">Paths are part of SmolRAG's configuration that determines the flow of data within the API.".</data>
      <data key="d5">data processing, configuration</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_c5fc9102d2349644a3809cad72f71169</data>
    </edge>
    <edge source="SmolRAG" target="Document Querying">
      <data key="d4">SmolRAG offers Document Querying as one of its primary functions, allowing efficient information retrieval.</data>
      <data key="d5">functionality, information retrieval</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_c5fc9102d2349644a3809cad72f71169</data>
    </edge>
    <edge source="SmolRAG" target="Knowledge Extraction">
      <data key="d4">Knowledge Extraction is another function provided by SmolRAG to enhance data extraction capabilities.</data>
      <data key="d5">functionality, data extraction</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_c5fc9102d2349644a3809cad72f71169</data>
    </edge>
    <edge source="SmolRAG" target="Integration with Web Applications">
      <data key="d4">Integration with Web Applications is a key feature of SmolRAG that extends its use cases into online platforms.</data>
      <data key="d5">integration, application</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_c5fc9102d2349644a3809cad72f71169</data>
    </edge>
    <edge source="SmolRAG" target="Various Use Cases">
      <data key="d4">Various Use Cases demonstrate how SmolRAG's functionalities can be applied to different scenarios, showcasing its versatility.</data>
      <data key="d5">application, versatility</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_c5fc9102d2349644a3809cad72f71169</data>
    </edge>
    <edge source="SmolRAG" target="Excerpt Embeddings">
      <data key="d4">SmolRAG utilizes Excerpt Embeddings as a core feature to enhance its retrieval capabilities through semantic understanding.:|:Excerpt embeddings are a fundamental aspect of SmolRAG's retrieval capabilities, allowing for semantic understanding.</data>
      <data key="d5">core function, retrieval technique:|:feature application, retrieval enhancement</data>
      <data key="d6">19.0</data>
      <data key="d7">excerpt_id_57292a4a5cf5ae55025a640b2ddac8b8:|:excerpt_id_dc80c8904c8ce4e245e92a5bec8771ed</data>
    </edge>
    <edge source="SmolRAG" target="Summary Integration">
      <data key="d4">SmolRAG includes Summary Integration to enhance the embedding process and improve content representation.</data>
      <data key="d5">embedding enhancement, content representation</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_96986ce98a0ff5dd646eb68683799151</data>
    </edge>
    <edge source="SmolRAG" target="Improved Retrieval">
      <data key="d4">SmolRAG leads to Improved Retrieval by embedding excerpts and their summaries together.</data>
      <data key="d5">retrieval quality, system benefits</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_96986ce98a0ff5dd646eb68683799151</data>
    </edge>
    <edge source="SmolRAG" target="NanoVectorStore">
      <data key="d4">NanoVectorStore is utilized by SmolRAG to store and retrieve embeddings efficiently, supporting its operations in semantic search.:|:SmolRAG utilizes NanoVectorStore to manage embeddings effectively and store vectors."</data>
      <data key="d5">vector management, system functionality:|:storage solution, operational support</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_96986ce98a0ff5dd646eb68683799151:|:excerpt_id_2000936bfa184ddaaecfee9d1339bf97</data>
    </edge>
    <edge source="SmolRAG" target="Embedding Cache">
      <data key="d4">SmolRAG utilizes an Embedding Cache to store previously computed embeddings, contributing to performance optimization.</data>
      <data key="d5">performance optimization, resource management</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_0758031048f3438910733878e3670905</data>
    </edge>
    <edge source="SmolRAG" target="High-Quality Models">
      <data key="d4">SmolRAG employs High-Quality Models, enhancing the effectiveness of retrieval through superior embeddings.</data>
      <data key="d5">quality, model efficiency</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_0758031048f3438910733878e3670905</data>
    </edge>
    <edge source="SmolRAG" target="Semantic Drift">
      <data key="d4">SmolRAG must account for semantic drift when handling long or complex documents in its embedding process.</data>
      <data key="d5">limitations, embedding challenges</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_57292a4a5cf5ae55025a640b2ddac8b8</data>
    </edge>
    <edge source="SmolRAG" target="Domain Specificity">
      <data key="d4">SmolRAG's design aims to address the domain specificity limitation of general-purpose embedding models.</data>
      <data key="d5">limitations, domain relevance</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_57292a4a5cf5ae55025a640b2ddac8b8</data>
    </edge>
    <edge source="SmolRAG" target="Language Limitations">
      <data key="d4">SmolRAG's performance is influenced by language limitations, necessitating specific strategies for various languages.</data>
      <data key="d5">limitations, performance variance</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_57292a4a5cf5ae55025a640b2ddac8b8</data>
    </edge>
    <edge source="SmolRAG" target="Computational Cost">
      <data key="d4">SmolRAG's functionalities are affected by computational costs associated with processing embeddings.</data>
      <data key="d5">resource requirements, efficiency</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_57292a4a5cf5ae55025a640b2ddac8b8</data>
    </edge>
    <edge source="SmolRAG" target="API Dependency">
      <data key="d4">The dependency on APIs creates vulnerabilities, which SmolRAG seeks to mitigate through design improvements.</data>
      <data key="d5">risks, system integrity</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_57292a4a5cf5ae55025a640b2ddac8b8</data>
    </edge>
    <edge source="SmolRAG" target="Model Upgrades">
      <data key="d4">SmolRAG is designed for continuous improvements through model upgrades as embedding technologies advance.</data>
      <data key="d5">evolution, technology advancement</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_57292a4a5cf5ae55025a640b2ddac8b8</data>
    </edge>
    <edge source="SmolRAG" target="Local Embeddings">
      <data key="d4">The integration of local embeddings aims to decrease reliance on external APIs in SmolRAG.</data>
      <data key="d5">independence, integration</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_57292a4a5cf5ae55025a640b2ddac8b8</data>
    </edge>
    <edge source="SmolRAG" target="Multi-Modal Support">
      <data key="d4">SmolRAG may support diverse content types, enhancing its capabilities with multi-modal support.</data>
      <data key="d5">diversity, content handling</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_57292a4a5cf5ae55025a640b2ddac8b8</data>
    </edge>
    <edge source="SmolRAG" target="Hierarchical Embeddings">
      <data key="d4">Hierarchical embeddings are explored by SmolRAG to improve long document processing.</data>
      <data key="d5">optimization, document handling</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_57292a4a5cf5ae55025a640b2ddac8b8</data>
    </edge>
    <edge source="SmolRAG" target="Fine-Tuning">
      <data key="d4">SmolRAG may incorporate fine-tuning strategies to enhance performance for specific domains.</data>
      <data key="d5">customization, performance improvement</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_57292a4a5cf5ae55025a640b2ddac8b8</data>
    </edge>
    <edge source="SmolRAG" target="Environment Variables">
      <data key="d4">SmolRAG utilizes Environment Variables to manage its core configuration settings for various functionalities.</data>
      <data key="d5">configuration management, system setup</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_a04d28950802508f2641ac651fc3089f</data>
    </edge>
    <edge source="SmolRAG" target="definitions.py">
      <data key="d4">SmolRAG uses the definitions.py file to set up its directory structure and allows for customization of paths needed for the application.</data>
      <data key="d5">configuration, usage</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_b0d4e3abf98287ec9c0b65e83c50a4f5</data>
    </edge>
    <edge source="SmolRAG" target="SmolRag Class">
      <data key="d4">The SmolRAG application is instantiated via the SmolRag Class, which accepts parameters to customize its behavior.</data>
      <data key="d5">instantiation, customization</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_b0d4e3abf98287ec9c0b65e83c50a4f5</data>
    </edge>
    <edge source="SmolRAG" target="Vector Store Configuration">
      <data key="d4">SmolRAG allows for the configuration of the vector store, influencing how embeddings are managed and utilized.</data>
      <data key="d5">configuration, customization</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_8c0374f7cf68e5fd2e81a44aabeb6e31</data>
    </edge>
    <edge source="SmolRAG" target="Knowledge Graph Configuration">
      <data key="d4">Knowledge Graph Configuration is a feature of SmolRAG, enabling the setup of entity storage and relationship management.</data>
      <data key="d5">implementation, configuration</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_11ec8cca8bde6a6c952520bf8d71db92</data>
    </edge>
    <edge source="SmolRAG" target="prompts.py">
      <data key="d4">The prompts defined in prompts.py guide the methods of the SmolRAG class in the extraction process.</data>
      <data key="d5">guidance, extraction process</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_48308b4707045e24b9b6c640c0048cbd</data>
    </edge>
    <edge source="SmolRAG" target="Query Configuration">
      <data key="d4">SmolRAG allows customization for the query processing which is part of the Query Configuration feature.</data>
      <data key="d5">customization, configuration</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_c289d1319a7b3fb8268c5d19dc2d9f0b</data>
    </edge>
    <edge source="SmolRAG" target="Log Level">
      <data key="d4">SmolRAG's logging system utilizes the Log Level variable to configure log output severity.</data>
      <data key="d5">logging, configuration</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_c289d1319a7b3fb8268c5d19dc2d9f0b</data>
    </edge>
    <edge source="SmolRAG" target="System Prompts">
      <data key="d4">System Prompts influence how queries are processed within SmolRAG, which can be customized.</data>
      <data key="d5">processing guidance, customization</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_c289d1319a7b3fb8268c5d19dc2d9f0b</data>
    </edge>
    <edge source="SmolRAG" target="Core Classes">
      <data key="d4">SmolRAG uses Core Classes as its foundational components which can be extended for advanced customization.</data>
      <data key="d5">customization, foundational components</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_fa8eff5daa3ccebd7d707f836f2eef0c</data>
    </edge>
    <edge source="SmolRAG" target="Custom LLM Interface">
      <data key="d4">SmolRAG allows users to implement a Custom LLM Interface to replace the default version for tailored interactions.</data>
      <data key="d5">customization, interaction</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_da7254efa9566860b06caf2d81ce9bf9</data>
    </edge>
    <edge source="SmolRAG" target="Custom Vector Store">
      <data key="d4">The SmolRAG API permits the inclusion of a Custom Vector Store, enhancing data retrieval options.</data>
      <data key="d5">customization, data management</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_da7254efa9566860b06caf2d81ce9bf9</data>
    </edge>
    <edge source="SmolRAG" target="Custom Knowledge Graph Store">
      <data key="d4">SmolRAG can be configured to utilize a Custom Knowledge Graph Store, allowing for specific knowledge management solutions.</data>
      <data key="d5">customization, knowledge management</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_da7254efa9566860b06caf2d81ce9bf9</data>
    </edge>
    <edge source="SmolRAG" target="Custom Key-Value Store">
      <data key="d4">Users can implement a Custom Key-Value Store with SmolRAG for improved data storage and retrieval efficiencies.</data>
      <data key="d5">customization, data storage</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_da7254efa9566860b06caf2d81ce9bf9</data>
    </edge>
    <edge source="SmolRAG" target="Performance Optimization">
      <data key="d4">Performance Optimization practices aim to enhance the performance of the SmolRAG API through various configuration adjustments.</data>
      <data key="d5">efficiency, API performance</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_da7254efa9566860b06caf2d81ce9bf9</data>
    </edge>
    <edge source="SmolRAG" target="Resource Efficiency">
      <data key="d4">Resource Efficiency measures ensure that the SmolRAG API operates within optimal resource limits while maximizing output.</data>
      <data key="d5">resource management, efficiency</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_da7254efa9566860b06caf2d81ce9bf9</data>
    </edge>
    <edge source="SmolRAG" target="Customization Strategy">
      <data key="d4">Customization Strategy involves the methods of configuring the SmolRAG API according to user requirements for effective deployment.</data>
      <data key="d5">configuration, adaptation</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_da7254efa9566860b06caf2d81ce9bf9</data>
    </edge>
    <edge source="SmolRAG" target="OpenAI's Embedding Models">
      <data key="d4">OpenAI's Embedding Models provide the foundational technology that enables SmolRAG to perform semantic search and entity extraction.</data>
      <data key="d5">technology dependency, foundational technology</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_2000936bfa184ddaaecfee9d1339bf97</data>
    </edge>
    <edge source="SmolRAG" target="Metadata">
      <data key="d4">Metadata is coupled with each embedding used by SmolRAG, facilitating the tracking and retrieval of specific embeddings and their contexts.</data>
      <data key="d5">information tracking, data retrieval</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_2000936bfa184ddaaecfee9d1339bf97</data>
    </edge>
    <edge source="SmolRAG" target="Entity Extraction">
      <data key="d4">Entity Extraction is a feature of SmolRAG that allows the system to build a knowledge graph from the entities identified in the text.</data>
      <data key="d5">feature application, knowledge graph</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_2000936bfa184ddaaecfee9d1339bf97</data>
    </edge>
    <edge source="SmolRAG" target="Relationship Identification">
      <data key="d4">Relationship Identification is a critical feature in SmolRAG that enables the analysis of connections among extracted entities.</data>
      <data key="d5">feature application, entity connections</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_2000936bfa184ddaaecfee9d1339bf97</data>
    </edge>
    <edge source="SmolRAG" target="LLM-Based Extraction">
      <data key="d4">LLM-Based Extraction is a function within SmolRAG that enhances the accuracy of entity and relationship detection using AI models.</data>
      <data key="d5">AI functionality, extraction improvement</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_2000936bfa184ddaaecfee9d1339bf97</data>
    </edge>
    <edge source="SmolRAG" target="Structured Format">
      <data key="d4">Structured Format provides a way to consistently process and query the extracted information from SmolRAG.</data>
      <data key="d5">information consistency, processing structure</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_2000936bfa184ddaaecfee9d1339bf97</data>
    </edge>
    <edge source="SmolRAG" target="Change Detection Mechanism">
      <data key="d4">Change Detection Mechanism allows SmolRAG to adapt the knowledge graph dynamically as new information becomes available.</data>
      <data key="d5">dynamic adaptation, information relevance</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_2000936bfa184ddaaecfee9d1339bf97</data>
    </edge>
    <edge source="SmolRAG" target="Document Ingestion Process">
      <data key="d4">SmolRAG incorporates the Document Ingestion Process as a key feature that transforms documents into a knowledge base.</data>
      <data key="d5">feature implementation, system functionality</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_04830b46c6b9fee612a7e80e9b24cec2</data>
    </edge>
    <edge source="SmolRAG" target="Performance">
      <data key="d4">SmolRAG's performance is determined by various metrics affecting its efficiency and user experience, making performance a core feature of the API.</data>
      <data key="d5">performance, efficiency</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_9b3e7699a2ad7cd3ed369e4a0e702290</data>
    </edge>
    <edge source="SmolRAG" target="API Calls">
      <data key="d4">SmolRAG must track API Calls for cost management and to understand usage patterns.:|:API Calls are significant for assessing SmolRAG's performance, impacting both cost and the overall system efficiency.</data>
      <data key="d5">usage tracking, performance evaluation:|:cost, performance metric</data>
      <data key="d6">15.0</data>
      <data key="d7">excerpt_id_9b3e7699a2ad7cd3ed369e4a0e702290:|:excerpt_id_1240c160e7b3db62fbd1d9af5733d19e</data>
    </edge>
    <edge source="SmolRAG" target="Document Ingestion Performance">
      <data key="d4">SmolRAG includes optimizing Document Ingestion Performance through various strategies to handle large document collections more effectively.</data>
      <data key="d5">optimization, configuration</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_410400e8efb55e29eb563d4e92c76993</data>
    </edge>
    <edge source="SmolRAG" target="Vertical Scaling">
      <data key="d4">SmolRAG includes scaling strategies that involve enhancing its vertical capabilities to manage increasing workloads effectively.</data>
      <data key="d5">performance enhancement, scalability</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_9c072e3e78902159765fef2d7578e992</data>
    </edge>
    <edge source="SmolRAG" target="Horizontal Scaling">
      <data key="d4">SmolRAG supports horizontal scaling for better distribution of processing loads across multiple machines.</data>
      <data key="d5">distributed processing, resource management</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_9c072e3e78902159765fef2d7578e992</data>
    </edge>
    <edge source="SmolRAG" target="Response Times">
      <data key="d4">Response Times are a critical performance metric that SmolRAG needs to monitor to evaluate its efficiency.</data>
      <data key="d5">performance metrics, optimization</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_1240c160e7b3db62fbd1d9af5733d19e</data>
    </edge>
    <edge source="SmolRAG" target="Resource Usage">
      <data key="d4">Resource Usage needs to be monitored by SmolRAG as it directly impacts system performance and optimization efforts.</data>
      <data key="d5">performance metrics, optimization</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_1240c160e7b3db62fbd1d9af5733d19e</data>
    </edge>
    <edge source="SmolRAG" target="Error Rates">
      <data key="d4">Monitoring Error Rates is essential for SmolRAG to enhance reliability and system health.</data>
      <data key="d5">system reliability, performance evaluation</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_1240c160e7b3db62fbd1d9af5733d19e</data>
    </edge>
    <edge source="SmolRAG" target="Python Profilers">
      <data key="d4">Python Profilers are utilized within SmolRAG to identify performance bottlenecks and optimize operations.</data>
      <data key="d5">performance optimization tools, profiling</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_1240c160e7b3db62fbd1d9af5733d19e</data>
    </edge>
    <edge source="SmolRAG" target="Memory Profilers">
      <data key="d4">Memory Profilers are used within SmolRAG to track memory usage and address potential inefficiencies.</data>
      <data key="d5">performance optimization tools, profiling</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_1240c160e7b3db62fbd1d9af5733d19e</data>
    </edge>
    <edge source="SmolRAG" target="Logging">
      <data key="d4">Logging is integrated into SmolRAG for its performance-critical operations, facilitating troubleshooting and monitoring.</data>
      <data key="d5">monitoring, troubleshooting</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_1240c160e7b3db62fbd1d9af5733d19e</data>
    </edge>
    <edge source="SmolRAG" target="Tracing">
      <data key="d4">Tracing, using tools like OpenTelemetry, is essential for SmolRAG to monitor system interactions across services.</data>
      <data key="d5">monitoring tools, system interactions</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_1240c160e7b3db62fbd1d9af5733d19e</data>
    </edge>
    <edge source="SmolRAG" target="Simple Performance Monitoring">
      <data key="d4">Simple Performance Monitoring serves as an example of how SmolRAG can implement performance tracking and profiling capabilities.</data>
      <data key="d5">implementation example, performance tracking</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_1240c160e7b3db62fbd1d9af5733d19e</data>
    </edge>
    <edge source="SmolRAG" target="CPU Considerations">
      <data key="d4">SmolRAG's performance is influenced by CPU considerations, including core count and clock speed which optimize processing during ingestion.</data>
      <data key="d5">performance factors, optimization</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_f23cfae03c6ea9dae127b21ad7657454</data>
    </edge>
    <edge source="SmolRAG" target="Memory Considerations">
      <data key="d4">Memory considerations are crucial for SmolRAG to function effectively, as they pertain to RAM capacity and configuration which impact overall efficiency.</data>
      <data key="d5">system efficiency, capacity management</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_f23cfae03c6ea9dae127b21ad7657454</data>
    </edge>
    <edge source="SmolRAG" target="Storage Considerations">
      <data key="d4">The choice of storage type and capacity in SmolRAG directly affects its performance, especially in handling data throughput.</data>
      <data key="d5">data handling, performance optimization</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_f23cfae03c6ea9dae127b21ad7657454</data>
    </edge>
    <edge source="SmolRAG" target="Network Considerations">
      <data key="d4">Network considerations are essential for SmolRAG, especially for API calls, influencing its ability to operate in distributed environments.</data>
      <data key="d5">connectivity, operational effectiveness</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_f23cfae03c6ea9dae127b21ad7657454</data>
    </edge>
    <edge source="SmolRAG" target="Small Deployments">
      <data key="d4">Small Deployments provide specific hardware recommendations critical for the successful implementation of SmolRAG systems involved with small datasets.</data>
      <data key="d5">deployment strategy, hardware requirements</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_f23cfae03c6ea9dae127b21ad7657454</data>
    </edge>
    <edge source="SmolRAG" target="Medium Deployments">
      <data key="d4">Medium Deployments outline hardware specifications necessary for SmolRAG to function optimally when dealing with medium-sized document collections.</data>
      <data key="d5">deployment strategy, performance requirements</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_f23cfae03c6ea9dae127b21ad7657454</data>
    </edge>
    <edge source="SmolRAG" target="Large Deployments">
      <data key="d4">Large Deployments suggest required configurations for SmolRAG, highlighting the need for robustness in larger environments.</data>
      <data key="d5">deployment complexity, robustness</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_f23cfae03c6ea9dae127b21ad7657454</data>
    </edge>
    <edge source="SmolRAG" target="Cloud Provider Selection">
      <data key="d4">SmolRAG's deployment necessitates choosing the right cloud provider to perform efficiently, considering various aspects of the provider's offerings.</data>
      <data key="d5">deployment, performance</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_14e13330c8ba86a6d13d53a1fb558359</data>
    </edge>
    <edge source="SmolRAG" target="Containerization">
      <data key="d4">SmolRAG is deployed using containerization techniques to manage resources effectively during cloud deployment.</data>
      <data key="d5">deployment technique, resource management</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_14e13330c8ba86a6d13d53a1fb558359</data>
    </edge>
    <edge source="SmolRAG" target="Query Processing">
      <data key="d4">SmolRAG's performance heavily depends on effective Query Processing to handle user interactions swiftly.</data>
      <data key="d5">system responsiveness, user interaction</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_33ec53332806b9871abe7246fe9d300e</data>
    </edge>
    <edge source="SmolRAG" target="Resource Management">
      <data key="d4">Proper Resource Management is necessary for SmolRAG to operate effectively under different loads while maintaining performance.</data>
      <data key="d5">operational efficiency, load management</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_33ec53332806b9871abe7246fe9d300e</data>
    </edge>
    <edge source="SmolRAG" target="Scaling Strategy">
      <data key="d4">Scaling Strategy is essential for SmolRAG to adapt its resources based on the demands of document ingestion and query processing.</data>
      <data key="d5">resource allocation, adaptability</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_33ec53332806b9871abe7246fe9d300e</data>
    </edge>
    <edge source="SmolRAG" target="Knowledge Graph Structure">
      <data key="d4">SmolRAG leverages Knowledge Graph Structure to organize its entities and relationships for efficient querying.</data>
      <data key="d5">system organization, querying</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_9e82c97bd0829ec40084f1a45d364353</data>
    </edge>
    <edge source="SmolRAG" target="Knowledge Graph Construction">
      <data key="d4">Knowledge Graph Construction is integral to SmolRAG as it transforms unstructured data into a structured knowledge graph.</data>
      <data key="d5">data transformation, integration</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_9e82c97bd0829ec40084f1a45d364353</data>
    </edge>
    <edge source="SmolRAG" target="Knowledge Graph Maintenance and Updates">
      <data key="d4">SmolRAG is designed to perform knowledge graph maintenance and updates to ensure accurate representation of knowledge as documents evolve.</data>
      <data key="d5">system function, maintenance</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_c911a970aeaf57b302869e9d148ac6c8</data>
    </edge>
    <edge source="SmolRAG" target="Knowledge Graph">
      <data key="d4">SmolRAG incorporates Knowledge Graph as a feature to enhance its information retrieval capabilities.</data>
      <data key="d5">integration, functionality</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_53fcb2b3968172f6a84ec306bc995c22</data>
    </edge>
    <edge source="SmolRAG" target="Local Query Type">
      <data key="d4">SmolRAG allows users to perform Local Query Types for targeted information retrieval.</data>
      <data key="d5">access method, information retrieval</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_53fcb2b3968172f6a84ec306bc995c22</data>
    </edge>
    <edge source="SmolRAG" target="Global Query Type">
      <data key="d4">SmolRAG supports Global Query Types for broader information access and conceptual connections.</data>
      <data key="d5">access method, conceptual connections</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_53fcb2b3968172f6a84ec306bc995c22</data>
    </edge>
    <edge source="SmolRAG" target="Hybrid Query Type">
      <data key="d4">Hybrid Query Type integrates different querying strategies, enhancing the flexibility of SmolRAG.</data>
      <data key="d5">flexibility, integration</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_53fcb2b3968172f6a84ec306bc995c22</data>
    </edge>
    <edge source="SmolRAG" target="Mix Query Type">
      <data key="d4">Mix Query Type allows varied access to information, illustrating the versatility of SmolRAG.</data>
      <data key="d5">versatility, access method</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_53fcb2b3968172f6a84ec306bc995c22</data>
    </edge>
    <edge source="SmolRAG" target="app">
      <data key="d4">SmolRAG uses the app directory to organize its core functionalities and modules, highlighting its modular structure.</data>
      <data key="d5">modularity, organization</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_f1fae642defef59936a03b705fb37221</data>
    </edge>
    <edge source="SmolRAG" target="smol_rag.py">
      <data key="d4">The smol_rag.py file is integral to the SmolRAG system as it orchestrates the interaction of various components.</data>
      <data key="d5">integration, orchestration</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_f1fae642defef59936a03b705fb37221</data>
    </edge>
    <edge source="SmolRAG" target="evaluation/">
      <data key="d4">evaluation/ provides a framework for assessing the effectiveness of the SmolRAG system, indicating its importance.</data>
      <data key="d5">evaluation, performance assessment</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_f1fae642defef59936a03b705fb37221</data>
    </edge>
    <edge source="SmolRAG" target="api/">
      <data key="d4">The api directory allows SmolRAG to expose its functionalities through REST API endpoints.</data>
      <data key="d5">API integration, functionality</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_f1fae642defef59936a03b705fb37221</data>
    </edge>
    <edge source="SmolRAG" target="Document Ingestion Pipeline">
      <data key="d4">The Document Ingestion Pipeline is part of the SmolRAG system, illustrating its functionality in processing documents.</data>
      <data key="d5">system functionality, modularity</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_e87481ca8b130695eba22131f0d98381</data>
    </edge>
    <edge source="SmolRAG" target="Query Processing Pipeline">
      <data key="d4">The Query Processing Pipeline is also a significant aspect of the SmolRAG system, showcasing its ability to handle queries effectively.</data>
      <data key="d5">system functionality, modularity</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_e87481ca8b130695eba22131f0d98381</data>
    </edge>
    <edge source="SmolRAG" target="Vector Search Query">
      <data key="d4">SmolRAG includes the Vector Search Query as one of its core functionalities for semantic search.".</data>
      <data key="d5">functionality, core component</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_f1ef3b38067579dab39116dbfeca6ddc</data>
    </edge>
    <edge source="SmolRAG" target="Local Knowledge Graph Query">
      <data key="d4">The Local Knowledge Graph Query is part of SmolRAG's offerings, enhancing its ability to find entities and relationships.".</data>
      <data key="d5">feature support, enhancement</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_f1ef3b38067579dab39116dbfeca6ddc</data>
    </edge>
    <edge source="SmolRAG" target="Global Knowledge Graph Query">
      <data key="d4">The Global Knowledge Graph Query is available within SmolRAG, providing users with high-level querying capabilities.".</data>
      <data key="d5">feature support, enhancement</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_f1ef3b38067579dab39116dbfeca6ddc</data>
    </edge>
    <edge source="SmolRAG" target="Hybrid Knowledge Graph Query">
      <data key="d4">The Hybrid Knowledge Graph Query is integrated into SmolRAG, allowing for combined query approaches.".</data>
      <data key="d5">feature support, integration</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_f1ef3b38067579dab39116dbfeca6ddc</data>
    </edge>
    <edge source="SmolRAG" target="Python API">
      <data key="d4">SmolRAG can be accessed through the Python API, offering users programmatic capabilities for querying.".</data>
      <data key="d5">access method, integration</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_f1ef3b38067579dab39116dbfeca6ddc</data>
    </edge>
    <edge source="SmolRAG" target="REST API">
      <data key="d4">SmolRAG provides a REST API to facilitate interaction with its various query types.".</data>
      <data key="d5">access method, integration</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_f1ef3b38067579dab39116dbfeca6ddc</data>
    </edge>
    <edge source="SmolRAG" target="Vector Search">
      <data key="d4">SmolRAG incorporates Vector Search as one of its query types to enhance user query performances.</data>
      <data key="d5">query performance, system capability</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_e477d31a3d287e5594aac260eb346c86</data>
    </edge>
    <edge source="SmolRAG" target="Knowledge Graph Queries">
      <data key="d4">SmolRAG allows users to utilize Knowledge Graph Queries, leveraging the complexity of the knowledge graph.</data>
      <data key="d5">query performance, system capability</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_e477d31a3d287e5594aac260eb346c86</data>
    </edge>
    <edge source="SmolRAG" target="Multi-Stage Querying">
      <data key="d4">Multi-Stage Querying is a feature that enhances the effectiveness of SmolRAG's query processing framework.</data>
      <data key="d5">query processing, system efficiency</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_e477d31a3d287e5594aac260eb346c86</data>
    </edge>
    <edge source="SmolRAG" target="Domain-Specific Optimizations">
      <data key="d4">Domain-Specific Optimizations provide specialized functionalities within SmolRAG to handle various document types effectively.</data>
      <data key="d5">specialization, query processing</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_e477d31a3d287e5594aac260eb346c86</data>
    </edge>
    <edge source="SmolRAG" target="Interactive Querying">
      <data key="d4">Interactive Querying is a feature that contributes to the iterative refinement of queries within the SmolRAG system.</data>
      <data key="d5">refinement, query capability</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_e477d31a3d287e5594aac260eb346c86</data>
    </edge>
    <edge source="SmolRAG" target="Query Types">
      <data key="d4">SmolRAG utilizes different Query Types to optimize how it responds to user queries, demonstrating its flexibility and adaptability.</data>
      <data key="d5">functionality, optimization</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_a5e5cdf3e51d57cc6dcc1078d00dca43</data>
    </edge>
    <edge source="Knowledge Graphs" target="Entities">
      <data key="d4">Knowledge Graphs consist of Entities, which are the fundamental components representing distinct concepts extracted from documents.</data>
      <data key="d5">structure, components</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_9e82c97bd0829ec40084f1a45d364353</data>
    </edge>
    <edge source="Contextual Understanding" target="Vector Representation">
      <data key="d4">Contextual Understanding enhances the capabilities of Vector Representation by allowing for a nuanced interpretation of text semantics.</data>
      <data key="d5">enhancement, semantic depth</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_8e74fbca347d63700a75f9a44ad95dec</data>
    </edge>
    <edge source="Contextual Understanding" target="Strengths">
      <data key="d4">Contextual Understanding is among the strengths that allows the system to grasp deeper meanings in queries.</data>
      <data key="d5">semantic comprehension, capability</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_fd5970a76cf7d27c6af5388563268de1</data>
    </edge>
    <edge source="Document Processor" target="Knowledge Graph">
      <data key="d4">Document Processor extracts entities and relationships from documents which are then stored in the Knowledge Graph.</data>
      <data key="d5">data extraction, storage</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_ae4f7039a8650da3b37a6933308a7196</data>
    </edge>
    <edge source="Vector Store" target="Query Processor">
      <data key="d4">Query Processor retrieves relevant information from the Vector Store to respond to user queries.</data>
      <data key="d5">information retrieval, query response</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_ae4f7039a8650da3b37a6933308a7196</data>
    </edge>
    <edge source="Vector Store" target="Knowledge Graph">
      <data key="d4">Vector Store provides document embeddings that can be referenced in the Knowledge Graph for semantic searches.:|:Vector Store and Knowledge Graph are both components that can consume significant memory, highlighting their interrelated resource management challenges.:|:Vector Store and Knowledge Graph work together to enable efficient querying and data retrieval for embeddings and relationships.</data>
      <data key="d5">memory management, interrelation:|:data linkage, semantic search:|:data storage, querying</data>
      <data key="d6">23.0</data>
      <data key="d7">excerpt_id_ae4f7039a8650da3b37a6933308a7196:|:excerpt_id_efce5aab9b4130a5bb56f788c7389339:|:excerpt_id_8d580efe0a0849a9ed415edb7a33f22e</data>
    </edge>
    <edge source="Vector Store" target="Caches">
      <data key="d4">Caches enhance the performance of the Vector Store by storing embeddings and query results, directly impacting memory usage dynamics.</data>
      <data key="d5">performance enhancement, memory usage</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_8d580efe0a0849a9ed415edb7a33f22e</data>
    </edge>
    <edge source="Vector Store" target="Lazy Loading">
      <data key="d4">Lazy Loading is a strategy employed to optimize memory use in the Vector Store by delaying component loading until necessary.</data>
      <data key="d5">optimization strategy, memory efficiency</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_8d580efe0a0849a9ed415edb7a33f22e</data>
    </edge>
    <edge source="Vector Store" target="Memory-Mapped Files">
      <data key="d4">Memory-Mapped Files improve the efficiency of the Vector Store by reducing RAM usage when accessing vector data.</data>
      <data key="d5">data management, efficiency</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_8d580efe0a0849a9ed415edb7a33f22e</data>
    </edge>
    <edge source="Vector Store" target="Resource Monitoring">
      <data key="d4">Resource Monitoring is related to the Vector Store as it tracks memory usage to optimize its operation and mitigate leaks.</data>
      <data key="d5">tracking, optimization</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_8d580efe0a0849a9ed415edb7a33f22e</data>
    </edge>
    <edge source="Knowledge Graph" target="Performance Issues">
      <data key="d4">Performance Issues highlights the expanding Knowledge Graph as a factor that may lead to slower system performance.</data>
      <data key="d5">performance, system impact</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_d51ed839a3e8d83bf62dabc2376c5057</data>
    </edge>
    <edge source="Knowledge Graph" target="Database Pruning">
      <data key="d4">Database Pruning may also be essential for managing the Knowledge Graph's growth to maintain performance.</data>
      <data key="d5">solution, performance management</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_d51ed839a3e8d83bf62dabc2376c5057</data>
    </edge>
    <edge source="Knowledge Graph" target="Mix Query Method">
      <data key="d4">The Mix Query Method incorporates Knowledge Graph to enhance the structured knowledge aspect of queries.</data>
      <data key="d5">function integration, structured knowledge</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_8a0247b8e1267963faeba1c255657e41</data>
    </edge>
    <edge source="Knowledge Graph" target="Graph Extraction Parameters">
      <data key="d4">The Knowledge Graph's storage location can be customized through the Graph Extraction Parameters during the extraction process.</data>
      <data key="d5">customization, relationship</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_48308b4707045e24b9b6c640c0048cbd</data>
    </edge>
    <edge source="Knowledge Graph" target="Pruning">
      <data key="d4">Pruning is applied to the Knowledge Graph to prevent excessive memory consumption by removing less critical entities.</data>
      <data key="d5">memory optimization, significance</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_8d580efe0a0849a9ed415edb7a33f22e</data>
    </edge>
    <edge source="Knowledge Graph" target="Enhanced Extraction">
      <data key="d4">Knowledge Graph utilizes Enhanced Extraction to improve the quality of entity and relationship extraction.</data>
      <data key="d5">quality improvement, functionality</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_53fcb2b3968172f6a84ec306bc995c22</data>
    </edge>
    <edge source="Knowledge Graph" target="Graph Algorithms">
      <data key="d4">Graph Algorithms are used within the Knowledge Graph to enhance analytical capabilities.</data>
      <data key="d5">analysis, enhancement</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_53fcb2b3968172f6a84ec306bc995c22</data>
    </edge>
    <edge source="Knowledge Graph" target="Temporal Aspects">
      <data key="d4">Temporal Aspects is a feature that enriches the Knowledge Graph with time-related data.</data>
      <data key="d5">feature enhancement, temporal data</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_53fcb2b3968172f6a84ec306bc995c22</data>
    </edge>
    <edge source="Knowledge Graph" target="Multi-Document Reasoning">
      <data key="d4">Multi-Document Reasoning enhances the Knowledge Graph's capability to analyze information across several documents.</data>
      <data key="d5">capability enhancement, document analysis</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_53fcb2b3968172f6a84ec306bc995c22</data>
    </edge>
    <edge source="Knowledge Graph" target="User Feedback Integration">
      <data key="d4">User Feedback Integration is used to refine the Knowledge Graph based on user interactions.</data>
      <data key="d5">refinement, user interaction</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_53fcb2b3968172f6a84ec306bc995c22</data>
    </edge>
    <edge source="LLM Interface" target="API Layer">
      <data key="d4">LLM Interface connects with the API Layer to provide users access to its functionalities.</data>
      <data key="d5">connectivity, user access</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_ae4f7039a8650da3b37a6933308a7196</data>
    </edge>
    <edge source="SmolRag Class" target="Chunking Module">
      <data key="d4">The SmolRag Class utilizes the Chunking Module to enhance document processing by breaking them into manageable pieces.</data>
      <data key="d5">functionality enhancement, modular design</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_e63a9adb633f3f6ff0b8817ba44dc6fd</data>
    </edge>
    <edge source="SmolRag Class" target="OpenAiLlm">
      <data key="d4">The SmolRag Class relies on the OpenAiLlm for embedding and completion tasks, integrating AI functionalities into the system.</data>
      <data key="d5">AI integration, core functionality</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_e63a9adb633f3f6ff0b8817ba44dc6fd</data>
    </edge>
    <edge source="SmolRag Class" target="API Module">
      <data key="d4">The SmolRag Class interacts with the API Module to expose its functionalities for external use through a FastAPI interface.</data>
      <data key="d5">exposure of functionality, modular architecture</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_e63a9adb633f3f6ff0b8817ba44dc6fd</data>
    </edge>
    <edge source="SmolRag Class" target="NetworkXGraphStore">
      <data key="d4">The SmolRag Class can leverage NetworkXGraphStore to manage relationships among various entities in the system.</data>
      <data key="d5">relationship management, data organization</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_e63a9adb633f3f6ff0b8817ba44dc6fd</data>
    </edge>
    <edge source="SmolRag Class" target="Integration Points">
      <data key="d4">The Integration Points provide methods for connecting the SmolRag Class with other systems, enhancing usability and functionality.</data>
      <data key="d5">connectivity, versatility</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_e63a9adb633f3f6ff0b8817ba44dc6fd</data>
    </edge>
    <edge source="OpenAiLlm" target="NanoVectorStore">
      <data key="d4">OpenAiLlm uses NanoVectorStore for efficient storage and retrieval of embeddings it generates or utilizes.</data>
      <data key="d5">storage solution, operational dependency</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_e63a9adb633f3f6ff0b8817ba44dc6fd</data>
    </edge>
    <edge source="OpenAiLlm" target="llm">
      <data key="d4">llm is an instance of the OpenAiLlm API, which it uses to interact with OpenAI's language model.</data>
      <data key="d5">instantiation, API usage</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_7632c4b619e7677d548ca2cb0924040f</data>
    </edge>
    <edge source="OpenAiLlm" target="embedding">
      <data key="d4">"The OpenAiLlm API generates the embedding variable based on input text."\</data>
      <data key="d5">embedding generation</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_c1b3890c12c9544c940bd001ae647dce</data>
    </edge>
    <edge source="OpenAiLlm" target="SmolRag">
      <data key="d4">SmolRag incorporates OpenAiLlm as a significant function for generating language model embeddings and handling queries.</data>
      <data key="d5">integration, functionality</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_bc4e6aac2a735309400738bd11c772ba</data>
    </edge>
    <edge source="OpenAiLlm" target="JsonKvStore">
      <data key="d4">OpenAiLlm utilizes JsonKvStore for managing query and embedding caches, linking AI processing with data storage.</data>
      <data key="d5">data management, dependency</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_bc4e6aac2a735309400738bd11c772ba</data>
    </edge>
    <edge source="OpenAiLlm" target="COMPLETION_MODEL">
      <data key="d4">The `COMPLETION_MODEL` setting specifically configures the behavior of the OpenAiLlm API for text generation tasks.</data>
      <data key="d5">model configuration, API use</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_d256b3e352fdb14aff55223ceb48a24a</data>
    </edge>
    <edge source="OpenAiLlm" target="EMBEDDING_MODEL">
      <data key="d4">The `EMBEDDING_MODEL` setting configures the OpenAiLlm API for text embedding tasks, necessary for its functionality.</data>
      <data key="d5">model configuration, API use</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_d256b3e352fdb14aff55223ceb48a24a</data>
    </edge>
    <edge source="OpenAiLlm" target="rag">
      <data key="d4">rag is defined using the OpenAiLlm API, indicating a direct dependency on it for function implementation.</data>
      <data key="d5">dependency, function usage</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_37be0a25cbf8d078251a96284455700d</data>
    </edge>
    <edge source="OpenAiLlm" target="Get Embedding">
      <data key="d4">OpenAiLlm provides the Get Embedding method for retrieving embeddings in the context of its purpose to interface with OpenAI's API.</data>
      <data key="d5">API functionality, embedding retrieval</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_c14bcfff661cc7a5b7c70532fd0b5d83</data>
    </edge>
    <edge source="OpenAiLlm" target="Get Completion">
      <data key="d4">OpenAiLlm includes the Get Completion method for generating completions, central to its use case with OpenAI's API.</data>
      <data key="d5">API functionality, text generation</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_c14bcfff661cc7a5b7c70532fd0b5d83</data>
    </edge>
    <edge source="NanoVectorStore" target="Query Processing for Similarity Search">
      <data key="d4">Query Processing uses the capabilities of NanoVectorStore to perform similarity searches efficiently.</data>
      <data key="d5">database interaction, search functionality</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_5c4413edcfebaf19b7162d2f89ba5c40</data>
    </edge>
    <edge source="NanoVectorStore" target="Efficient Storage">
      <data key="d4">The NanoVectorStore utilizes Efficient Storage to enhance performance in embedding retrieval.:|:NanoVectorStore utilizes Efficient Storage mechanisms to ensure vectors are stored optimally for fast retrieval.</data>
      <data key="d5">storage efficiency, functionality:|:performance enhancement, optimization</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_4b68104ae9ba6f2fafa3669fefa1839b:|:excerpt_id_22c851b59e941d90f109fdbe5227ad21</data>
    </edge>
    <edge source="NanoVectorStore" target="In-Memory Processing">
      <data key="d4">In-Memory Processing is a function of NanoVectorStore that enhances speed during search operations.</data>
      <data key="d5">performance optimization, speed</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_22c851b59e941d90f109fdbe5227ad21</data>
    </edge>
    <edge source="NanoVectorStore" target="Persistence">
      <data key="d4">Persistence is a crucial aspect of NanoVectorStore, allowing for durability of stored vectors across application runs.</data>
      <data key="d5">durability, functionality</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_22c851b59e941d90f109fdbe5227ad21</data>
    </edge>
    <edge source="NanoVectorStore" target="Metadata Management">
      <data key="d4">Metadata Management is associated with NanoVectorStore for improved vector retrieval and filtering processes.</data>
      <data key="d5">metadata, retrieval improvement</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_22c851b59e941d90f109fdbe5227ad21</data>
    </edge>
    <edge source="NanoVectorStore" target="CRUD Operations">
      <data key="d4">CRUD Operations are supported by NanoVectorStore to manage vectors effectively.:|:CRUD Operations are integral functions within the NanoVectorStore, allowing management of embeddings.</data>
      <data key="d5">management functions, core capabilities:|:vector management, functionality</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_4b68104ae9ba6f2fafa3669fefa1839b:|:excerpt_id_22c851b59e941d90f109fdbe5227ad21</data>
    </edge>
    <edge source="NanoVectorStore" target="SmolRag">
      <data key="d4">SmolRag employs NanoVectorStore to manage vector data storage, highlighting its role in processing information efficiently.</data>
      <data key="d5">data processing, storage</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_bc4e6aac2a735309400738bd11c772ba</data>
    </edge>
    <edge source="NanoVectorStore" target="dimensions">
      <data key="d4">The implementation of NanoVectorStore relies on dimensions to define its vector capabilities, showing a connection between configuration and functionality.:|:Dimensions are a key variable in the NanoVectorStore that determines the nature of the embeddings stored and retrieved.</data>
      <data key="d5">embedding characteristics, parameterization:|:configuration, operational requirement</data>
      <data key="d6">14.0</data>
      <data key="d7">excerpt_id_8c0374f7cf68e5fd2e81a44aabeb6e31:|:excerpt_id_bc4e6aac2a735309400738bd11c772ba</data>
    </edge>
    <edge source="NanoVectorStore" target="Embedding Generation Process">
      <data key="d4">The results of the embedding generation process are stored in the NanoVectorStore, which retains the vectors and metadata.</data>
      <data key="d5">storage process, data management</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_dc80c8904c8ce4e245e92a5bec8771ed</data>
    </edge>
    <edge source="NanoVectorStore" target="Vector Store Configuration">
      <data key="d4">NanoVectorStore is affected by the Vector Store Configuration, as it dictates the behavior of the store in terms of embedding management.</data>
      <data key="d5">embedding management, configuration</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_8c0374f7cf68e5fd2e81a44aabeb6e31</data>
    </edge>
    <edge source="NanoVectorStore" target="Upsert">
      <data key="d4">NanoVectorStore incorporates the Upsert method for managing items within its vector database, essential for data management.</data>
      <data key="d5">data management, vector database</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_c14bcfff661cc7a5b7c70532fd0b5d83</data>
    </edge>
    <edge source="NanoVectorStore" target="Query">
      <data key="d4">The Query method in NanoVectorStore allows querying similar vectors, linking it directly to the core functionality of the class.</data>
      <data key="d5">vector retrieval, data processing</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_c14bcfff661cc7a5b7c70532fd0b5d83</data>
    </edge>
    <edge source="NanoVectorStore" target="Delete">
      <data key="d4">The Delete method provides functionality to remove items from NanoVectorStore, integral to maintaining the data integrity of the store.</data>
      <data key="d5">data management, integrity</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_c14bcfff661cc7a5b7c70532fd0b5d83</data>
    </edge>
    <edge source="NanoVectorStore" target="Save">
      <data key="d4">The Save method offers a way to persist the changes made in NanoVectorStore, ensuring data is not lost across sessions.</data>
      <data key="d5">data persistence, integrity</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_c14bcfff661cc7a5b7c70532fd0b5d83</data>
    </edge>
    <edge source="NetworkXGraphStore" target="SmolRag">
      <data key="d4">SmolRag uses NetworkXGraphStore to handle graph data, indicating its importance in navigating relationships between entities.</data>
      <data key="d5">graph management, connectivity</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_bc4e6aac2a735309400738bd11c772ba</data>
    </edge>
    <edge source="NetworkXGraphStore" target="graph_store.py">
      <data key="d4">NetworkXGraphStore class is implemented in the graph_store.py file to provide a graph database functionality.</data>
      <data key="d5">implementation</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_8080c1c6669176557a9fdbafc319a94c</data>
    </edge>
    <edge source="NetworkXGraphStore" target="add_node(name, **attrs)">
      <data key="d4">add_node method is part of NetworkXGraphStore and is used to add nodes to its graph structure.</data>
      <data key="d5">method functionality</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_8080c1c6669176557a9fdbafc319a94c</data>
    </edge>
    <edge source="NetworkXGraphStore" target="add_edge(source, target, **attrs)">
      <data key="d4">add_edge method is a function within NetworkXGraphStore that adds relationships between nodes.</data>
      <data key="d5">method functionality</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_8080c1c6669176557a9fdbafc319a94c</data>
    </edge>
    <edge source="NetworkXGraphStore" target="save()">
      <data key="d4">save method is used in both NetworkXGraphStore and JsonKvStore to persist data to disk.</data>
      <data key="d5">data persistence</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_8080c1c6669176557a9fdbafc319a94c</data>
    </edge>
    <edge source="JsonKvStore" target="System Requirements">
      <data key="d4">JsonKvStore helps meet the System Requirements by providing performance optimizations through caching and metadata handling.</data>
      <data key="d5">performance optimization, operational efficiency</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_e63a9adb633f3f6ff0b8817ba44dc6fd</data>
    </edge>
    <edge source="JsonKvStore" target="embeddings_path">
      <data key="d4">JsonKvStore is utilized for both query cache and embedding cache, where embeddings_path defines the location for storing such data.</data>
      <data key="d5">storage location, caching</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_bc4e6aac2a735309400738bd11c772ba</data>
    </edge>
    <edge source="JsonKvStore" target="query_cache_kv">
      <data key="d4">query_cache_kv is an instance of JsonKvStore, indicating its configuration type and purpose in storing query-related data.</data>
      <data key="d5">instance, storing data</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_37be0a25cbf8d078251a96284455700d</data>
    </edge>
    <edge source="JsonKvStore" target="embedding_cache_kv">
      <data key="d4">embedding_cache_kv is another instance of JsonKvStore for storing embedding-related data, similar to query_cache_kv.</data>
      <data key="d5">instance, storing data</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_37be0a25cbf8d078251a96284455700d</data>
    </edge>
    <edge source="JsonKvStore" target="source_to_doc_kv">
      <data key="d4">source_to_doc_kv is an instance of JsonKvStore used for managing source-to-document mappings, demonstrating its utility in structural data storage.</data>
      <data key="d5">data management, instance</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_cbbeef7dc6ce1662aa9990abd0d0a080</data>
    </edge>
    <edge source="JsonKvStore" target="doc_to_source_kv">
      <data key="d4">doc_to_source_kv is also an instance of JsonKvStore, highlighting its role in facilitating lookups from documents back to sources, similar to source_to_doc_kv.</data>
      <data key="d5">data management, instance</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_cbbeef7dc6ce1662aa9990abd0d0a080</data>
    </edge>
    <edge source="JsonKvStore" target="doc_to_excerpt_kv">
      <data key="d4">doc_to_excerpt_kv serves as an additional instance of JsonKvStore, indicating its specific purpose for managing excerpts and enhancing data retrieval capabilities.</data>
      <data key="d5">data management, instance</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_cbbeef7dc6ce1662aa9990abd0d0a080</data>
    </edge>
    <edge source="JsonKvStore" target="excerpt_kv">
      <data key="d4">excerpt_kv is another instance of JsonKvStore, further indicating its role in organizing specific documents within the key-value framework.</data>
      <data key="d5">data management, instance</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_cbbeef7dc6ce1662aa9990abd0d0a080</data>
    </edge>
    <edge source="JsonKvStore" target="kv_store.py">
      <data key="d4">JsonKvStore class is implemented in the kv_store.py file to provide a simple key-value store functionality.</data>
      <data key="d5">implementation</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_8080c1c6669176557a9fdbafc319a94c</data>
    </edge>
    <edge source="JsonKvStore" target="add(key, value)">
      <data key="d4">add method is part of JsonKvStore that enables adding key-value pairs to the store.</data>
      <data key="d5">method functionality</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_8080c1c6669176557a9fdbafc319a94c</data>
    </edge>
    <edge source="JsonKvStore" target="get_by_key(key)">
      <data key="d4">get_by_key method retrieves values associated with keys in the JsonKvStore.</data>
      <data key="d5">method functionality</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_8080c1c6669176557a9fdbafc319a94c</data>
    </edge>
    <edge source="JsonKvStore" target="save()">
      <data key="d4">save method is part of JsonKvStore for saving its current state to disk.</data>
      <data key="d5">data persistence</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_8080c1c6669176557a9fdbafc319a94c</data>
    </edge>
    <edge source="Semantic Search" target="Dedicated Vector Stores">
      <data key="d4">Dedicated Vector Stores are integral to the effectiveness of Semantic Search, as they store the embeddings necessary for this function.</data>
      <data key="d5">storage, search efficiency</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_4869439483a23885f8fdf7f5e9c7039f</data>
    </edge>
    <edge source="Similarity Search" target="Vector Representation">
      <data key="d4">Vector Representation is essential for the operation of Similarity Search, providing the necessary framework for capturing semantic meaning.</data>
      <data key="d5">foundational concept, operational necessity</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_8e74fbca347d63700a75f9a44ad95dec</data>
    </edge>
    <edge source="Similarity Search" target="Similarity Metrics">
      <data key="d4">Similarity Metrics facilitate the functionality of Similarity Search by providing the necessary calculations for assessing vector similarity.</data>
      <data key="d5">analytical feature, operational process</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_8e74fbca347d63700a75f9a44ad95dec</data>
    </edge>
    <edge source="Similarity Search" target="Precision and Recall">
      <data key="d4">Precision and Recall metrics are essential for evaluating the effectiveness of the Similarity Search feature, ensuring high-quality results.</data>
      <data key="d5">metrics, evaluation</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_23af2b95600ddac30518f7c80f59e79b</data>
    </edge>
    <edge source="Similarity Search" target="User Feedback">
      <data key="d4">User Feedback is utilized to enhance the Similarity Search feature based on user experiences and suggestions.</data>
      <data key="d5">feedback loop, quality improvement</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_23af2b95600ddac30518f7c80f59e79b</data>
    </edge>
    <edge source="Similarity Search" target="Question Answering">
      <data key="d4">Question Answering is a practical application that relies on Similarity Search to find relevant information.</data>
      <data key="d5">application, retrieval</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_23af2b95600ddac30518f7c80f59e79b</data>
    </edge>
    <edge source="Similarity Search" target="Document Exploration">
      <data key="d4">Document Exploration utilizes Similarity Search functions to discover related content effectively.</data>
      <data key="d5">exploration, content discovery</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_23af2b95600ddac30518f7c80f59e79b</data>
    </edge>
    <edge source="Similarity Search" target="Concept Search">
      <data key="d4">Concept Search leverages Similarity Search to find information across diverse terminologies.</data>
      <data key="d5">semantic understanding, search adaptation</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_23af2b95600ddac30518f7c80f59e79b</data>
    </edge>
    <edge source="Similarity Search" target="Technical Support">
      <data key="d4">Technical Support uses Similarity Search to assist users in finding relevant documentation.</data>
      <data key="d5">assistance, problem-solving</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_23af2b95600ddac30518f7c80f59e79b</data>
    </edge>
    <edge source="Similarity Search" target="Knowledge Discovery">
      <data key="d4">Knowledge Discovery processes utilize Similarity Search to identify connections between information pieces.</data>
      <data key="d5">insight, connections</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_23af2b95600ddac30518f7c80f59e79b</data>
    </edge>
    <edge source="Similarity Search" target="Advanced Models">
      <data key="d4">Advanced Models enhance the ability of Similarity Search through the integration of new technologies.</data>
      <data key="d5">innovation, capability enhancement</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_23af2b95600ddac30518f7c80f59e79b</data>
    </edge>
    <edge source="Similarity Search" target="Vector Search Query Type">
      <data key="d4">Vector Search Query Type utilizes the Similarity Search function to find relevant information based on semantic meaning.</data>
      <data key="d5">query mechanism, functionality</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_d18b53e295f2d7f1d8c1de2dd0ca1da8</data>
    </edge>
    <edge source="Similarity Search" target="Knowledge Graph Approaches">
      <data key="d4">Knowledge Graph Approaches can be integrated with Similarity Search to improve the effectiveness of information retrieval.</data>
      <data key="d5">integration, information retrieval</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_d18b53e295f2d7f1d8c1de2dd0ca1da8</data>
    </edge>
    <edge source="Vector Representation" target="Semantic Vectors">
      <data key="d4">Semantic Vectors are a part of Vector Representation, used to represent queries and documents for similarity searches.</data>
      <data key="d5">component relationship, representation</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_8e74fbca347d63700a75f9a44ad95dec</data>
    </edge>
    <edge source="Cosine Similarity" target="Ranking">
      <data key="d4">Ranking results is directly affected by the scores produced by Cosine Similarity as it determines similarity levels.</data>
      <data key="d5">scoring, result organization</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_5c4413edcfebaf19b7162d2f89ba5c40</data>
    </edge>
    <edge source="Cosine Similarity" target="Normalization">
      <data key="d4">Normalization affects how Cosine Similarity is computed by adjusting vector magnitudes for fair comparison.</data>
      <data key="d5">preprocessing, fairness</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_5c4413edcfebaf19b7162d2f89ba5c40</data>
    </edge>
    <edge source="Score Range" target="Threshold Filtering">
      <data key="d4">Threshold Filtering uses the Score Range to filter out results that do not meet the minimal similarity score.</data>
      <data key="d5">filtering, configurable accuracy</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_5c4413edcfebaf19b7162d2f89ba5c40</data>
    </edge>
    <edge source="Threshold Filtering" target="Ranking">
      <data key="d4">Threshold Filtering is applied after Ranking to refine results based on predetermined criteria.</data>
      <data key="d5">result refinement, filtering</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_4b68104ae9ba6f2fafa3669fefa1839b</data>
    </edge>
    <edge source="Ranking" target="Similarity Computation">
      <data key="d4">Ranking is a subsequent step that follows Similarity Computation, determining the order of excerpts based on similarity scores.</data>
      <data key="d5">output organization, relevance ranking</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_4b68104ae9ba6f2fafa3669fefa1839b</data>
    </edge>
    <edge source="Ranking" target="Top-K Selection">
      <data key="d4">Top-K Selection follows Ranking to select the most relevant excerpts for further analysis.</data>
      <data key="d5">final selection, relevance</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_4b68104ae9ba6f2fafa3669fefa1839b</data>
    </edge>
    <edge source="Query Processing for Similarity Search" target="Query Embedding">
      <data key="d4">Query Embedding is one of the steps involved in the Query Processing for similarity search.</data>
      <data key="d5">process step, embedding</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_5c4413edcfebaf19b7162d2f89ba5c40</data>
    </edge>
    <edge source="Query Processing for Similarity Search" target="Vector Comparison">
      <data key="d4">Vector Comparison is part of the Query Processing steps, comparing the query to stored vectors.</data>
      <data key="d5">comparison, processing</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_5c4413edcfebaf19b7162d2f89ba5c40</data>
    </edge>
    <edge source="Query Embedding" target="Similarity Search Mechanisms">
      <data key="d4">Query Embedding is a critical initial step in the Similarity Search Mechanisms that facilitates finding relevant content.</data>
      <data key="d5">search functionality, content retrieval</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_4b68104ae9ba6f2fafa3669fefa1839b</data>
    </edge>
    <edge source="Query Embedding" target="Similarity Computation">
      <data key="d4">Similarity Computation is executed directly after Query Embedding to assess relevance based on similarity.</data>
      <data key="d5">similarity assessment, process flow</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_4b68104ae9ba6f2fafa3669fefa1839b</data>
    </edge>
    <edge source="Ranking and Filtering" target="Top-K Selection">
      <data key="d4">Top-K Selection occurs after Ranking and Filtering, selecting the best results based on their similarity scores.</data>
      <data key="d5">result curation, selection</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_5c4413edcfebaf19b7162d2f89ba5c40</data>
    </edge>
    <edge source="Batch Processing" target="Document Ingestion Performance">
      <data key="d4">Batch Processing is an optimization strategy aimed at enhancing Document Ingestion Performance by managing memory usage.</data>
      <data key="d5">optimization strategy, performance improvement</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_410400e8efb55e29eb563d4e92c76993</data>
    </edge>
    <edge source="Batch Processing" target="Batch Processing Implementation">
      <data key="d4">Batch Processing Implementation serves as a practical example of the Batch Processing strategy discussed for enhancing performance.</data>
      <data key="d5">example, practical application</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_410400e8efb55e29eb563d4e92c76993</data>
    </edge>
    <edge source="Caching" target="Performance Optimization">
      <data key="d4">Caching is a key tactic within Performance Optimization aimed at improving application responsiveness and efficiency.</data>
      <data key="d5">efficiency, optimization</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_bfbdc7de5c6b20362e7297fd06fd853a</data>
    </edge>
    <edge source="Caching" target="Document Ingestion Performance">
      <data key="d4">Caching can significantly improve Document Ingestion Performance by reducing the need for repetitive API calls.</data>
      <data key="d5">efficiency, speed improvements</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_410400e8efb55e29eb563d4e92c76993</data>
    </edge>
    <edge source="Caching" target="OpenAI's API">
      <data key="d4">Caching enhances the performance of requests made to OpenAI's API by preventing redundant calls.</data>
      <data key="d5">optimization strategy, performance improvement</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_8ec1e476798fb46038b3e8a5c5907ec5</data>
    </edge>
    <edge source="Caching" target="Knowledge Graph Query Optimization">
      <data key="d4">Caching directly benefits Knowledge Graph Query Optimization by improving response times for frequently executed query patterns.</data>
      <data key="d5">efficiency, performance improvement</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_773dc5e90c361202bafd4c70106e3c4a</data>
    </edge>
    <edge source="Incremental Updates" target="Document Ingestion Performance">
      <data key="d4">Incremental Updates improve Document Ingestion Performance by minimizing the amount of data processed at once.</data>
      <data key="d5">incremental analysis, efficiency</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_410400e8efb55e29eb563d4e92c76993</data>
    </edge>
    <edge source="Incremental Updates" target="Knowledge Graph Maintenance and Updates">
      <data key="d4">Incremental Updates are part of the Knowledge Graph Maintenance and Updates, focused on ensuring the graph reflects document changes.</data>
      <data key="d5">maintenance, updating</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_c911a970aeaf57b302869e9d148ac6c8</data>
    </edge>
    <edge source="Context Retrieval and Preparation" target="Excerpt Retrieval">
      <data key="d4">Context Retrieval and Preparation involves Excerpt Retrieval to gather the necessary excerpts from storage.</data>
      <data key="d5">preparation process, retrieval</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_22c851b59e941d90f109fdbe5227ad21</data>
    </edge>
    <edge source="Context Retrieval and Preparation" target="Summary Inclusion">
      <data key="d4">Summary Inclusion is part of Context Retrieval and Preparation for providing additional context to the excerpts.</data>
      <data key="d5">context enrichment, preparation</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_22c851b59e941d90f109fdbe5227ad21</data>
    </edge>
    <edge source="Context Retrieval and Preparation" target="Formatting">
      <data key="d4">Formatting is involved in Context Retrieval and Preparation to organize the excerpts and summaries accordingly.</data>
      <data key="d5">organization, preparation</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_22c851b59e941d90f109fdbe5227ad21</data>
    </edge>
    <edge source="Context Retrieval and Preparation" target="Token Management">
      <data key="d4">Token Management is necessary within Context Retrieval and Preparation to ensure context fits within token limits.</data>
      <data key="d5">management necessity, context limitation</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_22c851b59e941d90f109fdbe5227ad21</data>
    </edge>
    <edge source="Context Retrieval and Preparation" target="Prompt Construction">
      <data key="d4">Prompt Construction integrates context into a prompt during Context Retrieval and Preparation for use by the language model.</data>
      <data key="d5">integrative process, preparation</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_22c851b59e941d90f109fdbe5227ad21</data>
    </edge>
    <edge source="Precision and Recall" target="Threshold Tuning">
      <data key="d4">Threshold Tuning is directly related to managing Precision and Recall by adjusting similarity thresholds.</data>
      <data key="d5">optimization, metrics</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_23af2b95600ddac30518f7c80f59e79b</data>
    </edge>
    <edge source="Threshold Tuning" target="Evaluation Framework">
      <data key="d4">Threshold Tuning works alongside the Evaluation Framework to assess and fine-tune retrieval performance in SmolRAG.</data>
      <data key="d5">performance assessment, optimization</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_0758031048f3438910733878e3670905</data>
    </edge>
    <edge source="Knowledge Graph Approaches" target="Mix Query Example">
      <data key="d4">The Mix Query Example utilizes Knowledge Graph Approaches in conjunction with vector search for better query outcomes.</data>
      <data key="d5">method integration, effectiveness</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_f18a098e46a2044eb43b0d2c58ecc3e2</data>
    </edge>
    <edge source="SmolRAG API" target="FastAPI">
      <data key="d4">The SmolRAG API is built using FastAPI, indicating a reliance on this technology for its functionality.:|:The SmolRAG API utilizes FastAPI as its underlying framework, which allows for a well-documented and user-friendly interaction.</data>
      <data key="d5">integration, functionality:|:technology stack, dependency</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_a4699fb3dcb4a727d1eb4a481496bfa2:|:excerpt_id_605f86c194720dfb2ba5318d6291e7fa</data>
    </edge>
    <edge source="SmolRAG API" target="Endpoint">
      <data key="d4">The SmolRAG API exposes the `/query` Endpoint, essential for executing document queries.</data>
      <data key="d5">api structure, functionality</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_605f86c194720dfb2ba5318d6291e7fa</data>
    </edge>
    <edge source="SmolRAG API" target="Authentication">
      <data key="d4">The SmolRAG API incorporates authentication features to secure user access and restrict unauthorized interactions.</data>
      <data key="d5">security, access control</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_1fe2968b7d2d64446c316e24fa371c2a</data>
    </edge>
    <edge source="SmolRAG API" target="API Gateway">
      <data key="d4">The SmolRAG API can be deployed behind an API Gateway that ensures secure access and manages traffic effectively.</data>
      <data key="d5">access management, deployment</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_1fe2968b7d2d64446c316e24fa371c2a</data>
    </edge>
    <edge source="SmolRAG API" target="API Key">
      <data key="d4">An API Key is used in requests to the SmolRAG API to authenticate users and validate access rights.</data>
      <data key="d5">authentication, security</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_1fe2968b7d2d64446c316e24fa371c2a</data>
    </edge>
    <edge source="SmolRAG API" target="OAuth 2.0">
      <data key="d4">OAuth 2.0 can be utilized as an authentication method for the SmolRAG API to allow secure and authorized access.</data>
      <data key="d5">authentication method, user authorization</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_1fe2968b7d2d64446c316e24fa371c2a</data>
    </edge>
    <edge source="SmolRAG API" target="JWT">
      <data key="d4">JWT serves as a means of stateless authentication for the SmolRAG API, facilitating secure transmission of user identity information.</data>
      <data key="d5">authentication method, token-based security</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_1fe2968b7d2d64446c316e24fa371c2a</data>
    </edge>
    <edge source="SmolRAG API" target="Rate Limiting">
      <data key="d4">The SmolRAG API requires Rate Limiting to be implemented to manage usage and prevent abuse.</data>
      <data key="d5">usage management, protection</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_25c46a7909a2f532a6989da2de994646</data>
    </edge>
    <edge source="SmolRAG API" target="CORS Configuration">
      <data key="d4">CORS Configuration is necessary for using the SmolRAG API effectively in web applications to avoid security issues related to cross-origin requests.</data>
      <data key="d5">interoperability, security</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_14fbfc8e32f774c23cc2f9360cb2c1c5</data>
    </edge>
    <edge source="SmolRAG API" target="Uvicorn">
      <data key="d4">The SmolRAG API can be deployed using Uvicorn, which serves as the underlying server for running the API.</data>
      <data key="d5">deployment, server options</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_006e4a3ed33e76243f95fdc7b39916e6</data>
    </edge>
    <edge source="SmolRAG API" target="Document Management">
      <data key="d4">The SmolRAG API includes Document Management functions as part of its extended capabilities for handling documents.</data>
      <data key="d5">API extension, functionality</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_bfbdc7de5c6b20362e7297fd06fd853a</data>
    </edge>
    <edge source="SmolRAG API" target="Interface">
      <data key="d4">The SmolRAG API provides a clean and powerful interface that allows for various retrieval methods to be seamlessly integrated into applications.</data>
      <data key="d5">user interface, ease of use</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_a4699fb3dcb4a727d1eb4a481496bfa2</data>
    </edge>
    <edge source="SmolRAG API" target="Mix Query Method">
      <data key="d4">The SmolRAG API allows users to access and utilize the Mix Query Method for querying purposes.</data>
      <data key="d5">API interaction, function accessibility</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_8a0247b8e1267963faeba1c255657e41</data>
    </edge>
    <edge source="SmolRAG API" target="Server Configuration">
      <data key="d4">The SmolRAG API can be started with Server Configuration settings that define host and port for the server.</data>
      <data key="d5">configuration, accessibility</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_8ae4948b96c52786e166f40ab294103d</data>
    </edge>
    <edge source="FastAPI" target="query_endpoint">
      <data key="d4">query_endpoint is defined within the FastAPI application and represents an API endpoint that interacts with it.</data>
      <data key="d5">endpoint, framework integration</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_2444e5ece582784ac2fce0dabf395906</data>
    </edge>
    <edge source="FastAPI" target="Limiter">
      <data key="d4">FastAPI utilizes Limiter for implementing rate limiting on its endpoints, enhancing performance and security.</data>
      <data key="d5">API security, rate limiting</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_abfc709617d4485a5d0d2754f4298bae</data>
    </edge>
    <edge source="FastAPI" target="/query">
      <data key="d4">The /query interface is an endpoint created within the FastAPI application, exemplifying how FastAPI routes work.</data>
      <data key="d5">API design, routing</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_abfc709617d4485a5d0d2754f4298bae</data>
    </edge>
    <edge source="FastAPI" target="SmolRag API">
      <data key="d4">SmolRag API is built using FastAPI, leveraging its performance and features to provide a web interface for applications.:|:SmolRag API is built using FastAPI, leveraging its functionalities and features for API development.:|:SmolRag API is built using the FastAPI framework, leveraging its capabilities to create an effective API service.</data>
      <data key="d5">framework, API development:|:framework, application</data>
      <data key="d6">28.0</data>
      <data key="d7">excerpt_id_f9f9e7c388f5ed8fa52c4ed1b6f792c9:|:excerpt_id_14de54a01d2eddbd92dc845208f04fa1:|:excerpt_id_db532a32078ae304c7d23c29df7effc8</data>
    </edge>
    <edge source="FastAPI" target="API Versioning">
      <data key="d4">FastAPI provides features, including API Versioning, to manage evolving APIs effectively while supporting existing clients.</data>
      <data key="d5">framework capabilities, versioning</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_17a5056efc735a93a671ced76a4ca7f1</data>
    </edge>
    <edge source="FastAPI" target="path prefixes">
      <data key="d4">FastAPI utilizes path prefixes as a strategy for implementing API Versioning, allowing routes to be versioned easily.</data>
      <data key="d5">implementation strategy, versioning</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_17a5056efc735a93a671ced76a4ca7f1</data>
    </edge>
    <edge source="FastAPI" target="v1_router">
      <data key="d4">FastAPI includes the v1_router as one of its routing configurations.</data>
      <data key="d5">routing, framework integration</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_14de54a01d2eddbd92dc845208f04fa1</data>
    </edge>
    <edge source="FastAPI" target="v2_router">
      <data key="d4">FastAPI includes the v2_router as one of its routing configurations.</data>
      <data key="d5">routing, framework integration</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_14de54a01d2eddbd92dc845208f04fa1</data>
    </edge>
    <edge source="FastAPI" target="Request Format">
      <data key="d4">FastAPI relies on having a correctly structured Request Format to function properly and avoid errors.</data>
      <data key="d5">functionality requirements, dependency</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_53ae527cec786bde0d38d922738f582d</data>
    </edge>
    <edge source="FastAPI" target="Server Configuration">
      <data key="d4">The operation of FastAPI is directly influenced by the Server Configuration, as it dictates server behavior and performance.</data>
      <data key="d5">operational influence, configuration</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_53ae527cec786bde0d38d922738f582d</data>
    </edge>
    <edge source="FastAPI" target="Resource Constraints">
      <data key="d4">Resource Constraints can limit the performance and response capability of FastAPI applications.</data>
      <data key="d5">performance limitations, resource dependency</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_53ae527cec786bde0d38d922738f582d</data>
    </edge>
    <edge source="FastAPI" target="main.py">
      <data key="d4">FastAPI is configured through the main.py file where the setup and application configuration are defined.</data>
      <data key="d5">application structure, configuration</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_07384bef2559980ac5dc719b7a30dc2d</data>
    </edge>
    <edge source="/query" target="Request Format">
      <data key="d4">The `/query` endpoint's functionality relies on the specific Request Format provided for querying the API.</data>
      <data key="d5">interface requirements, configuration</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_605f86c194720dfb2ba5318d6291e7fa</data>
    </edge>
    <edge source="/query" target="text">
      <data key="d4">The '/query' API endpoint processes the input 'text' variable based on the specified 'query_type' and returns results.</data>
      <data key="d5">query execution, response generation</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_0b584310e88dc1a8507dcdad84fa71fa</data>
    </edge>
    <edge source="Request Format" target="Validate Request Format">
      <data key="d4">Validating the Request Format is essential to ensure that requests conform to the requirements laid out by FastAPI.</data>
      <data key="d5">validation process, conformity</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_53ae527cec786bde0d38d922738f582d</data>
    </edge>
    <edge source="json" target="query text">
      <data key="d4">JSON format is used to structure the data being sent, including the query text that users can modify for their requests.</data>
      <data key="d5">data format, API structure</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_3d1e91c648620eaa7e9638d82c90d947</data>
    </edge>
    <edge source="json" target="query_type">
      <data key="d4">JSON also includes the query type as part of its configuration, indicating how the API should interpret the query made by the user.</data>
      <data key="d5">API configuration, interpretation</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_3d1e91c648620eaa7e9638d82c90d947</data>
    </edge>
    <edge source="query_type" target="text">
      <data key="d4">The 'query_type' specifies additional processing rules for the input 'text' variable, determining how the query is handled.</data>
      <data key="d5">input processing, parameter specification</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_0b584310e88dc1a8507dcdad84fa71fa</data>
    </edge>
    <edge source="query_type" target="standard">
      <data key="d4">query_type specifies a valid category of queries, which includes standard as one of its types.:|:The 'query_type' parameter can be set to 'standard', influencing the method of query execution.</data>
      <data key="d5">query method, default value:|:variable, function relationship</data>
      <data key="d6">15.0</data>
      <data key="d7">excerpt_id_8f131bada0cf88919e5b437392d9c338:|:excerpt_id_0b584310e88dc1a8507dcdad84fa71fa</data>
    </edge>
    <edge source="query_type" target="local_kg">
      <data key="d4">The 'local_kg' option serves as a specific type of query that can be utilized for processing based on the 'query_type' variable.</data>
      <data key="d5">query categorization, processing type</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_0b584310e88dc1a8507dcdad84fa71fa</data>
    </edge>
    <edge source="query_type" target="global_kg">
      <data key="d4">The 'global_kg' example is a potential value for 'query_type', indicating its usage in queries.:|:query_type encompasses global_kg as one of its valid types for query processing.</data>
      <data key="d5">query categorization, processing type:|:variable, function relationship</data>
      <data key="d6">15.0</data>
      <data key="d7">excerpt_id_8f131bada0cf88919e5b437392d9c338:|:excerpt_id_0b584310e88dc1a8507dcdad84fa71fa</data>
    </edge>
    <edge source="query_type" target="hybrid_kg">
      <data key="d4">query_type accounts for hybrid_kg as one of the valid types, implying its use in requests.:|:The 'hybrid_kg' example is another option within the 'query_type' parameter, allowing for advanced querying methods.</data>
      <data key="d5">query categorization, processing type:|:variable, function relationship</data>
      <data key="d6">15.0</data>
      <data key="d7">excerpt_id_8f131bada0cf88919e5b437392d9c338:|:excerpt_id_0b584310e88dc1a8507dcdad84fa71fa</data>
    </edge>
    <edge source="query_type" target="mix">
      <data key="d4">The 'mix' option allows combining different query techniques under the 'query_type' parameter.:|:query_type includes mix as a valid query type option, highlighting its relevence in requests.</data>
      <data key="d5">query categorization, processing type:|:variable, function relationship</data>
      <data key="d6">15.0</data>
      <data key="d7">excerpt_id_8f131bada0cf88919e5b437392d9c338:|:excerpt_id_0b584310e88dc1a8507dcdad84fa71fa</data>
    </edge>
    <edge source="query_type" target="query">
      <data key="d4">Query Type assists in specifying the nature of the query made, thus directly influencing the type of response received.</data>
      <data key="d5">query specification, response influence</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_479ad0928f95805c9a3315aa5e37e736</data>
    </edge>
    <edge source="query_type" target="QueryRequest">
      <data key="d4">QueryRequest includes a query_type variable that allows for different types of queries to be specified.:|:The 'query_type' variable is another attribute of the QueryRequest class that complements 'text' for defining the query parameters.</data>
      <data key="d5">attribute, configuration relationship:|:data structure, flexibility</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_24d76bde5328dc16ace5722740c74eb7:|:excerpt_id_27249d9d3f94ef9651b9eb1eaf1ed6e3</data>
    </edge>
    <edge source="query_type" target="validator">
      <data key="d4">The validator function checks if the query_type variable has a valid value from the predefined valid_types.</data>
      <data key="d5">validation, constraint</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_27249d9d3f94ef9651b9eb1eaf1ed6e3</data>
    </edge>
    <edge source="query_type" target="query_endpoint">
      <data key="d4">The 'query_type' variable is processed within the query_endpoint function, influencing the behavior of the query execution.</data>
      <data key="d5">parameter processing, function relationship</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_24d76bde5328dc16ace5722740c74eb7</data>
    </edge>
    <edge source="query_type" target="benchmark_queries">
      <data key="d4">query_type influences the specific querying method applied within the benchmark_queries function.</data>
      <data key="d5">configuration specification, query methods</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_871ea4244ed66d033bd333acf9bf3bc4</data>
    </edge>
    <edge source="text" target="QueryRequest">
      <data key="d4">QueryRequest contains the text variable, requiring it to be populated as part of the request input.:|:The 'text' variable is a key attribute of the QueryRequest class, essential for defining the input for the query.</data>
      <data key="d5">data structure, requirement:|:attribute, configuration relationship</data>
      <data key="d6">17.0</data>
      <data key="d7">excerpt_id_24d76bde5328dc16ace5722740c74eb7:|:excerpt_id_27249d9d3f94ef9651b9eb1eaf1ed6e3</data>
    </edge>
    <edge source="text" target="validator">
      <data key="d4">The validator function checks the content of the text variable to ensure it is not empty, enforcing data integrity.</data>
      <data key="d5">validation, integrity</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_27249d9d3f94ef9651b9eb1eaf1ed6e3</data>
    </edge>
    <edge source="text" target="custom_chunking_strategy">
      <data key="d4">The custom_chunking_strategy function processes the text variable to generate custom chunks based on specific parameters.</data>
      <data key="d5">text processing, chunking</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_b448f2ca1ed64ac27b528bb6bed67d93</data>
    </edge>
    <edge source="text" target="query_endpoint">
      <data key="d4">The query_endpoint function processes requests that include the 'text' variable, indicating its importance in handling query requests.</data>
      <data key="d5">process, request handling</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_24d76bde5328dc16ace5722740c74eb7</data>
    </edge>
    <edge source="Response Text" target="JSON">
      <data key="d4">The Response Text is formatted in JSON, making it a variable that conforms to the JSON structure.</data>
      <data key="d5">data format adherence, variable structure</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_9d9cc347ab952fb9a4b25bd3a1a18919</data>
    </edge>
    <edge source="result" target="llm">
      <data key="d4">The result variable holds the output generated by the llm API after the prompt is processed.</data>
      <data key="d5">output generation, functionality</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_cf3cd9ded1fbc94e0796c2e9873e597c</data>
    </edge>
    <edge source="result" target="logger">
      <data key="d4">The logger captures errors related to the result generation process, indicating its significance in error handling.</data>
      <data key="d5">error handling, system reliability</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_cf3cd9ded1fbc94e0796c2e9873e597c</data>
    </edge>
    <edge source="result" target="prompt">
      <data key="d4">result is derived from the prompt input given to the language model, showing a link in the workflow from prompt to output.:|:result holds the output produced by the LLM after processing the prompt."+</data>
      <data key="d5">output generation, model interaction:|:processing, output"</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_7632c4b619e7677d548ca2cb0924040f:|:excerpt_id_6aad6436e24fdc08b2a945d47b297b8b</data>
    </edge>
    <edge source="result" target="print">
      <data key="d4">print displays the value contained in the result variable to the user.</data>
      <data key="d5">output, user interaction</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_7632c4b619e7677d548ca2cb0924040f</data>
    </edge>
    <edge source="result" target="keyword_data">
      <data key="d4">keyword_data is obtained by extracting JSON from the model's result, indicating a transformation from output to structured data.</data>
      <data key="d5">data extraction, transformation</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_6aad6436e24fdc08b2a945d47b297b8b</data>
    </edge>
    <edge source="result" target="query_endpoint">
      <data key="d4">The result variable holds the output of the query processing within the query_endpoint function.</data>
      <data key="d5">output management, function result</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_9bcab0017708cc906fc0c391ec015f1e</data>
    </edge>
    <edge source="result" target="func">
      <data key="d4">result is the output generated from calling the func within the profile_function.</data>
      <data key="d5">function execution, output</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_8fda81c68b75421d305c4c8c5587399b</data>
    </edge>
    <edge source="Error Handling" target="Client Errors (4xx)">
      <data key="d4">Error Handling involves managing Client Errors, helping users understand the nature of issues within the 4xx category.</data>
      <data key="d5">error management, clarity</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_87dae939db470195b9a1c5b5ab8cca31</data>
    </edge>
    <edge source="Error Handling" target="None">
      <data key="d4">Error Handling is a standalone feature that provides essential capabilities in managing software errors, not clearly related to any other entity.</data>
      <data key="d5">software reliability, error management</data>
      <data key="d6">5.0</data>
      <data key="d7">excerpt_id_18835ef6b8af421b24d0b04072745415</data>
    </edge>
    <edge source="Error Handling" target="Graceful Degradation">
      <data key="d4">Graceful Degradation enhances Error Handling capabilities by allowing the system to continue working despite errors.</data>
      <data key="d5">system resilience, error management</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_efce5aab9b4130a5bb56f788c7389339</data>
    </edge>
    <edge source="Error Handling" target="Document Ingestion Process">
      <data key="d4">Error Handling is a configuration within the Document Ingestion Process that improves its reliability when processing documents.</data>
      <data key="d5">reliability, resilience</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_04830b46c6b9fee612a7e80e9b24cec2</data>
    </edge>
    <edge source="Client Errors (4xx)" target="400 Bad Request">
      <data key="d4">The 400 Bad Request illustrates a specific instance of Client Errors that indicates the request was invalid, serving as an example of the category.</data>
      <data key="d5">error example, client request</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_87dae939db470195b9a1c5b5ab8cca31</data>
    </edge>
    <edge source="Query Text" target="Error Message">
      <data key="d4">The Query Text variable is directly referenced in the Error Message, indicating its importance in determining the output error.</data>
      <data key="d5">error handling, input validation</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_57eb43a9ab45275ad99d7f7de6594ffd</data>
    </edge>
    <edge source="Error Message" target="JSON Format">
      <data key="d4">Error Message is represented in JSON Format, making it suitable for communication between systems.</data>
      <data key="d5">data transmission, structured format</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_6dd306338edf913b9d21cc96c55f5c03</data>
    </edge>
    <edge source="500 Internal Server Error" target="Server Errors (5xx)">
      <data key="d4">500 Internal Server Error is a specific type of Server Error that signifies an issue in query processing.</data>
      <data key="d5">error type, categorization</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_dd9ffc6bef5d858bb7b1279db8dfc3ad</data>
    </edge>
    <edge source="API Key" target="API">
      <data key="d4">The API Key is a crucial part of accessing the API, as it validates requests made to it.</data>
      <data key="d5">authentication, access</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_dfcb42b36ae0e3ad5d118ac29dbb8550</data>
    </edge>
    <edge source="API Gateway" target="Rate Limiting">
      <data key="d4">An API Gateway can provide Rate Limiting capabilities for the SmolRAG API, ensuring resource management.</data>
      <data key="d5">resource management, middleware</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_25c46a7909a2f532a6989da2de994646</data>
    </edge>
    <edge source="API_KEY" target="get_api_key">
      <data key="d4">The get_api_key function checks the validity of the API_KEY to authorize access to protected endpoints.</data>
      <data key="d5">authorization, validation</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_2444e5ece582784ac2fce0dabf395906</data>
    </edge>
    <edge source="API_KEY_NAME" target="api_key_header">
      <data key="d4">api_key_header uses the API_KEY_NAME to identify the required header for API key retrieval.</data>
      <data key="d5">header, authentication</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_2444e5ece582784ac2fce0dabf395906</data>
    </edge>
    <edge source="get_api_key" target="query_endpoint">
      <data key="d4">query_endpoint depends on the get_api_key function to ensure that requests are authenticated before processing queries.</data>
      <data key="d5">security, dependency</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_2444e5ece582784ac2fce0dabf395906</data>
    </edge>
    <edge source="get_api_key" target="HTTPException">
      <data key="d4">get_api_key raises an HTTPException if the provided API key is invalid, signaling an error to the user.</data>
      <data key="d5">error handling, security</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_2444e5ece582784ac2fce0dabf395906</data>
    </edge>
    <edge source="query_endpoint" target="QueryRequest">
      <data key="d4">The query_endpoint function utilizes the QueryRequest class to process incoming queries as defined in its parameters.:|:The query_endpoint function uses QueryRequest as the input data structure to process incoming queries.:|:query_endpoint processes input data defined by the QueryRequest variable, making it essential for the function's operation.</data>
      <data key="d5">process, function relationship:|:function operation, input processing:|:data processing, input structure</data>
      <data key="d6">27.0</data>
      <data key="d7">excerpt_id_24d76bde5328dc16ace5722740c74eb7:|:excerpt_id_abfc709617d4485a5d0d2754f4298bae:|:excerpt_id_9bcab0017708cc906fc0c391ec015f1e</data>
    </edge>
    <edge source="query_endpoint" target="RateLimitExceeded">
      <data key="d4">RateLimitExceeded is handled by the query_endpoint when a rate limit is exceeded, ensuring the function can respond gracefully to such events.</data>
      <data key="d5">error handling, function behavior</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_abfc709617d4485a5d0d2754f4298bae</data>
    </edge>
    <edge source="query_endpoint" target="Limiter">
      <data key="d4">Limiter restricts the number of requests that the query_endpoint can handle per minute, enforcing rate limits on the function.</data>
      <data key="d5">rate limiting, performance control</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_abfc709617d4485a5d0d2754f4298bae</data>
    </edge>
    <edge source="query_endpoint" target="query_map">
      <data key="d4">query_map provides the necessary mapping for processing the query based on the type specified in the request.</data>
      <data key="d5">functionality mapping, query processing</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_9bcab0017708cc906fc0c391ec015f1e</data>
    </edge>
    <edge source="query_endpoint" target="logger">
      <data key="d4">The logger is used within the query_endpoint function to log errors when exceptions occur, aiding in error resolution.</data>
      <data key="d5">error handling, logging</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_9bcab0017708cc906fc0c391ec015f1e</data>
    </edge>
    <edge source="query_endpoint" target="HTTPException">
      <data key="d4">In case of an error, the query_endpoint function raises an HTTPException to return a standardized error response.</data>
      <data key="d5">error handling, user feedback</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_9bcab0017708cc906fc0c391ec015f1e</data>
    </edge>
    <edge source="query_endpoint" target="process_query_with_timeout">
      <data key="d4">The query_endpoint function directly invokes process_query_with_timeout to handle incoming requests, ensuring queries are processed efficiently.</data>
      <data key="d5">function interaction, API handling</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_dc931d71f7d6a347aaaa011838c3efaf</data>
    </edge>
    <edge source="query_endpoint" target="BackgroundTasks">
      <data key="d4">BackgroundTasks can be utilized within query_endpoint to handle actions that can run after the response is sent, enhancing API performance.</data>
      <data key="d5">asynchronous processing, task management</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_dc931d71f7d6a347aaaa011838c3efaf</data>
    </edge>
    <edge source="query_endpoint" target="max_results">
      <data key="d4">The 'max_results' variable is utilized in query_endpoint to determine how many results to return, showcasing its role in the function.</data>
      <data key="d5">parameter processing, function relationship</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_24d76bde5328dc16ace5722740c74eb7</data>
    </edge>
    <edge source="HTTPException" target="process_query_with_timeout">
      <data key="d4">If a query exceeds the specified timeout, process_query_with_timeout raises an HTTPException to inform about the timeout error.</data>
      <data key="d5">error handling, timeout management</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_dc931d71f7d6a347aaaa011838c3efaf</data>
    </edge>
    <edge source="Rate Limiting" target="FastAPI Middleware">
      <data key="d4">FastAPI Middleware can be used to implement Rate Limiting for the SmolRAG API effectively.</data>
      <data key="d5">implementation, middleware</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_25c46a7909a2f532a6989da2de994646</data>
    </edge>
    <edge source="Rate Limiting" target="slowapi">
      <data key="d4">The `slowapi` package is a tool that can be used to implement Rate Limiting for APIs built with FastAPI.</data>
      <data key="d5">implementation tool, rate limiting</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_25c46a7909a2f532a6989da2de994646</data>
    </edge>
    <edge source="Rate Limiting" target="API">
      <data key="d4">Rate Limiting is implemented to manage the volume of API calls, ensuring fair usage and preventing server overload.</data>
      <data key="d5">API management, performance optimization</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_ff086be0a4666895d6aa51a1f2a286e5</data>
    </edge>
    <edge source="Rate Limiting" target="OpenAI API">
      <data key="d4">The OpenAI API enforces Rate Limiting to prevent excessive usage, which can lead to errors if exceeded.</data>
      <data key="d5">usage control, error prevention</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_d41d4522e6a3cf4c0b8733e72233523a</data>
    </edge>
    <edge source="Rate Limiting" target="OpenAI's API">
      <data key="d4">Rate Limiting is implemented when using OpenAI's API to manage the number of requests sent and avoid limits.</data>
      <data key="d5">optimization strategy, management</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_8ec1e476798fb46038b3e8a5c5907ec5</data>
    </edge>
    <edge source="QueryRequest" target="query_endpoint_v1">
      <data key="d4">query_endpoint_v1 processes requests that are encapsulated in the QueryRequest data structure.</data>
      <data key="d5">request handling, data encapsulation</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_14de54a01d2eddbd92dc845208f04fa1</data>
    </edge>
    <edge source="QueryRequest" target="BaseModel">
      <data key="d4">QueryRequest inherits from BaseModel, utilizing its validation capabilities to ensure correct data structure.</data>
      <data key="d5">inheritance, validation</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_27249d9d3f94ef9651b9eb1eaf1ed6e3</data>
    </edge>
    <edge source="QueryRequest" target="max_results">
      <data key="d4">The 'max_results' variable is an essential attribute of the QueryRequest class that limits the number of results, linking it directly to the query process.</data>
      <data key="d5">attribute, configuration relationship</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_24d76bde5328dc16ace5722740c74eb7</data>
    </edge>
    <edge source="CORS Configuration" target="FastAPI's Middleware">
      <data key="d4">FastAPI's Middleware is involved in the process of configuring CORS settings necessary for the API to function properly across different domains.</data>
      <data key="d5">configuration, middleware functionality</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_14fbfc8e32f774c23cc2f9360cb2c1c5</data>
    </edge>
    <edge source="SmolRag API" target="CORS Middleware">
      <data key="d4">SmolRag API integrates CORS Middleware to manage cross-origin requests, enhancing accessibility and security.:|:CORS Middleware is applied in the SmolRag API to enable secure cross-origin requests, expanding the API's applicability for web clients.</data>
      <data key="d5">security, cross-origin:|:cross-origin resource sharing, integration</data>
      <data key="d6">17.0</data>
      <data key="d7">excerpt_id_f9f9e7c388f5ed8fa52c4ed1b6f792c9:|:excerpt_id_db532a32078ae304c7d23c29df7effc8</data>
    </edge>
    <edge source="CORS Middleware" target="allow_origins">
      <data key="d4">CORS Middleware utilizes the allow_origins configuration to specify which domains are permitted to make requests to the API.:|:allow_origins is a specific configuration in CORS Middleware that dictates which external domains are allowed to access the SmolRag API.</data>
      <data key="d5">configuration, security:|:configuration, permissions</data>
      <data key="d6">15.0</data>
      <data key="d7">excerpt_id_f9f9e7c388f5ed8fa52c4ed1b6f792c9:|:excerpt_id_db532a32078ae304c7d23c29df7effc8</data>
    </edge>
    <edge source="CORS Middleware" target="allow_methods">
      <data key="d4">allow_methods is a configuration within CORS Middleware, defining the HTTP methods permitted in cross-origin requests to the SmolRag API.:|:CORS Middleware defines the allow_methods configuration to specify which HTTP methods are allowed for API access.</data>
      <data key="d5">configuration, access control:|:configuration, permissions</data>
      <data key="d6">14.0</data>
      <data key="d7">excerpt_id_f9f9e7c388f5ed8fa52c4ed1b6f792c9:|:excerpt_id_db532a32078ae304c7d23c29df7effc8</data>
    </edge>
    <edge source="CORS Middleware" target="allow_headers">
      <data key="d4">allow_headers is utilized in CORS Middleware to specify the headers that are allowed during requests to the SmolRag API.:|:CORS Middleware sets the allow_headers configuration to determine which headers can be used in the API requests.</data>
      <data key="d5">configuration, access control:|:configuration, permissions</data>
      <data key="d6">14.0</data>
      <data key="d7">excerpt_id_f9f9e7c388f5ed8fa52c4ed1b6f792c9:|:excerpt_id_db532a32078ae304c7d23c29df7effc8</data>
    </edge>
    <edge source="CORS Middleware" target="allow_credentials">
      <data key="d4">CORS Middleware uses the allow_credentials setting to determine if credentials can be included in cross-origin requests.</data>
      <data key="d5">configuration, security</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_db532a32078ae304c7d23c29df7effc8</data>
    </edge>
    <edge source="allow_origins" target="API Versioning">
      <data key="d4">The configuration of `allow_origins` is essential for ensuring that application domains can interface with different API versions safely.</data>
      <data key="d5">configuration, API usage</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_17a5056efc735a93a671ced76a4ca7f1</data>
    </edge>
    <edge source="v1_router" target="query_endpoint_v1">
      <data key="d4">query_endpoint_v1 is a function defined within the v1_router for handling requests with version 1 logic.</data>
      <data key="d5">routing, function definition</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_14de54a01d2eddbd92dc845208f04fa1</data>
    </edge>
    <edge source="v2_router" target="query_endpoint_v2">
      <data key="d4">query_endpoint_v2 is a function defined within the v2_router for handling requests with version 2 logic.</data>
      <data key="d5">routing, function definition</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_14de54a01d2eddbd92dc845208f04fa1</data>
    </edge>
    <edge source="query_endpoint_v2" target="QueryRequestV2">
      <data key="d4">query_endpoint_v2 processes requests that are encapsulated in the QueryRequestV2 data structure.</data>
      <data key="d5">request handling, data encapsulation</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_14de54a01d2eddbd92dc845208f04fa1</data>
    </edge>
    <edge source="Standard Query" target="localhost:8000/query">
      <data key="d4">The Standard Query function utilizes the localhost:8000/query interface to send requests and retrieve answers.</data>
      <data key="d5">request interface, API interaction</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_fddc660eda213cec6e37412bf400333b</data>
    </edge>
    <edge source="Standard Query" target="Query Type">
      <data key="d4">Query Type determines the method of query execution which can include Standard Query as one of its options.</data>
      <data key="d5">query execution, selection</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_09efdd02089d4d4a3aa99a252d672b58</data>
    </edge>
    <edge source="Knowledge Graph Query" target="localhost:8000/query">
      <data key="d4">The Knowledge Graph Query function operates through the localhost:8000/query interface for user interactions.</data>
      <data key="d5">request interface, entity relationships</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_fddc660eda213cec6e37412bf400333b</data>
    </edge>
    <edge source="Knowledge Graph Query" target="Keyword Extraction">
      <data key="d4">The Knowledge Graph Query's performance can be directly influenced by the effectiveness of Keyword Extraction, affecting the returned results.</data>
      <data key="d5">functionality, performance</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_65cb890bd3f9ceeaeaba0e1a329ba460</data>
    </edge>
    <edge source="Knowledge Graph Query" target="Graph Traversal Problems">
      <data key="d4">Graph Traversal Problems may obstruct the Knowledge Graph Query from navigating effectively, potentially resulting in unexpected outputs.</data>
      <data key="d5">functionality, potential issues</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_65cb890bd3f9ceeaeaba0e1a329ba460</data>
    </edge>
    <edge source="Knowledge Graph Query" target="Ranking Issues">
      <data key="d4">Ranking Issues can impact how results from the Knowledge Graph Query are displayed, leading to unexpected results.</data>
      <data key="d5">functionality, output quality</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_65cb890bd3f9ceeaeaba0e1a329ba460</data>
    </edge>
    <edge source="Mix Query" target="localhost:8000/query">
      <data key="d4">The Mix Query function is executed via the localhost:8000/query interface, allowing complex queries to be processed.</data>
      <data key="d5">request interface, information processing</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_fddc660eda213cec6e37412bf400333b</data>
    </edge>
    <edge source="Mix Query" target="Strengths">
      <data key="d4">The Strengths of the Mix Query are inherent benefits that arise from its functional design, enhancing query performance.</data>
      <data key="d5">function benefits, performance enhancement</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_9320c4230ec563f6b23dbe9d38b855e0</data>
    </edge>
    <edge source="Mix Query" target="Implementation">
      <data key="d4">Implementation details the steps in executing the Mix Query function, illustrating how it functions.</data>
      <data key="d5">execution steps, function explanation</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_9320c4230ec563f6b23dbe9d38b855e0</data>
    </edge>
    <edge source="Mix Query" target="SmolRag">
      <data key="d4">Mix Query utilizes the SmolRag API to process and retrieve information, demonstrating multiple querying approaches.</data>
      <data key="d5">API usage, functionality</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_0fe32e6885f5b985ccdafa775b1e90c3</data>
    </edge>
    <edge source="Mix Query" target="Query Type">
      <data key="d4">Query Type covers the Mix Query option which diversifies the querying techniques available.</data>
      <data key="d5">query execution, selection</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_09efdd02089d4d4a3aa99a252d672b58</data>
    </edge>
    <edge source="Python requests" target="configuration">
      <data key="d4">Python requests requires certain configurations for proper functioning, such as setting up headers or parameters in requests.</data>
      <data key="d5">configuration, API usage</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_e4ab8ab288b90325e31809958bd2e6c8</data>
    </edge>
    <edge source="url" target="headers">
      <data key="d4">The URL and headers are both essential components of an HTTP request, used in conjunction to communicate with web services.</data>
      <data key="d5">HTTP request components</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_f867ac5b5c6b6493fa80e156c12f2998</data>
    </edge>
    <edge source="headers" target="body">
      <data key="d4">Headers and body are both part of the fetch configuration, working together to define the request sent to the server.</data>
      <data key="d5">request configuration, metadata</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_479ad0928f95805c9a3315aa5e37e736</data>
    </edge>
    <edge source="payload" target="response">
      <data key="d4">The payload is sent in the request, and the response is the resultant data returned from that payload after processing.</data>
      <data key="d5">request-response cycle</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_f867ac5b5c6b6493fa80e156c12f2998</data>
    </edge>
    <edge source="response" target="print">
      <data key="d4">The print function outputs the data contained in the response to the console after it is received from the server.</data>
      <data key="d5">output mechanism</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_f867ac5b5c6b6493fa80e156c12f2998</data>
    </edge>
    <edge source="response" target="verify_openai_api_key">
      <data key="d4">The function verify_openai_api_key processes the response from the OpenAI API call to determine if the API key is valid.</data>
      <data key="d5">verification process, output handling</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_f72624f4124b364e9f6e3cabefc26dcb</data>
    </edge>
    <edge source="response" target="test">
      <data key="d4">The example input test is used within the function client.embeddings.create to generate a response indicating the API key's validity.</data>
      <data key="d5">input-output relationship, testing</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_f72624f4124b364e9f6e3cabefc26dcb</data>
    </edge>
    <edge source="print" target="OPENAI_API_KEY">
      <data key="d4">The print function is used to output the value of the OPENAI_API_KEY retrieved via the os library.</data>
      <data key="d5">output, function usage</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_e7b71f4ba0f007f7f8bb0625c3380566</data>
    </edge>
    <edge source="print" target="for loop">
      <data key="d4">The print function is called within the for loop to provide status updates on the current batch being processed.</data>
      <data key="d5">status updating, feedback mechanism</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_53cdd140e8895a35a045a5efd1c35efd</data>
    </edge>
    <edge source="print" target="wrapper">
      <data key="d4">the wrapper calls print to log retry attempts made during execution, providing feedback to the user.</data>
      <data key="d5">logging, user feedback</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_1def6bdd950a1221491ad5bc7859d768</data>
    </edge>
    <edge source="print" target="query">
      <data key="d4">The query function's output is transmitted to the print function for display purposes.</data>
      <data key="d5">output display, data handling</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_fcb87a80b68c38981b549c5658a74b5b</data>
    </edge>
    <edge source="fetch" target="query">
      <data key="d4">Fetch employs the query variable in its JSON body to dynamically request information from the server.</data>
      <data key="d5">data retrieval, dynamic querying</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_479ad0928f95805c9a3315aa5e37e736</data>
    </edge>
    <edge source="query" target="llm">
      <data key="d4">llm is responsible for processing the user's query to generate a response using OpenAiLlm.</data>
      <data key="d5">processing, interaction</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_6aad6436e24fdc08b2a945d47b297b8b</data>
    </edge>
    <edge source="query" target="prompt">
      <data key="d4">prompt is generated based on the user's query, establishing a direct relation in the process of preparing for the language model interaction.</data>
      <data key="d5">query generation, prompt preparation</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_6aad6436e24fdc08b2a945d47b297b8b</data>
    </edge>
    <edge source="query" target="standard_result">
      <data key="d4">query is processed by the rag API to yield the standard_result variable as an output based on that query.</data>
      <data key="d5">query processing, variable output</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_2aec78b1c9251a3e46cf4a0fc90b5ce4</data>
    </edge>
    <edge source="query" target="local_kg_result">
      <data key="d4">query is used to execute a local knowledge graph query through the rag API, generating a local_kg_result.</data>
      <data key="d5">query processing, variable output</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_2aec78b1c9251a3e46cf4a0fc90b5ce4</data>
    </edge>
    <edge source="query" target="global_kg_result">
      <data key="d4">query is processed to generate a global knowledge graph result using the rag API, stored in global_kg_result.</data>
      <data key="d5">query processing, variable output</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_2aec78b1c9251a3e46cf4a0fc90b5ce4</data>
    </edge>
    <edge source="query" target="hybrid_kg_result">
      <data key="d4">query result is obtained through a hybrid query execution performed by the rag API, leading to the hybrid_kg_result.</data>
      <data key="d5">query processing, variable output</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_2aec78b1c9251a3e46cf4a0fc90b5ce4</data>
    </edge>
    <edge source="query" target="mix_result">
      <data key="d4">query is employed to execute a mixed query type via the rag API, resulting in the mix_result.</data>
      <data key="d5">query processing, variable output</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_2aec78b1c9251a3e46cf4a0fc90b5ce4</data>
    </edge>
    <edge source="query" target="rag">
      <data key="d4">The rag instance can utilize the query function to search the imported documents.:|:The SmolRag instance ('rag') utilizes the query function to retrieve results based on the imported documents.:|:rag utilizes the query method for standard queries and returns the results as part of the processing workflow.</data>
      <data key="d5">function execution, information retrieval:|:data retrieval, function execution:|:method execution, query processing</data>
      <data key="d6">26.0</data>
      <data key="d7">excerpt_id_f23f1c9ec24d0c56c84d4dea02a31e9c:|:excerpt_id_fcb87a80b68c38981b549c5658a74b5b:|:excerpt_id_391d9b7fd00abda862a1d6576fee1918</data>
    </edge>
    <edge source="query" target="use cases">
      <data key="d4">The query function addresses specific use cases for how SmolRag can be applied in practical scenarios.</data>
      <data key="d5">function, application scenarios</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_391d9b7fd00abda862a1d6576fee1918</data>
    </edge>
    <edge source="query" target="CustomSmolRag">
      <data key="d4">query is an overridden method in CustomSmolRag, signifying its specialized functionality compared to the base class.</data>
      <data key="d5">method overriding, specialization</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_19166492bd9b3932cb606850e071caa4</data>
    </edge>
    <edge source="query" target="MemoryEfficientVectorStore">
      <data key="d4">query is a function that enables retrieval of vectors from MemoryEfficientVectorStore based on similarity measures.</data>
      <data key="d5">data retrieval, functionality</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_902f74e2a13563ad2b6088a90d1308d6</data>
    </edge>
    <edge source="query" target="top_k">
      <data key="d4">top_k is a parameter of query that determines how many results it will return, affecting the output of the query method.</data>
      <data key="d5">query optimization, configurable parameter</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_902f74e2a13563ad2b6088a90d1308d6</data>
    </edge>
    <edge source="query" target="batch_size">
      <data key="d4">batch_size is part of the query method, which allows for processing vectors in manageable chunks, thus aiding in memory efficiency.</data>
      <data key="d5">memory efficiency, processing strategy</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_902f74e2a13563ad2b6088a90d1308d6</data>
    </edge>
    <edge source="data" target="console.log">
      <data key="d4">Data is logged to the console using console.log, showing the results of the queries made by fetch.</data>
      <data key="d5">output, debugging</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_479ad0928f95805c9a3315aa5e37e736</data>
    </edge>
    <edge source="data" target="_get_entities_from_relationships">
      <data key="d4">The _get_entities_from_relationships function processes the variable data to extract entities and adjust their ranking.</data>
      <data key="d5">method processing, data handling</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_451a74f3189766e5f74d735e4bd4d846</data>
    </edge>
    <edge source="data" target="rank">
      <data key="d4">The rank variable is used to influence how the data variable is sorted and prioritized within the CustomSmolRag implementation.</data>
      <data key="d5">sorting logic, ranking metric</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_451a74f3189766e5f74d735e4bd4d846</data>
    </edge>
    <edge source="data" target="weight">
      <data key="d4">weight is another variable involved in the sorting of data, contributing to the final ranking of entities.</data>
      <data key="d5">ranking metric, processing</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_451a74f3189766e5f74d735e4bd4d846</data>
    </edge>
    <edge source="Uvicorn" target="Gunicorn">
      <data key="d4">Uvicorn operates in conjunction with Gunicorn as a production-grade ASGI server to enhance web application performance.</data>
      <data key="d5">server configuration, performance enhancement</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_bfbdc7de5c6b20362e7297fd06fd853a</data>
    </edge>
    <edge source="uvicorn" target="api.main:app">
      <data key="d4">app, serving as the key link between the server and the application code.:|:Uvicorn is used to run the application defined in api.main:app, establishing the server for the web application.:|:Uvicorn runs the application defined at api.main</data>
      <data key="d5">server application, deployment:|:server-application relationship</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_ad7847424ed02f7703bdac9030b5c32a:|:excerpt_id_4fbf0d25ec0ca8c1cb9ebaf57eb37998</data>
    </edge>
    <edge source="uvicorn" target="host">
      <data key="d4">Uvicorn utilizes the host variable to determine the address for incoming connections, establishing where it will serve the application.:|:The host variable specifies the address Uvicorn will bind to, meaning it directly influences where the server is accessible.</data>
      <data key="d5">configuration relationship:|:configuration, server accessibility</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_ad7847424ed02f7703bdac9030b5c32a:|:excerpt_id_4fbf0d25ec0ca8c1cb9ebaf57eb37998</data>
    </edge>
    <edge source="uvicorn" target="port">
      <data key="d4">The port variable specifies the port on which Uvicorn will accept connections, essential for service availability.:|:Uvicorn needs the port variable to know which port to listen to for incoming requests, directly affecting how the application is accessed.</data>
      <data key="d5">configuration relationship:|:configuration, service availability</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_ad7847424ed02f7703bdac9030b5c32a:|:excerpt_id_4fbf0d25ec0ca8c1cb9ebaf57eb37998</data>
    </edge>
    <edge source="api.main:app" target="gunicorn">
      <data key="d4">Gunicorn uses api.main:app as the application entry point to serve web requests from clients.</data>
      <data key="d5">application serving, configuration</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_6d201e08f402100e25cea0da712f2d5a</data>
    </edge>
    <edge source="Gunicorn" target="Uvicorn Workers">
      <data key="d4">Gunicorn can be configured to work with Uvicorn Workers to enhance performance and manage multiple concurrent connections.</data>
      <data key="d5">configuration, performance enhancement</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_7b0dedd61181e074b18409d0e42f7c52</data>
    </edge>
    <edge source="gunicorn" target="4">
      <data key="d4">The number of workers (4) defined in the Gunicorn command line directly influences the operational capabilities of the Gunicorn server.</data>
      <data key="d5">configuration, performance</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_6d201e08f402100e25cea0da712f2d5a</data>
    </edge>
    <edge source="gunicorn" target="uvicorn.workers.UvicornWorker">
      <data key="d4">Gunicorn utilizes UvicornWorker to run Uvicorn as the worker process for handling requests asynchronously.</data>
      <data key="d5">server functionality, performance</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_6d201e08f402100e25cea0da712f2d5a</data>
    </edge>
    <edge source="gunicorn" target="0.0.0.0:8000">
      <data key="d4">Gunicorn binds to 0.0.0.0:8000 to accept connections on all network interfaces at port 8000.</data>
      <data key="d5">network communication, configuration</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_6d201e08f402100e25cea0da712f2d5a</data>
    </edge>
    <edge source="Docker" target="API">
      <data key="d4">Docker is utilized to containerize the API, ensuring its consistent deployment in various operational settings.</data>
      <data key="d5">deployment, containerization</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_3d3def25aa2341dd78246b6adb9a1c8b</data>
    </edge>
    <edge source=".env" target="cat">
      <data key="d4">The 'cat' function is used to display the contents of the '.env' file, making them accessible for viewing or debugging purposes.</data>
      <data key="d5">file access, command usage</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_b77543b9fea5f27d22ce61d4fa8535e7</data>
    </edge>
    <edge source="Performance Optimization" target="Knowledge Graph Maintenance and Updates">
      <data key="d4">Performance Optimization contributes to the overall effectiveness of Knowledge Graph Maintenance and Updates by making querying more efficient.</data>
      <data key="d5">maintenance, performance</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_c911a970aeaf57b302869e9d148ac6c8</data>
    </edge>
    <edge source="Horizontal Scaling" target="Memory Usage">
      <data key="d4">Horizontal Scaling can impact Memory Usage as additional instances may lead to higher memory consumption based on the application's load.</data>
      <data key="d5">resource management, scalability</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_bfbdc7de5c6b20362e7297fd06fd853a</data>
    </edge>
    <edge source="Horizontal Scaling" target="Distributed Processing">
      <data key="d4">Distributed Processing is a technique utilized within Horizontal Scaling to improve data ingestion performance.</data>
      <data key="d5">scaling technique, performance optimization</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_9c072e3e78902159765fef2d7578e992</data>
    </edge>
    <edge source="Horizontal Scaling" target="Sharded Vector Store">
      <data key="d4">The Sharded Vector Store is a method to implement Horizontal Scaling by distributing data across multiple instances.</data>
      <data key="d5">data distribution, efficiency</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_9c072e3e78902159765fef2d7578e992</data>
    </edge>
    <edge source="Horizontal Scaling" target="Load Balancing">
      <data key="d4">Load Balancing is integral to Horizontal Scaling as it ensures even distribution of queries across instances.</data>
      <data key="d5">query distribution, operational efficiency</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_9c072e3e78902159765fef2d7578e992</data>
    </edge>
    <edge source="Horizontal Scaling" target="Microservices Architecture">
      <data key="d4">Microservices Architecture facilitates Horizontal Scaling by allowing independent scaling of its functional components.</data>
      <data key="d5">modularity, scalability</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_9c072e3e78902159765fef2d7578e992</data>
    </edge>
    <edge source="Memory Usage" target="Monitoring">
      <data key="d4">Monitoring is used to assess and keep track of Memory Usage to determine if optimization is necessary.</data>
      <data key="d5">performance assessment, resource management</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_73511a8e00d53872966dbd2a0639babc</data>
    </edge>
    <edge source="Memory Usage" target="Optimization">
      <data key="d4">Optimization aims to minimize Memory Usage while maximizing performance and efficiency.</data>
      <data key="d5">performance improvement, efficiency</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_73511a8e00d53872966dbd2a0639babc</data>
    </edge>
    <edge source="Memory Usage" target="optimize_memory">
      <data key="d4">The optimize_memory function reports Memory Usage before and after garbage collection.</data>
      <data key="d5">memory analysis, reporting</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_162e6c9e88d526c7cda8c551479b1fb1</data>
    </edge>
    <edge source="Memory Usage" target="memory">
      <data key="d4">The memory variable's value is printed under the Memory Usage feature, illustrating memory utilization percentage.</data>
      <data key="d5">data representation, feature use</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_2249047f50897aaf33539b74ade53916</data>
    </edge>
    <edge source="Memory Usage" target="Performance">
      <data key="d4">Memory Usage is an essential factor in performance evaluation as it impacts the overall efficiency of the SmolRAG system.</data>
      <data key="d5">resource efficiency, performance metric</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_9b3e7699a2ad7cd3ed369e4a0e702290</data>
    </edge>
    <edge source="Authentication and Authorization" target="HTTPS">
      <data key="d4">Implementing Authentication and Authorization requires the use of HTTPS for secure communication in production environments.</data>
      <data key="d5">security, data protection</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_bfbdc7de5c6b20362e7297fd06fd853a</data>
    </edge>
    <edge source="Logging" target="Monitoring Tools">
      <data key="d4">Monitoring Tools utilize Logging to track API usage and errors, providing valuable insights into application performance.</data>
      <data key="d5">performance tracking, analysis</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_bfbdc7de5c6b20362e7297fd06fd853a</data>
    </edge>
    <edge source="add_document" target="DocumentRequest">
      <data key="d4">The add_document function utilizes the DocumentRequest variable to process the necessary information for adding a document.</data>
      <data key="d5">function usage, parameter</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_30964e126597da239266ed63840a67ce</data>
    </edge>
    <edge source="add_document" target="/documents">
      <data key="d4">The add_document function is associated with the /documents API endpoint for the purpose of adding documents.</data>
      <data key="d5">API connection, functionality</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_30964e126597da239266ed63840a67ce</data>
    </edge>
    <edge source="remove_document" target="document_id">
      <data key="d4">The remove_document function uses the document_id parameter to identify which document to delete from the system.</data>
      <data key="d5">function parameter, identification</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_30964e126597da239266ed63840a67ce</data>
    </edge>
    <edge source="remove_document" target="/documents">
      <data key="d4">The remove_document function is tied to the /documents API endpoint for deleting documents.</data>
      <data key="d5">API connection, functionality</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_30964e126597da239266ed63840a67ce</data>
    </edge>
    <edge source="System Information" target="Endpoints">
      <data key="d4">System Information includes endpoints that allow for the retrieval of data regarding the system's information.</data>
      <data key="d5">data retrieval, system access</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_567dce2677fe41f56df76aa77cd2310d</data>
    </edge>
    <edge source="app" target="get_info">
      <data key="d4">The function get_info is part of the app and is associated with its API endpoint for retrieving system information.</data>
      <data key="d5">functionality, API structure</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_61a0743ace2fcb551b527e0c9f420df9</data>
    </edge>
    <edge source="Asynchronous Processing" target="long-running queries">
      <data key="d4">Asynchronous Processing is specifically designed to handle long-running queries, allowing them to be processed in the background while maintaining application responsiveness.</data>
      <data key="d5">background processing, efficiency</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_4eb0bdce814c5bedbf9389c0382a7cab</data>
    </edge>
    <edge source="Asynchronous Processing" target="Query Performance">
      <data key="d4">Asynchronous Processing contributes to overall Query Performance by increasing throughput in non-interactive situations.</data>
      <data key="d5">optimization strategy, performance improvement</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_0cb743ef78a1b56785a004b70800d537</data>
    </edge>
    <edge source="BackgroundTasks" target="async_query">
      <data key="d4">The async_query function utilizes BackgroundTasks to manage the execution of background tasks during the query processing.</data>
      <data key="d5">task management, asynchronous processing</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_5024e90dea7510cdc40f94282d4af1a0</data>
    </edge>
    <edge source="async_query" target="process_query">
      <data key="d4">The async_query function calls process_query to handle the background task of processing the query.</data>
      <data key="d5">background processing, task execution</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_5024e90dea7510cdc40f94282d4af1a0</data>
    </edge>
    <edge source="get_query_result" target="query_id">
      <data key="d4">The get_query_result function retrieves the result of a query based on the unique query_id submitted by the user.</data>
      <data key="d5">result retrieval, identification</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_5024e90dea7510cdc40f94282d4af1a0</data>
    </edge>
    <edge source="Webhooks" target="External Systems">
      <data key="d4">Webhooks are used to notify external systems upon query completion, highlighting their role in integration and communication.</data>
      <data key="d5">integration, notification</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_45d7095e44edf05d55c5e9a51a6eddaa</data>
    </edge>
    <edge source="webhook_query" target="WebhookQueryRequest">
      <data key="d4">The webhook_query function takes WebhookQueryRequest as an argument, meaning it processes requests defined by this structure.</data>
      <data key="d5">request processing, function parameters</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_45d6be4a87b8ef84ca7fc5672dffaf14</data>
    </edge>
    <edge source="Troubleshooting Guide" target="System Operation">
      <data key="d4">The Troubleshooting Guide aims to ensure smooth System Operation by addressing common problems users may face.</data>
      <data key="d5">maintenance, support</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_ab9a95edcb52c69f2a75ee555f1b7457</data>
    </edge>
    <edge source="Document Ingestion" target="SmolRAG Document Ingestion Process">
      <data key="d4">The SmolRAG Document Ingestion Process is facilitated by the Document Ingestion function, which automates the transformation of documents.</data>
      <data key="d5">process, function</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_f2b7fbadfa83b8b0ea536a4b85fef7d6</data>
    </edge>
    <edge source="Document Ingestion" target="import_documents">
      <data key="d4">The import_documents function is directly called to execute the Document Ingestion process for new or changed documents.</data>
      <data key="d5">function execution, automation</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_f2b7fbadfa83b8b0ea536a4b85fef7d6</data>
    </edge>
    <edge source="Document Ingestion" target="app/input_docs/">
      <data key="d4">The Document Ingestion function operates on files located in the app/input_docs/ directory, determining its sources for ingestion.</data>
      <data key="d5">data source, process</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_f2b7fbadfa83b8b0ea536a4b85fef7d6</data>
    </edge>
    <edge source="Document Ingestion" target="Performance Optimization Techniques">
      <data key="d4">Performance Optimization Techniques involve improving Document Ingestion methods to enhance the overall performance of SmolRAG.</data>
      <data key="d5">efficiency techniques, optimization</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_33ec53332806b9871abe7246fe9d300e</data>
    </edge>
    <edge source="System Operation" target="Python">
      <data key="d4">The operation of SmolRAG is dependent on having Python at version 3.10 or higher due to compatibility issues.</data>
      <data key="d5">requirements, compatibility</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_ab9a95edcb52c69f2a75ee555f1b7457</data>
    </edge>
    <edge source="Python" target="--version">
      <data key="d4">Python can utilize the --version function to display its version, linking the language to its version-checking functionality.</data>
      <data key="d5">functionality, version control</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_9888cc29917ed733af66f25a5cc2b247</data>
    </edge>
    <edge source="Dependencies" target="Reinstallation">
      <data key="d4">Reinstallation is a function that affects the state of the Dependencies in a project by updating or fixing them.</data>
      <data key="d5">update, maintenance</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_d2a774d9def4ca1fa9100293ec6b86ad</data>
    </edge>
    <edge source="requirements.txt" target="pip">
      <data key="d4">pip uses the requirements.txt file to install the necessary Python packages listed within it.</data>
      <data key="d5">package management, dependency management</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_03271a6a5d13d849c08443a9db5da3f2</data>
    </edge>
    <edge source="Python Path" target="Check your Python path">
      <data key="d4">The instruction to check your Python path relates directly to understanding and verifying the configuration of the Python environment.</data>
      <data key="d5">configuration verification, environment setup</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_05ba5cb63e02db3955236eb828720a8d</data>
    </edge>
    <edge source="sys" target="sys.path">
      <data key="d4">The sys module provides the path variable, which is essential for module searching in Python.</data>
      <data key="d5">module interaction, functionality</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_38b645571565a0204d9487e838cb2760</data>
    </edge>
    <edge source="Directory Structure Errors" target="Required Directories">
      <data key="d4">Directory Structure Errors can occur due to the absence of Required Directories, indicating that these directories are crucial for proper configuration.</data>
      <data key="d5">configuration error, dependency</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_6758894cf7981ef5f34cb228a5d16340</data>
    </edge>
    <edge source="Directory Structure Errors" target="Incorrect Permissions">
      <data key="d4">Directory Structure Errors can also stem from Incorrect Permissions, which affect access rights to directories, highlighting a connection in operational issues.</data>
      <data key="d5">access issues, security</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_6758894cf7981ef5f34cb228a5d16340</data>
    </edge>
    <edge source="Solutions" target="Create the Required Directories">
      <data key="d4">Solutions provide specific methods, such as Create the Required Directories, to address Directory Structure Errors.</data>
      <data key="d5">resolution, action</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_6758894cf7981ef5f34cb228a5d16340</data>
    </edge>
    <edge source="Solutions" target="Potential Causes">
      <data key="d4">Identifying Potential Causes is essential for implementing the appropriate Solutions to resolve issues with the vector store.</data>
      <data key="d5">problem-solving, resolution approach</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_c9ce0a52dd8e0d214e0d319600722c10</data>
    </edge>
    <edge source="Solutions" target="Knowledge Graph Issues">
      <data key="d4">Knowledge graph issues necessitate finding solutions to rectify the problems associated with the graph, including missing entities and relationships.</data>
      <data key="d5">resolution relationship</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_77b6fe94a073645e5b6b2eb8d96ea848</data>
    </edge>
    <edge source="Solutions" target="Check entity extraction prompt">
      <data key="d4">Checking the entity extraction prompt is a suggested solution aimed at addressing the identified knowledge graph issues.</data>
      <data key="d5">actionable relationship</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_77b6fe94a073645e5b6b2eb8d96ea848</data>
    </edge>
    <edge source="mkdir" target="app/data">
      <data key="d4">The mkdir function is used to create the app/data directory as part of the command’s execution to set up the application structure.</data>
      <data key="d5">directory creation, application setup</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_3316a255ca7ada1bc72eb9b8d3ae3a01</data>
    </edge>
    <edge source="mkdir" target="app/cache">
      <data key="d4">mkdir function is utilized to create the app/cache directory, essential for caching application data.</data>
      <data key="d5">directory creation, caching</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_3316a255ca7ada1bc72eb9b8d3ae3a01</data>
    </edge>
    <edge source="mkdir" target="app/logs">
      <data key="d4">The mkdir function creates the app/logs directory to store application logs during setup.</data>
      <data key="d5">directory creation, logging</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_3316a255ca7ada1bc72eb9b8d3ae3a01</data>
    </edge>
    <edge source="mkdir" target="app/input_docs">
      <data key="d4">The mkdir function is used to create the app/input_docs directory, necessary for managing input documents.</data>
      <data key="d5">directory creation, document management</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_3316a255ca7ada1bc72eb9b8d3ae3a01</data>
    </edge>
    <edge source="app/data" target="chmod">
      <data key="d4">chmod modifies the permissions of the app/data directory, allowing write access to the user.</data>
      <data key="d5">permissions modification, file access</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_aa9cab6794cd0484b917db2b206d2082</data>
    </edge>
    <edge source="app/data" target="ls">
      <data key="d4">The ls command is executed with the app/data directory as a target to list its contents.</data>
      <data key="d5">command execution, directory listing</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_da963b955867ad307c665992c7d9c84b</data>
    </edge>
    <edge source="app/cache" target="chmod">
      <data key="d4">chmod modifies the permissions of the app/cache directory, allowing write access to the user.</data>
      <data key="d5">permissions modification, file access</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_aa9cab6794cd0484b917db2b206d2082</data>
    </edge>
    <edge source="app/logs" target="chmod">
      <data key="d4">chmod modifies the permissions of the app/logs directory, allowing write access to the user.</data>
      <data key="d5">permissions modification, file access</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_aa9cab6794cd0484b917db2b206d2082</data>
    </edge>
    <edge source="app/input_docs" target="chmod">
      <data key="d4">chmod modifies the permissions of the app/input_docs directory, allowing write access to the user.</data>
      <data key="d5">permissions modification, file access</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_aa9cab6794cd0484b917db2b206d2082</data>
    </edge>
    <edge source="app/input_docs" target="ls">
      <data key="d4">The ls command is used to display the contents of the app/input_docs directory, indicating a direct relationship between the command and the directory being accessed.</data>
      <data key="d5">file management, command usage</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_04b1a7a15c695eaaaa60cc40a20110c1</data>
    </edge>
    <edge source="Directory Permissions" target="Check directory permissions">
      <data key="d4">Checking directory permissions involves verifying the settings that control access to files and folders.</data>
      <data key="d5">access control, verification</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_d751adcf72f75cada5f4b4f6b4a5a1b1</data>
    </edge>
    <edge source="ls" target="app/">
      <data key="d4">The ls function is executed with the app/ variable to list the contents of the specified directory.</data>
      <data key="d5">command execution, directory listing</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_a66721de2329f6b7e9441b5571c292e1</data>
    </edge>
    <edge source="ls" target="-la">
      <data key="d4">The -la option modifies the behavior of the ls command to provide more detailed output about the listings.</data>
      <data key="d5">command options, enhanced output</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_da963b955867ad307c665992c7d9c84b</data>
    </edge>
    <edge source="Directories" target="current user">
      <data key="d4">The writable status of Directories is conditional upon the permissions of the current user, indicating a necessary relationship for functionality.</data>
      <data key="d5">permissions, functionality</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_0f1aa622f57bbeb1470b779cb8c4b100</data>
    </edge>
    <edge source="chmod" target="u+r">
      <data key="d4">The chmod function uses the u+r variable to denote the permission change being applied to files or directories.</data>
      <data key="d5">permission management, command usage</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_a0530857217125f4a562cdad49a728ee</data>
    </edge>
    <edge source="chmod" target="app/input_docs/">
      <data key="d4">The chmod function is applied to the app/input_docs/ directory, modifying its access permissions.</data>
      <data key="d5">file management, command application</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_a0530857217125f4a562cdad49a728ee</data>
    </edge>
    <edge source="OpenAI API Key" target="Environment Variables">
      <data key="d4">The OpenAI API Key is a specific type of Environment Variable that must be correctly configured to avoid errors in API access.</data>
      <data key="d5">configuration, critical dependency</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_6538981cbc1da9f8defba0891fd6799e</data>
    </edge>
    <edge source="Environment Variables" target="No .env file">
      <data key="d4">Missing or incorrect Environment Variables can be linked to the absence or misconfiguration of the .env file, affecting application performance.</data>
      <data key="d5">configuration error, dependency</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_6538981cbc1da9f8defba0891fd6799e</data>
    </edge>
    <edge source="Environment Variables" target=".env file">
      <data key="d4">The .env file serves as the repository for Environment Variables, and its correct configuration is crucial for their proper loading and functionality.:|:The .env file serves as a location to define Environment Variables needed for the functioning of SmolRAG.</data>
      <data key="d5">configuration management, critical role:|:configuration storage, project setup</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_a04d28950802508f2641ac651fc3089f:|:excerpt_id_6538981cbc1da9f8defba0891fd6799e</data>
    </edge>
    <edge source="Environment Variables" target="OPENAI_API_KEY">
      <data key="d4">OPENAI_API_KEY is a critical environment variable necessary for the operation of SmolRAG, linking it to OpenAI services.</data>
      <data key="d5">required configuration, API access</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_a04d28950802508f2641ac651fc3089f</data>
    </edge>
    <edge source="Environment Variables" target="COMPLETION_MODEL">
      <data key="d4">COMPLETION_MODEL is an optional environment variable that can be customized within the Environment Variables for specific tasks in SmolRAG.</data>
      <data key="d5">optional setup, customization</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_a04d28950802508f2641ac651fc3089f</data>
    </edge>
    <edge source="Environment Variables" target="EMBEDDING_MODEL">
      <data key="d4">EMBEDDING_MODEL is another optional environment variable that allows for customization of embedding processes within SmolRAG.</data>
      <data key="d5">optional setup, customization</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_a04d28950802508f2641ac651fc3089f</data>
    </edge>
    <edge source="cat" target="app/logs/main.log">
      <data key="d4">cat is used to display the content of the main log file, facilitating the viewing of logs.</data>
      <data key="d5">file access, data viewing</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_2367c566864db88a866eced295cee581</data>
    </edge>
    <edge source="OPENAI_API_KEY" target="api">
      <data key="d4">OPENAI_API_KEY is directly associated with the usage of the OpenAI API, providing the necessary credentials to interact with it.</data>
      <data key="d5">authentication, access</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_9f38386a54b86fba1c3f321720fea020</data>
    </edge>
    <edge source="OPENAI_API_KEY" target="sk-your-api-key">
      <data key="d4">OPENAI_API_KEY must be assigned the value of sk-your-api-key for proper API authentication.</data>
      <data key="d5">authentication, environment variable</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_e6ed2f63115ab3925c9e8de1512e5ac8</data>
    </edge>
    <edge source="OPENAI_API_KEY" target="os">
      <data key="d4">The os library is used to access the OPENAI_API_KEY environment variable for retrieving its value.</data>
      <data key="d5">environment variables, library usage</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_e7b71f4ba0f007f7f8bb0625c3380566</data>
    </edge>
    <edge source="OPENAI_API_KEY" target="COMPLETION_MODEL">
      <data key="d4">OPENAI_API_KEY is necessary for authenticating and utilizing the model specified by COMPLETION_MODEL for generation purposes.</data>
      <data key="d5">authentication, model usage</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_349e9f1cbc2638830c72cc4737f1ee78</data>
    </edge>
    <edge source="OPENAI_API_KEY" target="EMBEDDING_MODEL">
      <data key="d4">OPENAI_API_KEY is also required for using the model specified by EMBEDDING_MODEL for generating embeddings.</data>
      <data key="d5">authentication, model usage</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_349e9f1cbc2638830c72cc4737f1ee78</data>
    </edge>
    <edge source="OPENAI_API_KEY" target="smolrag-api-1">
      <data key="d4">smolrag-api-1 utilizes the OPENAI_API_KEY environment variable for its functionality, outlining a direct link between the API and the variable.</data>
      <data key="d5">environment variable, functionality</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_008fc08e29e3bf19179abebec59be58b</data>
    </edge>
    <edge source="OPENAI_API_KEY" target="smolrag-api-2">
      <data key="d4">smolrag-api-2 also utilizes the OPENAI_API_KEY environment variable in a similar manner to smolrag-api-1, indicating consistency in their configuration.</data>
      <data key="d5">environment variable, functionality</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_008fc08e29e3bf19179abebec59be58b</data>
    </edge>
    <edge source="OPENAI_API_KEY" target="smolrag-api">
      <data key="d4">The OPENAI_API_KEY variable is required by the smolrag-api for authentication when accessing OpenAI services.</data>
      <data key="d5">authentication, environment configuration</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_4202bb5aefcb4272e5fc2efebff6fc46</data>
    </edge>
    <edge source="Environment Variable" target="Setting Directly">
      <data key="d4">Setting the environment variable directly is a method to configure system properties, influencing how software behaves or interacts with other processes.</data>
      <data key="d5">configuration, system settings</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_af055bf8f3e96bea176933dcc3d83179</data>
    </edge>
    <edge source="Verify" target="File Permissions">
      <data key="d4">The process of verifying refers to checking the correctness or appropriateness of the file permissions set on files.</data>
      <data key="d5">verification, access control</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_29fadc56a1b3e0876038076d49363785</data>
    </edge>
    <edge source="Verify" target="Graph Structure">
      <data key="d4">Verifying Graph Structure ensures that the data is accurately represented and functional, indicating a validation step in the process.</data>
      <data key="d5">validation, data integrity</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_3035cb75d6b97ba6fb9b87ed5dc8e31e</data>
    </edge>
    <edge source="os" target="INPUT_DOCS_DIR">
      <data key="d4">The os module is used to interact with the INPUT_DOCS_DIR variable to access files for processing.</data>
      <data key="d5">file handling, module interaction</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_53cdd140e8895a35a045a5efd1c35efd</data>
    </edge>
    <edge source="os" target="backup_vector_store">
      <data key="d4">The function backup_vector_store relies on the os module to create the backup directory and handle file paths.</data>
      <data key="d5">function-implementation, module usage</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_31ed7da5fc9ca5d1a0bfafd709a014df</data>
    </edge>
    <edge source="os" target="clean_old_cache_files">
      <data key="d4">"The clean_old_cache_files function utilizes the os module to interact with the file system and delete old files."&lt;</data>
      <data key="d5">dependency, functionality</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_d84d634f6486e1594aa2243ec3a2d0e4</data>
    </edge>
    <edge source="Documents Not Being Ingested" target="Potential Causes">
      <data key="d4">The feature 'Documents Not Being Ingested' relies on the identification of 'Potential Causes' to diagnose why document ingestion might fail.</data>
      <data key="d5">diagnosis, troubleshooting</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_1b9b34f38e3a6e537a09855823465ad1</data>
    </edge>
    <edge source="Potential Causes" target="Verify Documents Directory">
      <data key="d4">One potential cause of documents not being ingested is related to the directory in which they are stored, addressed by the function to verify this aspect.</data>
      <data key="d5">cause and effect, function&lt;&gt;relation</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_1b9b34f38e3a6e537a09855823465ad1</data>
    </edge>
    <edge source="Potential Causes" target="Symptom">
      <data key="d4">Symptoms help in identifying Potential Causes of vector store problems, enabling effective troubleshooting.</data>
      <data key="d5">diagnostic process, cause identification</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_c9ce0a52dd8e0d214e0d319600722c10</data>
    </edge>
    <edge source="Potential Causes" target="Disk Space Issues">
      <data key="d4">Disk Space Issues is one of the potential causes that can lead to vector store errors.</data>
      <data key="d5">error trigger, root cause</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_c9ce0a52dd8e0d214e0d319600722c10</data>
    </edge>
    <edge source="Potential Causes" target="File Permission Problems">
      <data key="d4">File Permission Problems can result in vector store issues, representing another potential cause.</data>
      <data key="d5">error trigger, root cause</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_c9ce0a52dd8e0d214e0d319600722c10</data>
    </edge>
    <edge source="Potential Causes" target="Concurrent Access Issues">
      <data key="d4">Concurrent Access Issues provide insight into another potential cause of errors in the vector store.</data>
      <data key="d5">error trigger, root cause</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_c9ce0a52dd8e0d214e0d319600722c10</data>
    </edge>
    <edge source="Potential Causes" target="Power Loss During Write Operations">
      <data key="d4">Power Loss During Write Operations is a potential cause that results in vector store corruption.</data>
      <data key="d5">error trigger, root cause</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_c9ce0a52dd8e0d214e0d319600722c10</data>
    </edge>
    <edge source="Potential Causes" target="Symptom: Missing or incorrect entities and relationships">
      <data key="d4">The symptom of missing or incorrect entities and relationships is a consequence of various potential causes, such as entity extraction failures and graph storage issues.</data>
      <data key="d5">symptomatic relationship</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_77b6fe94a073645e5b6b2eb8d96ea848</data>
    </edge>
    <edge source="Potential Causes" target="Entity extraction failures">
      <data key="d4">Entity extraction failures are one of the identified potential causes contributing to the symptoms observed in the knowledge graph.</data>
      <data key="d5">causal relationship</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_77b6fe94a073645e5b6b2eb8d96ea848</data>
    </edge>
    <edge source="Potential Causes" target="Graph storage issues">
      <data key="d4">Graph storage issues are another potential cause that might lead to the symptoms of missing or incorrect entities and relationships.</data>
      <data key="d5">causal relationship</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_77b6fe94a073645e5b6b2eb8d96ea848</data>
    </edge>
    <edge source="Potential Causes" target="Prompt engineering problems">
      <data key="d4">Prompt engineering problems are also identified as a contributing factor that can influence the effectiveness of entity extraction.</data>
      <data key="d5">causal relationship</data>
      <data key="d6">5.0</data>
      <data key="d7">excerpt_id_77b6fe94a073645e5b6b2eb8d96ea848</data>
    </edge>
    <edge source="Documents" target="Supported Formats">
      <data key="d4">Documents must comply with the Supported Formats to be processed correctly by the system.</data>
      <data key="d5">file processing, compatibility</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_71bde0cbd0d94f0ec00163fb1787d319</data>
    </edge>
    <edge source="Documents" target="File Permissions">
      <data key="d4">Documents are influenced by File Permissions that dictate who can access and edit them.</data>
      <data key="d5">access control, security</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_71bde0cbd0d94f0ec00163fb1787d319</data>
    </edge>
    <edge source="Slow Document Ingestion" target="Large Documents">
      <data key="d4">Slow Document Ingestion is impacted by Large Documents, which contribute to decreased processing speed due to their size.</data>
      <data key="d5">performance issue, resource overload</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_0855936cd92f59f3d2fc63b7823a045c</data>
    </edge>
    <edge source="Slow Document Ingestion" target="Many Documents Being Processed at Once">
      <data key="d4">The challenge of Slow Document Ingestion can be exacerbated when Many Documents Being Processed at Once lead to system strain.</data>
      <data key="d5">performance issue, resource management</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_0855936cd92f59f3d2fc63b7823a045c</data>
    </edge>
    <edge source="Slow Document Ingestion" target="API Rate Limits">
      <data key="d4">Slow Document Ingestion may be influenced by API Rate Limits, which can restrict the ability to effectively process documents in a timely manner.</data>
      <data key="d5">external constraint, system performance</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_0855936cd92f59f3d2fc63b7823a045c</data>
    </edge>
    <edge source="Slow Document Ingestion" target="Insufficient Resources">
      <data key="d4">Insufficient Resources directly affect Slow Document Ingestion as they limit the system's ability to handle processing tasks efficiently.</data>
      <data key="d5">resource allocation, performance issue</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_0855936cd92f59f3d2fc63b7823a045c</data>
    </edge>
    <edge source="Slow Document Ingestion" target="Process Documents in Smaller Batches">
      <data key="d4">The solution to Slow Document Ingestion, namely processing in smaller batches, aims to alleviate the issues caused by large volumes and sizes.</data>
      <data key="d5">solution, performance enhancement</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_0855936cd92f59f3d2fc63b7823a045c</data>
    </edge>
    <edge source="INPUT_DOCS_DIR" target="files">
      <data key="d4">The files variable is based on the INPUT_DOCS_DIR directory, as it lists the files contained within it.</data>
      <data key="d5">directory list, variable dependency</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_53cdd140e8895a35a045a5efd1c35efd</data>
    </edge>
    <edge source="INPUT_DOCS_DIR" target="destination">
      <data key="d4">destination is constructed using INPUT_DOCS_DIR to define where the document will be copied.</data>
      <data key="d5">directory path, file operation</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_275a22b53aa6a7d5660862773c4c8e7e</data>
    </edge>
    <edge source="INPUT_DOCS_DIR" target="definitions.py">
      <data key="d4">INPUT_DOCS_DIR is defined within definitions.py, outlining the default location for input documents used by SmolRAG.</data>
      <data key="d5">definition, configuration</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_b0d4e3abf98287ec9c0b65e83c50a4f5</data>
    </edge>
    <edge source="INPUT_DOCS_DIR" target="all_files">
      <data key="d4">The INPUT_DOCS_DIR configuration is used to gather the all_files list, providing a source location for document processing.</data>
      <data key="d5">source configuration, file management</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_3ce40acc1fea7738cf20ce8f1ac25b52</data>
    </edge>
    <edge source="batch_size" target="for loop">
      <data key="d4">The batch_size variable defines how many items are processed in each iteration of the for loop.</data>
      <data key="d5">control structure, process management</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_53cdd140e8895a35a045a5efd1c35efd</data>
    </edge>
    <edge source="batch_size" target="process_with_controlled_batches">
      <data key="d4">batch_size determines how many items to process at once in the process_with_controlled_batches function.</data>
      <data key="d5">parameter, functionality</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_92852caa5644169ca9dd067510644fa8</data>
    </edge>
    <edge source="batch_size" target="Processing Documents">
      <data key="d4">The batch_size variable directly impacts the Processing Documents function by determining how many files are processed at once.</data>
      <data key="d5">control variable, efficiency</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_3ce40acc1fea7738cf20ce8f1ac25b52</data>
    </edge>
    <edge source="rate_limited_api_call" target="func">
      <data key="d4">rate_limited_api_call uses func to represent the function it will call, indicating a direct dependency.</data>
      <data key="d5">function invocation, operational dependency</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_16f71311b97f8fce93210488e3e69110</data>
    </edge>
    <edge source="rate_limited_api_call" target="time">
      <data key="d4">rate_limited_api_call utilizes time.sleep to create delays to manage rate limits, evidencing a functional relationship.</data>
      <data key="d5">rate management, execution control</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_16f71311b97f8fce93210488e3e69110</data>
    </edge>
    <edge source="rate_limited_api_call" target="args">
      <data key="d4">rate_limited_api_call captures args to pass them to the function it's calling, highlighting how arguments are handled dynamically.</data>
      <data key="d5">parameter handling, dynamic execution</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_16f71311b97f8fce93210488e3e69110</data>
    </edge>
    <edge source="rate_limited_api_call" target="kwargs">
      <data key="d4">rate_limited_api_call captures kwargs to facilitate flexible function calls, linking the function to its broader inputs.</data>
      <data key="d5">parameter handling, dynamic execution</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_16f71311b97f8fce93210488e3e69110</data>
    </edge>
    <edge source="time" target="RateLimitedOpenAiLlm">
      <data key="d4">The RateLimitedOpenAiLlm class uses the time module to track and manage delays in request processing.</data>
      <data key="d5">module usage, time management</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_a95ed36ca9d76b512d84de6b0725fbf9</data>
    </edge>
    <edge source="time" target="clean_old_cache_files">
      <data key="d4">"The clean_old_cache_files function uses the time module to obtain the current time for the comparison."&lt;</data>
      <data key="d5">dependency, functionality</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_d84d634f6486e1594aa2243ec3a2d0e4</data>
    </edge>
    <edge source="func" target="retry_with_backoff">
      <data key="d4">The retry_with_backoff function calls the func parameter to execute the intended operation, managing retries if it fails.</data>
      <data key="d5">function invocation, error handling</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_18eb722b0284987e15a3c2a74fe78578</data>
    </edge>
    <edge source="func" target="wrapper">
      <data key="d4">wrapper executes the function passed in as a parameter (func) and handles retries based on errors.</data>
      <data key="d5">execution, encapsulation</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_1def6bdd950a1221491ad5bc7859d768</data>
    </edge>
    <edge source="args" target="profile_function">
      <data key="d4">profile_function can accept args to pass to the function being profiled, showing flexibility in function input.</data>
      <data key="d5">function flexibility, parameterization</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_8fda81c68b75421d305c4c8c5587399b</data>
    </edge>
    <edge source="args" target="CustomSmolRag">
      <data key="d4">args are used in the constructor of CustomSmolRag, impacting how instances of the class are created.</data>
      <data key="d5">constructor, instantiation</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_19166492bd9b3932cb606850e071caa4</data>
    </edge>
    <edge source="kwargs" target="profile_function">
      <data key="d4">profile_function can accept kwargs to pass to the function being profiled, also enhancing its usability.</data>
      <data key="d5">function flexibility, parameterization</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_8fda81c68b75421d305c4c8c5587399b</data>
    </edge>
    <edge source="kwargs" target="CustomSmolRag">
      <data key="d4">kwargs are key parameters passed during the creation of CustomSmolRag, influencing its configurable options.</data>
      <data key="d5">constructor, configurability</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_19166492bd9b3932cb606850e071caa4</data>
    </edge>
    <edge source="Monitor Resource Usage" target="Adjust Accordingly">
      <data key="d4">The function of Monitor Resource Usage directly influences the function of Adjust Accordingly, as the monitoring process determines the adjustments needed.</data>
      <data key="d5">performance optimization, interdependent functions</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_29cd2640f2f3b3ac46eb7ec796c7cfda</data>
    </edge>
    <edge source="psutil" target="check_resources">
      <data key="d4">The function check_resources utilizes the psutil library to access system resource data.</data>
      <data key="d5">library usage, system resources</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_4830c3d5b96dabdfe4b90539f6735766</data>
    </edge>
    <edge source="psutil" target="memory_safe_query">
      <data key="d4">psutil is utilized within memory_safe_query to monitor system memory conditions, linking the function to the API that checks memory status.</data>
      <data key="d5">system monitoring, function dependency</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_d6593324775191da0523fe9381efdd81</data>
    </edge>
    <edge source="psutil" target="optimize_memory">
      <data key="d4">The optimize_memory function uses the psutil library to retrieve the initial memory usage before garbage collection.</data>
      <data key="d5">memory management, library usage</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_162e6c9e88d526c7cda8c551479b1fb1</data>
    </edge>
    <edge source="check_resources" target="cpu_percent">
      <data key="d4">The function check_resources directly retrieves the value for cpu_percent from the psutil library to monitor CPU usage.</data>
      <data key="d5">resource monitoring, data retrieval</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_4830c3d5b96dabdfe4b90539f6735766</data>
    </edge>
    <edge source="check_resources" target="memory_percent">
      <data key="d4">The function check_resources directly retrieves the value for memory_percent to monitor memory usage.</data>
      <data key="d5">resource monitoring, data retrieval</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_4830c3d5b96dabdfe4b90539f6735766</data>
    </edge>
    <edge source="check_resources" target="Warning: High memory usage">
      <data key="d4">The function check_resources generates a high memory usage warning based on the value of memory_percent.</data>
      <data key="d5">alert, memory management</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_4830c3d5b96dabdfe4b90539f6735766</data>
    </edge>
    <edge source="cpu_percent" target="check_system_resources">
      <data key="d4">The check_system_resources function computes and retrieves the value for the cpu_percent variable, reflecting the CPU usage during its execution.</data>
      <data key="d5">function output, computational relationship</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_2249047f50897aaf33539b74ade53916</data>
    </edge>
    <edge source="cpu_percent" target="CPU Usage">
      <data key="d4">The cpu_percent variable's value is printed under the CPU Usage feature, showing its utilization percentage.</data>
      <data key="d5">data representation, feature use</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_2249047f50897aaf33539b74ade53916</data>
    </edge>
    <edge source="Symptom" target="Vector Store Issues">
      <data key="d4">The Vector Store Issues are characterized by specific symptoms that indicate the presence of errors or corruption.</data>
      <data key="d5">problem indication, features of vector store</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_c9ce0a52dd8e0d214e0d319600722c10</data>
    </edge>
    <edge source="Symptom" target="Large Vector Database">
      <data key="d4">The large vector database is identified as one of the potential causes contributing to the symptom of slow queries.</data>
      <data key="d5">causal relationship, performance issue</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_da73f7a48b1cde40e03e26bb73a1a07f</data>
    </edge>
    <edge source="Symptom" target="Complex Knowledge Graph">
      <data key="d4">The complex knowledge graph is another identified cause impacting the performance issue of slow queries.</data>
      <data key="d5">causal relationship, performance issue</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_da73f7a48b1cde40e03e26bb73a1a07f</data>
    </edge>
    <edge source="Symptom" target="API Latency">
      <data key="d4">API latency is directly related to the symptom of slow queries, as it affects the time taken to process requests.</data>
      <data key="d5">causal relationship, performance issue</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_da73f7a48b1cde40e03e26bb73a1a07f</data>
    </edge>
    <edge source="Symptom" target="Resource Constraints">
      <data key="d4">Resource constraints directly impact the ability of the system to perform efficiently, contributing to slow queries.</data>
      <data key="d5">causal relationship, performance issue</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_da73f7a48b1cde40e03e26bb73a1a07f</data>
    </edge>
    <edge source="Symptom" target="Query Caching">
      <data key="d4">Query caching is a proposed function that aims to alleviate the symptom of slow queries by enhancing performance.</data>
      <data key="d5">solution, performance improvement</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_da73f7a48b1cde40e03e26bb73a1a07f</data>
    </edge>
    <edge source="Errors during entity extraction" target="LLM API">
      <data key="d4">Errors during entity extraction may be influenced by problems with the LLM API, such as malfunctions or timeouts.</data>
      <data key="d5">error causation, troubleshooting</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_758911f7a3b7423722f9670b9e41f6b7</data>
    </edge>
    <edge source="Errors during entity extraction" target="Malformed content">
      <data key="d4">Malformed content can be a direct cause of errors during entity extraction, complicating the processing of data.</data>
      <data key="d5">error causation, data integrity</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_758911f7a3b7423722f9670b9e41f6b7</data>
    </edge>
    <edge source="Errors during entity extraction" target="Timeout issues">
      <data key="d4">Timeout issues can lead to incomplete or failed entity extraction, indicating a need for better handling of request responses.</data>
      <data key="d5">error causation, process improvement</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_758911f7a3b7423722f9670b9e41f6b7</data>
    </edge>
    <edge source="Errors during entity extraction" target="Implement robust error handling">
      <data key="d4">Implementing robust error handling is a necessary step to mitigate errors occurring during entity extraction.</data>
      <data key="d5">solution-oriented, error management</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_758911f7a3b7423722f9670b9e41f6b7</data>
    </edge>
    <edge source="llm" target="prompt">
      <data key="d4">The prompt variable is directly used in the llm API call to generate a completion based on its content.</data>
      <data key="d5">data input, processing</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_cf3cd9ded1fbc94e0796c2e9873e597c</data>
    </edge>
    <edge source="llm" target="__init__">
      <data key="d4">The __init__ function initializes the llm variable, making it accessible for class methods.".</data>
      <data key="d5">initialization, assignment</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_626b4e89f477fe66f0fb4bd4a4928418</data>
    </edge>
    <edge source="llm" target="SmolRag">
      <data key="d4">llm is a variable defined in the context of the SmolRag API, specifying the LLM interface instance used.:|:llm is utilized within the SmolRag API, suggesting an inherent relationship between the LLM instance and the API itself.</data>
      <data key="d5">functional relationship, dependency</data>
      <data key="d6">14.0</data>
      <data key="d7">excerpt_id_3349f76d73e7efb0528eeee4c6101216</data>
    </edge>
    <edge source="prompt" target="sample_excerpt">
      <data key="d4">prompt is generated based on the sample_excerpt to prepare the input for entity extraction.</data>
      <data key="d5">input preparation, dependency</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_7632c4b619e7677d548ca2cb0924040f</data>
    </edge>
    <edge source="prompt" target="trace_kg_query">
      <data key="d4">The trace_kg_query function generates a prompt to extract keywords, making it a foundational step in obtaining necessary data.</data>
      <data key="d5">process initiation, data extraction</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_39d726c9a9c2f837ce789e9198c54c73</data>
    </edge>
    <edge source="logger" target="setup_rotating_logger">
      <data key="d4">setup_rotating_logger creates and configures a logger object that uses the RotatingFileHandler for managing logs.</data>
      <data key="d5">logger setup, function activity</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_03b1ea2fb1b6593ee34fd158bd82fcb4</data>
    </edge>
    <edge source="logger" target="handler">
      <data key="d4">logger has a handler that is set up using the RotatingFileHandler to manage log file output.</data>
      <data key="d5">handler assignment, logging configuration</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_03b1ea2fb1b6593ee34fd158bd82fcb4</data>
    </edge>
    <edge source="logger" target="formatter">
      <data key="d4">formatter is applied to the logger to define how log messages will be displayed, enhancing readability.:|:The formatter is set for the logger to define how log messages are formatted before they are written.</data>
      <data key="d5">configuration, message formatting:|:configuration, formatting</data>
      <data key="d6">15.0</data>
      <data key="d7">excerpt_id_1b2e40e76edb8537fc654b87660704c7:|:excerpt_id_03b1ea2fb1b6593ee34fd158bd82fcb4</data>
    </edge>
    <edge source="logger" target="set_logger">
      <data key="d4">set_logger function configures the logger variable to record messages, establishing a functional relationship between the two.:|:The set_logger function is responsible for configuring the logger API component, setting its logging level and behavior.</data>
      <data key="d5">configuration, function-call:|:function configuration, logging setup</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_d2c1e8835d374f0d3253b7ad5939d44b:|:excerpt_id_ff2948688845f254196d48787ccadd8f</data>
    </edge>
    <edge source="logger" target="logging">
      <data key="d4">logger utilizes logging as a feature to control logging levels and outputs, which is crucial for logging functionality.</data>
      <data key="d5">logging control, functionality</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_d2c1e8835d374f0d3253b7ad5939d44b</data>
    </edge>
    <edge source="logger" target="setup_logger">
      <data key="d4">The logger variable is returned by the setup_logger function, providing access to the configured logger.</data>
      <data key="d5">output variable, logger instance</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_1b2e40e76edb8537fc654b87660704c7</data>
    </edge>
    <edge source="logger" target="start">
      <data key="d4">The logger variable is utilized within the start function to log the information when an operation begins.</data>
      <data key="d5">logging, performance monitoring</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_47020e878f0731a6b5359fed2e4f08fa</data>
    </edge>
    <edge source="logger" target="end">
      <data key="d4">The logger variable is also used in the end function to log the completion of operations and their metrics.</data>
      <data key="d5">logging, performance monitoring</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_47020e878f0731a6b5359fed2e4f08fa</data>
    </edge>
    <edge source="Malformed Content Handler" target="Content Checking">
      <data key="d4">Malformed Content Handler is a function that directly enables Content Checking by addressing malformed inputs.</data>
      <data key="d5">functionality, integrity</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_c54d2fcf2dc9d7413c2b160c37e905d3</data>
    </edge>
    <edge source="Content Checking" target="Error Handling Procedures">
      <data key="d4">Content Checking operates within the framework set by Error Handling Procedures to ensure proper management of data inputs.</data>
      <data key="d5">system reliability, process</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_c54d2fcf2dc9d7413c2b160c37e905d3</data>
    </edge>
    <edge source="sanitize_content" target="content">
      <data key="d4">The sanitize_content function operates on the content variable to clean it by removing unwanted characters or patterns.</data>
      <data key="d5">data processing, function-operation</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_e2ff8c4e1eb5e26d4ebd38bd08351d99</data>
    </edge>
    <edge source="content" target="read_file">
      <data key="d4">"The read_file function is responsible for creating the content variable by loading document data."\</data>
      <data key="d5">data loading</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_c1b3890c12c9544c940bd001ae647dce</data>
    </edge>
    <edge source="content" target="len">
      <data key="d4">"The len function is used to get the length of the content variable, providing insights into its size."\</data>
      <data key="d5">size measurement</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_c1b3890c12c9544c940bd001ae647dce</data>
    </edge>
    <edge source="Retries" target="Exponential Backoff">
      <data key="d4">Retries utilize the Exponential Backoff strategy to manage the timing of repeated attempts after failures.:|:Exponential Backoff function is directly related to the concept of retries by determining the approach and timing of multiple attempts in case of failure.</data>
      <data key="d5">retry strategy, network communications:|:retry mechanism, time management</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_93b4c740010415302d5766760124eb53:|:excerpt_id_ac3061b3455aa69d48ce1e141615842e</data>
    </edge>
    <edge source="retry_with_backoff" target="max_retries">
      <data key="d4">max_retries defines how many times the retry_with_backoff function will attempt to call the func before failing.</data>
      <data key="d5">configuration, retry logic</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_18eb722b0284987e15a3c2a74fe78578</data>
    </edge>
    <edge source="retry_with_backoff" target="Exception">
      <data key="d4">The function will raise an Exception if all retry attempts fail, indicating an error in executing the func.</data>
      <data key="d5">error handling, failure indication</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_18eb722b0284987e15a3c2a74fe78578</data>
    </edge>
    <edge source="retry_with_backoff" target="time.sleep">
      <data key="d4">The function uses time.sleep to pause execution between retries, applying a wait based on the retry count.</data>
      <data key="d5">execution control, pause</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_18eb722b0284987e15a3c2a74fe78578</data>
    </edge>
    <edge source="max_retries" target="wrapper">
      <data key="d4">max_retries sets the limit for how many times the wrapper will attempt to call the function before failing.</data>
      <data key="d5">retry limit, error handling</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_1def6bdd950a1221491ad5bc7859d768</data>
    </edge>
    <edge source="time.sleep" target="wrapper">
      <data key="d4">the wrapper uses time.sleep to introduce a delay between consecutive attempts based on calculated backoff.</data>
      <data key="d5">pause, timing</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_1def6bdd950a1221491ad5bc7859d768</data>
    </edge>
    <edge source="time.sleep" target="process_with_controlled_batches">
      <data key="d4">time.sleep is used optionally within process_with_controlled_batches to introduce delays between batch processes.</data>
      <data key="d5">time management, processing control</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_92852caa5644169ca9dd067510644fa8</data>
    </edge>
    <edge source="file locking" target="concurrent access">
      <data key="d4">File locking is implemented specifically to manage concurrent access, which protects file integrity during simultaneous use.</data>
      <data key="d5">data integrity, concurrency management</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_a7f43545a6845f6befef5c90090e5fd4</data>
    </edge>
    <edge source="fcntl" target="with_file_lock">
      <data key="d4">The function 'with_file_lock' utilizes the 'fcntl' module to implement file locking mechanisms during its operations.</data>
      <data key="d5">utilization, file control</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_3cc193697557fdc7837ce2d2af4daebf</data>
    </edge>
    <edge source="with_file_lock" target="file_path">
      <data key="d4">The function 'with_file_lock' uses 'file_path' as a parameter to specify which file to lock and operate on.</data>
      <data key="d5">file operation, function parameters</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_3cc193697557fdc7837ce2d2af4daebf</data>
    </edge>
    <edge source="with_file_lock" target="callback">
      <data key="d4">The function 'with_file_lock' accepts 'callback' as an argument, which is executed after acquiring a file lock.</data>
      <data key="d5">callback execution, function argument</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_3cc193697557fdc7837ce2d2af4daebf</data>
    </edge>
    <edge source="file_path" target="MemoryEfficientVectorStore">
      <data key="d4">MemoryEfficientVectorStore uses file_path to locate or create the vector storage, which is essential for its operation.</data>
      <data key="d5">storage management, path identification</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_902f74e2a13563ad2b6088a90d1308d6</data>
    </edge>
    <edge source="Backup and Recovery" target="None">
      <data key="d4">Backup and Recovery is a standalone function focused on data integrity and restoration, with no clear relationships to other entities identified in the text.</data>
      <data key="d5">standalone function</data>
      <data key="d6">1.0</data>
      <data key="d7">excerpt_id_af20c5a0f07d65f9778fca7aae894352</data>
    </edge>
    <edge source="None" target="Debug Logging">
      <data key="d4">Debug Logging is a standalone feature that provides additional information; it does not have a direct relationship with other entities in the provided text.</data>
      <data key="d5">standalone feature</data>
      <data key="d6">1.0</data>
      <data key="d7">excerpt_id_ab02f18a374cc195067b1255afc706d5</data>
    </edge>
    <edge source="backup_vector_store" target="vector_store_path">
      <data key="d4">The function backup_vector_store uses the variable vector_store_path to identify which vector store to back up.</data>
      <data key="d5">function-usage, dependency</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_31ed7da5fc9ca5d1a0bfafd709a014df</data>
    </edge>
    <edge source="backup_vector_store" target="backup_dir">
      <data key="d4">The function backup_vector_store uses the variable backup_dir to determine where to save the backup of the vector store.</data>
      <data key="d5">function-usage, dependency</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_31ed7da5fc9ca5d1a0bfafd709a014df</data>
    </edge>
    <edge source="backup_vector_store" target="shutil">
      <data key="d4">The function backup_vector_store utilizes the shutil module to copy the vector store to the backup destination.</data>
      <data key="d5">function-implementation, module usage</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_31ed7da5fc9ca5d1a0bfafd709a014df</data>
    </edge>
    <edge source="shutil" target="source_file">
      <data key="d4">shutil is used to facilitate the copying of source_file into the input_docs directory.</data>
      <data key="d5">file operation, file management</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_275a22b53aa6a7d5660862773c4c8e7e</data>
    </edge>
    <edge source="Embeddings" target="Embedding Generation Failures">
      <data key="d4">Missing or incorrect embeddings can be attributed to failures that occur during the embedding generation process.</data>
      <data key="d5">causal relationship, feature failure</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_2f5858762a069fdb43f74be5bc9207ba</data>
    </edge>
    <edge source="Embeddings" target="Embedding Model Issues">
      <data key="d4">Embedding accuracy and existence can be affected by issues related to the model that generates them.</data>
      <data key="d5">causal relationship, feature accuracy</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_2f5858762a069fdb43f74be5bc9207ba</data>
    </edge>
    <edge source="Embeddings" target="Caching Problems">
      <data key="d4">Issues with caching may lead to incorrect or missing embeddings, impacting performance and reliability.</data>
      <data key="d5">causal relationship, data integrity</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_2f5858762a069fdb43f74be5bc9207ba</data>
    </edge>
    <edge source="check_embeddings" target="rag">
      <data key="d4">check_embeddings operates on the rag variable to examine document excerpts, utilizing its functionalities.</data>
      <data key="d5">function operation, variable usage</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_0c3b9b9d2eed503f31ef54165eeb03b2</data>
    </edge>
    <edge source="check_embeddings" target="doc_id">
      <data key="d4">check_embeddings uses the doc_id variable as an input to fetch associated excerpts from the rag system.</data>
      <data key="d5">input parameter, function call</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_0c3b9b9d2eed503f31ef54165eeb03b2</data>
    </edge>
    <edge source="rag" target="excerpt_ids">
      <data key="d4">excerpt_ids is derived from the rag variable, specifically employing its doc_to_excerpt_kv function to get excerpts for the given doc_id.</data>
      <data key="d5">data retrieval, variable dependence</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_0c3b9b9d2eed503f31ef54165eeb03b2</data>
    </edge>
    <edge source="rag" target="verify_embedding_dimensions">
      <data key="d4">The function verify_embedding_dimensions uses the rag variable to access the embeddings database for querying sample embeddings.</data>
      <data key="d5">function usage, variable dependency</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_63f1d846feb405f4334159c9dbab8e54</data>
    </edge>
    <edge source="rag" target="inspect_graph">
      <data key="d4">inspect_graph utilizes the rag variable to access and inspect the graph structure, indicating a direct connection between the function and the variable.</data>
      <data key="d5">function usage, variable interaction</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_65a129aef3eaf89c18fa1a71ffe3a597</data>
    </edge>
    <edge source="rag" target="trace_kg_query">
      <data key="d4">The trace_kg_query function utilizes the rag instance to perform keyword extraction and entity/relationship querying as part of its processing workflow.</data>
      <data key="d5">method use, database interaction</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_39d726c9a9c2f837ce789e9198c54c73</data>
    </edge>
    <edge source="rag" target="inspect_query_excerpts">
      <data key="d4">The function inspect_query_excerpts operates on the rag variable to perform its query and embedding tasks.</data>
      <data key="d5">function-operation, input</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_a8ba44e624cea2552a723858adb3841b</data>
    </edge>
    <edge source="rag" target="fast_query">
      <data key="d4">The fast_query function utilizes the rag variable to perform the vector search query, indicating a functional dependency.</data>
      <data key="d5">functionality, dependency</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_b68d9f283d4ab863a5fff4c63759e843</data>
    </edge>
    <edge source="rag" target="memory_safe_query">
      <data key="d4">memory_safe_query function utilizes the rag variable to perform queries, linking the function to the variable representing the service being queried.</data>
      <data key="d5">function usage, query execution</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_d6593324775191da0523fe9381efdd81</data>
    </edge>
    <edge source="rag" target="prune_old_documents">
      <data key="d4">The function prune_old_documents operates on the variable rag to manage its documents based on age.</data>
      <data key="d5">document management, function operation</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_8410a7e36eb3c87c25483898c18044a2</data>
    </edge>
    <edge source="rag" target="remove_document_by_id">
      <data key="d4">The rag variable facilitates the call to remove_document_by_id function to delete a document from its structure.:|:rag utilizes the remove_document_by_id function to delete documents identified by their IDs.</data>
      <data key="d5">document management, functionality:|:functionality, document deletion</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_8410a7e36eb3c87c25483898c18044a2:|:excerpt_id_bc521abc84233a86888a005c7e9c0668</data>
    </edge>
    <edge source="rag" target="import_documents">
      <data key="d4">The rag instance can call the import_documents function to bring documents into the system.:|:rag uses the import_documents function to import new documents into the system.:|:The rag instance utilizes the import_documents method to load documents for processing based on the defined chunking strategy.:|:rag uses the import_documents function to load the necessary documents for operations.:|:rag uses the import_documents method to load necessary documents for processing queries.:|:The SmolRag instance ('rag') uses the import_documents function to bring in necessary data for processing.:|:rag calls the import_documents function to ensure documents are imported for processing.:|:rag calls the import_documents function to manage document import tasks within its context.</data>
      <data key="d5">document management, setup:|:function usage, document management:|:function execution, document management:|:document management, process:|:document management, functionality:|:function execution, data management:|:document management, method usage</data>
      <data key="d6">67.0</data>
      <data key="d7">excerpt_id_b448f2ca1ed64ac27b528bb6bed67d93:|:excerpt_id_8e62d1d1488a79e4b7909d04ec095dd6:|:excerpt_id_aac33e6269e8908ac443bfb0712e8462:|:excerpt_id_f23f1c9ec24d0c56c84d4dea02a31e9c:|:excerpt_id_275a22b53aa6a7d5660862773c4c8e7e:|:excerpt_id_fcb87a80b68c38981b549c5658a74b5b:|:excerpt_id_bc521abc84233a86888a005c7e9c0668:|:excerpt_id_391d9b7fd00abda862a1d6576fee1918</data>
    </edge>
    <edge source="rag" target="SmolRag">
      <data key="d4">rag is an instance that utilizes the functionalities provided by the SmolRag class for document management.:|:rag is an instance of the SmolRag class, directly utilizing its methods for document management.:|:rag is an instance of the SmolRag API class, used to implement its functionalities.:|:rag is initialized as an instance of the SmolRag API, thereby gaining access to its functionalities.:|:rag is the variable referencing the instance of the SmolRag class, establishing the relationship between the variable and the class definition.:|:rag is an instance that utilizes the functionalities defined within the SmolRag API.:|:The variable rag is an instance of the SmolRag API, directly related to its functionalities.:|:The variable 'rag' is an instance of the SmolRag API, signifying that it is directly tied to the functionality provided by the SmolRag class.</data>
      <data key="d5">instance, class relationship:|:initialization, API interaction:|:instantiation, API usage:|:instantiation, usage:|:instance, class:|:instantiation, variable assignment:|:instance relationship, usage:|:instance, variable relation</data>
      <data key="d6">71.0</data>
      <data key="d7">excerpt_id_8e62d1d1488a79e4b7909d04ec095dd6:|:excerpt_id_dc21ac5f2d4427c7d6691673b8a43559:|:excerpt_id_aac33e6269e8908ac443bfb0712e8462:|:excerpt_id_f23f1c9ec24d0c56c84d4dea02a31e9c:|:excerpt_id_275a22b53aa6a7d5660862773c4c8e7e:|:excerpt_id_bc521abc84233a86888a005c7e9c0668:|:excerpt_id_ffe66db99045699917cf675f9252c0dd:|:excerpt_id_391d9b7fd00abda862a1d6576fee1918</data>
    </edge>
    <edge source="rag" target="preserve_markdown_code_excerpts">
      <data key="d4">rag can utilize the function preserve_markdown_code_excerpts to alter its chunking strategy, linking function to the variable's configurability.</data>
      <data key="d5">functionality, customization</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_ffe66db99045699917cf675f9252c0dd</data>
    </edge>
    <edge source="rag" target="dimensions">
      <data key="d4">dimensions is a configuration that can be set in the rag instance, directly impacting its operational characteristics.</data>
      <data key="d5">configuration influence, performance</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_ffe66db99045699917cf675f9252c0dd</data>
    </edge>
    <edge source="rag" target="excerpt_size">
      <data key="d4">excerpt_size is another configuration that can affect how the rag instance processes text excerpts, showcasing the importance of configuration settings.</data>
      <data key="d5">configuration influence, data processing</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_ffe66db99045699917cf675f9252c0dd</data>
    </edge>
    <edge source="rag" target="overlap">
      <data key="d4">overlap is a configuration that affects the rag's handling of text excerpts, reinforcing its importance for data integrity.</data>
      <data key="d5">configuration influence, data integrity</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_ffe66db99045699917cf675f9252c0dd</data>
    </edge>
    <edge source="rag" target="local_kg_query">
      <data key="d4">rag uses local_kg_query to handle specific queries related to local knowledge graphs.:|:rag executes local_kg_query to perform entity-focused queries, identifying related entities within the local knowledge graph.</data>
      <data key="d5">query execution, local knowledge graph:|:method execution, knowledge graph</data>
      <data key="d6">17.0</data>
      <data key="d7">excerpt_id_aac33e6269e8908ac443bfb0712e8462:|:excerpt_id_f23f1c9ec24d0c56c84d4dea02a31e9c</data>
    </edge>
    <edge source="rag" target="global_kg_query">
      <data key="d4">rag utilizes global_kg_query to understand relationships across the global knowledge graph, seeking connections among components.:|:rag uses global_kg_query to respond to queries regarding global knowledge graphs.</data>
      <data key="d5">method execution, knowledge graph:|:query execution, global knowledge graph</data>
      <data key="d6">17.0</data>
      <data key="d7">excerpt_id_aac33e6269e8908ac443bfb0712e8462:|:excerpt_id_f23f1c9ec24d0c56c84d4dea02a31e9c</data>
    </edge>
    <edge source="rag" target="hybrid_kg_query">
      <data key="d4">rag performs hybrid_kg_query to explore interconnections between features such as embeddings and queries.:|:rag may call hybrid_kg_query for more complex queries that require integrated results from various sources.</data>
      <data key="d5">method usage, integrated results:|:query execution, hybrid approach</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_aac33e6269e8908ac443bfb0712e8462:|:excerpt_id_f23f1c9ec24d0c56c84d4dea02a31e9c</data>
    </edge>
    <edge source="rag" target="mix_query">
      <data key="d4">rag employs mix_query to execute queries that blend elements of local and global knowledge graphs.:|:rag utilizes the mix_query function to process and retrieve information based on user queries.</data>
      <data key="d5">method usage, combined queries:|:method utilization, query processing</data>
      <data key="d6">15.0</data>
      <data key="d7">excerpt_id_f23f1c9ec24d0c56c84d4dea02a31e9c:|:excerpt_id_8e62d1d1488a79e4b7909d04ec095dd6</data>
    </edge>
    <edge source="rag" target="custom_chunking_strategy">
      <data key="d4">The rag instance is initialized with the custom_chunking_strategy function as its excerpting function.:|:The 'rag' variable uses the 'custom_chunking_strategy' function to define how it processes text chunks, linking the variable with the custom logic used for text manipulation.</data>
      <data key="d5">function application, text processing:|:initialization, customization</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_b448f2ca1ed64ac27b528bb6bed67d93:|:excerpt_id_dc21ac5f2d4427c7d6691673b8a43559</data>
    </edge>
    <edge source="rag" target="queries">
      <data key="d4">queries are processed through the rag instance as it executes different query methods based on their types.</data>
      <data key="d5">query processing, execution</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_f23f1c9ec24d0c56c84d4dea02a31e9c</data>
    </edge>
    <edge source="rag" target="parallel_query">
      <data key="d4">The parallel_query function utilizes the rag variable to execute both a vector search and a knowledge graph query simultaneously.</data>
      <data key="d5">function usage, concurrent execution</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_183160e7c61e5a6948ec0efb28fbec13</data>
    </edge>
    <edge source="rag" target="vector_search">
      <data key="d4">The rag variable has a method for executing vector searches, which is called within the parallel_query function.</data>
      <data key="d5">query capability, feature</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_183160e7c61e5a6948ec0efb28fbec13</data>
    </edge>
    <edge source="rag" target="knowledge_graph_query">
      <data key="d4">The rag variable has a method for executing knowledge graph queries, which is invoked in the parallel_query function.</data>
      <data key="d5">query capability, feature</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_183160e7c61e5a6948ec0efb28fbec13</data>
    </edge>
    <edge source="excerpt_ids" target="excerpt_data">
      <data key="d4">excerpt_data is fetched for the first excerpt ID in excerpt_ids to validate if the document is old enough to remove.</data>
      <data key="d5">timestamp validation, data association</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_8410a7e36eb3c87c25483898c18044a2</data>
    </edge>
    <edge source="excerpt_id" target="results">
      <data key="d4">The excerpt_id is obtained from each entry in the results, linking each excerpt back to its identifier.:|:excerpt_id is checked against the results variable to determine whether an embedding exists for that specific excerpt.</data>
      <data key="d5">result-identification, data retrieval:|:existence check, dependency</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_a8ba44e624cea2552a723858adb3841b:|:excerpt_id_0c3b9b9d2eed503f31ef54165eeb03b2</data>
    </edge>
    <edge source="excerpt_id" target="excerpt_data">
      <data key="d4">The excerpt_data variable retrieves details about the excerpt directly using the excerpt_id.</data>
      <data key="d5">data-retrieval, indexing</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_a8ba44e624cea2552a723858adb3841b</data>
    </edge>
    <edge source="results" target="sample_id">
      <data key="d4">The sample_id variable is derived from the results of the query, specifically the ID of the first embedding found.</data>
      <data key="d5">data extraction, relationship chaining</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_63f1d846feb405f4334159c9dbab8e54</data>
    </edge>
    <edge source="results" target="sample_vector">
      <data key="d4">The sample_vector variable is also derived from the results, capturing the vector of the queried embedding.</data>
      <data key="d5">data extraction, relationship chaining</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_63f1d846feb405f4334159c9dbab8e54</data>
    </edge>
    <edge source="results" target="embedding_array">
      <data key="d4">The results variable is derived from querying using the embedding_array, which is a processed version of the original embedding.</data>
      <data key="d5">data-processing, query results</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_a8ba44e624cea2552a723858adb3841b</data>
    </edge>
    <edge source="results" target="process_with_controlled_batches">
      <data key="d4">process_with_controlled_batches returns the results after processing all batches, linking them directly.</data>
      <data key="d5">output, results</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_92852caa5644169ca9dd067510644fa8</data>
    </edge>
    <edge source="results" target="queries">
      <data key="d4">results contain the outputs of the processed queries, showing a direct link between the two.</data>
      <data key="d5">output generation, query result</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_f23f1c9ec24d0c56c84d4dea02a31e9c</data>
    </edge>
    <edge source="results" target="benchmark_queries">
      <data key="d4">results store the output generated by the benchmark_queries function, which includes query performance metrics.</data>
      <data key="d5">output data, performance metrics</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_871ea4244ed66d033bd333acf9bf3bc4</data>
    </edge>
    <edge source="results" target="Average Time">
      <data key="d4">Average Time is derived from the results collected in the benchmark_queries function to assess query performance.</data>
      <data key="d5">performance metric, evaluation output</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_871ea4244ed66d033bd333acf9bf3bc4</data>
    </edge>
    <edge source="results" target="Minimum Time">
      <data key="d4">Minimum Time is part of the results generated by the benchmark_queries function, indicating query efficiency.</data>
      <data key="d5">performance metric, efficiency output</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_871ea4244ed66d033bd333acf9bf3bc4</data>
    </edge>
    <edge source="results" target="Maximum Time">
      <data key="d4">Maximum Time is recorded as part of the results from the benchmark_queries function, reflecting the longest execution times.</data>
      <data key="d5">performance metric, timing output</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_871ea4244ed66d033bd333acf9bf3bc4</data>
    </edge>
    <edge source="Embedding Cache" target="Clear embedding cache">
      <data key="d4">The process of clearing the Embedding Cache is directly related to its function of regenerating updated embeddings.</data>
      <data key="d5">maintenance, regeneration</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_c243822dc40a7530f6d52689d09a9771</data>
    </edge>
    <edge source="CACHE_DIR" target="embedding_cache.json">
      <data key="d4">CACHE_DIR defines the directory path where embedding_cache.json is stored, thus linking the variable to the file.</data>
      <data key="d5">file location, variable definition</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_9b0ddf2d56a8171a094bf3c9776b6538</data>
    </edge>
    <edge source="CACHE_DIR" target="definitions.py">
      <data key="d4">CACHE_DIR is indicated in definitions.py for caching purposes, highlighting the directory's role in the application.</data>
      <data key="d5">definition, configuration</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_b0d4e3abf98287ec9c0b65e83c50a4f5</data>
    </edge>
    <edge source="clear_embedding_cache" target="embedding_cache.json">
      <data key="d4">The clear_embedding_cache function is responsible for removing the embedding_cache.json file if it exists.</data>
      <data key="d5">function responsibility, file management</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_9b0ddf2d56a8171a094bf3c9776b6538</data>
    </edge>
    <edge source="Embedding Dimensions" target="Check embedding dimensions">
      <data key="d4">The feature of Embedding Dimensions is related to the action of checking them to ensure proper model performance and configuration.</data>
      <data key="d5">model performance, validation</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_8ef4523bb17dba7afcff56ff9c11fd27</data>
    </edge>
    <edge source="verify_embedding_dimensions" target="expected_dim">
      <data key="d4">The function utilizes the expected_dim variable to validate the dimension of the sampled embedding against a predefined standard.</data>
      <data key="d5">dimension validation, parameter comparison</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_63f1d846feb405f4334159c9dbab8e54</data>
    </edge>
    <edge source="expected_dim" target="sample_vector">
      <data key="d4">The function checks the length of sample_vector against expected_dim to ensure they match for dimension verification.</data>
      <data key="d5">dimension check, validation process</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_63f1d846feb405f4334159c9dbab8e54</data>
    </edge>
    <edge source="Knowledge Graph Issues" target="Symptom: Missing or incorrect entities and relationships">
      <data key="d4">The knowledge graph issues lead to the specific symptoms of missing or incorrect entities and relationships within the graph.</data>
      <data key="d5">cause-effect</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_77b6fe94a073645e5b6b2eb8d96ea848</data>
    </edge>
    <edge source="get_extract_entities_prompt" target="app.prompts">
      <data key="d4">The function get_extract_entities_prompt is sourced from the app.prompts API module, indicating a direct dependency.</data>
      <data key="d5">dependency, function sourcing</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_5b5656bc367f1681de72d78598ec16a2</data>
    </edge>
    <edge source="get_extract_entities_prompt" target="sample_excerpt">
      <data key="d4">sample_excerpt is used as an input to the get_extract_entities_prompt function, showcasing its role in prompting extraction processes.</data>
      <data key="d5">input-output, function usage</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_5b5656bc367f1681de72d78598ec16a2</data>
    </edge>
    <edge source="get_extract_entities_prompt" target="utilities.py">
      <data key="d4">The get_extract_entities_prompt function is part of the utilities described in utilities.py, indicating its purpose in entity extraction.</data>
      <data key="d5">functional relationship, organizational structure</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_900d5e18a5cfe07ed9e4aa24282973e4</data>
    </edge>
    <edge source="entity extraction" target="manual testing">
      <data key="d4">Manual testing is utilized to directly evaluate the function of entity extraction, ensuring it operates as intended.</data>
      <data key="d5">evaluation, functionality</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_162699c849de99a31c41ca7c0b7fcc62</data>
    </edge>
    <edge source="Graph Structure" target="Property Storage">
      <data key="d4">Graph Structure is underpinned by Property Storage to manage attributes of nodes and edges effectively.</data>
      <data key="d5">structural integrity</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_50024a3e54a6af26f2a3993aa6d9e612</data>
    </edge>
    <edge source="inspect_graph" target="nodes">
      <data key="d4">inspect_graph prints details about nodes in the graph, highlighting the feature of nodes as part of the function's operations.</data>
      <data key="d5">function operation, feature inspection</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_65a129aef3eaf89c18fa1a71ffe3a597</data>
    </edge>
    <edge source="inspect_graph" target="edges">
      <data key="d4">inspect_graph also prints details about edges in the graph, showing the relationship between the function and the feature of edges.</data>
      <data key="d5">function operation, feature inspection</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_65a129aef3eaf89c18fa1a71ffe3a597</data>
    </edge>
    <edge source="Keyword Extraction" target="Global Knowledge Graph Query Process">
      <data key="d4">Keyword Extraction is the first step in the Global Knowledge Graph Query Process, indicating its foundational importance.</data>
      <data key="d5">process initiation, foundational step</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_bb83e035cbe37d34b4684d22bfa2ceb5</data>
    </edge>
    <edge source="get_high_low_level_keywords_prompt" target="utilities.py">
      <data key="d4">The get_high_low_level_keywords_prompt function is included in utilities.py, showing its role in keyword extraction.</data>
      <data key="d5">functional relationship, organizational structure</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_900d5e18a5cfe07ed9e4aa24282973e4</data>
    </edge>
    <edge source="extract_json_from_text" target="utilities.py">
      <data key="d4">The extract_json_from_text function is defined in utilities.py to facilitate JSON handling in text.</data>
      <data key="d5">functional relationship, organizational structure</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_900d5e18a5cfe07ed9e4aa24282973e4</data>
    </edge>
    <edge source="keyword_data" target="trace_kg_query">
      <data key="d4">The function stores the extracted keywords in keyword_data, which is essential for subsequent querying operations.</data>
      <data key="d5">data management, querying support</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_39d726c9a9c2f837ce789e9198c54c73</data>
    </edge>
    <edge source="Trace Graph Traversal" target="Trace Graph Traversal">
      <data key="d4">The mention and repetition of Trace Graph Traversal indicates its significance in the context of graph operations.</data>
      <data key="d5">function relevance</data>
      <data key="d6">5.0</data>
      <data key="d7">excerpt_id_110f3f75cb3a86e39e9110c692d94ef0</data>
    </edge>
    <edge source="trace_kg_query" target="ll_keywords">
      <data key="d4">The function processes and assigns low-level keywords to the ll_keywords variable for entity retrieval.</data>
      <data key="d5">data processing, retrieval preparation</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_39d726c9a9c2f837ce789e9198c54c73</data>
    </edge>
    <edge source="trace_kg_query" target="hl_keywords">
      <data key="d4">The function processes and assigns high-level keywords to the hl_keywords variable for relationship retrieval.</data>
      <data key="d5">data processing, retrieval preparation</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_39d726c9a9c2f837ce789e9198c54c73</data>
    </edge>
    <edge source="ll_keywords" target="ll_embedding">
      <data key="d4">The low-level keywords are used to generate embeddings for querying the entity database, linking their purpose directly.</data>
      <data key="d5">embedding creation, entity querying</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_39d726c9a9c2f837ce789e9198c54c73</data>
    </edge>
    <edge source="hl_keywords" target="hl_embedding">
      <data key="d4">The high-level keywords are used to generate embeddings for querying the relationship database, connecting their utility directly.</data>
      <data key="d5">embedding creation, relationship querying</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_39d726c9a9c2f837ce789e9198c54c73</data>
    </edge>
    <edge source="ll_embedding" target="ll_results">
      <data key="d4">The generated low-level embedding is used to query the entity database, returning results stored in ll_results.</data>
      <data key="d5">query execution, results storage</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_39d726c9a9c2f837ce789e9198c54c73</data>
    </edge>
    <edge source="hl_embedding" target="hl_results">
      <data key="d4">The generated high-level embedding is used to query the relationships database, returning results stored in hl_results.</data>
      <data key="d5">query execution, results storage</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_39d726c9a9c2f837ce789e9198c54c73</data>
    </edge>
    <edge source="Ranking Parameters" target="Adjusting">
      <data key="d4">The relationship indicates that the action of adjusting is directly related to the Ranking Parameters, signifying they are parameters meant to be manipulated for better results.</data>
      <data key="d5">configuration adjustment, customization</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_4c63bae7215d8a91077bbbf95f0a5bc2</data>
    </edge>
    <edge source="CustomSmolRag" target="SmolRag">
      <data key="d4">CustomSmolRag is derived from the SmolRag class, therefore, it inherits its properties and methods, while also modifying ranking logic.:|:CustomSmolRag is derived from and extends the functionality of SmolRag, indicating an inheritance relationship.</data>
      <data key="d5">inheritance, extension:|:inheritance, subclassing</data>
      <data key="d6">17.0</data>
      <data key="d7">excerpt_id_19166492bd9b3932cb606850e071caa4:|:excerpt_id_451a74f3189766e5f74d735e4bd4d846</data>
    </edge>
    <edge source="CustomSmolRag" target="_get_query_excerpts">
      <data key="d4">CustomSmolRag implements the _get_query_excerpts function to customize how query excerpts are generated based on embeddings.</data>
      <data key="d5">customization, implementation</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_ebe249d0dd90f1c72f8bdf533997e6aa</data>
    </edge>
    <edge source="CustomSmolRag" target="_get_excerpt_context">
      <data key="d4">CustomSmolRag contains the _get_excerpt_context function, which defines its behavior for handling excerpt data.</data>
      <data key="d5">class-method relationship</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_2d8913758c4289f01071f578d422c0d5</data>
    </edge>
    <edge source="CustomSmolRag" target="custom_query">
      <data key="d4">custom_query is a method within the CustomSmolRag class, directly contributing to its specific functionality.</data>
      <data key="d5">method, functionality</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_19166492bd9b3932cb606850e071caa4</data>
    </edge>
    <edge source="SmolRag" target="document chunking">
      <data key="d4">Document chunking is a feature of the SmolRag API that enhances document management by dividing documents into smaller sections.</data>
      <data key="d5">feature, enhancement</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_391d9b7fd00abda862a1d6576fee1918</data>
    </edge>
    <edge source="SmolRag" target="excerpt_fn">
      <data key="d4">excerpt_fn is a function defined within the SmolRag API, which specifies how documents should be chunked.</data>
      <data key="d5">functional relationship, customization</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_3349f76d73e7efb0528eeee4c6101216</data>
    </edge>
    <edge source="SmolRag" target="dimensions">
      <data key="d4">dimensions is a variable linked to SmolRag, specifying the embedding dimensions utilized by the API.</data>
      <data key="d5">functional relationship, parameter setting</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_3349f76d73e7efb0528eeee4c6101216</data>
    </edge>
    <edge source="SmolRag" target="graph_db">
      <data key="d4">"SmolRag function operates using graph_db as its parameter, indicating a direct interaction with the graph database.")</data>
      <data key="d5">function-parameter relationship</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_0f09ea93b0147ae060748c2d7d541cd0</data>
    </edge>
    <edge source="SmolRag" target="source_to_doc_kv">
      <data key="d4">SmolRag utilizes the source_to_doc_kv variable to interact with the JsonKvStore for managing source-to-document associations functionally.</data>
      <data key="d5">functionality, data interaction</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_cbbeef7dc6ce1662aa9990abd0d0a080</data>
    </edge>
    <edge source="SmolRag" target="doc_to_source_kv">
      <data key="d4">SmolRag also employs the doc_to_source_kv variable to efficiently manage documents and their corresponding sources as part of its overall functionality.</data>
      <data key="d5">functionality, data interaction</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_cbbeef7dc6ce1662aa9990abd0d0a080</data>
    </edge>
    <edge source="SmolRag" target="doc_to_excerpt_kv">
      <data key="d4">SmolRag makes use of doc_to_excerpt_kv to handle excerpts related to documents, showcasing its capability in structured data handling.</data>
      <data key="d5">functionality, data interaction</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_cbbeef7dc6ce1662aa9990abd0d0a080</data>
    </edge>
    <edge source="SmolRag" target="excerpt_kv">
      <data key="d4">SmolRag leverages excerpt_kv to access and manage excerpts, integrating various data management aspects into its functionality.</data>
      <data key="d5">functionality, data interaction</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_cbbeef7dc6ce1662aa9990abd0d0a080</data>
    </edge>
    <edge source="SmolRag" target="Processing Documents">
      <data key="d4">The SmolRag API is integral to the function of processing documents, as it is used to execute the batch processing tasks.</data>
      <data key="d5">core functionality, processing</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_3ce40acc1fea7738cf20ce8f1ac25b52</data>
    </edge>
    <edge source="SmolRag" target="benchmark_queries">
      <data key="d4">The benchmark_queries function evaluates the performance of various query types on the SmolRag API, directly interacting with it.</data>
      <data key="d5">performance evaluation, interaction</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_871ea4244ed66d033bd333acf9bf3bc4</data>
    </edge>
    <edge source="SmolRag" target="Vector Search Query">
      <data key="d4">The Vector Search Query function is part of the SmolRag API, directly utilizing its capabilities to retrieve specific information.</data>
      <data key="d5">API usage, functionality</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_0fe32e6885f5b985ccdafa775b1e90c3</data>
    </edge>
    <edge source="SmolRag" target="Local Knowledge Graph Query">
      <data key="d4">The Local Knowledge Graph Query function is another application of the SmolRag API designed to interact with knowledge graphs.</data>
      <data key="d5">API usage, functionality</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_0fe32e6885f5b985ccdafa775b1e90c3</data>
    </edge>
    <edge source="SmolRag" target="Global Knowledge Graph Query">
      <data key="d4">The Global Knowledge Graph Query function also operates under the SmolRag API, enhancing its functionality for various queries.</data>
      <data key="d5">API usage, functionality</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_0fe32e6885f5b985ccdafa775b1e90c3</data>
    </edge>
    <edge source="SmolRag" target="Hybrid Knowledge Graph Query">
      <data key="d4">Hybrid Knowledge Graph Query is a function under the SmolRag API, showcasing its advanced querying capabilities.</data>
      <data key="d5">API usage, functionality</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_0fe32e6885f5b985ccdafa775b1e90c3</data>
    </edge>
    <edge source="Query Issues" target="Poor Document Quality">
      <data key="d4">Poor Document Quality is identified as one potential cause of Query Issues, affecting result relevance.</data>
      <data key="d5">causal relationship, query effectiveness</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_da40f838ece0ed80f75b0542ad37f765</data>
    </edge>
    <edge source="Query Issues" target="Inappropriate Query Type">
      <data key="d4">Inappropriate Query Type is linked as a cause of Query Issues based on the type of query being made.</data>
      <data key="d5">causal relationship, query effectiveness</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_da40f838ece0ed80f75b0542ad37f765</data>
    </edge>
    <edge source="Query Issues" target="Embedding Quality Issues">
      <data key="d4">Embedding Quality Issues are noted as a contributing factor to the problems associated with Query Issues.</data>
      <data key="d5">causal relationship, query effectiveness</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_da40f838ece0ed80f75b0542ad37f765</data>
    </edge>
    <edge source="Query Issues" target="Prompt Engineering Problems">
      <data key="d4">Prompt Engineering Problems are directly related to Query Issues as they affect how queries are structured and delivered.</data>
      <data key="d5">causal relationship, query effectiveness</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_da40f838ece0ed80f75b0542ad37f765</data>
    </edge>
    <edge source="Query Issues" target="Different Query Types">
      <data key="d4">Different Query Types are presented as a solution to help resolve the various Query Issues encountered.</data>
      <data key="d5">solution, query resolution</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_da40f838ece0ed80f75b0542ad37f765</data>
    </edge>
    <edge source="Retrieved Excerpts" target="Inspection">
      <data key="d4">Retrieved excerpts are inspected to derive insights, validate content, or for further analysis.</data>
      <data key="d5">data analysis, validation</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_de4337904a4bfecc541e8547ba685ade</data>
    </edge>
    <edge source="embedding" target="_get_query_excerpts">
      <data key="d4">The _get_query_excerpts function relies on the embedding variable to generate a numerical representation of the input text for further processing.</data>
      <data key="d5">data processing, function reliance</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_ebe249d0dd90f1c72f8bdf533997e6aa</data>
    </edge>
    <edge source="embedding_array" target="_get_query_excerpts">
      <data key="d4">The _get_query_excerpts function converts the embedding into embedding_array for efficient querying in the embeddings database.</data>
      <data key="d5">conversion, performance optimization</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_ebe249d0dd90f1c72f8bdf533997e6aa</data>
    </edge>
    <edge source="excerpts" target="_get_excerpt_context">
      <data key="d4">_get_excerpt_context operates on the excerpts variable, processing it to limit the number of excerpts and format them.</data>
      <data key="d5">function-variable relationship</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_2d8913758c4289f01071f578d422c0d5</data>
    </edge>
    <edge source="truncate_list_by_token_size" target="utilities.py">
      <data key="d4">The truncate_list_by_token_size function is utilized within utilities.py to manage token lengths.</data>
      <data key="d5">functional relationship, organizational structure</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_900d5e18a5cfe07ed9e4aa24282973e4</data>
    </edge>
    <edge source="Resource Constraints" target="Server Configuration">
      <data key="d4">Server Configuration can influence Resource Constraints, affecting the overall performance of FastAPI applications.</data>
      <data key="d5">performance interplay, resource management</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_53ae527cec786bde0d38d922738f582d</data>
    </edge>
    <edge source="Query Caching" target="Query Performance">
      <data key="d4">Query Caching enhances Query Performance by reducing the need for reprocessing identical queries.</data>
      <data key="d5">optimization strategy, performance improvement</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_0cb743ef78a1b56785a004b70800d537</data>
    </edge>
    <edge source="Query Caching" target="Query Caching Implementation">
      <data key="d4">Query Caching Implementation serves as a practical example of using caching techniques to enhance performance.</data>
      <data key="d5">implementation, practical application</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_0cb743ef78a1b56785a004b70800d537</data>
    </edge>
    <edge source="QueryCache" target="cache_dir">
      <data key="d4">QueryCache uses cache_dir as a variable to define where cached files are stored, crucial for its functionality.:|:The cache_dir variable defines where the QueryCache class will store its cached data, directly linking the class to its configuration.</data>
      <data key="d5">configuration, storage:|:storage management, caching</data>
      <data key="d6">17.0</data>
      <data key="d7">excerpt_id_6d5e3b714d13f4cccc13c6ddccfafca3:|:excerpt_id_9bebde77788b480bb0dca061281305da</data>
    </edge>
    <edge source="QueryCache" target="get_cache_key">
      <data key="d4">The get_cache_key function is a method of the QueryCache class that relates to how queries are identified within the cache.:|:QueryCache utilizes get_cache_key to create unique identifiers for caching, making it a fundamental part of the caching process.</data>
      <data key="d5">caching mechanism, identifier generation:|:method, caching mechanism</data>
      <data key="d6">19.0</data>
      <data key="d7">excerpt_id_6d5e3b714d13f4cccc13c6ddccfafca3:|:excerpt_id_9bebde77788b480bb0dca061281305da</data>
    </edge>
    <edge source="QueryCache" target="get_from_cache">
      <data key="d4">QueryCache implements get_from_cache to retrieve previously cached results, integral to its purpose as a cache handler.</data>
      <data key="d5">result retrieval, caching</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_9bebde77788b480bb0dca061281305da</data>
    </edge>
    <edge source="QueryCache" target="save_to_cache">
      <data key="d4">QueryCache employs save_to_cache to write results into the cache, thus completing the caching cycle.</data>
      <data key="d5">result storage, caching</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_9bebde77788b480bb0dca061281305da</data>
    </edge>
    <edge source="cache_dir" target="clean_old_cache_files">
      <data key="d4">"The clean_old_cache_files function takes cache_dir as an argument to determine which directory to clean."&lt;</data>
      <data key="d5">function-parameter relationship</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_d84d634f6486e1594aa2243ec3a2d0e4</data>
    </edge>
    <edge source="query_text" target="get_cache_key">
      <data key="d4">get_cache_key uses query_text to generate unique keys, linking the query's content to its cache representation.</data>
      <data key="d5">key generation, query representation</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_9bebde77788b480bb0dca061281305da</data>
    </edge>
    <edge source="query_text" target="fast_query">
      <data key="d4">The fast_query function requires the query_text variable to execute the vector search, representing an input relationship.</data>
      <data key="d5">input-output relationship, dependency</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_b68d9f283d4ab863a5fff4c63759e843</data>
    </edge>
    <edge source="query_text" target="memory_efficient_query">
      <data key="d4">The query_text variable is passed to the memory_efficient_query function to specify the query being executed.</data>
      <data key="d5">function input, query specification</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_e7f63efacb3d60d28f1de8f3c979dba1</data>
    </edge>
    <edge source="query_text" target="memory_safe_query">
      <data key="d4">query_text is used as an input for the memory_safe_query function, indicating the text that will be processed if memory conditions are met.</data>
      <data key="d5">input handling, function execution</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_d6593324775191da0523fe9381efdd81</data>
    </edge>
    <edge source="query_text" target="cached_result">
      <data key="d4">The variable cached_result is determined by checking both the query_text and query_type for cached data before being processed.</data>
      <data key="d5">cache management, query processing</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_6d5e3b714d13f4cccc13c6ddccfafca3</data>
    </edge>
    <edge source="get_cache_key" target="get_from_cache">
      <data key="d4">The get_from_cache method utilizes the get_cache_key method to locate the appropriate cached file for a query result.:|:get_from_cache depends on get_cache_key to identify which cached result to retrieve, showing a reliance on key generation.</data>
      <data key="d5">method dependency, cache retrieval:|:function dependence, caching</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_6d5e3b714d13f4cccc13c6ddccfafca3:|:excerpt_id_9bebde77788b480bb0dca061281305da</data>
    </edge>
    <edge source="get_cache_key" target="save_to_cache">
      <data key="d4">The save_to_cache method relies on get_cache_key to generate a filename for storing the cached result.:|:save_to_cache requires get_cache_key to determine the file name for saving cached results, linking storage to key generation.</data>
      <data key="d5">method dependency, cache storage:|:file naming, caching</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_6d5e3b714d13f4cccc13c6ddccfafca3:|:excerpt_id_9bebde77788b480bb0dca061281305da</data>
    </edge>
    <edge source="Vector Search" target="Optimize">
      <data key="d4">Optimizing vector search involves improving its efficiency and effectiveness, making the search process more accurate and faster.</data>
      <data key="d5">optimization, enhancement</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_ef4071e96daa9945373d57af00e57426</data>
    </edge>
    <edge source="Vector Search" target="Mix Query Example">
      <data key="d4">The Mix Query Example involves the use of Vector Search as part of its methodology for achieving comprehensive results.</data>
      <data key="d5">methodology, function</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_f18a098e46a2044eb43b0d2c58ecc3e2</data>
    </edge>
    <edge source="Vector Search" target="Mix Query Method">
      <data key="d4">The Mix Query Method utilizes Vector Search as one of its components to improve the relevance of search results.</data>
      <data key="d5">function integration, semantic relevance</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_8a0247b8e1267963faeba1c255657e41</data>
    </edge>
    <edge source="Vector Search" target="Query Performance">
      <data key="d4">Vector Search affects Query Performance as its speed can directly influence the response times experienced by users.</data>
      <data key="d5">performance impact, efficiency</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_0cb743ef78a1b56785a004b70800d537</data>
    </edge>
    <edge source="Vector Search" target="Comparative Analysis">
      <data key="d4">Vector Search is one of the query types discussed in the Comparative Analysis, showcasing its speed and effectiveness.</data>
      <data key="d5">query types, performance comparison</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_86ba72aabf2293e7a459f9e7845c2894</data>
    </edge>
    <edge source="approximate_vector_search" target="vectors">
      <data key="d4">The function approximate_vector_search operates on the variable vectors to perform similarity searches.</data>
      <data key="d5">function usage, variable interaction</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_7e1edb87d36ca88fec588c38ccc08d2a</data>
    </edge>
    <edge source="approximate_vector_search" target="query_vector">
      <data key="d4">The function approximate_vector_search uses the query_vector as input to find similar elements.</data>
      <data key="d5">function input, search algorithm</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_7e1edb87d36ca88fec588c38ccc08d2a</data>
    </edge>
    <edge source="approximate_vector_search" target="top_k">
      <data key="d4">The function approximate_vector_search defines the number of top results to return based on the variable top_k.</data>
      <data key="d5">function output, result limit</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_7e1edb87d36ca88fec588c38ccc08d2a</data>
    </edge>
    <edge source="approximate_vector_search" target="sample_size">
      <data key="d4">The variable sample_size is determined and utilized by the function approximate_vector_search to limit the number of samples.</data>
      <data key="d5">function parameter, sampling control</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_7e1edb87d36ca88fec588c38ccc08d2a</data>
    </edge>
    <edge source="vectors" target="optimized_similarity">
      <data key="d4">The optimized_similarity function processes the vectors to compute their similarities with the query_vector.</data>
      <data key="d5">function input, calculation</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_a42be424d0cd15ace0d1782e4ae169e9</data>
    </edge>
    <edge source="query_vector" target="optimized_similarity">
      <data key="d4">The optimized_similarity function uses the query_vector to assess how similar it is to the other vectors.</data>
      <data key="d5">function input, calculation</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_a42be424d0cd15ace0d1782e4ae169e9</data>
    </edge>
    <edge source="sample_size" target="sample_indices">
      <data key="d4">The variable sample_indices is derived from the sample_size value to guide the sampling process in the function.</data>
      <data key="d5">sampling mechanism, data organization</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_7e1edb87d36ca88fec588c38ccc08d2a</data>
    </edge>
    <edge source="sample_indices" target="similarities">
      <data key="d4">The variable similarities computes scores for vectors referenced in sample_indices during the function execution.</data>
      <data key="d5">similarity computation, data relationship</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_7e1edb87d36ca88fec588c38ccc08d2a</data>
    </edge>
    <edge source="similarities" target="top_sample_indices">
      <data key="d4">The variable top_sample_indices ranks the computed similarities to filter the best candidates.</data>
      <data key="d5">ranking mechanism, filtering data</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_7e1edb87d36ca88fec588c38ccc08d2a</data>
    </edge>
    <edge source="similarities" target="optimized_similarity">
      <data key="d4">similarities are the final output of the optimized_similarity function representing computed similarity scores.</data>
      <data key="d5">function output, calculation result</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_a42be424d0cd15ace0d1782e4ae169e9</data>
    </edge>
    <edge source="top_sample_indices" target="top_candidates">
      <data key="d4">The variable top_candidates is populated based on the indices provided by top_sample_indices for further evaluation.</data>
      <data key="d5">candidate selection, data flow</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_7e1edb87d36ca88fec588c38ccc08d2a</data>
    </edge>
    <edge source="top_candidates" target="candidate_vectors">
      <data key="d4">The variable candidate_vectors is built from indexes of top_candidates for precise similarity measurements.</data>
      <data key="d5">precise evaluation, candidate review</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_7e1edb87d36ca88fec588c38ccc08d2a</data>
    </edge>
    <edge source="candidate_vectors" target="candidate_similarities">
      <data key="d4">The variable candidate_similarities calculates similarity scores for each entry in candidate_vectors for the final return.</data>
      <data key="d5">similarity scoring, final assessment</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_7e1edb87d36ca88fec588c38ccc08d2a</data>
    </edge>
    <edge source="candidate_similarities" target="top_k_indices">
      <data key="d4">The variable top_k_indices is generated from the scores in candidate_similarities to determine the final top k results.</data>
      <data key="d5">selection process, final ranking</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_7e1edb87d36ca88fec588c38ccc08d2a</data>
    </edge>
    <edge source="Simpler Query Type" target="time-sensitive applications">
      <data key="d4">The function of using a simpler query type is directly related to improving performance in time-sensitive applications.</data>
      <data key="d5">efficiency, performance</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_1ed21094d7f4ae665ee11cf1896c7904</data>
    </edge>
    <edge source="Out of Memory Errors" target="Large Context Size">
      <data key="d4">A Large Context Size may lead to Out of Memory Errors due to increased memory demand during queries.</data>
      <data key="d5">cause and effect, performance issue</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_54d4734c1f93d3075b0b82d4e50ffc45</data>
    </edge>
    <edge source="Out of Memory Errors" target="Memory Leaks">
      <data key="d4">Memory Leaks may contribute to Out of Memory Errors by accumulating unused memory over time.</data>
      <data key="d5">cause and effect, resource mismanagement</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_54d4734c1f93d3075b0b82d4e50ffc45</data>
    </edge>
    <edge source="Out of Memory Errors" target="Insufficient System Resources">
      <data key="d4">Out of Memory Errors can occur when there are Insufficient System Resources available to handle the current operations.</data>
      <data key="d5">cause and effect, resource limitation</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_54d4734c1f93d3075b0b82d4e50ffc45</data>
    </edge>
    <edge source="Out of Memory Errors" target="Limit Context Size">
      <data key="d4">Limiting Context Size is a recommended solution to mitigate Out of Memory Errors by reducing memory usage.</data>
      <data key="d5">solution implementation, reduction strategy</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_54d4734c1f93d3075b0b82d4e50ffc45</data>
    </edge>
    <edge source="Memory Leaks" target="Performance Issues">
      <data key="d4">Performance Issues points to Memory Leaks as another potential contributor to performance degradation.</data>
      <data key="d5">performance, contributing factor</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_d51ed839a3e8d83bf62dabc2376c5057</data>
    </edge>
    <edge source="_get_excerpt_context" target="context">
      <data key="d4">The context variable in _get_excerpt_context accumulates the processed output of excerpts, showing the function's purpose.</data>
      <data key="d5">function-variable relationship</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_2d8913758c4289f01071f578d422c0d5</data>
    </edge>
    <edge source="_get_excerpt_context" target="inspect">
      <data key="d4">The inspect module is used within _get_excerpt_context to clean up excerpt formatting, indicating an external dependency.</data>
      <data key="d5">function-module relationship</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_2d8913758c4289f01071f578d422c0d5</data>
    </edge>
    <edge source="Garbage Collection" target="function">
      <data key="d4">Garbage Collection is the process encapsulated by the function to clear unused memory resources.</data>
      <data key="d5">memory management, optimization</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_bb648165c3476d5efccf479db06c8bae</data>
    </edge>
    <edge source="Garbage Collection" target="Caches">
      <data key="d4">Garbage Collection helps manage memory usage effectively in Caches by cleaning up unused data after processing batches.</data>
      <data key="d5">memory management, cleanup</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_8d580efe0a0849a9ed415edb7a33f22e</data>
    </edge>
    <edge source="function" target="request timeouts">
      <data key="d4">Request timeouts may be associated with a function that handles the timing and management of requests within a system.</data>
      <data key="d5">system management, efficiency</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_3eece1a0072ec193d86a75de1e566ff3</data>
    </edge>
    <edge source="function" target="Batch Size Control">
      <data key="d4">Batch Size Control is likely implemented as a function within a system that manages how many items are processed together to optimize performance.</data>
      <data key="d5">optimization, resource management</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_bb35f27247abbcfb17fbdf6ba97943fa</data>
    </edge>
    <edge source="gc" target="memory_efficient_query">
      <data key="d4">The memory_efficient_query function utilizes the gc interface to manage memory allocation before and after the query process.</data>
      <data key="d5">memory management, function utilization</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_e7f63efacb3d60d28f1de8f3c979dba1</data>
    </edge>
    <edge source="gc" target="optimize_memory">
      <data key="d4">The optimize_memory function calls the gc library to perform garbage collection.</data>
      <data key="d5">memory management, garbage collection</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_162e6c9e88d526c7cda8c551479b1fb1</data>
    </edge>
    <edge source="memory_safe_query" target="max_memory_percent">
      <data key="d4">The memory_safe_query function relies on max_memory_percent to determine when to halt execution based on memory thresholds.</data>
      <data key="d5">resource management, function dependency</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_d6593324775191da0523fe9381efdd81</data>
    </edge>
    <edge source="OpenAI API" target="Invalid API Key">
      <data key="d4">The OpenAI API may exhibit errors if the Invalid API Key is used, indicating a malfunction in authentication.</data>
      <data key="d5">authentication, error</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_d41d4522e6a3cf4c0b8733e72233523a</data>
    </edge>
    <edge source="OpenAI API" target="Quota Exceeded">
      <data key="d4">When the Quota Exceeded condition is met, the OpenAI API stops responding to further requests, indicating a limit breach.</data>
      <data key="d5">usage limits, error handling</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_d41d4522e6a3cf4c0b8733e72233523a</data>
    </edge>
    <edge source="OpenAI API" target="API Service Disruption">
      <data key="d4">API Service Disruption indicates issues with the API that affect all functionalities and access, impacting users' ability to connect.</data>
      <data key="d5">service availability, error</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_d41d4522e6a3cf4c0b8733e72233523a</data>
    </edge>
    <edge source="OpenAI API" target="Verify API Key">
      <data key="d4">Verifying the API Key is essential for the OpenAI API to function properly and avoid errors related to authentication.</data>
      <data key="d5">verification, authentication</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_d41d4522e6a3cf4c0b8733e72233523a</data>
    </edge>
    <edge source="verify_openai_api_key" target="API key">
      <data key="d4">The function verify_openai_api_key accesses the variable API key to check its validity for OpenAI API usage.</data>
      <data key="d5">validation, authentication</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_f72624f4124b364e9f6e3cabefc26dcb</data>
    </edge>
    <edge source="API key" target="client.embeddings.create">
      <data key="d4">The function client.embeddings.create requires the API key for making a successful API call to generate embeddings.</data>
      <data key="d5">dependency, authentication</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_f72624f4124b364e9f6e3cabefc26dcb</data>
    </edge>
    <edge source="RateLimitedOpenAiLlm" target="base_llm">
      <data key="d4">RateLimitedOpenAiLlm interacts with base_llm, which is the language model it utilizes for processing requests.</data>
      <data key="d5">class interaction, integration</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_a95ed36ca9d76b512d84de6b0725fbf9</data>
    </edge>
    <edge source="RateLimitedOpenAiLlm" target="requests_per_minute">
      <data key="d4">The requests_per_minute variable is a configurable parameter that defines the request rate limit for the RateLimitedOpenAiLlm class.</data>
      <data key="d5">configuration, rate limiting</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_a95ed36ca9d76b512d84de6b0725fbf9</data>
    </edge>
    <edge source="RateLimitedOpenAiLlm" target="min_seconds_per_request">
      <data key="d4">min_seconds_per_request is derived from the requests_per_minute variable, determining how long to wait between requests.</data>
      <data key="d5">configuration, request timing</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_a95ed36ca9d76b512d84de6b0725fbf9</data>
    </edge>
    <edge source="RateLimitedOpenAiLlm" target="last_request_time">
      <data key="d4">last_request_time tracks the most recent request made by the RateLimitedOpenAiLlm, ensuring compliance with rate limiting.</data>
      <data key="d5">timing, request management</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_a95ed36ca9d76b512d84de6b0725fbf9</data>
    </edge>
    <edge source="get_embedding" target="_wait_for_rate_limit">
      <data key="d4">get_embedding method utilizes _wait_for_rate_limit to ensure the embedding request adheres to the rate limit policy.</data>
      <data key="d5">rate limit adherence, method synergy</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_a95ed36ca9d76b512d84de6b0725fbf9</data>
    </edge>
    <edge source="get_completion" target="_wait_for_rate_limit">
      <data key="d4">get_completion method also utilizes _wait_for_rate_limit to comply with rate limitations when retrieving completions.</data>
      <data key="d5">rate limit adherence, method synergy</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_a95ed36ca9d76b512d84de6b0725fbf9</data>
    </edge>
    <edge source="retry_with_exponential_backoff" target="wrapper">
      <data key="d4">retry_with_exponential_backoff defines the wrapper function to handle the retry logic for the specified function.</data>
      <data key="d5">function encapsulation, retry logic</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_1def6bdd950a1221491ad5bc7859d768</data>
    </edge>
    <edge source="initial_delay" target="wrapper">
      <data key="d4">the wrapper uses the initial_delay variable to determine the starting point for retry timing.</data>
      <data key="d5">parameter usage, timing</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_1def6bdd950a1221491ad5bc7859d768</data>
    </edge>
    <edge source="exponential_base" target="wrapper">
      <data key="d4">the exponential_base variable is used within the wrapper to calculate delay increases for retries.</data>
      <data key="d5">parameter usage, timing</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_1def6bdd950a1221491ad5bc7859d768</data>
    </edge>
    <edge source="jitter" target="wrapper">
      <data key="d4">jitter influences the delay introduced in the retry process to add randomness during execution.</data>
      <data key="d5">randomness, execution</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_1def6bdd950a1221491ad5bc7859d768</data>
    </edge>
    <edge source="errors" target="wrapper">
      <data key="d4">errors specifies which exceptions to catch for retrying in the wrapper, defining its retry behavior.</data>
      <data key="d5">error handling, retry logic</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_1def6bdd950a1221491ad5bc7859d768</data>
    </edge>
    <edge source="query_map" target="process_query_with_timeout">
      <data key="d4">query_map is used within process_query_with_timeout to dynamically select the appropriate function for processing based on the query type.</data>
      <data key="d5">data mapping, function selection</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_dc931d71f7d6a347aaaa011838c3efaf</data>
    </edge>
    <edge source="query_map" target="query_endpoint()">
      <data key="d4">The query_endpoint function relies on the query_map to determine which SmolRAG method to invoke for different types of queries.</data>
      <data key="d5">data routing, method mapping</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_18b7236af033065c11ace3034fa8761a</data>
    </edge>
    <edge source="process_query_with_timeout" target="timeout">
      <data key="d4">The timeout variable specifies the maximum duration for processing a query in process_query_with_timeout, guiding its execution.</data>
      <data key="d5">time limitation, variable influence</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_dc931d71f7d6a347aaaa011838c3efaf</data>
    </edge>
    <edge source="Performance Issues" target="Vector Database">
      <data key="d4">Performance Issues section discusses how the growing Vector Database could be a potential cause for system slowdown.</data>
      <data key="d5">performance, system impact</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_d51ed839a3e8d83bf62dabc2376c5057</data>
    </edge>
    <edge source="Performance Issues" target="Cache Bloat">
      <data key="d4">Performance Issues identifies Cache Bloat as a potential cause of the system becoming slower over time.</data>
      <data key="d5">performance, contributing factor</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_d51ed839a3e8d83bf62dabc2376c5057</data>
    </edge>
    <edge source="Vector Database" target="Database Pruning">
      <data key="d4">Database Pruning is suggested as a solution to manage the size of the Vector Database to prevent slowdowns.</data>
      <data key="d5">solution, performance management</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_d51ed839a3e8d83bf62dabc2376c5057</data>
    </edge>
    <edge source="prune_old_documents" target="days_threshold">
      <data key="d4">The function prune_old_documents uses days_threshold to determine how old a document is and whether it should be removed.</data>
      <data key="d5">time-based filtering, threshold</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_8410a7e36eb3c87c25483898c18044a2</data>
    </edge>
    <edge source="days_threshold" target="clean_old_cache_files">
      <data key="d4">"The clean_old_cache_files function uses days_threshold to determine the age of the files that should be removed."&lt;</data>
      <data key="d5">function-parameter relationship</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_d84d634f6486e1594aa2243ec3a2d0e4</data>
    </edge>
    <edge source="current_time" target="threshold_time">
      <data key="d4">The variable threshold_time is calculated from current_time and days_threshold to establish a cutoff for old documents.</data>
      <data key="d5">time calculation, threshold</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_8410a7e36eb3c87c25483898c18044a2</data>
    </edge>
    <edge source="all_doc_ids" target="excerpts_ids">
      <data key="d4">all_doc_ids is used to get excerpt_ids, since excerpts are associated with the document IDs in rag.</data>
      <data key="d5">document relationship, data retrieval</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_8410a7e36eb3c87c25483898c18044a2</data>
    </edge>
    <edge source="Cache Cleanup" target="Cache Cleanup">
      <data key="d4">Cache Cleanup is designed to manage cached data, emphasizing efficiency and system performance.</data>
      <data key="d5">functionality, performance optimization</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_667fc1581f36a093dc54fe4120a50e3c</data>
    </edge>
    <edge source="Optimization" target="Vector Operations">
      <data key="d4">Vector Operations are the subject of optimization efforts to enhance performance in relevant applications.</data>
      <data key="d5">optimization, performance enhancement</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_b9a283d89c9ac9a2502511d2ad1a0b47</data>
    </edge>
    <edge source="initial_memory" target="final_memory">
      <data key="d4">initial_memory and final_memory are directly related as they represent memory usage before and after garbage collection in the optimize_memory function.</data>
      <data key="d5">measurement, comparison</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_162e6c9e88d526c7cda8c551479b1fb1</data>
    </edge>
    <edge source="High CPU usage" target="Inefficient vector operations">
      <data key="d4">High CPU usage may be a result of inefficient vector operations that increase the processing load on the CPU.</data>
      <data key="d5">cause and effect, performance issues</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_9ff4f0f1af9ef907c4af65e8a5e3c1aa</data>
    </edge>
    <edge source="High CPU usage" target="Large batch processing">
      <data key="d4">High CPU usage can be attributed to large batch processing where a significant volume of data is processed at once.</data>
      <data key="d5">cause and effect, data processing</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_9ff4f0f1af9ef907c4af65e8a5e3c1aa</data>
    </edge>
    <edge source="High CPU usage" target="Excessive parallel processing">
      <data key="d4">High CPU usage can occur due to excessive parallel processing, leading to resource competition.</data>
      <data key="d5">cause and effect, resource contention</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_9ff4f0f1af9ef907c4af65e8a5e3c1aa</data>
    </edge>
    <edge source="High CPU usage" target="Background tasks">
      <data key="d4">High CPU usage might be influenced by background tasks that are running concurrently, consuming CPU cycles.</data>
      <data key="d5">cause and effect, resource usage</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_9ff4f0f1af9ef907c4af65e8a5e3c1aa</data>
    </edge>
    <edge source="High CPU usage" target="Profile CPU usage">
      <data key="d4">Profiling CPU usage can help identify the reasons behind high CPU usage, attempting to mitigate performance issues.</data>
      <data key="d5">diagnostic action, performance optimization</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_9ff4f0f1af9ef907c4af65e8a5e3c1aa</data>
    </edge>
    <edge source="cProfile" target="profile_function">
      <data key="d4">profile_function utilizes the cProfile module to enable profiling of any provided function.</data>
      <data key="d5">function profiling, performance analysis</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_8fda81c68b75421d305c4c8c5587399b</data>
    </edge>
    <edge source="pstats" target="profile_function">
      <data key="d4">profile_function utilizes the pstats module to analyze and present profiling data obtained from cProfile.</data>
      <data key="d5">performance analysis, statistics</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_8fda81c68b75421d305c4c8c5587399b</data>
    </edge>
    <edge source="optimized_similarity" target="dot_products">
      <data key="d4">dot_products is calculated within the optimized_similarity function as part of the similarity computation process.</data>
      <data key="d5">calculation, function output</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_a42be424d0cd15ace0d1782e4ae169e9</data>
    </edge>
    <edge source="optimized_similarity" target="vector_norms">
      <data key="d4">vector_norms are computed in the optimized_similarity function to assist in the similarity score calculations.</data>
      <data key="d5">calculation, function output</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_a42be424d0cd15ace0d1782e4ae169e9</data>
    </edge>
    <edge source="process_with_controlled_batches" target="items">
      <data key="d4">process_with_controlled_batches processes the items list in controlled batches, making them a key input to the function.</data>
      <data key="d5">input-output, processing</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_92852caa5644169ca9dd067510644fa8</data>
    </edge>
    <edge source="process_with_controlled_batches" target="process_func">
      <data key="d4">process_with_controlled_batches applies process_func to each batch of items, making process_func essential for item processing.</data>
      <data key="d5">processing, functional dependency</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_92852caa5644169ca9dd067510644fa8</data>
    </edge>
    <edge source="Disk I/O Bottlenecks" target="Vector Store Saves">
      <data key="d4">Frequent Vector Store Saves are one of the potential causes of Disk I/O Bottlenecks, leading to performance degradation.</data>
      <data key="d5">causal relationship, performance issue</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_634cb690e8983101d35edd7bb2263ee6</data>
    </edge>
    <edge source="Disk I/O Bottlenecks" target="Large Log Files">
      <data key="d4">Large Log Files contribute to Disk I/O Bottlenecks, as they consume significant I/O resources.</data>
      <data key="d5">causal relationship, resource consumption</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_634cb690e8983101d35edd7bb2263ee6</data>
    </edge>
    <edge source="Disk I/O Bottlenecks" target="Inefficient File Operations">
      <data key="d4">Inefficient File Operations can exacerbate Disk I/O Bottlenecks, resulting in inefficient use of system resources.</data>
      <data key="d5">causal relationship, operational inefficiency</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_634cb690e8983101d35edd7bb2263ee6</data>
    </edge>
    <edge source="Disk I/O Bottlenecks" target="Slow Storage Media">
      <data key="d4">Slow Storage Media is a variable that can lead to Disk I/O Bottlenecks by limiting data transfer speeds.</data>
      <data key="d5">causal relationship, performance limitation</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_634cb690e8983101d35edd7bb2263ee6</data>
    </edge>
    <edge source="Disk I/O Bottlenecks" target="Reduce Save Frequency">
      <data key="d4">Reducing the save frequency is proposed as a solution to alleviate the effects of Disk I/O Bottlenecks.</data>
      <data key="d5">solution-oriented relationship, performance optimization</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_634cb690e8983101d35edd7bb2263ee6</data>
    </edge>
    <edge source="BufferedVectorStore" target="__init__">
      <data key="d4">The __init__ method initializes an instance of BufferedVectorStore, setting up the environment with base_store and buffer size.</data>
      <data key="d5">initialization, class instantiation</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_a68564adae713623b80263ca809403a7</data>
    </edge>
    <edge source="BufferedVectorStore" target="upsert">
      <data key="d4">The upsert method is a core functionality of BufferedVectorStore, enabling item addition and management within the buffer.</data>
      <data key="d5">data management, core functionality</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_a68564adae713623b80263ca809403a7</data>
    </edge>
    <edge source="BufferedVectorStore" target="save">
      <data key="d4">The save method is essential for clearing the buffer and ensuring all data is properly saved to the base_store.</data>
      <data key="d5">data persistence, storage management</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_a68564adae713623b80263ca809403a7</data>
    </edge>
    <edge source="__init__" target="excerpt_fn">
      <data key="d4">The __init__ function initializes the excerpt_fn variable as part of the object's attributes.".</data>
      <data key="d5">initialization, assignment</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_626b4e89f477fe66f0fb4bd4a4928418</data>
    </edge>
    <edge source="__init__" target="embeddings_db">
      <data key="d4">The __init__ function sets up the embeddings_db variable, which stores embeddings for processing.".</data>
      <data key="d5">initialization, assignment</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_626b4e89f477fe66f0fb4bd4a4928418</data>
    </edge>
    <edge source="__init__" target="entities_db">
      <data key="d4">The __init__ function initializes the entities_db variable to manage entity data.".</data>
      <data key="d5">initialization, assignment</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_626b4e89f477fe66f0fb4bd4a4928418</data>
    </edge>
    <edge source="__init__" target="relationships_db">
      <data key="d4">The __init__ function creates the relationships_db variable to store entity relationships.".</data>
      <data key="d5">initialization, assignment</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_626b4e89f477fe66f0fb4bd4a4928418</data>
    </edge>
    <edge source="__init__" target="source_to_doc_kv">
      <data key="d4">The __init__ function initializes the source_to_doc_kv variable for source-document mappings.".</data>
      <data key="d5">initialization, assignment</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_626b4e89f477fe66f0fb4bd4a4928418</data>
    </edge>
    <edge source="__init__" target="doc_to_source_kv">
      <data key="d4">The __init__ method sets up the doc_to_source_kv variable for reverse lookups.".</data>
      <data key="d5">initialization, assignment</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_626b4e89f477fe66f0fb4bd4a4928418</data>
    </edge>
    <edge source="__init__" target="doc_to_excerpt_kv">
      <data key="d4">The __init__ function associates the document to excerpts through the doc_to_excerpt_kv variable.".</data>
      <data key="d5">initialization, assignment</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_626b4e89f477fe66f0fb4bd4a4928418</data>
    </edge>
    <edge source="__init__" target="excerpt_kv">
      <data key="d4">The __init__ function initializes the excerpt_kv variable to handle excerpt mappings.".</data>
      <data key="d5">initialization, assignment</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_626b4e89f477fe66f0fb4bd4a4928418</data>
    </edge>
    <edge source="__init__" target="query_cache_kv">
      <data key="d4">The __init__ function initializes the query_cache_kv variable for query performance optimization.".</data>
      <data key="d5">initialization, assignment</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_626b4e89f477fe66f0fb4bd4a4928418</data>
    </edge>
    <edge source="__init__" target="embedding_cache_kv">
      <data key="d4">The __init__ function initializes the embedding_cache_kv variable to cache embeddings for efficiency.".</data>
      <data key="d5">initialization, assignment</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_626b4e89f477fe66f0fb4bd4a4928418</data>
    </edge>
    <edge source="__init__" target="graph_db">
      <data key="d4">The __init__ function initializes the graph_db variable to represent entities and their relationships.".</data>
      <data key="d5">initialization, assignment</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_626b4e89f477fe66f0fb4bd4a4928418</data>
    </edge>
    <edge source="__init__" target="dimensions">
      <data key="d4">The __init__ function defines the dimensions variable to specify data dimensionality.".</data>
      <data key="d5">initialization, assignment</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_626b4e89f477fe66f0fb4bd4a4928418</data>
    </edge>
    <edge source="__init__" target="excerpt_size">
      <data key="d4">The __init__ function sets up the excerpt_size variable to determine excerpt length.".</data>
      <data key="d5">initialization, assignment</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_626b4e89f477fe66f0fb4bd4a4928418</data>
    </edge>
    <edge source="__init__" target="overlap">
      <data key="d4">The __init__ function initializes the overlap variable to manage excerpt processing.".</data>
      <data key="d5">initialization, assignment</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_626b4e89f477fe66f0fb4bd4a4928418</data>
    </edge>
    <edge source="upsert" target="buffer">
      <data key="d4">The upsert method modifies the buffer by adding new items to it until it reaches the defined buffer_size.</data>
      <data key="d5">data handling, item addition</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_a68564adae713623b80263ca809403a7</data>
    </edge>
    <edge source="upsert" target="base_store">
      <data key="d4">The upsert method communicates with base_store to transfer buffered items when necessary.</data>
      <data key="d5">data transfer, storage</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_a68564adae713623b80263ca809403a7</data>
    </edge>
    <edge source="save" target="buffer">
      <data key="d4">The save method interacts with buffer to ensure its contents are processed and stored when needed.</data>
      <data key="d5">data processing, cleanup</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_a68564adae713623b80263ca809403a7</data>
    </edge>
    <edge source="save" target="base_store">
      <data key="d4">The save method ensures that both the buffer and base_store are updated and synchronized because of the interaction between them.</data>
      <data key="d5">data synchronization, integrity</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_a68564adae713623b80263ca809403a7</data>
    </edge>
    <edge source="Log Rotation" target="Disk Usage Optimization">
      <data key="d4">Log Rotation helps optimize disk usage by preventing log files from consuming excessive space.</data>
      <data key="d5">data management, efficiency</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_8a2aba64b4fd7ed53252f4a12ec587b7</data>
    </edge>
    <edge source="RotatingFileHandler" target="setup_rotating_logger">
      <data key="d4">setup_rotating_logger function incorporates RotatingFileHandler to manage log file rotation based on size limits.</data>
      <data key="d5">configuration, logging management</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_03b1ea2fb1b6593ee34fd158bd82fcb4</data>
    </edge>
    <edge source="RotatingFileHandler" target="setup_logger">
      <data key="d4">The setup_logger function utilizes RotatingFileHandler to manage log file rotation based on defined parameters.</data>
      <data key="d5">configuration, utilization</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_1b2e40e76edb8537fc654b87660704c7</data>
    </edge>
    <edge source="setup_rotating_logger" target="log_path">
      <data key="d4">log_path is a parameter for the setup_rotating_logger function, determining where logs will be saved.</data>
      <data key="d5">parameter, function dependency</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_03b1ea2fb1b6593ee34fd158bd82fcb4</data>
    </edge>
    <edge source="setup_rotating_logger" target="max_bytes">
      <data key="d4">max_bytes is a parameter for the setup_rotating_logger function that influences log file rotation based on size.</data>
      <data key="d5">parameter, function dependency</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_03b1ea2fb1b6593ee34fd158bd82fcb4</data>
    </edge>
    <edge source="setup_rotating_logger" target="backup_count">
      <data key="d4">backup_count is a parameter for the setup_rotating_logger function that specifies the number of backup log files to retain.</data>
      <data key="d5">parameter, function dependency</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_03b1ea2fb1b6593ee34fd158bd82fcb4</data>
    </edge>
    <edge source="log_path" target="log_file">
      <data key="d4">The log_path variable combines log_dir and log_file to create the full path for the log file.</data>
      <data key="d5">path building, file management</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_1b2e40e76edb8537fc654b87660704c7</data>
    </edge>
    <edge source="backup_count" target="setup_logger">
      <data key="d4">The backup_count parameter affects how many backup log files are kept after rotation in the setup_logger function.</data>
      <data key="d5">configuration parameter, backup management</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_1b2e40e76edb8537fc654b87660704c7</data>
    </edge>
    <edge source="Memory-mapped Files" target="Large Datasets">
      <data key="d4">Memory-mapped files are specifically used to handle and manipulate large datasets, making them more accessible for processing.</data>
      <data key="d5">data management, efficiency</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_d30c64f1e14764398992e0084b90178e</data>
    </edge>
    <edge source="dimensions" target="excerpt_size">
      <data key="d4">excerpt_size and dimensions are both parameters that define aspects of the chunking process within SmolRag.</data>
      <data key="d5">parameter relationship, configuration</data>
      <data key="d6">5.0</data>
      <data key="d7">excerpt_id_3349f76d73e7efb0528eeee4c6101216</data>
    </edge>
    <edge source="dimensions" target="MemoryEfficientVectorStore">
      <data key="d4">MemoryEfficientVectorStore initializes its operation based on dimensions, indicating the size of the vectors being handled.</data>
      <data key="d5">configuration, vector management</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_902f74e2a13563ad2b6088a90d1308d6</data>
    </edge>
    <edge source="initialize" target="MemoryEfficientVectorStore">
      <data key="d4">initialize is a method within MemoryEfficientVectorStore that sets up the necessary parameters at creation time.</data>
      <data key="d5">setup, class functionality</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_902f74e2a13563ad2b6088a90d1308d6</data>
    </edge>
    <edge source="app/logs/main.log" target="grep">
      <data key="d4">grep searches the main log file for error messages, helping in error identification.</data>
      <data key="d5">error detection, file search</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_2367c566864db88a866eced295cee581</data>
    </edge>
    <edge source="app/logs/main.log" target="tail">
      <data key="d4">tail monitors changes in the main log file in real-time, allowing for immediate visibility of new log entries.</data>
      <data key="d5">real-time monitoring, data streaming</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_2367c566864db88a866eced295cee581</data>
    </edge>
    <edge source="set_logger" target="log_file_name">
      <data key="d4">The log_file_name variable is used as an argument in the set_logger function to specify the destination of the log messages.:|:set_logger uses log_file_name as an input to determine where to log messages, linking the function to the variable.</data>
      <data key="d5">function parameter, logging destination:|:function-parameter, configuration</data>
      <data key="d6">14.0</data>
      <data key="d7">excerpt_id_d2c1e8835d374f0d3253b7ad5939d44b:|:excerpt_id_ff2948688845f254196d48787ccadd8f</data>
    </edge>
    <edge source="Data Files" target="Inspect">
      <data key="d4">The function of Inspect is directly applied to the variable Data Files in order to identify issues.</data>
      <data key="d5">analysis, troubleshooting</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_66acf30f4fead90713b8fa60aa8c8fcd</data>
    </edge>
    <edge source="data files" target="file sizes">
      <data key="d4">The existence of data files is directly related to the sizes that can be checked, as each file will have size attributes.</data>
      <data key="d5">file attributes, storage</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_a3aaac715dfc16efed6435e6b910c223</data>
    </edge>
    <edge source="vector store files" target="embeddings.db">
      <data key="d4">The existence check for the vector store files specifically references the embeddings.db file, indicating its importance in that context.</data>
      <data key="d5">specific file, existence check</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_a3aaac715dfc16efed6435e6b910c223</data>
    </edge>
    <edge source="read_file" target="utilities.py">
      <data key="d4">The read_file function is a utility defined within the utilities.py file for file handling operations.</data>
      <data key="d5">functional relationship, organizational structure</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_900d5e18a5cfe07ed9e4aa24282973e4</data>
    </edge>
    <edge source="preserve_markdown_code_excerpts" target="chunks">
      <data key="d4">"The preserve_markdown_code_excerpts function generates the chunks variable by processing the content variable."\</data>
      <data key="d5">data processing</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_c1b3890c12c9544c940bd001ae647dce</data>
    </edge>
    <edge source="preserve_markdown_code_excerpts" target="excerpt_fn">
      <data key="d4">preserve_markdown_code_excerpts is another chunking function available within the SmolRag API alongside excerpt_fn.</data>
      <data key="d5">alternative, functionality</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_3349f76d73e7efb0528eeee4c6101216</data>
    </edge>
    <edge source="len" target="chunks">
      <data key="d4">"The len function is also used to determine the number of chunks created from the original content."\</data>
      <data key="d5">size measurement</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_c1b3890c12c9544c940bd001ae647dce</data>
    </edge>
    <edge source="chunks" target="current_chunk">
      <data key="d4">The chunks list is populated with the current_chunk variable once a complete chunk of text has been created.</data>
      <data key="d5">chunk creation, accumulation</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_b448f2ca1ed64ac27b528bb6bed67d93</data>
    </edge>
    <edge source="Minimal Reproduction" target="Issue">
      <data key="d4">Creating a Minimal Reproduction helps in isolating the Issue, making it easier to identify and address the problem.</data>
      <data key="d5">problem-solving, troubleshooting</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_a9ebd5c6976d32616fc23555151992cf</data>
    </edge>
    <edge source="DATA_DIR" target="import_documents">
      <data key="d4">The import_documents function likely relies on the DATA_DIR configuration to locate files for importing.</data>
      <data key="d5">data source, configuration dependence</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_fcb87a80b68c38981b549c5658a74b5b</data>
    </edge>
    <edge source="DATA_DIR" target="definitions.py">
      <data key="d4">DATA_DIR is specified in definitions.py as the default directory for storing vector databases and data relevant to SmolRAG.</data>
      <data key="d5">definition, configuration</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_b0d4e3abf98287ec9c0b65e83c50a4f5</data>
    </edge>
    <edge source="LOG_DIR" target="definitions.py">
      <data key="d4">LOG_DIR is also present in definitions.py, showing its significance in storing log files for tracking application activity.</data>
      <data key="d5">definition, configuration</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_b0d4e3abf98287ec9c0b65e83c50a4f5</data>
    </edge>
    <edge source="excerpt_size" target="overlap">
      <data key="d4">excerpt_size and overlap are both configurable parameters that impact how document chunking is performed by SmolRag.</data>
      <data key="d5">parameter relationship, configuration</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_3349f76d73e7efb0528eeee4c6101216</data>
    </edge>
    <edge source="excerpt_size" target="Your Custom Function">
      <data key="d4">The `excerpt_size` parameter is a critical input for `Your Custom Function`, directly influencing the size of the text chunks it generates.</data>
      <data key="d5">function parameters, chunk size</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_d256b3e352fdb14aff55223ceb48a24a</data>
    </edge>
    <edge source="overlap" target="Your Custom Function">
      <data key="d4">The `overlap` parameter is another key input for `Your Custom Function`, determining the extent of overlap in the generated text chunks.</data>
      <data key="d5">function parameters, text chunking</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_d256b3e352fdb14aff55223ceb48a24a</data>
    </edge>
    <edge source="System Resources" target="Check System Resources">
      <data key="d4">Check System Resources function directly monitors the status and performance of System Resources, indicating their dependency on each other.</data>
      <data key="d5">monitoring, dependency</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_fcfeaf32d1f7d79c36beb5b1e1ee4576</data>
    </edge>
    <edge source="check_system_resources" target="memory">
      <data key="d4">The check_system_resources function populates the memory variable with system memory information, which is then printed out.</data>
      <data key="d5">function output, data retrieval</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_2249047f50897aaf33539b74ade53916</data>
    </edge>
    <edge source="check_system_resources" target="disk">
      <data key="d4">The check_system_resources function retrieves disk usage data and stores it in the disk variable for output.</data>
      <data key="d5">function output, data retrieval</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_2249047f50897aaf33539b74ade53916</data>
    </edge>
    <edge source="memory" target="Available Memory">
      <data key="d4">The memory variable also provides available memory information, printed under the Available Memory feature in MB.</data>
      <data key="d5">data representation, feature use</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_2249047f50897aaf33539b74ade53916</data>
    </edge>
    <edge source="disk" target="Disk Usage">
      <data key="d4">The disk variable's data is represented under the Disk Usage feature to show the percentage of disk usage.</data>
      <data key="d5">data representation, feature use</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_2249047f50897aaf33539b74ade53916</data>
    </edge>
    <edge source="disk" target="Free Disk Space">
      <data key="d4">The disk variable provides free space information, representing it under the Free Disk Space feature in GB.</data>
      <data key="d5">data representation, feature use</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_2249047f50897aaf33539b74ade53916</data>
    </edge>
    <edge source="CPU Usage" target="Performance">
      <data key="d4">CPU Usage informs performance metrics as it signifies how much processing power SmolRAG requires during intensive operations.</data>
      <data key="d5">resource efficiency, performance metric</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_9b3e7699a2ad7cd3ed369e4a0e702290</data>
    </edge>
    <edge source="Disk Usage" target="Performance">
      <data key="d4">Disk Usage plays a role in performance since insufficient storage can affect SmolRAG's ability to operate efficiently.</data>
      <data key="d5">resource efficiency, performance metric</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_9b3e7699a2ad7cd3ed369e4a0e702290</data>
    </edge>
    <edge source="Community Forums" target="Project Maintainers">
      <data key="d4">Project Maintainers interact with the Community Forums to assist users in resolving issues related to SmolRAG.</data>
      <data key="d5">user engagement, support</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_ff13dc4b945b67da62f3fade912e8d3f</data>
    </edge>
    <edge source="Usage Examples" target="Code Snippets">
      <data key="d4">Usage Examples provide Code Snippets as part of the practical illustrations for using SmolRAG.</data>
      <data key="d5">illustration, educational material</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_4aef7238aeefda715071f4fd758b3293</data>
    </edge>
    <edge source="Instance" target="Document Ingestion Example">
      <data key="d4">The Document Ingestion Example provides instructions on how to utilize the Instance for importing documents.</data>
      <data key="d5">usage, instruction</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_7e70042d92c65d0381abf750e7b75435</data>
    </edge>
    <edge source="input_docs" target="Import Documents">
      <data key="d4">input_docs serves as the source from which documents are imported when using the Import Documents function.</data>
      <data key="d5">data management, source location</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_205fdf069c880aa423620b06adfdb6c1</data>
    </edge>
    <edge source="Import Documents" target="Query">
      <data key="d4">The Import Documents function allows for the ingestion of data which can then be queried using the Query function.</data>
      <data key="d5">data ingestion, retrieval</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_205fdf069c880aa423620b06adfdb6c1</data>
    </edge>
    <edge source="Query" target="Vector Search Query">
      <data key="d4">The Query function utilizes the Vector Search Query method to retrieve information from ingested documents.</data>
      <data key="d5">search methodology, information retrieval</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_205fdf069c880aa423620b06adfdb6c1</data>
    </edge>
    <edge source="embeddings" target="queries">
      <data key="d4">embeddings are utilized in the formulation of queries to semantically represent data within knowledge graphs.</data>
      <data key="d5">data representation, semantic retrieval</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_aac33e6269e8908ac443bfb0712e8462</data>
    </edge>
    <edge source="Knowledge Graph Query Methods" target="Mix Query Example">
      <data key="d4">The Mix Query Example demonstrates how different knowledge graph query methods are utilized for various questions.</data>
      <data key="d5">demonstration, application</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_f18a098e46a2044eb43b0d2c58ecc3e2</data>
    </edge>
    <edge source="API Endpoint" target="Response Object">
      <data key="d4">The Response Object captures the output from the API Endpoint after a request is processed, indicating the result of the interactions with SmolRAG.</data>
      <data key="d5">output capture, result transmission</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_04b29d6443a2c6106c835c2ddeda4287</data>
    </edge>
    <edge source="API Endpoint" target="Headers">
      <data key="d4">Headers are necessary configurations for the API Endpoint, informing it how to manage the incoming requests and responses.</data>
      <data key="d5">request configuration, content type</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_04b29d6443a2c6106c835c2ddeda4287</data>
    </edge>
    <edge source="source_to_doc_kv" target="document.md">
      <data key="d4">source_to_doc_kv maps the file path of document.md to its document ID for easy removal.</data>
      <data key="d5">file mapping, document management</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_bc521abc84233a86888a005c7e9c0668</data>
    </edge>
    <edge source="excerpt_fn" target="naive_overlap_excerpts">
      <data key="d4">excerpt_fn by default uses naive_overlap_excerpts for document chunking, indicating a direct relationship between the two.</data>
      <data key="d5">implementation, functionality</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_3349f76d73e7efb0528eeee4c6101216</data>
    </edge>
    <edge source="Document Querying" target="Knowledge Extraction">
      <data key="d4">Document Querying and Knowledge Extraction are interconnected functions within SmolRAG that enhance its effectiveness.</data>
      <data key="d5">functionality, interconnection</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_c5fc9102d2349644a3809cad72f71169</data>
    </edge>
    <edge source="Excerpt Embeddings" target="Retrieval Capabilities">
      <data key="d4">Excerpt embeddings significantly enhance the system's retrieval capabilities by capturing semantic meaning.</data>
      <data key="d5">embedding function, semantic retrieval</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_57292a4a5cf5ae55025a640b2ddac8b8</data>
    </edge>
    <edge source="OpenAI's Embedding API" target="Embedding Generation Process">
      <data key="d4">The embedding generation process includes an API call to OpenAI's embedding API to create vector representations.</data>
      <data key="d5">process component, API usage</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_dc80c8904c8ce4e245e92a5bec8771ed</data>
    </edge>
    <edge source="text-embedding-3-small" target="OpenAI embedding models">
      <data key="d4">text-embedding-3-small is a specific case of OpenAI embedding models that can be used by the system.</data>
      <data key="d5">model classification, embedding options</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_96986ce98a0ff5dd646eb68683799151</data>
    </edge>
    <edge source="1536" target="Configurable Dimensions">
      <data key="d4">1536 is the default dimension, while Configurable Dimensions allows changing this based on needs.</data>
      <data key="d5">dimension specification, flexibility</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_96986ce98a0ff5dd646eb68683799151</data>
    </edge>
    <edge source="Summary Integration" target="Contextual Awareness">
      <data key="d4">Summary Integration is part of the features that contribute to Contextual Awareness within the embeddings.</data>
      <data key="d5">feature interaction, embedding process</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_96986ce98a0ff5dd646eb68683799151</data>
    </edge>
    <edge source="Indexing" target="Vector Search Query Optimization">
      <data key="d4">Indexing is a critical technique within Vector Search Query Optimization aimed at reducing search times for queries.</data>
      <data key="d5">optimization technique, efficiency</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_773dc5e90c361202bafd4c70106e3c4a</data>
    </edge>
    <edge source="Entity Embeddings" target="Relationship Embeddings">
      <data key="d4">Both Entity and Relationship Embeddings serve as fundamental methods of representation in the system, aiding in semantic understanding.:|:Entity Embeddings and Relationship Embeddings are both generated to enhance the system's understanding of data.</data>
      <data key="d5">representation methods, semantic understanding:|:data representation, embedding generation</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_4869439483a23885f8fdf7f5e9c7039f:|:excerpt_id_4b68104ae9ba6f2fafa3669fefa1839b</data>
    </edge>
    <edge source="Entity Embeddings" target="Separate Storage">
      <data key="d4">Separate Storage practices help manage Entity Embeddings independently from excerpt embeddings, ensuring organized storage.</data>
      <data key="d5">data organization, management</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_4b68104ae9ba6f2fafa3669fefa1839b</data>
    </edge>
    <edge source="Entity Embeddings" target="Cross-Referencing">
      <data key="d4">Cross-Referencing maintains links between Entity Embeddings and their respective excerpts, enabling contextual understanding.</data>
      <data key="d5">contextual connection, relational mapping</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_4b68104ae9ba6f2fafa3669fefa1839b</data>
    </edge>
    <edge source="Relationship Embeddings" target="Separate Storage">
      <data key="d4">Separate Storage allows Relationship Embeddings to be stored distinctly, aiding in clarity and access.</data>
      <data key="d5">managed storage, clarity</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_4b68104ae9ba6f2fafa3669fefa1839b</data>
    </edge>
    <edge source="Relationship Embeddings" target="Cross-Referencing">
      <data key="d4">Cross-Referencing ensures that Relationship Embeddings are associated with relevant entities for comprehensive analysis.</data>
      <data key="d5">analysis framework, connectivity</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_4b68104ae9ba6f2fafa3669fefa1839b</data>
    </edge>
    <edge source="Cross-Referencing" target="Dedicated Vector Stores">
      <data key="d4">Cross-Referencing ensures that the connections maintained within the Dedicated Vector Stores allow for coherent data retrieval.</data>
      <data key="d5">data linkage, retrieval coherence</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_4869439483a23885f8fdf7f5e9c7039f</data>
    </edge>
    <edge source="Semantic Drift" target="Weaknesses">
      <data key="d4">Semantic Drift indicates a weakness as it may lead to retrieval of irrelevant excerpts despite similarity.</data>
      <data key="d5">irrelevance, limitations</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_fd5970a76cf7d27c6af5388563268de1</data>
    </edge>
    <edge source="Domain Specificity" target="Strengths and Limitations of the Knowledge Graph Approach">
      <data key="d4">Domain Specificity identifies the variable quality of extraction efficacy depending on the specific content area involved.</data>
      <data key="d5">limitation, variability</data>
      <data key="d6">4.0</data>
      <data key="d7">excerpt_id_c911a970aeaf57b302869e9d148ac6c8</data>
    </edge>
    <edge source="COMPLETION_MODEL" target="EMBEDDING_MODEL">
      <data key="d4">These models represent different functionalities within the OpenAI ecosystem, with COMPLTION_MODEL focusing on text generation and EMBEDDING_MODEL on creating embeddings.</data>
      <data key="d5">functional differentiation, model capabilities</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_349e9f1cbc2638830c72cc4737f1ee78</data>
    </edge>
    <edge source="definitions.py" target="smol_rag.py">
      <data key="d4">definitions.py provides constants and paths that smol_rag.py references for operation.</data>
      <data key="d5">configuration, reference</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_f1fae642defef59936a03b705fb37221</data>
    </edge>
    <edge source="naive_overlap_excerpts" target="Code Block Preservation">
      <data key="d4">Code Block Preservation is incorporated in the naive_overlap_excerpts function to preserve the integrity of code structures during chunking.</data>
      <data key="d5">functionality integration, integrity</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_2bc6d678c54740db5acd63566371648d</data>
    </edge>
    <edge source="Vector Stores" target="Knowledge Graph Configuration">
      <data key="d4">Vector Stores are a configurable aspect of the Knowledge Graph, determining how data dimensions and locations are managed.</data>
      <data key="d5">data management, customization</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_11ec8cca8bde6a6c952520bf8d71db92</data>
    </edge>
    <edge source="Knowledge Graph Configuration" target="Custom Graph Store">
      <data key="d4">Custom Graph Store is part of the Knowledge Graph Configuration process, allowing for tailored setups of data storage.</data>
      <data key="d5">customization, configuration</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_11ec8cca8bde6a6c952520bf8d71db92</data>
    </edge>
    <edge source="prompts.py" target="smol_rag.py">
      <data key="d4">smol_rag.py employs prompts.py to utilize predefined system prompts in its functionality.</data>
      <data key="d5">system prompts, functionality</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_f1fae642defef59936a03b705fb37221</data>
    </edge>
    <edge source="Key-Value Store Configuration" target="Custom Key-Value Stores">
      <data key="d4">The Key-Value Store Configuration allows for the creation of Custom Key-Value Stores for various purposes.</data>
      <data key="d5">configuration, customization</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_48308b4707045e24b9b6c640c0048cbd</data>
    </edge>
    <edge source="query()" target="local_kg_query()">
      <data key="d4">Both are functions within SmolRAG related to querying data, one specifically for vector search and the other for local knowledge graphs.</data>
      <data key="d5">querying functions, functionality</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_c289d1319a7b3fb8268c5d19dc2d9f0b</data>
    </edge>
    <edge source="query()" target="global_kg_query()">
      <data key="d4">Both functions are part of SmolRAG's query processing, targeting different types of data sources.</data>
      <data key="d5">querying functions, functionality</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_c289d1319a7b3fb8268c5d19dc2d9f0b</data>
    </edge>
    <edge source="local_kg_query()" target="hybrid_kg_query()">
      <data key="d4">Local knowledge graph querying can be part of a broader hybrid approach when utilizing hybrid_kg_query().</data>
      <data key="d5">querying methods, function relationship</data>
      <data key="d6">5.0</data>
      <data key="d7">excerpt_id_c289d1319a7b3fb8268c5d19dc2d9f0b</data>
    </edge>
    <edge source="global_kg_query()" target="hybrid_kg_query()">
      <data key="d4">Global knowledge graph querying can also be integrated within the hybrid querying method.</data>
      <data key="d5">querying methods, function relationship</data>
      <data key="d6">5.0</data>
      <data key="d7">excerpt_id_c289d1319a7b3fb8268c5d19dc2d9f0b</data>
    </edge>
    <edge source="app/logger.py" target="Custom Logging">
      <data key="d4">Custom Logging allows for modifications through the app/logger.py file, enabling tailored logging solutions.</data>
      <data key="d5">configuration, customization</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_8ae4948b96c52786e166f40ab294103d</data>
    </edge>
    <edge source="Log File" target="set_logger()">
      <data key="d4">The set_logger() function directly specifies the Log File to be used for logging activities.</data>
      <data key="d5">setup process, logging</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_3fd1a58eeaa912433874e73ee5da0842</data>
    </edge>
    <edge source="set_logger()" target="logger.py">
      <data key="d4">The set_logger function is defined within the logger.py module, indicating its role in configuring logging settings.</data>
      <data key="d5">configuration, logging setup</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_18b7236af033065c11ace3034fa8761a</data>
    </edge>
    <edge source="main.py" target="middleware">
      <data key="d4">The main.py file can include middleware which modifies the request and response handling for the FastAPI application.</data>
      <data key="d5">configuration, feature integration</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_07384bef2559980ac5dc719b7a30dc2d</data>
    </edge>
    <edge source="main.py" target="error handlers">
      <data key="d4">The main.py file defines error handlers that manage how errors are processed within the FastAPI application.</data>
      <data key="d5">configuration, error management</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_07384bef2559980ac5dc719b7a30dc2d</data>
    </edge>
    <edge source="main.py" target="api/">
      <data key="d4">main.py defines the API endpoints for the api directory, facilitating communication with the SmolRAG system.</data>
      <data key="d5">endpoint definition, communication</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_f1fae642defef59936a03b705fb37221</data>
    </edge>
    <edge source="Query Endpoint Configuration" target="api/main.py">
      <data key="d4">The Query Endpoint Configuration is related to 'api/main.py' as it outlines the customization options available in this specific API script.</data>
      <data key="d5">configuration, customization</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_bd16dc4528b3a8fec2746d31d98360e2</data>
    </edge>
    <edge source="Markdown files" target="supported formats">
      <data key="d4">Markdown files are categorized as one of the supported formats that SmolRAG can process for ingestion.</data>
      <data key="d5">file type, compatibility</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_f2b7fbadfa83b8b0ea536a4b85fef7d6</data>
    </edge>
    <edge source="File Identification" target="Metadata Extraction">
      <data key="d4">File Identification relies on Metadata Extraction to maintain important contextual information during the document ingestion.</data>
      <data key="d5">context maintenance, feature interaction</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_f2b7fbadfa83b8b0ea536a4b85fef7d6</data>
    </edge>
    <edge source="Default Chunking" target="Overlap Mechanism">
      <data key="d4">Default Chunking utilizes the Overlap Mechanism to ensure context is not lost, allowing effective continuity during document processing.</data>
      <data key="d5">document processing, context continuity</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_2bc6d678c54740db5acd63566371648d</data>
    </edge>
    <edge source="Contextual Summarization" target="Summary Purpose">
      <data key="d4">Contextual Summarization directly supports the Summary Purpose by enhancing each chunk to connect effectively with the document's content.</data>
      <data key="d5">content enhancement, purpose alignment</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_2bc6d678c54740db5acd63566371648d</data>
    </edge>
    <edge source="LLM-Based Approach" target="Fallback Mechanism">
      <data key="d4">The LLM-Based Approach is complemented by the Fallback Mechanism to ensure processing quality, even when initial summarization fails.</data>
      <data key="d5">quality assurance, process resilience</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_2bc6d678c54740db5acd63566371648d</data>
    </edge>
    <edge source="OpenAI's Embedding Models" target="Dimensionality">
      <data key="d4">Dimensionality is a configurable property of OpenAI's Embedding Models that defines the character of the generated embedding vectors.</data>
      <data key="d5">configuration property, model specification</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_2000936bfa184ddaaecfee9d1339bf97</data>
    </edge>
    <edge source="Entity Extraction" target="Embedding Generation">
      <data key="d4">Embedding Generation and Entity Extraction both require extensive API calls, impacting the overall efficiency of the ingestion process.</data>
      <data key="d5">API calls, process efficiency</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_410400e8efb55e29eb563d4e92c76993</data>
    </edge>
    <edge source="Entity Extraction" target="OpenAI's API">
      <data key="d4">OpenAI's API facilitates Entity Extraction by leveraging its models to identify entities from document contents.</data>
      <data key="d5">functional dependency, API usage</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_8ec1e476798fb46038b3e8a5c5907ec5</data>
    </edge>
    <edge source="Entity Extraction" target="Relationship Extraction">
      <data key="d4">Entity Extraction and Relationship Extraction are functions that work in tandem to identify and relate entities in document excerpts.</data>
      <data key="d5">function interdependence</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_50024a3e54a6af26f2a3993aa6d9e612</data>
    </edge>
    <edge source="Change Detection Mechanism" target="Document Ingestion Process">
      <data key="d4">The Change Detection Mechanism is involved in the Document Ingestion Process to ensure the information remains current.</data>
      <data key="d5">information currency, process enhancement</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_04830b46c6b9fee612a7e80e9b24cec2</data>
    </edge>
    <edge source="Content Hashing" target="Path-Based Tracking">
      <data key="d4">Content Hashing detects changes in documents which informs Path-Based Tracking on which documents to monitor for updates.</data>
      <data key="d5">change detection, tracking</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_efce5aab9b4130a5bb56f788c7389339</data>
    </edge>
    <edge source="Automatic Updates" target="Selective Processing">
      <data key="d4">Automatic Updates facilitate Selective Processing by ensuring only changed documents are updated in the system.</data>
      <data key="d5">update optimization, efficiency</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_efce5aab9b4130a5bb56f788c7389339</data>
    </edge>
    <edge source="Key-Value Stores" target="File Structure">
      <data key="d4">Key-Value Stores require a structured File Structure to manage their organization effectively for quick access.</data>
      <data key="d5">data organization, retrieval</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_efce5aab9b4130a5bb56f788c7389339</data>
    </edge>
    <edge source="Key-Value Stores" target="Disk Usage Optimization">
      <data key="d4">Key-Value Stores affect the overall storage space, making optimization essential.</data>
      <data key="d5">disk management, optimization</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_8a2aba64b4fd7ed53252f4a12ec587b7</data>
    </edge>
    <edge source="Serialization" target="Graph Storage">
      <data key="d4">Serialization allows Graph Storage to persist between sessions by saving the state of the graph.</data>
      <data key="d5">data persistence</data>
      <data key="d6">5.0</data>
      <data key="d7">excerpt_id_50024a3e54a6af26f2a3993aa6d9e612</data>
    </edge>
    <edge source="Performance Metrics" target="Warning System">
      <data key="d4">Performance Metrics provide measurable insights that can trigger the Warning System to alert users of potential issues.</data>
      <data key="d5">monitoring, user alerts</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_efce5aab9b4130a5bb56f788c7389339</data>
    </edge>
    <edge source="Document Ingestion Process" target="Modular Design">
      <data key="d4">The Modular Design allows the Document Ingestion Process to be customized and extended for various applications.</data>
      <data key="d5">customization, extensibility</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_04830b46c6b9fee612a7e80e9b24cec2</data>
    </edge>
    <edge source="Performance" target="Document Ingestion Time">
      <data key="d4">Document Ingestion Time is a key component of evaluating the performance of SmolRAG, affecting how quickly new data can be processed.</data>
      <data key="d5">performance metric, efficiency</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_9b3e7699a2ad7cd3ed369e4a0e702290</data>
    </edge>
    <edge source="Performance" target="Query Response Time">
      <data key="d4">Query Response Time is another critical aspect of performance that directly impacts the user experience with SmolRAG.</data>
      <data key="d5">performance metric, user experience</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_9b3e7699a2ad7cd3ed369e4a0e702290</data>
    </edge>
    <edge source="Performance" target="Embedding Generation Time">
      <data key="d4">Embedding Generation Time is vital for performance assessment as it relates to how quickly SmolRAG can generate document embeddings.</data>
      <data key="d5">performance metric, efficiency</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_9b3e7699a2ad7cd3ed369e4a0e702290</data>
    </edge>
    <edge source="Performance" target="Retrieval Precision">
      <data key="d4">Retrieval Precision is linked to performance, measuring how effectively SmolRAG retrieves relevant excerpts based on user queries.</data>
      <data key="d5">performance metric, effectiveness</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_9b3e7699a2ad7cd3ed369e4a0e702290</data>
    </edge>
    <edge source="Performance" target="Retrieval Recall">
      <data key="d4">Retrieval Recall is tied to performance assessment, indicating how many relevant results are returned in relation to what exists.</data>
      <data key="d5">performance metric, effectiveness</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_9b3e7699a2ad7cd3ed369e4a0e702290</data>
    </edge>
    <edge source="Performance" target="Response Quality">
      <data key="d4">Response Quality is a measure of how performance is evaluated in terms of the accuracy and helpfulness of responses given by SmolRAG.</data>
      <data key="d5">performance metric, user experience</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_9b3e7699a2ad7cd3ed369e4a0e702290</data>
    </edge>
    <edge source="Document Ingestion Performance" target="Chunking">
      <data key="d4">Document Ingestion Performance may be impacted by Chunking, which is resource-intensive and can create bottlenecks.</data>
      <data key="d5">bottlenecks, resource management</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_410400e8efb55e29eb563d4e92c76993</data>
    </edge>
    <edge source="Document Ingestion Performance" target="Summarization">
      <data key="d4">Document Ingestion Performance is also affected by the Summarization process, which can be slow due to API calls.</data>
      <data key="d5">API dependency, resource usage</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_410400e8efb55e29eb563d4e92c76993</data>
    </edge>
    <edge source="Document Ingestion Performance" target="Embedding Generation">
      <data key="d4">Embedding Generation directly contributes to the performance measures of Document Ingestion by requiring significant processing time.</data>
      <data key="d5">performance metrics, resource demands</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_410400e8efb55e29eb563d4e92c76993</data>
    </edge>
    <edge source="Document Ingestion Performance" target="Parallel Processing">
      <data key="d4">Parallel Processing boosts Document Ingestion Performance by allowing simultaneous handling of tasks like embedding generation.</data>
      <data key="d5">performance enhancement, multitasking</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_410400e8efb55e29eb563d4e92c76993</data>
    </edge>
    <edge source="Document Ingestion Performance" target="Chunking Strategy">
      <data key="d4">Chunking Strategy influences Document Ingestion Performance by determining how effectively documents are broken down for processing.</data>
      <data key="d5">strategy, performance optimization</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_410400e8efb55e29eb563d4e92c76993</data>
    </edge>
    <edge source="Embedding Generation" target="OpenAI's API">
      <data key="d4">OpenAI's API is used as a foundational tool for Embedding Generation, making the process possible.</data>
      <data key="d5">functional dependency, API usage</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_8ec1e476798fb46038b3e8a5c5907ec5</data>
    </edge>
    <edge source="Parallel Processing" target="Mix Query Optimization">
      <data key="d4">Parallel Processing is a strategy used in Mix Query Optimization to run different query types simultaneously, enhancing overall performance.</data>
      <data key="d5">efficiency, simultaneous execution</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_773dc5e90c361202bafd4c70106e3c4a</data>
    </edge>
    <edge source="Parallel Processing" target="Knowledge Graph and Vector Search Integration">
      <data key="d4">Parallel Processing is part of the Knowledge Graph and Vector Search Integration, highlighting efficiency in data retrieval.</data>
      <data key="d5">efficiency, concurrent processing</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_bb83e035cbe37d34b4684d22bfa2ceb5</data>
    </edge>
    <edge source="all_files" target="Processing Documents">
      <data key="d4">The all_files variable provides the input necessary for Processing Documents to function effectively.</data>
      <data key="d5">input source, operational efficiency</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_3ce40acc1fea7738cf20ce8f1ac25b52</data>
    </edge>
    <edge source="Processing Documents" target="print statement">
      <data key="d4">The print statement is used to communicate the progress of the Processing Documents function, creating a user feedback loop.</data>
      <data key="d5">user interface, progress tracking</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_3ce40acc1fea7738cf20ce8f1ac25b52</data>
    </edge>
    <edge source="Query Performance" target="Knowledge Graph Queries">
      <data key="d4">Knowledge Graph Queries can cause slowdowns in Query Performance due to their computational complexity.</data>
      <data key="d5">performance impact, efficiency</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_0cb743ef78a1b56785a004b70800d537</data>
    </edge>
    <edge source="Query Performance" target="LLM Generation">
      <data key="d4">The speed of LLM Generation impacts overall Query Performance, as delays here can lead to slower response times.</data>
      <data key="d5">performance impact, efficiency</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_0cb743ef78a1b56785a004b70800d537</data>
    </edge>
    <edge source="Query Performance" target="Context Size">
      <data key="d4">Context Size influences Query Performance; larger sizes can lead to increased LLM processing times and costs.</data>
      <data key="d5">performance impact, context management</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_0cb743ef78a1b56785a004b70800d537</data>
    </edge>
    <edge source="Query Performance" target="Embedding Caching">
      <data key="d4">Embedding Caching positively influences Query Performance by allowing for faster retrieval of query embeddings.</data>
      <data key="d5">optimization strategy, performance improvement</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_0cb743ef78a1b56785a004b70800d537</data>
    </edge>
    <edge source="Query Performance" target="Query Type Selection">
      <data key="d4">The choice of query type relates to Query Performance, as selecting the optimal method can improve retrieval times.</data>
      <data key="d5">optimization strategy, performance improvement</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_0cb743ef78a1b56785a004b70800d537</data>
    </edge>
    <edge source="Query Performance" target="Context Limitation">
      <data key="d4">Context Limitation is a strategy that can improve Query Performance by minimizing the processing load on the LLM.</data>
      <data key="d5">optimization strategy, performance improvement</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_0cb743ef78a1b56785a004b70800d537</data>
    </edge>
    <edge source="Knowledge Graph Queries" target="Local Knowledge Graph Query">
      <data key="d4">Local Knowledge Graph Query is a specific implementation of Knowledge Graph Queries focused on low-level keywords.</data>
      <data key="d5">query type, specificity</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_4869439483a23885f8fdf7f5e9c7039f</data>
    </edge>
    <edge source="Knowledge Graph Queries" target="Global Knowledge Graph Query">
      <data key="d4">Global Knowledge Graph Query works in parallel to Local Knowledge Graph Query, targeting high-level keywords for comprehensive searches.</data>
      <data key="d5">query type, comprehensive search</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_4869439483a23885f8fdf7f5e9c7039f</data>
    </edge>
    <edge source="Query Type Selection" target="Domain-Specific Defaults">
      <data key="d4">Domain-Specific Defaults are a key aspect of Query Type Selection, as they provide consistent query performance tailored to known domains.</data>
      <data key="d5">optimization, efficiency</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_88e075052f43c91ba2dc0e70fd71388d</data>
    </edge>
    <edge source="Query Type Selection" target="Python API">
      <data key="d4">The Python API is designed to facilitate Query Type Selection, enhancing the integration of query selection capabilities into applications.</data>
      <data key="d5">integration, functionality</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_88e075052f43c91ba2dc0e70fd71388d</data>
    </edge>
    <edge source="MemoryEfficientVectorStore" target="add_vector">
      <data key="d4">add_vector is a function within MemoryEfficientVectorStore that aims to modify its contents by adding new vectors.</data>
      <data key="d5">functionality, data manipulation</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_902f74e2a13563ad2b6088a90d1308d6</data>
    </edge>
    <edge source="Disk Usage Optimization" target="Vector Database Files">
      <data key="d4">Vector Database Files are a major contributor to disk usage, thus optimization must consider their management.</data>
      <data key="d5">disk management, optimization</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_8a2aba64b4fd7ed53252f4a12ec587b7</data>
    </edge>
    <edge source="Disk Usage Optimization" target="Knowledge Graph Files">
      <data key="d4">Knowledge Graph Files also significantly impact disk usage, necessitating optimization strategies for storage.</data>
      <data key="d5">disk management, optimization</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_8a2aba64b4fd7ed53252f4a12ec587b7</data>
    </edge>
    <edge source="Disk Usage Optimization" target="Log Files">
      <data key="d4">Log Files can grow large if not managed properly, thus requiring optimization practices like log rotation.</data>
      <data key="d5">disk management, optimization</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_8a2aba64b4fd7ed53252f4a12ec587b7</data>
    </edge>
    <edge source="Disk Usage Optimization" target="Selective Storage">
      <data key="d4">Selective Storage is a key strategy in optimizing disk usage by limiting stored information.</data>
      <data key="d5">data management, optimization</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_8a2aba64b4fd7ed53252f4a12ec587b7</data>
    </edge>
    <edge source="Disk Usage Optimization" target="Regular Cleanup">
      <data key="d4">Regular Cleanup directly contributes to Disk Usage Optimization by removing unnecessary data.</data>
      <data key="d5">data management, efficiency</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_8a2aba64b4fd7ed53252f4a12ec587b7</data>
    </edge>
    <edge source="Disk Usage Optimization" target="Efficient Serialization">
      <data key="d4">Efficient Serialization enhances storage efficiency, aiding in Disk Usage Optimization efforts.</data>
      <data key="d5">data management, efficiency</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_8a2aba64b4fd7ed53252f4a12ec587b7</data>
    </edge>
    <edge source="Log Files" target="Compression">
      <data key="d4">Compression can be applied to Log Files to reduce their size and optimize storage efficiency.</data>
      <data key="d5">data management, storage efficiency</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_8a2aba64b4fd7ed53252f4a12ec587b7</data>
    </edge>
    <edge source="setup_logger" target="log_dir">
      <data key="d4">The setup_logger function requires log_dir as an input parameter to determine where to store log files.</data>
      <data key="d5">input parameter, directory management</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_1b2e40e76edb8537fc654b87660704c7</data>
    </edge>
    <edge source="setup_logger" target="log_file">
      <data key="d4">The log_file is an input to the setup_logger function, defining the name of the log file created for logging.</data>
      <data key="d5">input parameter, file creation</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_1b2e40e76edb8537fc654b87660704c7</data>
    </edge>
    <edge source="setup_logger" target="max_size_mb">
      <data key="d4">The max_size_mb parameter influences the configuration of the log rotation settings within setup_logger.</data>
      <data key="d5">configuration parameter, file rotation</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_1b2e40e76edb8537fc654b87660704c7</data>
    </edge>
    <edge source="OpenAI's API" target="Excerpt Summarization">
      <data key="d4">OpenAI's API supports Excerpt Summarization by providing the necessary capabilities for generating document summaries.</data>
      <data key="d5">functional dependency, API usage</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_8ec1e476798fb46038b3e8a5c5907ec5</data>
    </edge>
    <edge source="OpenAI's API" target="Response Generation">
      <data key="d4">Response Generation relies on OpenAI's API to create final outputs based on processed inputs.</data>
      <data key="d5">functional dependency, API usage</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_8ec1e476798fb46038b3e8a5c5907ec5</data>
    </edge>
    <edge source="OpenAI's API" target="Batching">
      <data key="d4">Batching improves efficiency by allowing multiple requests to be handled in a single call to OpenAI's API.</data>
      <data key="d5">optimization strategy, efficiency</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_8ec1e476798fb46038b3e8a5c5907ec5</data>
    </edge>
    <edge source="OpenAI's API" target="Retry Logic">
      <data key="d4">Retry Logic ensures that API calls to OpenAI's API are robust by implementing retries on failure.</data>
      <data key="d5">optimization strategy, reliability</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_8ec1e476798fb46038b3e8a5c5907ec5</data>
    </edge>
    <edge source="Cloud Deployment" target="Containerization">
      <data key="d4">Cloud Deployment benefits from Containerization as it allows for consistent and scalable application operations in the cloud.</data>
      <data key="d5">deployment consistency, cloud advantages</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_9c072e3e78902159765fef2d7578e992</data>
    </edge>
    <edge source="Cloud Deployment" target="Kubernetes">
      <data key="d4">Kubernetes is a key technology within Cloud Deployment strategies for managing scale and orchestration of cloud services.</data>
      <data key="d5">orchestration, scalable management</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_9c072e3e78902159765fef2d7578e992</data>
    </edge>
    <edge source="Cloud Deployment" target="Serverless">
      <data key="d4">Serverless architecture is a model that fits well within Cloud Deployment, enabling automatic scaling without traditional server management.</data>
      <data key="d5">automatic scaling, effort reduction</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_9c072e3e78902159765fef2d7578e992</data>
    </edge>
    <edge source="Containerization" target="Docker Compose">
      <data key="d4">Docker Compose enables Containerization by allowing the definition and management of multi-container applications for deployment.</data>
      <data key="d5">application management, deployment facilitation</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_9c072e3e78902159765fef2d7578e992</data>
    </edge>
    <edge source="Containerization" target="Serverless Considerations">
      <data key="d4">Both Containerization and Serverless Considerations highlight essential practices for optimizing application deployment in the cloud, focusing on efficiency and resource usage.</data>
      <data key="d5">deployment optimization, efficiency</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_14e13330c8ba86a6d13d53a1fb558359</data>
    </edge>
    <edge source="Containerization" target="Kubernetes Resource Configuration">
      <data key="d4">Kubernetes Resource Configuration acts as an example that illustrates best practices in configuring resources for containerized applications.</data>
      <data key="d5">best practices, configuration</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_14e13330c8ba86a6d13d53a1fb558359</data>
    </edge>
    <edge source="smolrag-api-1" target="nginx">
      <data key="d4">smolrag-api-1 is a backend service that nginx depends on for forwarding requests, indicating a relationship where nginx acts as a reverse proxy for smolrag-api-1.</data>
      <data key="d5">dependency, reverse proxy</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_008fc08e29e3bf19179abebec59be58b</data>
    </edge>
    <edge source="smolrag-api-2" target="nginx">
      <data key="d4">smolrag-api-2 is also a backend service that nginx relies on for processing requests, showcasing the interdependent nature of APIs and nginx.</data>
      <data key="d5">dependency, reverse proxy</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_008fc08e29e3bf19179abebec59be58b</data>
    </edge>
    <edge source="Error Rates" target="Endurance Tests">
      <data key="d4">Endurance Tests are essential for tracking Error Rates over time, ensuring consistent performance without failures.</data>
      <data key="d5">long-term performance, reliability</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_455d1784b9bb6032796cf79e353f8434</data>
    </edge>
    <edge source="PerformanceMonitor" target="monitor">
      <data key="d4">The monitor interface is an instance of the PerformanceMonitor class, thus directly relates to its functionality.</data>
      <data key="d5">instance, functionality</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_47020e878f0731a6b5359fed2e4f08fa</data>
    </edge>
    <edge source="start" target="end">
      <data key="d4">The end function is designed to complement the start function by finalizing the operation and logging results.</data>
      <data key="d5">operational sequence, logging</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_47020e878f0731a6b5359fed2e4f08fa</data>
    </edge>
    <edge source="monitor" target="ingestion_stats">
      <data key="d4">The ingestion_stats variable is created to store the results of monitoring during the document ingestion process using the monitor.</data>
      <data key="d5">performance tracking, results storage</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_47020e878f0731a6b5359fed2e4f08fa</data>
    </edge>
    <edge source="monitor" target="query_stats">
      <data key="d4">The query_stats variable is created to store the results of monitoring during the query processing operation using the monitor.</data>
      <data key="d5">performance tracking, results storage</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_47020e878f0731a6b5359fed2e4f08fa</data>
    </edge>
    <edge source="Vector Search Query Optimization" target="Dimensionality Reduction">
      <data key="d4">Dimensionality Reduction serves as a method within Vector Search Query Optimization to simplify data structure and enhance processing speeds.</data>
      <data key="d5">optimization technique, data processing</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_773dc5e90c361202bafd4c70106e3c4a</data>
    </edge>
    <edge source="Vector Search Query Optimization" target="Query Preprocessing">
      <data key="d4">Query Preprocessing is another essential aspect of Vector Search Query Optimization, improving the quality of queries before embedding.</data>
      <data key="d5">optimization technique, query quality</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_773dc5e90c361202bafd4c70106e3c4a</data>
    </edge>
    <edge source="Knowledge Graph Query Optimization" target="Graph Indexing">
      <data key="d4">Graph Indexing is a foundational function that underpins Knowledge Graph Query Optimization for accelerating query retrieval.</data>
      <data key="d5">efficiency, structural optimization</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_773dc5e90c361202bafd4c70106e3c4a</data>
    </edge>
    <edge source="Knowledge Graph Query Optimization" target="Query Planning">
      <data key="d4">Query Planning enhances the performance of Knowledge Graph Query Optimization by providing a strategy for executing graph queries efficiently.</data>
      <data key="d5">efficiency, execution strategy</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_773dc5e90c361202bafd4c70106e3c4a</data>
    </edge>
    <edge source="Mix Query Optimization" target="Adaptive Strategies">
      <data key="d4">Adaptive Strategies contribute to Mix Query Optimization by allowing responsive alterations to query handling based on specific characteristics.</data>
      <data key="d5">dynamic adaptation, efficiency</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_773dc5e90c361202bafd4c70106e3c4a</data>
    </edge>
    <edge source="Mix Query Optimization" target="Result Merging">
      <data key="d4">Result Merging is integral to Mix Query Optimization as it defines how results are combined from multiple query types after processing.</data>
      <data key="d5">output integration, optimization</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_773dc5e90c361202bafd4c70106e3c4a</data>
    </edge>
    <edge source="parallel_query" target="ThreadPoolExecutor">
      <data key="d4">The parallel_query function employs the ThreadPoolExecutor interface to manage concurrent execution of queries.</data>
      <data key="d5">concurrency, execution management</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_183160e7c61e5a6948ec0efb28fbec13</data>
    </edge>
    <edge source="vector_search" target="combined_result">
      <data key="d4">The combined_result variable synthesizes results from the vector_search and knowledge_graph_query executions into a single output.</data>
      <data key="d5">result aggregation, output</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_183160e7c61e5a6948ec0efb28fbec13</data>
    </edge>
    <edge source="knowledge_graph_query" target="combined_result">
      <data key="d4">The combined_result variable represents the final output that includes results from both queries processed in parallel.</data>
      <data key="d5">result aggregation, output</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_183160e7c61e5a6948ec0efb28fbec13</data>
    </edge>
    <edge source="Benchmark Tests" target="Throughput">
      <data key="d4">Benchmark Tests directly measure the Throughput, indicating how well the system can process operations under standard conditions.</data>
      <data key="d5">performance measurement, operational efficiency</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_455d1784b9bb6032796cf79e353f8434</data>
    </edge>
    <edge source="Benchmark Tests" target="Simple Benchmark Script">
      <data key="d4">The Simple Benchmark Script is an example illustrating how Benchmark Tests are conducted to measure system performance.</data>
      <data key="d5">practical application, testing example</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_455d1784b9bb6032796cf79e353f8434</data>
    </edge>
    <edge source="Load Tests" target="Throughput">
      <data key="d4">Load Tests also measure Throughput, but under various loads to ensure the system can handle different traffic levels.</data>
      <data key="d5">performance measurement, traffic handling</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_455d1784b9bb6032796cf79e353f8434</data>
    </edge>
    <edge source="Stress Tests" target="Latency">
      <data key="d4">Stress Tests help assess Latency by pushing the system to its limits and measuring response times under pressure.</data>
      <data key="d5">performance limits, response times</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_455d1784b9bb6032796cf79e353f8434</data>
    </edge>
    <edge source="benchmark_queries" target="test_queries">
      <data key="d4">test_queries is used as input to the benchmark_queries function for performance assessments.</data>
      <data key="d5">input data, performance measurement</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_871ea4244ed66d033bd333acf9bf3bc4</data>
    </edge>
    <edge source="benchmark_queries" target="standard_results">
      <data key="d4">standard_results holds the results of benchmarking conducted with standard query types in the benchmark_queries function.</data>
      <data key="d5">variable holding, specific outputs</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_871ea4244ed66d033bd333acf9bf3bc4</data>
    </edge>
    <edge source="benchmark_queries" target="kg_results">
      <data key="d4">kg_results contains the results specifically for queries using the hybrid KG approach as part of the benchmark_queries function.</data>
      <data key="d5">variable holding, specific outputs</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_871ea4244ed66d033bd333acf9bf3bc4</data>
    </edge>
    <edge source="benchmark_queries" target="mix_results">
      <data key="d4">mix_results stores outcomes for benchmarks performed using mixed query methods in the benchmark_queries function.</data>
      <data key="d5">variable holding, specific outputs</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_871ea4244ed66d033bd333acf9bf3bc4</data>
    </edge>
    <edge source="smolrag-api" target="Deployment">
      <data key="d4">smolrag-api is deployed as part of a Deployment configuration in Kubernetes which manages its lifecycle and scale.</data>
      <data key="d5">deployment configuration, orchestration</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_4202bb5aefcb4272e5fc2efebff6fc46</data>
    </edge>
    <edge source="smolrag-api" target="resources">
      <data key="d4">The smolrag-api has defined resources indicating its memory and CPU requests and limits for running effectively in Kubernetes.</data>
      <data key="d5">resource management, container specifications</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_4202bb5aefcb4272e5fc2efebff6fc46</data>
    </edge>
    <edge source="smolrag-api" target="data-volume">
      <data key="d4">The data-volume is mounted to the smolrag-api for persistent storage of application data during operations.</data>
      <data key="d5">data management, persistent storage</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_4202bb5aefcb4272e5fc2efebff6fc46</data>
    </edge>
    <edge source="smolrag-api" target="docs-volume">
      <data key="d4">The docs-volume is mounted to the smolrag-api for access to necessary input documents for processing.</data>
      <data key="d5">document management, application functionality</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_4202bb5aefcb4272e5fc2efebff6fc46</data>
    </edge>
    <edge source="data-volume" target="smolrag-data-pvc">
      <data key="d4">The smolrag-data-pvc provides storage for the data-volume, ensuring data persistence in the smolrag-api's operation.</data>
      <data key="d5">persistent storage, volume management</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_4202bb5aefcb4272e5fc2efebff6fc46</data>
    </edge>
    <edge source="docs-volume" target="smolrag-docs-pvc">
      <data key="d4">The smolrag-docs-pvc provides storage for the docs-volume, supporting the smolrag-api with necessary documentation.</data>
      <data key="d5">persistent storage, volume management</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_4202bb5aefcb4272e5fc2efebff6fc46</data>
    </edge>
    <edge source="Query Processing" target="Performance Optimization Techniques">
      <data key="d4">Performance Optimization Techniques are also applicable to Query Processing to ensure rapid handling of queries in SmolRAG.</data>
      <data key="d5">efficiency techniques, optimization</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_33ec53332806b9871abe7246fe9d300e</data>
    </edge>
    <edge source="Entities" target="Entity Properties">
      <data key="d4">Entities have Entity Properties that define their attributes such as Name, Category, and Description, essential for identification.</data>
      <data key="d5">definition, attributes</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_9e82c97bd0829ec40084f1a45d364353</data>
    </edge>
    <edge source="Entities" target="Relationships">
      <data key="d4">Relationships connect Entities within the knowledge graph, illustrating how the distinct concepts interact with each other.</data>
      <data key="d5">connections, interaction</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_9e82c97bd0829ec40084f1a45d364353</data>
    </edge>
    <edge source="Relationships" target="Knowledge Graph Structure">
      <data key="d4">Knowledge Graph Structure encompasses Relationships to define how entities relate and interact within the system.</data>
      <data key="d5">organization, interaction</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_9e82c97bd0829ec40084f1a45d364353</data>
    </edge>
    <edge source="Relationship Extraction" target="Property Assignment">
      <data key="d4">Relationship Extraction leads to Property Assignment where assigned properties relate to extracted entities and relationships.</data>
      <data key="d5">process flow</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_50024a3e54a6af26f2a3993aa6d9e612</data>
    </edge>
    <edge source="Relationship Extraction" target="Entity Ranking">
      <data key="d4">After ranking, the top entities facilitate Relationship Extraction to gather their connected relationships.</data>
      <data key="d5">ranking process, relationship discovery</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_4869439483a23885f8fdf7f5e9c7039f</data>
    </edge>
    <edge source="Relationship Extraction" target="Context Construction">
      <data key="d4">Context Construction relies on the results from Relationship Extraction to create structured insights.</data>
      <data key="d5">contextualization, structured insights</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_4869439483a23885f8fdf7f5e9c7039f</data>
    </edge>
    <edge source="Property Assignment" target="Deduplication and Merging">
      <data key="d4">Property Assignment requires Deduplication and Merging to ensure that existing entity properties are accurately updated.</data>
      <data key="d5">data consistency</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_50024a3e54a6af26f2a3993aa6d9e612</data>
    </edge>
    <edge source="Deduplication and Merging" target="Graph Storage">
      <data key="d4">Deduplication and Merging is crucial for maintaining accurate Graph Storage of entities and relationships.</data>
      <data key="d5">data integrity</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_50024a3e54a6af26f2a3993aa6d9e612</data>
    </edge>
    <edge source="NetworkX" target="Graph Operations">
      <data key="d4">NetworkX provides the necessary framework for executing Graph Operations efficiently.</data>
      <data key="d5">framework utility</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_50024a3e54a6af26f2a3993aa6d9e612</data>
    </edge>
    <edge source="Graph Operations" target="Extensibility">
      <data key="d4">Extensibility allows Graph Operations to evolve by integrating new algorithms as required.</data>
      <data key="d5">scalability</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_50024a3e54a6af26f2a3993aa6d9e612</data>
    </edge>
    <edge source="Local Knowledge Graph Query" target="Entity Search">
      <data key="d4">Local Knowledge Graph Query directly utilizes Entity Search to find relevant entities based on extracted keywords.</data>
      <data key="d5">query process, entity retrieval</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_4869439483a23885f8fdf7f5e9c7039f</data>
    </edge>
    <edge source="Local Knowledge Graph Query" target="Implementation">
      <data key="d4">Implementation details the structured process essential for the effective execution of the local knowledge graph query.</data>
      <data key="d5">execution, structure</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_fd5970a76cf7d27c6af5388563268de1</data>
    </edge>
    <edge source="Global Knowledge Graph Query" target="Implementation">
      <data key="d4">Global Knowledge Graph Query defines the approach used to extract insights regarding relationships and connections.</data>
      <data key="d5">query strategy, relationship focus</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_52cf87d011ec9029460148508a439403</data>
    </edge>
    <edge source="Hybrid Knowledge Graph Query" target="Implementation">
      <data key="d4">Implementation describes the processes necessary for executing the Hybrid Knowledge Graph Query, indicating a direct relationship with its function.</data>
      <data key="d5">functionality, execution</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_4cd06704221cc59374c46e3d685f2e24</data>
    </edge>
    <edge source="Entity Search" target="Entity Ranking">
      <data key="d4">Entity Search leads into Entity Ranking, where found entities are scored for relevance and connectivity.</data>
      <data key="d5">search process, relevance scoring</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_4869439483a23885f8fdf7f5e9c7039f</data>
    </edge>
    <edge source="Global Knowledge Graph Query Process" target="Relationship Ranking">
      <data key="d4">Relationship Ranking is a subsequent step in the Global Knowledge Graph Query Process, helping prioritize connections.</data>
      <data key="d5">process sequencing, prioritization</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_bb83e035cbe37d34b4684d22bfa2ceb5</data>
    </edge>
    <edge source="Hybrid Knowledge Graph Query Process" target="Dual Search">
      <data key="d4">Dual Search is a key component of the Hybrid Knowledge Graph Query Process, demonstrating its dual approach to searches.</data>
      <data key="d5">methodology, dual approach</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_bb83e035cbe37d34b4684d22bfa2ceb5</data>
    </edge>
    <edge source="Knowledge Graph Maintenance and Updates" target="Consistency Checks">
      <data key="d4">Consistency Checks support the Knowledge Graph Maintenance and Updates by ensuring integrity during updates.</data>
      <data key="d5">maintenance, integrity</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_c911a970aeaf57b302869e9d148ac6c8</data>
    </edge>
    <edge source="Knowledge Graph Maintenance and Updates" target="Orphan Handling">
      <data key="d4">Orphan Handling is a function within Knowledge Graph Maintenance and Updates that manages irrelevant entities after updates.</data>
      <data key="d5">maintenance, management</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_c911a970aeaf57b302869e9d148ac6c8</data>
    </edge>
    <edge source="Knowledge Graph Maintenance and Updates" target="Graph Pruning">
      <data key="d4">Graph Pruning is an optional component in Knowledge Graph Maintenance and Updates designed to enhance clarity by removing less relevant elements.</data>
      <data key="d5">maintenance, optimization</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_c911a970aeaf57b302869e9d148ac6c8</data>
    </edge>
    <edge source="Strengths and Limitations of the Knowledge Graph Approach" target="Explicit Connections">
      <data key="d4">Explicit Connections are identified as a strength within the Strengths and Limitations concept, emphasizing clarity in relationships.</data>
      <data key="d5">strength, clarity</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_c911a970aeaf57b302869e9d148ac6c8</data>
    </edge>
    <edge source="Strengths and Limitations of the Knowledge Graph Approach" target="Structured Reasoning">
      <data key="d4">Structured Reasoning is a listed strength that enhances the interpretability of entities within the knowledge graph.</data>
      <data key="d5">strength, interpretation</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_c911a970aeaf57b302869e9d148ac6c8</data>
    </edge>
    <edge source="Strengths and Limitations of the Knowledge Graph Approach" target="Multi-Hop Reasoning">
      <data key="d4">Multi-Hop Reasoning is another strength allowing connections across several entities, enhancing the graph's analytical capabilities.</data>
      <data key="d5">strength, analysis</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_c911a970aeaf57b302869e9d148ac6c8</data>
    </edge>
    <edge source="Strengths and Limitations of the Knowledge Graph Approach" target="Explainability">
      <data key="d4">Explainability is highlighted as a strength, showing how graph structures are more accessible than vector embeddings.</data>
      <data key="d5">strength, accessibility</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_c911a970aeaf57b302869e9d148ac6c8</data>
    </edge>
    <edge source="Strengths and Limitations of the Knowledge Graph Approach" target="Extraction Quality">
      <data key="d4">Extraction Quality is identified as a limitation that impacts the overall effectiveness of the knowledge graph.</data>
      <data key="d5">limitation, impact</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_c911a970aeaf57b302869e9d148ac6c8</data>
    </edge>
    <edge source="Strengths and Limitations of the Knowledge Graph Approach" target="Coverage">
      <data key="d4">Coverage limits the comprehensiveness of the knowledge graph, indicating potential gaps in information.</data>
      <data key="d5">limitation, completeness</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_c911a970aeaf57b302869e9d148ac6c8</data>
    </edge>
    <edge source="Strengths and Limitations of the Knowledge Graph Approach" target="Complexity">
      <data key="d4">Complexity poses challenges to users of the knowledge graph, making queries more difficult to manage.</data>
      <data key="d5">limitation, usability</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_c911a970aeaf57b302869e9d148ac6c8</data>
    </edge>
    <edge source="Strengths and Limitations of the Knowledge Graph Approach" target="Scaling">
      <data key="d4">Scaling refers to resource challenges that arise as the knowledge graph expands, presenting a practical limitation.</data>
      <data key="d5">limitation, resource demand</data>
      <data key="d6">5.0</data>
      <data key="d7">excerpt_id_c911a970aeaf57b302869e9d148ac6c8</data>
    </edge>
    <edge source="Explicit Connections" target="Strengths">
      <data key="d4">Explicit Connections signify that the system captures clear links in documents, aligning with its strengths.</data>
      <data key="d5">clarity, connection</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_52cf87d011ec9029460148508a439403</data>
    </edge>
    <edge source="Complexity" target="Weaknesses">
      <data key="d4">Complexity is one of the Weaknesses identified that negatively affects query efficiency and effectiveness.</data>
      <data key="d5">query efficiency, inherent challenges</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_9320c4230ec563f6b23dbe9d38b855e0</data>
    </edge>
    <edge source="Complexity" target="Resource Intensity">
      <data key="d4">Resource Intensity and Complexity are both features of a particular query type that contribute to its overall demanding nature.</data>
      <data key="d5">feature attributes, demanding nature</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_86ba72aabf2293e7a459f9e7845c2894</data>
    </edge>
    <edge source="Complexity" target="Information Overload">
      <data key="d4">Information Overload is a consequence of the Complexity involved in processing certain query types, leading to excess information output.</data>
      <data key="d5">output challenges, complexity</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_86ba72aabf2293e7a459f9e7845c2894</data>
    </edge>
    <edge source="smol_rag.py" target="chunking.py">
      <data key="d4">smol_rag.py utilizes chunking.py to implement document chunking strategies, which supports the overall system functionality.</data>
      <data key="d5">functionality, support</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_f1fae642defef59936a03b705fb37221</data>
    </edge>
    <edge source="smol_rag.py" target="openai_llm.py">
      <data key="d4">smol_rag.py integrates openai_llm.py to leverage OpenAI's API in its operations.</data>
      <data key="d5">integration, external API</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_f1fae642defef59936a03b705fb37221</data>
    </edge>
    <edge source="smol_rag.py" target="vector_store.py">
      <data key="d4">The functionality of smol_rag.py includes interactions with vector_store.py for document query processing.</data>
      <data key="d5">query processing, interaction</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_f1fae642defef59936a03b705fb37221</data>
    </edge>
    <edge source="smol_rag.py" target="graph_store.py">
      <data key="d4">smol_rag.py incorporates graph_store.py to enhance its capabilities with knowledge graphs.</data>
      <data key="d5">knowledge management, enhancement</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_f1fae642defef59936a03b705fb37221</data>
    </edge>
    <edge source="smol_rag.py" target="kv_store.py">
      <data key="d4">smol_rag.py utilizes kv_store.py to manage data in a key-value format, supporting efficient data access.</data>
      <data key="d5">data management, efficiency</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_f1fae642defef59936a03b705fb37221</data>
    </edge>
    <edge source="smol_rag.py" target="utilities.py">
      <data key="d4">smol_rag.py uses utilities.py for various support functions necessary for its operation.</data>
      <data key="d5">support functions, utilization</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_f1fae642defef59936a03b705fb37221</data>
    </edge>
    <edge source="smol_rag.py" target="logger.py">
      <data key="d4">The logging configuration in logger.py is invoked by smol_rag.py to ensure activities are logged.</data>
      <data key="d5">logging, system monitoring</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_f1fae642defef59936a03b705fb37221</data>
    </edge>
    <edge source="utilities.py" target="get_query_system_prompt">
      <data key="d4">The get_query_system_prompt function is part of the utilities provided in the utilities.py file, showing its utility role in vector queries.</data>
      <data key="d5">functional relationship, organizational structure</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_900d5e18a5cfe07ed9e4aa24282973e4</data>
    </edge>
    <edge source="utilities.py" target="excerpt_summary_prompt">
      <data key="d4">The excerpt_summary_prompt function is defined within utilities.py, highlighting its utility for summarization tasks.</data>
      <data key="d5">functional relationship, organizational structure</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_900d5e18a5cfe07ed9e4aa24282973e4</data>
    </edge>
    <edge source="utilities.py" target="get_kg_query_system_prompt">
      <data key="d4">The get_kg_query_system_prompt function comes from utilities.py, underlining its relevance in knowledge graph queries.</data>
      <data key="d5">functional relationship, organizational structure</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_900d5e18a5cfe07ed9e4aa24282973e4</data>
    </edge>
    <edge source="utilities.py" target="get_mix_system_prompt">
      <data key="d4">The get_mix_system_prompt function is also featured in utilities.py, emphasizing its role in mixed queries.</data>
      <data key="d5">functional relationship, organizational structure</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_900d5e18a5cfe07ed9e4aa24282973e4</data>
    </edge>
    <edge source="utilities.py" target="get_docs">
      <data key="d4">The get_docs function operates as a utility in utilities.py, focusing on document retrieval.</data>
      <data key="d5">functional relationship, organizational structure</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_900d5e18a5cfe07ed9e4aa24282973e4</data>
    </edge>
    <edge source="utilities.py" target="make_hash">
      <data key="d4">The make_hash function is included in utilities.py, showcasing its utility for content identification.</data>
      <data key="d5">functional relationship, organizational structure</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_900d5e18a5cfe07ed9e4aa24282973e4</data>
    </edge>
    <edge source="utilities.py" target="split_string_by_multi_markers">
      <data key="d4">The split_string_by_multi_markers function belongs in utilities.py, addressing text processing needs.</data>
      <data key="d5">functional relationship, organizational structure</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_900d5e18a5cfe07ed9e4aa24282973e4</data>
    </edge>
    <edge source="utilities.py" target="clean_str">
      <data key="d4">The clean_str function is one of the utilities within utilities.py for text manipulation.</data>
      <data key="d5">functional relationship, organizational structure</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_900d5e18a5cfe07ed9e4aa24282973e4</data>
    </edge>
    <edge source="utilities.py" target="list_of_list_to_csv">
      <data key="d4">The list_of_list_to_csv function is provided in utilities.py to aid in data export for ease of use.</data>
      <data key="d5">functional relationship, organizational structure</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_900d5e18a5cfe07ed9e4aa24282973e4</data>
    </edge>
    <edge source="Document Chunking Implementation" target="Naive Overlap Excerpts">
      <data key="d4">Document Chunking Implementation includes the Naive Overlap Excerpts function as a strategy for splitting text into chunks.</data>
      <data key="d5">chunking strategy, document processing</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_c14bcfff661cc7a5b7c70532fd0b5d83</data>
    </edge>
    <edge source="Document Chunking Implementation" target="Preserve Markdown Code Excerpts">
      <data key="d4">Document Chunking Implementation also includes Preserve Markdown Code Excerpts function as a sophisticated strategy for maintaining document structure.</data>
      <data key="d5">chunking strategy, document processing</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_c14bcfff661cc7a5b7c70532fd0b5d83</data>
    </edge>
    <edge source="validate_request()" target="query_endpoint()">
      <data key="d4">The validate_request function is called within query_endpoint to ensure that incoming requests meet the expected schema.</data>
      <data key="d5">data validation, API integrity</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_18b7236af033065c11ace3034fa8761a</data>
    </edge>
    <edge source="query_endpoint()" target="QUERY_REQUEST">
      <data key="d4">The QueryRequest model defines the structure of data that the query_endpoint function processes, ensuring that incoming requests are valid.</data>
      <data key="d5">data validation, API functionality</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_18b7236af033065c11ace3034fa8761a</data>
    </edge>
    <edge source="query_endpoint()" target="error_handling">
      <data key="d4">Error handling mechanisms are integrated into query_endpoint to manage potential failures during request processing.</data>
      <data key="d5">system reliability, failure management</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_18b7236af033065c11ace3034fa8761a</data>
    </edge>
    <edge source="SmolRag class" target="Components">
      <data key="d4">The SmolRag class serves as the orchestrator for various Components, enabling them to work together seamlessly within the SmolRAG system.</data>
      <data key="d5">core functionality, orchestration</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_e87481ca8b130695eba22131f0d98381</data>
    </edge>
    <edge source="Strengths" target="Speed">
      <data key="d4">Speed is one of the strengths of the query type, contributing to its performance as the fastest option.</data>
      <data key="d5">performance, capability</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_fd5970a76cf7d27c6af5388563268de1</data>
    </edge>
    <edge source="Strengths" target="Simplicity">
      <data key="d4">Simplicity is another strength which emphasizes ease of implementation as a beneficial feature.</data>
      <data key="d5">ease of use, positive attribute</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_fd5970a76cf7d27c6af5388563268de1</data>
    </edge>
    <edge source="Strengths" target="Direct Matching">
      <data key="d4">Direct Matching is related to strengths as it determines the accuracy of finding relevant excerpts for queries.</data>
      <data key="d5">accuracy, performance</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_fd5970a76cf7d27c6af5388563268de1</data>
    </edge>
    <edge source="Strengths" target="Broad Coverage">
      <data key="d4">Broad Coverage showcases the ability of the query type to find information, emphasizing its effectiveness.</data>
      <data key="d5">effectiveness, reach</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_fd5970a76cf7d27c6af5388563268de1</data>
    </edge>
    <edge source="Strengths" target="Entity Focus">
      <data key="d4">Entity Focus is one of the key strengths, demonstrating effective searching of specific entities.</data>
      <data key="d5">capability, effectiveness</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_52cf87d011ec9029460148508a439403</data>
    </edge>
    <edge source="Strengths" target="Relationship Awareness">
      <data key="d4">Relationship Awareness is a strength that emphasizes the connections identified between entities.</data>
      <data key="d5">capability, connection recognition</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_52cf87d011ec9029460148508a439403</data>
    </edge>
    <edge source="Strengths" target="Fine-Grained Information">
      <data key="d4">Fine-Grained Information is a strength highlighting the detailed insights provided about specific concepts.</data>
      <data key="d5">capability, detail-oriented</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_52cf87d011ec9029460148508a439403</data>
    </edge>
    <edge source="Strengths" target="Structured Context">
      <data key="d4">Structured Context is part of the strengths that shows how information is presented logically.</data>
      <data key="d5">presentation, organization</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_52cf87d011ec9029460148508a439403</data>
    </edge>
    <edge source="Strengths" target="Weaknesses">
      <data key="d4">Weaknesses delineate the limitations of the system, contrasting with its strengths.</data>
      <data key="d5">contrast, limitations</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_52cf87d011ec9029460148508a439403</data>
    </edge>
    <edge source="Strengths" target="Conceptual Focus">
      <data key="d4">Conceptual Focus is identified as a strength, highlighting its role in providing broader conceptual insights.</data>
      <data key="d5">positive attribute, feature connection</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_4cd06704221cc59374c46e3d685f2e24</data>
    </edge>
    <edge source="Strengths" target="High-Level Connections">
      <data key="d4">High-Level Connections are a component of Strengths, emphasizing the ability to determine relationships among knowledge areas.</data>
      <data key="d5">positive attribute, feature connection</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_4cd06704221cc59374c46e3d685f2e24</data>
    </edge>
    <edge source="Strengths" target="Bird's-Eye View">
      <data key="d4">Bird's-Eye View contributes to Strengths by offering a broader perspective on topics, which is valued in analysis.</data>
      <data key="d5">positive attribute, feature connection</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_4cd06704221cc59374c46e3d685f2e24</data>
    </edge>
    <edge source="Strengths" target="Thematic Understanding">
      <data key="d4">Thematic Understanding is part of Strengths, demonstrating how it captures relationships across documents.</data>
      <data key="d5">positive attribute, feature connection</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_4cd06704221cc59374c46e3d685f2e24</data>
    </edge>
    <edge source="Weaknesses" target="Limited Context">
      <data key="d4">Limited Context outlines a weakness, highlighting the focus on individual excerpts without connecting them.</data>
      <data key="d5">limitations, information connections</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_fd5970a76cf7d27c6af5388563268de1</data>
    </edge>
    <edge source="Weaknesses" target="No Structured Reasoning">
      <data key="d4">No Structured Reasoning reflects a weakness in the capability to derive relationships between different concepts.</data>
      <data key="d5">reasoning limitations, drawbacks</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_fd5970a76cf7d27c6af5388563268de1</data>
    </edge>
    <edge source="Weaknesses" target="Missing Connections">
      <data key="d4">Missing Connections represent a weakness in identifying multi-hop connections among relationships.</data>
      <data key="d5">limitations, relationship traversal</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_fd5970a76cf7d27c6af5388563268de1</data>
    </edge>
    <edge source="Weaknesses" target="Limited Scope">
      <data key="d4">Limited Scope is identified as a weakness that restricts the system's analysis to specific entities.</data>
      <data key="d5">limitation, focus</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_52cf87d011ec9029460148508a439403</data>
    </edge>
    <edge source="Weaknesses" target="Extraction Dependence">
      <data key="d4">Extraction Dependence suggests that the quality of the system's output is reliant on the entity extraction process.</data>
      <data key="d5">dependency, quality</data>
      <data key="d6">5.0</data>
      <data key="d7">excerpt_id_52cf87d011ec9029460148508a439403</data>
    </edge>
    <edge source="Weaknesses" target="Missing Semantics">
      <data key="d4">Missing Semantics highlights the challenges in capturing all relevant information as a weakness.</data>
      <data key="d5">limitation, information gap</data>
      <data key="d6">5.0</data>
      <data key="d7">excerpt_id_52cf87d011ec9029460148508a439403</data>
    </edge>
    <edge source="Weaknesses" target="Narrow Context">
      <data key="d4">Narrow Context reflects on the system's tendency to consider only immediate connections as a weakness.</data>
      <data key="d5">limitation, focus</data>
      <data key="d6">5.0</data>
      <data key="d7">excerpt_id_52cf87d011ec9029460148508a439403</data>
    </edge>
    <edge source="Weaknesses" target="Keyword Sensitivity">
      <data key="d4">Keyword Sensitivity indicates that the system’s performance can be compromised by poor extraction quality.</data>
      <data key="d5">sensitivity, reliance</data>
      <data key="d6">5.0</data>
      <data key="d7">excerpt_id_52cf87d011ec9029460148508a439403</data>
    </edge>
    <edge source="Weaknesses" target="Less Detail">
      <data key="d4">Less Detail is highlighted as a limitation within Weaknesses, indicating a potential downsides of some queries.</data>
      <data key="d5">negative attribute, feature connection</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_4cd06704221cc59374c46e3d685f2e24</data>
    </edge>
    <edge source="Weaknesses" target="Information Overload">
      <data key="d4">Information Overload is a specific Weakness related to providing excessive information in responses.</data>
      <data key="d5">response quality, user experience</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_9320c4230ec563f6b23dbe9d38b855e0</data>
    </edge>
    <edge source="Weaknesses" target="Resource Intensity">
      <data key="d4">Resource Intensity signifies a Weakness relating to the need for more computational resources when processing complex queries.</data>
      <data key="d5">resource requirements, efficiency</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_9320c4230ec563f6b23dbe9d38b855e0</data>
    </edge>
    <edge source="Weaknesses" target="Balancing Challenge">
      <data key="d4">Balancing Challenge is a Weakness that reflects the difficulty in maintaining an optimal balance of information types in responses.</data>
      <data key="d5">information balance, query complexity</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_9320c4230ec563f6b23dbe9d38b855e0</data>
    </edge>
    <edge source="Weaknesses" target="Dependency Chain">
      <data key="d4">Dependency Chain is a Weakness associated with variability in the quality of entity and relationship extractions impacting outcomes.</data>
      <data key="d5">quality dependence, extraction variability</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_9320c4230ec563f6b23dbe9d38b855e0</data>
    </edge>
    <edge source="Resource Intensity" target="Query Time">
      <data key="d4">Query Time is affected by Resource Intensity, as heavier resource usages tend to lead to longer query times.</data>
      <data key="d5">performance, resource correlation</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_86ba72aabf2293e7a459f9e7845c2894</data>
    </edge>
    <edge source="Local KG" target="Comparative Analysis">
      <data key="d4">Local KG is referenced in the Comparative Analysis for its ability to deliver high detail related to specific entities.</data>
      <data key="d5">query types, analysis</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_86ba72aabf2293e7a459f9e7845c2894</data>
    </edge>
    <edge source="Hybrid KG" target="Query Type Selection Strategies">
      <data key="d4">Hybrid KG is mentioned as part of strategies for selecting query types due to its strengths and weaknesses.</data>
      <data key="d5">selection strategies, strengths/weaknesses</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_86ba72aabf2293e7a459f9e7845c2894</data>
    </edge>
    <edge source="Question Analysis" target="Iterative Refinement">
      <data key="d4">Question Analysis is a precursor to Iterative Refinement, as evaluating the question's focus aids in refining and improving the query process.</data>
      <data key="d5">process improvement, inquiry</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_88e075052f43c91ba2dc0e70fd71388d</data>
    </edge>
    <edge source="Response Time Requirements" target="Computational Resource Constraints">
      <data key="d4">Response Time Requirements must be balanced with Computational Resource Constraints to ensure optimal performance within system limits.</data>
      <data key="d5">balance, prioritization</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_88e075052f43c91ba2dc0e70fd71388d</data>
    </edge>
    <edge source="Query Type" target="Local KG Query">
      <data key="d4">Query Type also includes the Local KG Query as a specific option enhancing targeted data retrieval.</data>
      <data key="d5">query execution, selection</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_09efdd02089d4d4a3aa99a252d672b58</data>
    </edge>
    <edge source="Query Type" target="Global KG Query">
      <data key="d4">Query Type encompasses the Global KG Query, broadening the scope of data extraction.</data>
      <data key="d5">query execution, selection</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_09efdd02089d4d4a3aa99a252d672b58</data>
    </edge>
    <edge source="Query Type" target="Hybrid KG Query">
      <data key="d4">Query Type includes Hybrid KG Query as a method that combines different query approaches.</data>
      <data key="d5">query execution, selection</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_09efdd02089d4d4a3aa99a252d672b58</data>
    </edge>
    <edge source="JSON Configuration" target="API Configuration">
      <data key="d4">JSON Configuration provides the necessary parameters that define how API Configuration is implemented for queries.</data>
      <data key="d5">configuration structure, implementation</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_09efdd02089d4d4a3aa99a252d672b58</data>
    </edge>
    <edge source="Adaptive Query Selection" target="Personalized Query Processing">
      <data key="d4">Both features are part of SmolRAG's efforts to optimize user query experiences based on individual needs.</data>
      <data key="d5">user experience, optimization</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_e477d31a3d287e5594aac260eb346c86</data>
    </edge>
    <data key="d0">API functionality, query optimization, user experience</data>
  </graph>
</graphml>
