<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd">
  <key id="d7" for="edge" attr.name="excerpt_id" attr.type="string" />
  <key id="d6" for="edge" attr.name="weight" attr.type="double" />
  <key id="d5" for="edge" attr.name="keywords" attr.type="string" />
  <key id="d4" for="edge" attr.name="description" attr.type="string" />
  <key id="d3" for="node" attr.name="excerpt_id" attr.type="string" />
  <key id="d2" for="node" attr.name="description" attr.type="string" />
  <key id="d1" for="node" attr.name="category" attr.type="string" />
  <key id="d0" for="graph" attr.name="content_keywords" attr.type="string" />
  <graph edgedefault="undirected">
    <node id="SmolRAG">
      <data key="d1">organization:|:interface:|:api:|:function:|:feature:|:configuration</data>
      <data key="d2">SmolRAG is an application programming interface designed for various scenarios involving document querying, knowledge extraction, and reasoning tasks.:|:SmolRAG is an API designed for processing and analyzing text data efficiently, focusing on performance and scalability in handling large volumes of documents and queries.:|:SmolRAG is the overarching system that builds the knowledge graph by extracting entities and relationships from documents.:|:SmolRAG is a feature that utilizes mathematical measures for determining the similarity between vectors in language and meaning.:|:SmolRAG is portrayed as a system designed to enhance text embeddings and improve information retrieval capabilities across diverse document collections.:|:SmolRAG is a system designed for similarity search that includes various evaluation and enhancement mechanisms to improve search quality.:|:SmolRAG is an API that creates vector representations to capture semantic meaning, allowing for accurate and contextually relevant information retrieval.:|:SmolRAG is a system that leverages OpenAI's embedding models for generating vector representations of documents, enhancing search and retrieval processes.:|:SmolRAG is a feature that utilizes key-value stores for metadata, mappings, and caching, enabling customizable extraction methods.:|:SmolRAG is an API that facilitates document ingestion and processing in various formats, especially targeting text-based documents like Markdown.:|:SmolRAG is an application programming interface that facilitates document ingestion, entity extraction, and parallel processing using asyncio.:|:SmolRAG is a system designed for document change detection, storage, and persistence with robust mechanisms for ensuring data accuracy and consistency.:|:SmolRAG is an API that generates response text based on user queries, providing various functionalities for data retrieval.:|:SmolRAG is a system designed for creating vector embeddings and knowledge graphs from document content, enabling enhanced search capabilities.:|:SmolRAG is an API that provides similarity search capabilities, enabling users to find relevant document excerpts based on semantic similarity to a query using advanced vector embeddings.:|:SmolRAG is a sophisticated system designed for document chunking, summarization, and vector embedding generation, optimizing information retrieval.:|:SmolRAG is an API that facilitates the ingestion of documents for processing and query handling, and it must be initialized before use.:|:SmolRAG is a framework that utilizes different types of vector stores for embedding storage and retrieval, including customizable options for knowledge graphs and key-value stores.:|:SmolRAG is an organization that utilizes knowledge graphs in conjunction with vector embeddings to enhance search and reasoning capabilities.:|:SmolRAG is a cloud deployment feature that requires specific performance considerations for optimization in cloud environments.:|:SmolRAG is a configuration or framework mentioned for advanced users, likely intended for managing query processes with custom components.:|:SmolRAG is a knowledge graph system designed to maintain and update a knowledge graph based on changes in associated documents, facilitating structured reasoning and effective querying.:|:SmolRAG is an API designed to process and retrieve information based on queries related to various topics.:|:SmolRAG is a feature that provides robust similarity search capabilities, designed to address various challenges in information retrieval.:|:SmolRAG is a function designed to support the processing of individual files, indicating its purpose within a larger system.:|:SmolRAG is an API integrated into a Flask web application designed for querying documents efficiently.:|:SmolRAG is an API that incorporates both structured graph representations and vector embeddings for entities and relationships, enabling advanced query processing.:|:SmolRAG is an API that provides multiple query types to facilitate semantic search and knowledge graph interactions.:|:SmolRAG is an API that supports multiple query types to retrieve and reason with document-based knowledge effectively.:|:SmolRAG is a framework implementing techniques for managing document collections, including vector storage and optimization of search performance.:|:SmolRAG is an API designed to process and retrieve information based on various query types, indicating its role in information management and retrieval.:|:SmolRAG is a configuration for document retrieval and generation that includes specific parameters for customizing behavior, such as path definitions and initialization parameters.:|:SmolRAG is a framework that facilitates document chunking and uses LLM capabilities for managing and querying information.:|:SmolRAG is a feature that employs excerpt embeddings to enhance retrieval capabilities by capturing semantic meaning in text.:|:SmolRAG is a software tool that offers customizable configuration options, enhancing its behavior to meet specific user needs related to model selection and data handling.:|:SmolRAG is a knowledge graph system that incorporates both semantic search and structured knowledge representation to handle a variety of query types.:|:SmolRAG is an API designed for similarity search, enabling the retrieval of relevant information based on semantic meaning and conceptually similar content.:|:SmolRAG is a framework that integrates document chunking and language model capabilities, enabling customized text processing and analysis.:|:SmolRAG is a system that employs embedding-based similarity search mechanisms to retrieve information based on semantic meaning, enhancing retrieval accuracy.:|:SmolRAG is a lightweight retrieval-augmented generation system designed for fast, up-to-date querying of documents, focusing on simplicity, efficiency, and flexibility.:|:SmolRAG is an API that allows for various functionalities such as document management and interactions through a REST interface, supporting all the same query types as the Python interface.:|:SmolRAG is described as an advanced feature that offers configuration options for integrating custom components into existing systems.:|:SmolRAG is a lightweight retrieval-augmented generation system designed for fast, up-to-date querying of documents, utilizing vector embeddings, knowledge graphs, and large language models.:|:SmolRAG is the main class that orchestrates the system's components, providing a seamless user experience through its modular architecture and functionality.:|:SmolRAG is an API designed for constructing and managing knowledge graphs, transforming unstructured text into structured knowledge representations.:|:SmolRAG is a feature designed to ingest new information and retrieve it effectively, serving as an architecture for processing information.:|:SmolRAG is a system that utilizes OpenAI's API for various operations including embeddings, completions, and entity extraction.:|:SmolRAG is an interface designed for document chunking and summarization, offering strategies to manage text while preserving context.:|:SmolRAG is an API that implements a modular and maintainable codebase for document guidance and retrieval, supporting various functionalities.:|:SmolRAG is a configurable framework that utilizes a specific directory structure for storing documents, data, and logs, enabling customization of its operational settings.:|:SmolRAG is a feature that provides a sophisticated document ingestion process transforming raw documents into a queryable knowledge base.:|:SmolRAG is a system designed to enhance data ingestion speeds and maintain updated information through various mechanisms, including parallel processing and change detection.:|:SmolRAG is an API focused on document ingestion, transforming raw documents into a queryable knowledge base through various processes.:|:SmolRAG is a dynamic API designed for various use cases including document querying, knowledge extraction, and reasoning tasks.:|:SmolRAG is an API that offers a powerful framework for retrieving and reasoning with document-based knowledge, designed to provide accurate and relevant responses based on the type of query.:|:SmolRAG is a feature that allows for flexible configuration and integration into existing systems, showcasing advanced capabilities for document querying and knowledge extraction.:|:SmolRAG is an API that facilitates the retrieval and processing of documents for various applications, focusing on efficiency and performance.:|:SmolRAG is a retrieval-augmented generation system designed to assist in document ingestion, querying, and general operation.:|:SmolRAG is an application programming interface designed to enable parallel querying of document collections and optimize performance in handling document ingestion and processing.:|:SmolRAG is a modular and flexible data processing system designed for document ingestion, query processing, and efficient data handling.:|:SmolRAG is an API designed for retrieval-augmented generation, providing powerful capabilities for semantic search, knowledge graphs, and large language models.:|:SmolRAG is an API that allows users to manage documents, including importing, updating, and removing them using functions provided in a programming environment.:|:SmolRAG is a system designed for document ingestion, query processing, and performance optimization, specifically tailored to manage growing document collections efficiently.</data>
      <data key="d3">excerpt_id_98568b73e1554f3852d7cabeaa3a1878:|:excerpt_id_e1f4404cf1e9a718f626b127f773cf70:|:excerpt_id_6feed1d0b430f2139ef9246b1e1758d3:|:excerpt_id_19a4021fa6c980fe5768130b704cc56e:|:excerpt_id_9852e72fbe12ed839b385c87873fec09:|:excerpt_id_63cd91bc48a4a86dbc4244526ba83736:|:excerpt_id_a94908d6a99d624559f006ef6ef883ec:|:excerpt_id_9a13bcbb5440ec94b603d6b198fcf7cc:|:excerpt_id_ce594558fb5aeae85f51870c652a415b:|:excerpt_id_eb65f41dba3401c3f9ecff6a2b835fca:|:excerpt_id_06064de98cbba1d78e30fa4dc9a3ba41:|:excerpt_id_70868e98ba121059de996d38d21a0dd7:|:excerpt_id_6c59f654d2d8c621cf5fea19de72d0fe:|:excerpt_id_98340282e700c542414080ecac3ff4a6:|:excerpt_id_7f2443f5ebfc8f85347fa0ad3e1b4199:|:excerpt_id_9e82c97bd0829ec40084f1a45d364353:|:excerpt_id_f8b124e0bd021d69415fab98214a7b6b:|:excerpt_id_e22b8da6dcf20fed5f472fe57b90902b:|:excerpt_id_13f0a88ca4ce9d7111d35d577b03200f:|:excerpt_id_4df59d4084f8e159d0d92fc0fd19ada4:|:excerpt_id_f1fae642defef59936a03b705fb37221:|:excerpt_id_3de9971b782eac586dc03f5864ad60f3:|:excerpt_id_feb905edbf8fd771c7b080447258f0ba:|:excerpt_id_cb26db70dcd624e7b0e4b4273956b799:|:excerpt_id_7fedf9d4b30621d6c79f65db2d09ce1a:|:excerpt_id_dc80c8904c8ce4e245e92a5bec8771ed:|:excerpt_id_c86849cd9a6f6eb952b7842d703f3170:|:excerpt_id_f2b7fbadfa83b8b0ea536a4b85fef7d6:|:excerpt_id_9e30dc3a8159dc93859b8664cf4db134:|:excerpt_id_a91137c719a0d5f9cb906bc3ae15bc3f:|:excerpt_id_81db384c7c323402180915d5a9c65d67:|:excerpt_id_40ff8100b340e2bffbf37fe882a8ee48:|:excerpt_id_35ac427df33971aafd001dedc2094d13:|:excerpt_id_8e74fbca347d63700a75f9a44ad95dec:|:excerpt_id_ebf9009be245dbd0ab60372e5369f496:|:excerpt_id_9b3e7699a2ad7cd3ed369e4a0e702290:|:excerpt_id_4b1d39bb3b412ccb5521449ed59095c6:|:excerpt_id_d4a7e13bce25a456a78a4eef57373bf4:|:excerpt_id_6d692b7f7ce26d7c5b94249c8453447e:|:excerpt_id_3e377a1f38aab6a7301bb88392d388d4:|:excerpt_id_1022857c40806a92372f49dc394cbcfe:|:excerpt_id_d2ba6034366fcca143d67219ee341a22:|:excerpt_id_87030b6b3fa79706b6853abbb475c551:|:excerpt_id_9c6c3d629e2b94029b3f534beffe4780:|:excerpt_id_6c06a295a7f56782823d65a71c55d286:|:excerpt_id_2d095921aff5b7f80aa22d08fd18411c:|:excerpt_id_51c03df854681a0be44a0cb38da8ceed:|:excerpt_id_f6b27b7a25013f2c5751328db6d6e0e3:|:excerpt_id_79e52f475952407e95cfdbc653290c6d:|:excerpt_id_57aae66702d1057a0462d26360d3ccef:|:excerpt_id_517fe6133908102185036fafd1625255:|:excerpt_id_2f91a07d0891228b7332afeffe8b7a42:|:excerpt_id_9bec674c65e1e71d106b31cafb5387bf:|:excerpt_id_31dbc989f689c5be27e9ae8b6d0588c4:|:excerpt_id_e67e24565dae8dec6e972c21f5e33ed4:|:excerpt_id_dcec4d38f0e3c0cff01b04e3b7bdf6ce:|:excerpt_id_ccf53d07456b549a9c9785f0bc9519b8:|:excerpt_id_ab0c2359f35ddf542e46336b81a7e409:|:excerpt_id_d24dd08ee554d6069354fc456f67147f:|:excerpt_id_59fb313f068a75f4e40be3bf7b095013:|:excerpt_id_05e1658cae5a313a0bc5c4383179fbf5:|:excerpt_id_7c686d971d2fea42e5ba02fc141455aa:|:excerpt_id_f1ef3b38067579dab39116dbfeca6ddc</data>
    </node>
    <node id="LightRAG">
      <data key="d1">api</data>
      <data key="d2">LightRAG serves as an inspiration for SmolRAG, influencing its design and functionality for retrieval-augmented generation.:|:LightRAG is a system that served as an inspiration for SmolRAG, providing a foundation for the development of retrieval-augmented generation capabilities.</data>
      <data key="d3">excerpt_id_87030b6b3fa79706b6853abbb475c551:|:excerpt_id_cb26db70dcd624e7b0e4b4273956b799</data>
    </node>
    <node id="Vector Embeddings">
      <data key="d1">function:|:variable:|:feature</data>
      <data key="d2">Vector embeddings are used in SmolRAG to represent document content in a numerical form, enabling efficient similarity search and query processing.:|:Vector embeddings are a feature used in SmolRAG to enhance querying by representing document content in a numerical format that captures semantic meaning.:|:Vector Embeddings are numerical representations of text excerpts generated by OpenAI's embedding models, facilitating semantic search.</data>
      <data key="d3">excerpt_id_87030b6b3fa79706b6853abbb475c551:|:excerpt_id_cb26db70dcd624e7b0e4b4273956b799:|:excerpt_id_05e1658cae5a313a0bc5c4383179fbf5</data>
    </node>
    <node id="Knowledge Graphs">
      <data key="d1">feature</data>
      <data key="d2">Knowledge graphs are integrated into SmolRAG to combine semantic search with structured knowledge, aiding in contextual understanding.</data>
      <data key="d3">excerpt_id_cb26db70dcd624e7b0e4b4273956b799</data>
    </node>
    <node id="Large Language Models">
      <data key="d1">technology:|:feature</data>
      <data key="d2">Large language models are employed in SmolRAG to generate accurate and relevant answers to user queries regarding documents.:|:Large language models are employed by SmolRAG to generate contextually relevant answers to queries, leveraging extensive training data.</data>
      <data key="d3">excerpt_id_87030b6b3fa79706b6853abbb475c551:|:excerpt_id_cb26db70dcd624e7b0e4b4273956b799</data>
    </node>
    <node id="Core Principles">
      <data key="d1">configuration</data>
      <data key="d2">Core Principles are the fundamental design tenets guiding SmolRAG's architecture, including efficiency, contextual understanding, and flexible querying.:|:Core Principles encapsulate the design philosophies of SmolRAG, emphasizing efficiency, up-to-date information, contextual understanding, and flexible querying.</data>
      <data key="d3">excerpt_id_87030b6b3fa79706b6853abbb475c551:|:excerpt_id_cb26db70dcd624e7b0e4b4273956b799</data>
    </node>
    <node id="High-Level Architecture">
      <data key="d1">configuration</data>
      <data key="d2">High-Level Architecture refers to the organizational structure of SmolRAG's components designed to process documents and manage queries efficiently.:|:High-Level Architecture describes the interconnected components of SmolRAG that work together to process documents and answer queries.</data>
      <data key="d3">excerpt_id_87030b6b3fa79706b6853abbb475c551:|:excerpt_id_cb26db70dcd624e7b0e4b4273956b799</data>
    </node>
    <node id="Similarity Search">
      <data key="d1">feature:|:function</data>
      <data key="d2">Similarity Search is a function within SmolRAG that allows finding relevant information based on the semantic meaning of queries rather than just keywords.:|:Similarity Search is a core feature of SmolRAG that allows for more effective information retrieval by understanding the semantic meaning of queries and documents rather than relying on exact word matches.</data>
      <data key="d3">excerpt_id_8e74fbca347d63700a75f9a44ad95dec:|:excerpt_id_6feed1d0b430f2139ef9246b1e1758d3</data>
    </node>
    <node id="Vector Representation">
      <data key="d1">function</data>
      <data key="d2">Vector Representation is a function in SmolRAG that represents both queries and document excerpts as high-dimensional vectors (embeddings) to capture their semantic meaning.</data>
      <data key="d3">excerpt_id_8e74fbca347d63700a75f9a44ad95dec</data>
    </node>
    <node id="Embedding Models">
      <data key="d1">configuration:|:variable</data>
      <data key="d2">Embedding Models are foundational components in SmolRAG that have been trained on vast amounts of text to create vectors that capture semantic meaning for use in similarity search.:|:Embedding Models in SmolRAG refer to different configurations of models used for generating vector representations, including alternate models apart from the default one.</data>
      <data key="d3">excerpt_id_8e74fbca347d63700a75f9a44ad95dec:|:excerpt_id_c86849cd9a6f6eb952b7842d703f3170</data>
    </node>
    <node id="Semantic Vectors">
      <data key="d1">variable</data>
      <data key="d2">Semantic Vectors are high-dimensional representations of text that capture the semantic meaning of both queries and document excerpts in SmolRAG.</data>
      <data key="d3">excerpt_id_8e74fbca347d63700a75f9a44ad95dec</data>
    </node>
    <node id="SmolRAG API">
      <data key="d1">api</data>
      <data key="d2">The SmolRAG API is a REST API that allows users to interact with the SmolRAG system by making HTTP requests to query documents without needing direct integration with the SmolRAG Python library.:|:The SmolRAG API is designed for querying documents using various retrieval methods, adhering to RESTful principles and enhanced by FastAPI's capabilities.:|:The SmolRAG API is a programmable interface that can be extended to provide additional functionality, supporting various operations including document management and system information retrieval.:|:SmolRAG API refers to the overall application that offers various endpoints for querying and interacting with the SmolRAG system.</data>
      <data key="d3">excerpt_id_e9a4b3b83fa7390d9e03b26469553d2e:|:excerpt_id_e65b14cb533eda0a73c1a54d86336320:|:excerpt_id_453681d430472ffcca54f90331e78fee:|:excerpt_id_1e99d3a705e109f5103d3d1958b6a8db</data>
    </node>
    <node id="POST Method">
      <data key="d1">function</data>
      <data key="d2">The POST method is used for sending data to the SmolRAG API at the `/query` endpoint to process a query.</data>
      <data key="d3">excerpt_id_e9a4b3b83fa7390d9e03b26469553d2e</data>
    </node>
    <node id="Endpoint&quot;/query">
      <data key="d1">interface</data>
      <data key="d2">The `/query` endpoint is the primary access point for users to submit queries and receive responses from the SmolRAG API.</data>
      <data key="d3">excerpt_id_e9a4b3b83fa7390d9e03b26469553d2e</data>
    </node>
    <node id="Query Types">
      <data key="d1">feature:|:configuration</data>
      <data key="d2">Query Types are various methods available in SmolRAG, each with unique strengths and weaknesses, geared towards addressing different types of questions and use cases.:|:Query Types refer to the different methods by which users can access information within the knowledge graph, such as local, global, hybrid, and mix queries.:|:Query Types are the various request formats accepted by the SmolRAG API to tailor the querying process, including 'standard', 'local_kg', 'global_kg', 'hybrid_kg', and 'mix'.</data>
      <data key="d3">excerpt_id_e9a4b3b83fa7390d9e03b26469553d2e:|:excerpt_id_59fb313f068a75f4e40be3bf7b095013:|:excerpt_id_e67e24565dae8dec6e972c21f5e33ed4</data>
    </node>
    <node id="Request Format">
      <data key="d1">example</data>
      <data key="d2">The Request Format provides a JSON structure that includes a 'text' field for the query and a 'query_type' field that specifies the type of query to execute.</data>
      <data key="d3">excerpt_id_e9a4b3b83fa7390d9e03b26469553d2e</data>
    </node>
    <node id="Response Format">
      <data key="d1">example</data>
      <data key="d2">The Response Format outlines the expected JSON structure returned from the API, which includes a 'result' field that contains the response text generated by SmolRAG.</data>
      <data key="d3">excerpt_id_e9a4b3b83fa7390d9e03b26469553d2e</data>
    </node>
    <node id="Error Handling">
      <data key="d1">feature:|:function</data>
      <data key="d2">Error Handling refers to the strategies implemented to manage and respond to errors that may occur during the entity extraction process.:|:Error Handling refers to the mechanisms in place within the SmolRAG API for managing errors that may occur during query processing.:|:Error Handling is a feature that ensures the system continues functioning even if embedding generation fails for certain items.:|:Error Handling encompasses the procedures in SmolRAG to manage errors during the document ingestion process, ensuring reliability.:|:Error Handling encompasses mechanisms that allow the system to manage and respond to errors during document processing.</data>
      <data key="d3">excerpt_id_46387a7852ed874c1b3ab073c392b95b:|:excerpt_id_e1f4404cf1e9a718f626b127f773cf70:|:excerpt_id_81631ae5feaa160d24c7aa3331760a64:|:excerpt_id_feb905edbf8fd771c7b080447258f0ba:|:excerpt_id_e9a4b3b83fa7390d9e03b26469553d2e</data>
    </node>
    <node id="Document Ingestion">
      <data key="d1">function</data>
      <data key="d2">Document Ingestion refers to the process of importing documents into SmolRAG for subsequent querying and operation.:|:Document Ingestion is the automatic, efficient process of transforming various document formats into a structure suitable for a pipeline, ensuring updated information availability.</data>
      <data key="d3">excerpt_id_ccf53d07456b549a9c9785f0bc9519b8:|:excerpt_id_dc65135b9ad9bfac43cc3ae95a7b4158</data>
    </node>
    <node id="Querying">
      <data key="d1">function</data>
      <data key="d2">Querying involves retrieving information from the SmolRAG system based on user-input or programmed requests.</data>
      <data key="d3">excerpt_id_ccf53d07456b549a9c9785f0bc9519b8</data>
    </node>
    <node id="Troubleshooting Guide">
      <data key="d1">feature</data>
      <data key="d2">The Troubleshooting Guide provides comprehensive advice on diagnosing and resolving common issues encountered while operating SmolRAG.</data>
      <data key="d3">excerpt_id_ccf53d07456b549a9c9785f0bc9519b8</data>
    </node>
    <node id="Python 3.10">
      <data key="d1">variable</data>
      <data key="d2">Python 3.10 or higher is a required version for SmolRAG's proper functionality.</data>
      <data key="d3">excerpt_id_ccf53d07456b549a9c9785f0bc9519b8</data>
    </node>
    <node id="Dependencies">
      <data key="d1">variable</data>
      <data key="d2">Dependencies are external packages or files that must be installed for SmolRAG to function correctly.</data>
      <data key="d3">excerpt_id_ccf53d07456b549a9c9785f0bc9519b8</data>
    </node>
    <node id="OpenAI API Key">
      <data key="d1">variable</data>
      <data key="d2">The OpenAI API key is a sensitive credential required for connectivity with OpenAI services within SmolRAG.</data>
      <data key="d3">excerpt_id_ccf53d07456b549a9c9785f0bc9519b8</data>
    </node>
    <node id="Environment Variables">
      <data key="d1">variable:|:configuration</data>
      <data key="d2">Environment Variables are system-level settings that store configuration data, such as the API key, which can be used throughout application code to maintain security and flexibility.:|:Environment Variables are settings that provide configuration options for SmolRAG, including API keys and paths.</data>
      <data key="d3">excerpt_id_ccf53d07456b549a9c9785f0bc9519b8:|:excerpt_id_30d921e9ed8b86da0f8b9366dfbaa2a7</data>
    </node>
    <node id="Installation Path">
      <data key="d1">variable</data>
      <data key="d2">The Installation Path refers to the directory where SmolRAG and its dependencies are installed.</data>
      <data key="d3">excerpt_id_ccf53d07456b549a9c9785f0bc9519b8</data>
    </node>
    <node id=".env File">
      <data key="d1">configuration</data>
      <data key="d2">The .env file is used to store environment variables and settings required for SmolRAG to function correctly.</data>
      <data key="d3">excerpt_id_ccf53d07456b549a9c9785f0bc9519b8</data>
    </node>
    <node id="SmolRag Class">
      <data key="d1">configuration:|:class:|:function</data>
      <data key="d2">The SmolRag Class implements the core functionality of SmolRAG, orchestrating its components for a seamless user experience.:|:The SmolRag Class acts as the main entry point and orchestrator for the SmolRAG system, managing its overall functionality.:|:The SmolRag class is the main component used to instantiate the SmolRAG API, which can be initialized with default or custom settings for document processing.</data>
      <data key="d3">excerpt_id_70868e98ba121059de996d38d21a0dd7:|:excerpt_id_a94908d6a99d624559f006ef6ef883ec:|:excerpt_id_9a13bcbb5440ec94b603d6b198fcf7cc</data>
    </node>
    <node id="Basic Setup">
      <data key="d1">configuration</data>
      <data key="d2">Basic Setup refers to the initial steps required to configure the SmolRAG environment, including importing necessary classes and initializing instances.</data>
      <data key="d3">excerpt_id_9a13bcbb5440ec94b603d6b198fcf7cc</data>
    </node>
    <node id="Chunking Strategy">
      <data key="d1">feature:|:optimization</data>
      <data key="d2">Chunking Strategy is a feature that determines how documents are split for processing, impacting efficiency and effectiveness.:|:Chunking Strategy is a customizable feature that determines how documents are divided into segments for processing, allowing for flexibility in implementation.:|:Chunking Strategy is an optimization strategy that selects the best method for dividing documents depending on their type.</data>
      <data key="d3">excerpt_id_eb65f41dba3401c3f9ecff6a2b835fca:|:excerpt_id_b3a95e34944a889758e6b0c6d679b0e6:|:excerpt_id_9a13bcbb5440ec94b603d6b198fcf7cc</data>
    </node>
    <node id="Document Ingestion Example">
      <data key="d1">example</data>
      <data key="d2">Document Ingestion Example is a practical illustration of how to import documents into the SmolRAG system for processing.</data>
      <data key="d3">excerpt_id_9a13bcbb5440ec94b603d6b198fcf7cc</data>
    </node>
    <node id="INPUT_DOCS_DIR">
      <data key="d1">configuration:|:variable</data>
      <data key="d2">INPUT_DOCS_DIR is a predefined variable indicating the directory where documents are to be imported from for the SmolRAG system.:|:INPUT_DOCS_DIR is a path constant representing the directory where input documents are stored, with a default value of 'app/input_docs'.:|:INPUT_DOCS_DIR is a variable representing the path where input documents are stored, with a default value of 'app/input_docs'.:|:INPUT_DOCS_DIR is a predefined directory that denotes the location where input documents are stored for processing by SmolRAG.:|:INPUT_DOCS_DIR is a constant that specifies the path to the input documents directory integral to the system's operation.</data>
      <data key="d3">excerpt_id_9a13bcbb5440ec94b603d6b198fcf7cc:|:excerpt_id_2d095921aff5b7f80aa22d08fd18411c:|:excerpt_id_35ac427df33971aafd001dedc2094d13:|:excerpt_id_98568b73e1554f3852d7cabeaa3a1878:|:excerpt_id_0c67144102b1d81212b12e6ef61ad148</data>
    </node>
    <node id="Excerpt Embeddings">
      <data key="d1">feature:|:variable:|:function</data>
      <data key="d2">Excerpt Embeddings are semantic representations of document excerpts that enable comparisons during similarity searches.:|:Excerpt embeddings transform text chunks into high-dimensional vector representations, enabling semantic search based on conceptual similarities.:|:Excerpt Embeddings are vectors representing the semantic meaning of text excerpts, used in conjunction with query embeddings for similarity comparisons.</data>
      <data key="d3">excerpt_id_ad053b14f30e2ca2cbde4877068102ef:|:excerpt_id_dc80c8904c8ce4e245e92a5bec8771ed:|:excerpt_id_9c6c3d629e2b94029b3f534beffe4780</data>
    </node>
    <node id="Embedding Generation Process">
      <data key="d1">configuration</data>
      <data key="d2">The embedding generation process in SmolRAG defines the specific steps for creating vector representations from document excerpts.</data>
      <data key="d3">excerpt_id_dc80c8904c8ce4e245e92a5bec8771ed</data>
    </node>
    <node id="Excerpt Preparation">
      <data key="d1">function</data>
      <data key="d2">Excerpt Preparation involves chunking a document and pairing each excerpt with its summary before embedding.</data>
      <data key="d3">excerpt_id_dc80c8904c8ce4e245e92a5bec8771ed</data>
    </node>
    <node id="Combined Content">
      <data key="d1">variable</data>
      <data key="d2">Combined Content is the concatenated text of the excerpt and its summary, which is used as input for the embedding API.:|:Combined Content is a variable that represents both the excerpt and its summary when generating vector embeddings for semantic search.</data>
      <data key="d3">excerpt_id_40ff8100b340e2bffbf37fe882a8ee48:|:excerpt_id_dc80c8904c8ce4e245e92a5bec8771ed</data>
    </node>
    <node id="API Call">
      <data key="d1">api</data>
      <data key="d2">API Call refers to the process of sending combined content to OpenAI's embedding API for vector generation.</data>
      <data key="d3">excerpt_id_dc80c8904c8ce4e245e92a5bec8771ed</data>
    </node>
    <node id="Vector Creation">
      <data key="d1">function</data>
      <data key="d2">Vector Creation is the step where the API produces a high-dimensional vector representation that encapsulates the excerpt's content.</data>
      <data key="d3">excerpt_id_dc80c8904c8ce4e245e92a5bec8771ed</data>
    </node>
    <node id="NanoVectorStore">
      <data key="d1">interface:|:api:|:feature:|:class:|:configuration:|:variable</data>
      <data key="d2">NanoVectorStore is a storage system for efficiently storing the embeddings generated from excerpts for fast retrieval.:|:NanoVectorStore is a specialized vector storage solution for managing document embeddings efficiently, optimized for performance and scalability.:|:NanoVectorStore is a lightweight implementation of a vector store used for storing and retrieving embeddings in SmolRAG.:|:NanoVectorStore is a configuration component used for storing vector representations, particularly useful for embeddings.:|:NanoVectorStore is a lightweight vector database used for storing and retrieving embeddings associated with the processed documents.:|:NanoVectorStore is a lightweight vector database used by SmolRAG to manage the embeddings generated by the text embedding models.:|:NanoVectorStore is the storage system where generated vectors and their metadata are stored for efficient semantic search.:|:NanoVectorStore is a lightweight implementation for storing and retrieving embeddings, allowing various configurations such as dimensionality and storage paths.:|:NanoVectorStore is a lightweight vector database designed for managing embeddings with features like efficient storage, metadata association, and persistence between runs.:|:NanoVectorStore is a storage mechanism employed for efficiently storing embeddings for retrieval and search operations.:|:NanoVectorStore is a lightweight vector database employed by SmolRAG to manage embeddings and facilitate similarity searches.:|:NanoVectorStore is an interface responsible for storing and retrieving embeddings based on their dimensionality and configurations.:|:The NanoVectorStore class provides a lightweight vector database for storing and retrieving embeddings, optimized for simplicity and efficiency.:|:NanoVectorStore is a class that implements a lightweight vector database to store and manage embeddings and their retrieval.:|:The NanoVectorStore is a lightweight vector database designed for managing embeddings and performing similarity searches efficiently, using in-memory processing and optimized storage formats.</data>
      <data key="d3">excerpt_id_0e491c74d7a88194d22edb5dcf034178:|:excerpt_id_60a78091c7c8d6dae9b144963e93551a:|:excerpt_id_dcec4d38f0e3c0cff01b04e3b7bdf6ce:|:excerpt_id_8c4cef197115ed13a173ace5189be819:|:excerpt_id_9c6c3d629e2b94029b3f534beffe4780:|:excerpt_id_dc80c8904c8ce4e245e92a5bec8771ed:|:excerpt_id_70868e98ba121059de996d38d21a0dd7:|:excerpt_id_c86849cd9a6f6eb952b7842d703f3170:|:excerpt_id_2e0613b4c1b81b865a2002b59fe88b17:|:excerpt_id_05e1658cae5a313a0bc5c4383179fbf5:|:excerpt_id_5421cc029bd40962f8f839ecf4a8d136:|:excerpt_id_f6b27b7a25013f2c5751328db6d6e0e3:|:excerpt_id_ebf9009be245dbd0ab60372e5369f496:|:excerpt_id_40ff8100b340e2bffbf37fe882a8ee48:|:excerpt_id_517fe6133908102185036fafd1625255</data>
    </node>
    <node id="OPENAI_API_KEY">
      <data key="d1">variable</data>
      <data key="d2">OPENAI_API_KEY is an environment variable used for accessing OpenAI's API, sourced from a secret management system.:|:The OPENAI_API_KEY is a required environment variable used to authenticate access to the OpenAI API, essential for the functionality of SmolRAG.:|:OPENAI_API_KEY is an environment variable used to store the API key for accessing OpenAI's services securely.:|:OPENAI_API_KEY is an environment variable used to store the API key necessary for accessing OpenAI's services.</data>
      <data key="d3">excerpt_id_4b1d39bb3b412ccb5521449ed59095c6:|:excerpt_id_4df59d4084f8e159d0d92fc0fd19ada4:|:excerpt_id_3d02a7878513f8025940bb3e93ae517f:|:excerpt_id_81631ae5feaa160d24c7aa3331760a64</data>
    </node>
    <node id="COMPLETION_MODEL">
      <data key="d1">variable</data>
      <data key="d2">The COMPLETION_MODEL is an optional environment variable that specifies which OpenAI model to use for generating text completions in SmolRAG, with a default value of gpt-3.5-turbo.:|:COMPLETION_MODEL is a variable representing the model used for text completions, defaulting to 'gpt-3.5-turbo'.:|:COMPLETION_MODEL is a constant that specifies the default OpenAI model for generating completions.</data>
      <data key="d3">excerpt_id_4df59d4084f8e159d0d92fc0fd19ada4:|:excerpt_id_ebf9009be245dbd0ab60372e5369f496:|:excerpt_id_0c67144102b1d81212b12e6ef61ad148</data>
    </node>
    <node id="EMBEDDING_MODEL">
      <data key="d1">variable</data>
      <data key="d2">The EMBEDDING_MODEL is an optional environment variable that determines which OpenAI model to use for text embeddings in SmolRAG, defaulting to text-embedding-3-small.:|:EMBEDDING_MODEL is a variable representing the model used for generating embeddings, defaulting to 'text-embedding-3-small'.:|:EMBEDDING_MODEL is a constant indicating the default OpenAI model for embeddings.</data>
      <data key="d3">excerpt_id_4df59d4084f8e159d0d92fc0fd19ada4:|:excerpt_id_ebf9009be245dbd0ab60372e5369f496:|:excerpt_id_0c67144102b1d81212b12e6ef61ad148</data>
    </node>
    <node id="Example .env file">
      <data key="d1">example</data>
      <data key="d2">The Example .env file demonstrates how to set environment variables for SmolRAG, including the API key and model selections, illustrating practical usage.</data>
      <data key="d3">excerpt_id_4df59d4084f8e159d0d92fc0fd19ada4</data>
    </node>
    <node id="Directory Structure Configuration">
      <data key="d1">configuration</data>
      <data key="d2">Directory Structure Configuration outlines how SmolRAG organizes documents, data, and logs within a specified directory structure that can be customized.</data>
      <data key="d3">excerpt_id_4df59d4084f8e159d0d92fc0fd19ada4</data>
    </node>
    <node id="app/definitions.py">
      <data key="d1">configuration</data>
      <data key="d2">app/definitions.py is the file in SmolRAG where the directory structure paths are defined, allowing users to modify them as per their requirements.</data>
      <data key="d3">excerpt_id_4df59d4084f8e159d0d92fc0fd19ada4</data>
    </node>
    <node id="SmolRAG Document Ingestion Process">
      <data key="d1">feature:|:function</data>
      <data key="d2">The SmolRAG Document Ingestion Process is designed to transform raw documents into a queryable and analyzable format, ensuring automatic, efficient, and change-aware document handling.:|:The SmolRAG Document Ingestion Process is a critical feature that transforms raw documents into a queryable and analyzable format for efficient information access.</data>
      <data key="d3">excerpt_id_f2b7fbadfa83b8b0ea536a4b85fef7d6:|:excerpt_id_dc65135b9ad9bfac43cc3ae95a7b4158</data>
    </node>
    <node id="&quot;app/input_docs/">
      <data key="d1">variable</data>
      <data key="d2">The app/input_docs/ directory is where SmolRAG ingests documents from, specifically targeting plain text and Markdown file formats.</data>
      <data key="d3">excerpt_id_f2b7fbadfa83b8b0ea536a4b85fef7d6</data>
    </node>
    <node id="import_documents">
      <data key="d1">function</data>
      <data key="d2">import_documents is a function that ensures all necessary documents are loaded into SmolRag for querying.:|:import_documents is a function in SmolRag responsible for importing documents necessary for the system to query and operate correctly.:|:import_documents is a function used within SmolRag to import necessary documents for processing.:|:The import_documents method is a function used to process new files placed in the input_docs directory and update any changed documents automatically.:|:import_documents is a function provided by the API that imports documents for use in the application.:|:The import_documents function is utilized to import documents into SmolRAG, and it can detect changes in documents within the input_docs directory.:|:Import_documents is a method in SmolRAG that manages the ingestion of documents, utilizing asynchronous processes for efficiency.:|:import_documents is a function within SmolRAG that allows for the importing of documents into the system for processing.:|:The import_documents function is responsible for ensuring all necessary documents are loaded into the SmolRAG application before processing queries.:|:import_documents is a function in SmolRAG that imports documents and updates the internal representation when changes are detected in the input documents directory.</data>
      <data key="d3">excerpt_id_9e30dc3a8159dc93859b8664cf4db134:|:excerpt_id_8efc423402a060df074b1830e38ed77b:|:excerpt_id_98568b73e1554f3852d7cabeaa3a1878:|:excerpt_id_adb7498f6f95f3de6fde939c658d11cf:|:excerpt_id_79e52f475952407e95cfdbc653290c6d:|:excerpt_id_7026c9111f1e878a76710759253c04ae:|:excerpt_id_9bec674c65e1e71d106b31cafb5387bf:|:excerpt_id_f2b7fbadfa83b8b0ea536a4b85fef7d6:|:excerpt_id_3de9971b782eac586dc03f5864ad60f3:|:excerpt_id_a73778302286b849ae1d8bdf13a41987</data>
    </node>
    <node id="Supported Formats">
      <data key="d1">variable:|:feature</data>
      <data key="d2">Supported Formats include Plain text (.txt) and Markdown (.md), which are the formats processed by SmolRAG during the ingestion process.:|:Supported Formats detail the types of files that SmolRAG can ingest, including plain text (.txt) and Markdown (.md) files.</data>
      <data key="d3">excerpt_id_f2b7fbadfa83b8b0ea536a4b85fef7d6:|:excerpt_id_dc65135b9ad9bfac43cc3ae95a7b4158</data>
    </node>
    <node id="Document Chunking Strategies">
      <data key="d1">configuration</data>
      <data key="d2">Document Chunking Strategies outline the methods employed by SmolRAG to break down documents into manageable pieces while maintaining context and coherence.</data>
      <data key="d3">excerpt_id_f2b7fbadfa83b8b0ea536a4b85fef7d6</data>
    </node>
    <node id="app/input_docs/" />
    <node id="Document Ingestion Time">
      <data key="d1">variable</data>
      <data key="d2">Document Ingestion Time measures the duration required for SmolRAG to process and index new documents, impacting overall performance.</data>
      <data key="d3">excerpt_id_9b3e7699a2ad7cd3ed369e4a0e702290</data>
    </node>
    <node id="Query Response Time">
      <data key="d1">variable</data>
      <data key="d2">Query Response Time indicates how long it takes for SmolRAG to process a user query and return an appropriate response, essential for user experience.</data>
      <data key="d3">excerpt_id_9b3e7699a2ad7cd3ed369e4a0e702290</data>
    </node>
    <node id="Embedding Generation Time">
      <data key="d1">variable</data>
      <data key="d2">Embedding Generation Time reflects the time taken to create embeddings for documents and queries, which is critical for the functionality of SmolRAG.</data>
      <data key="d3">excerpt_id_9b3e7699a2ad7cd3ed369e4a0e702290</data>
    </node>
    <node id="Memory Usage">
      <data key="d1">variable</data>
      <data key="d2">Memory Usage is a variable indicating the percentage of available memory currently used, providing insight into system performance.:|:Memory Usage quantifies the amount of RAM used by SmolRAG, particularly by components like the vector store and knowledge graph, affecting system performance.:|:Memory Usage indicates the amount of memory consumed by the API, particularly when utilizing vector stores and knowledge graphs.</data>
      <data key="d3">excerpt_id_7026c9111f1e878a76710759253c04ae:|:excerpt_id_63cd91bc48a4a86dbc4244526ba83736:|:excerpt_id_9b3e7699a2ad7cd3ed369e4a0e702290</data>
    </node>
    <node id="Disk Usage">
      <data key="d1">variable</data>
      <data key="d2">Disk Usage is a variable that measures the percentage of disk space currently in use, affecting the system's operational capacity.:|:Disk Usage tracks the amount of storage space required for the vector database and knowledge graph, which is important for managing resources efficiently.</data>
      <data key="d3">excerpt_id_7026c9111f1e878a76710759253c04ae:|:excerpt_id_9b3e7699a2ad7cd3ed369e4a0e702290</data>
    </node>
    <node id="CPU Usage">
      <data key="d1">variable</data>
      <data key="d2">CPU Usage measures the processing power consumed during key operations like document ingestion and complex queries, influencing performance.:|:CPU Usage is a variable that indicates the percentage of CPU currently being used, as monitored by the check_system_resources function.</data>
      <data key="d3">excerpt_id_7026c9111f1e878a76710759253c04ae:|:excerpt_id_9b3e7699a2ad7cd3ed369e4a0e702290</data>
    </node>
    <node id="API Calls">
      <data key="d1">variable</data>
      <data key="d2">API Calls refer to the requests made to external APIs (e.g., OpenAI) that can affect the performance and cost of using SmolRAG.:|:API Calls is a metric that records the quantity and costs associated with various API requests.</data>
      <data key="d3">excerpt_id_a4f75c2d6d663c161d853c1243a60af5:|:excerpt_id_9b3e7699a2ad7cd3ed369e4a0e702290</data>
    </node>
    <node id="Retrieval Precision">
      <data key="d1">quality metric</data>
      <data key="d2">Retrieval Precision assesses the relevance of the excerpts retrieved by SmolRAG in response to queries, impacting the perceived quality of results.</data>
      <data key="d3">excerpt_id_9b3e7699a2ad7cd3ed369e4a0e702290</data>
    </node>
    <node id="Retrieval Recall">
      <data key="d1">quality metric:|:variable</data>
      <data key="d2">Retrieval Recall is a variable that measures how many of the relevant excerpts are actually retrieved by a system.:|:Retrieval Recall evaluates how many of the relevant excerpts are successfully retrieved by SmolRAG, crucial for measuring effectiveness.</data>
      <data key="d3">excerpt_id_eb65f41dba3401c3f9ecff6a2b835fca:|:excerpt_id_9b3e7699a2ad7cd3ed369e4a0e702290</data>
    </node>
    <node id="Response Quality">
      <data key="d1">quality metric:|:variable</data>
      <data key="d2">Response Quality indicates how accurate and helpful the final responses from SmolRAG are to users, essential for user satisfaction.:|:Response Quality is a variable that assesses the accuracy and helpfulness of the final responses returned by a system.</data>
      <data key="d3">excerpt_id_eb65f41dba3401c3f9ecff6a2b835fca:|:excerpt_id_9b3e7699a2ad7cd3ed369e4a0e702290</data>
    </node>
    <node id="Knowledge Graph">
      <data key="d1">component:|:variable:|:storage mechanism:|:configuration:|:storage:|:concept:|:feature</data>
      <data key="d2">The Knowledge Graph is a powerful feature of SmolRAG that provides structured representations of entities and relationships, enabling enhanced query capabilities.:|:Knowledge graphs are integrated into SmolRAG to provide semantic search capabilities and structured knowledge representation for better understanding.:|:Stores entities and relationships extracted from documents for easy retrieval and analysis.:|:Knowledge Graph is built from extracted entities and relationships, allowing structured querying and reasoning about document content.:|:Knowledge Graph, implemented through NetworkXGraphStore, stores entities and their relationships for better contextual understanding.:|:Knowledge Graph refers to the NetworkXGraphStore utilized by SmolRAG for storing entities and relationships.:|:The Knowledge Graph is a component of SmolRAG that offers structured representations of entities and their relationships, enhancing the ability to reason with knowledge.:|:The Knowledge Graph is a representation that captures the key concepts and connections from documents, structured to facilitate querying and analysis.:|:Knowledge Graph stores entities and relationships extracted from documents, facilitating a structured representation of information and its interconnections.:|:The Knowledge Graph is a structured representation of extracted entities and relationships that enhances structured querying and reasoning about document content.</data>
      <data key="d3">excerpt_id_5164d226bc36d8232fafc2660b1bfd87:|:excerpt_id_e1f4404cf1e9a718f626b127f773cf70:|:excerpt_id_40ff8100b340e2bffbf37fe882a8ee48:|:excerpt_id_05e1658cae5a313a0bc5c4383179fbf5:|:excerpt_id_87030b6b3fa79706b6853abbb475c551:|:excerpt_id_2f91a07d0891228b7332afeffe8b7a42:|:excerpt_id_59fb313f068a75f4e40be3bf7b095013:|:excerpt_id_feb905edbf8fd771c7b080447258f0ba:|:excerpt_id_9e82c97bd0829ec40084f1a45d364353:|:excerpt_id_39a1d6ebedcdf64866e51dc2d7baf5dc</data>
    </node>
    <node id="Entities">
      <data key="d1">variable</data>
      <data key="d2">Entities are distinct concepts extracted from documents that are represented in the SmolRAG knowledge graph.</data>
      <data key="d3">excerpt_id_9e82c97bd0829ec40084f1a45d364353</data>
    </node>
    <node id="Entity Properties">
      <data key="d1">configuration</data>
      <data key="d2">Entity Properties refer to the characteristics of entities in the knowledge graph, including name, category, description, and excerpt ID.</data>
      <data key="d3">excerpt_id_9e82c97bd0829ec40084f1a45d364353</data>
    </node>
    <node id="Relationships">
      <data key="d1">variable</data>
      <data key="d2">Relationships are connections between entities within the knowledge graph, which include properties like source and target, description, and weight.</data>
      <data key="d3">excerpt_id_9e82c97bd0829ec40084f1a45d364353</data>
    </node>
    <node id="Document Ingestion Process">
      <data key="d1">function</data>
      <data key="d2">The Document Ingestion Process is a function in SmolRAG that builds the knowledge graph by extracting entities and relationships from documents.:|:The Document Ingestion Process refers to the series of steps involved in extracting entities and relationships from unstructured text to populate the knowledge graph.:|:Document Ingestion Process refers to the sophisticated pipeline that processes documents into a rich, queryable format, incorporating chunking, summarization, embedding, and knowledge graph extraction.</data>
      <data key="d3">excerpt_id_9e82c97bd0829ec40084f1a45d364353:|:excerpt_id_19a4021fa6c980fe5768130b704cc56e:|:excerpt_id_2f91a07d0891228b7332afeffe8b7a42</data>
    </node>
    <node id="smol_rag.py">
      <data key="d1">configuration</data>
      <data key="d2">smol_rag.py is the core file containing the `SmolRag` class, which orchestrates the entire system and integrates all components.</data>
      <data key="d3">excerpt_id_f1fae642defef59936a03b705fb37221</data>
    </node>
    <node id="chunking.py">
      <data key="d1">configuration:|:function</data>
      <data key="d2">chunking.py is a module that implements document chunking strategies for splitting documents into manageable pieces.:|:chunking.py contains document chunking strategies essential for breaking down documents into manageable pieces for processing.:|:chunking.py is a module that implements document chunking strategies for splitting documents into manageable pieces, facilitating better processing and analysis.</data>
      <data key="d3">excerpt_id_23b091ffbf5cfdc68a155822645cbe8f:|:excerpt_id_f1fae642defef59936a03b705fb37221:|:excerpt_id_5421cc029bd40962f8f839ecf4a8d136</data>
    </node>
    <node id="openai_llm.py">
      <data key="d1">interface</data>
      <data key="d2">openai_llm.py serves as an interface to OpenAI's API, facilitating interactions with the language model.</data>
      <data key="d3">excerpt_id_f1fae642defef59936a03b705fb37221</data>
    </node>
    <node id="vector_store.py">
      <data key="d1">file:|:feature</data>
      <data key="d2">vector_store.py is the file that contains the implementation of the NanoVectorStore class, focusing on managing vector embeddings.:|:vector_store.py implements a vector database for storing and retrieving document embeddings essential for search functionalities.</data>
      <data key="d3">excerpt_id_f1fae642defef59936a03b705fb37221:|:excerpt_id_0e491c74d7a88194d22edb5dcf034178</data>
    </node>
    <node id="graph_store.py">
      <data key="d1">file:|:feature</data>
      <data key="d2">graph_store.py contains the implementation of a knowledge graph for representing structured relationships among documents.:|:graph_store.py is the file that contains the implementation of NetworkXGraphStore, enabling storage and retrieval of graph data.</data>
      <data key="d3">excerpt_id_f1fae642defef59936a03b705fb37221:|:excerpt_id_0e491c74d7a88194d22edb5dcf034178</data>
    </node>
    <node id="kv_store.py">
      <data key="d1">file:|:feature</data>
      <data key="d2">kv_store.py implements a key-value store for managing pairs of keys and values efficiently.:|:kv_store.py is the file where the JsonKvStore class is implemented, providing functions for managing key-value pairs.</data>
      <data key="d3">excerpt_id_f1fae642defef59936a03b705fb37221:|:excerpt_id_0e491c74d7a88194d22edb5dcf034178</data>
    </node>
    <node id="prompts.py">
      <data key="d1">file:|:configuration:|:variable</data>
      <data key="d2">prompts.py is a configuration file that contains system prompts guiding the query processing in SmolRAG.:|:The prompts.py file contains the system prompts designed for various operational tasks, ensuring that interactions with the system are guided and effective.:|:prompts.py is a configuration file containing predefined prompts aimed at facilitating various operations within the system, crucial for guiding LLM behavior.:|:prompts.py contains system prompts used for various operational tasks within the SmolRAG framework.:|:prompts.py contains the definitions for extraction prompts that guide the entity and relationship extraction process within the SmolRAG framework.:|:The prompts.py file contains carefully crafted prompts that guide various operations in the system, ensuring consistent and high-quality results.</data>
      <data key="d3">excerpt_id_90c7838ea456feae14abfd87267bdfeb:|:excerpt_id_a2942c9d0b2929a3d0693885ce2c32aa:|:excerpt_id_9224c08a6f58fb5797f206ea7efc517e:|:excerpt_id_517fe6133908102185036fafd1625255:|:excerpt_id_048561f7b91b06effbd2fa38d6b6e86d:|:excerpt_id_f1fae642defef59936a03b705fb37221</data>
    </node>
    <node id="utilities.py">
      <data key="d1">configuration:|:function</data>
      <data key="d2">utilities.py provides general utility functions to support various operations in the SmolRAG implementation.:|:The utilities.py file houses various utility functions that provide common functionality to the system's components, enhancing efficiency.:|:utilities.py is a configuration file filled with utility functions that provide essential functionality for different components of the system.</data>
      <data key="d3">excerpt_id_a2942c9d0b2929a3d0693885ce2c32aa:|:excerpt_id_048561f7b91b06effbd2fa38d6b6e86d:|:excerpt_id_f1fae642defef59936a03b705fb37221</data>
    </node>
    <node id="logger.py">
      <data key="d1">file:|:configuration</data>
      <data key="d2">logger.py is responsible for the logging configuration to monitor and debug the system's operations.:|:The logger.py file configures the logging system to monitor performance and capture log messages.</data>
      <data key="d3">excerpt_id_f1fae642defef59936a03b705fb37221:|:excerpt_id_0c67144102b1d81212b12e6ef61ad148</data>
    </node>
    <node id="definitions.py">
      <data key="d1">file:|:interface:|:configuration:|:variable</data>
      <data key="d2">definitions.py contains constants and path definitions used throughout the system, serving as a foundational reference.:|:definitions.py contains constants and path definitions that are used throughout the application.:|:The definitions.py file contains key constants and path definitions used throughout the system, providing centralized configuration.:|:definitions.py is a Python file where directory paths for SmolRAG are defined and can be customized to change the default behaviors of the system.:|:definitions.py is a Python file that contains the default paths and configurations for the SmolRAG framework, allowing modification for custom directory settings.:|:The definitions.py file includes constants and path definitions utilized throughout the system, providing foundational references for code execution.</data>
      <data key="d3">excerpt_id_a2942c9d0b2929a3d0693885ce2c32aa:|:excerpt_id_2d095921aff5b7f80aa22d08fd18411c:|:excerpt_id_35ac427df33971aafd001dedc2094d13:|:excerpt_id_048561f7b91b06effbd2fa38d6b6e86d:|:excerpt_id_f1fae642defef59936a03b705fb37221:|:excerpt_id_0c67144102b1d81212b12e6ef61ad148</data>
    </node>
    <node id="&quot;evaluation/">
      <data key="d1">feature</data>
      <data key="d2">evaluation/ provides the evaluation framework for assessing the performance of document retrieval and interaction.</data>
      <data key="d3">excerpt_id_f1fae642defef59936a03b705fb37221</data>
    </node>
    <node id="&quot;api/">
      <data key="d1">api</data>
      <data key="d2">api/ is where the FastAPI implementation resides, providing the REST API endpoints and request handling mechanisms.</data>
      <data key="d3">excerpt_id_f1fae642defef59936a03b705fb37221</data>
    </node>
    <node id="main.py">
      <data key="d1">function</data>
      <data key="d2">main.py contains the API endpoints and request handling logic for interfacing with the SmolRAG system.</data>
      <data key="d3">excerpt_id_f1fae642defef59936a03b705fb37221</data>
    </node>
    <node id="Vector Search Query">
      <data key="d1">function</data>
      <data key="d2">The Vector Search Query is a straightforward query type in SmolRAG that uses semantic similarity for finding relevant excerpts.:|:The Vector Search Query is a method used to retrieve information based on semantic relevance from a data set.</data>
      <data key="d3">excerpt_id_44cefee3a8e8faba70704cd4a4d676ae:|:excerpt_id_f1ef3b38067579dab39116dbfeca6ddc</data>
    </node>
    <node id="Local Knowledge Graph Query">
      <data key="d1">function</data>
      <data key="d2">The Local Knowledge Graph Query focuses on low-level keywords to identify relevant entities and their relationships.:|:Local Knowledge Graph Query is a function focusing on low-level keywords to find relevant entities and their relationships in the graph.</data>
      <data key="d3">excerpt_id_f1ef3b38067579dab39116dbfeca6ddc:|:excerpt_id_7c686d971d2fea42e5ba02fc141455aa</data>
    </node>
    <node id="Global Knowledge Graph Query">
      <data key="d1">api:|:function</data>
      <data key="d2">Global Knowledge Graph Query is an API designed to explore and retrieve relationships and broader connections among entities in a knowledge graph.:|:The Global Knowledge Graph Query targets high-level keywords to discover relevant relationships and connected entities.:|:Global Knowledge Graph Query is a function aimed at identifying relevant relationships and connected entities using high-level keywords.</data>
      <data key="d3">excerpt_id_9c79fe4d43437c480a6cef767c63d764:|:excerpt_id_f1ef3b38067579dab39116dbfeca6ddc:|:excerpt_id_7c686d971d2fea42e5ba02fc141455aa</data>
    </node>
    <node id="Hybrid Knowledge Graph Query">
      <data key="d1">function</data>
      <data key="d2">Hybrid Knowledge Graph Query is a function that combines the local and global approaches for comprehensive coverage in knowledge graph queries.:|:The Hybrid Knowledge Graph Query combines aspects of both local and global knowledge graph approaches to provide comprehensive results.</data>
      <data key="d3">excerpt_id_f1ef3b38067579dab39116dbfeca6ddc:|:excerpt_id_7c686d971d2fea42e5ba02fc141455aa</data>
    </node>
    <node id="Mix Query">
      <data key="d1">variable:|:function</data>
      <data key="d2">Mix Query is a function call that combines different query types to get a comprehensive response from the API.:|:The Mix Query integrates both vector search and knowledge graph approaches for enhanced querying capabilities.:|:Mix Query combines multiple query approaches and is noted for being the most resource-intensive among the query types.:|:Mix Query is a type of API request that combines elements of different query types when interacting with the SmolRAG API.:|:Mix Query is a function that integrates knowledge graph results with vector search results, enhancing the retrieval process.:|:"Mix Query is a function that integrates both vector search and knowledge graph methodologies to return results for complex queries.'</data>
      <data key="d3">excerpt_id_06064de98cbba1d78e30fa4dc9a3ba41:|:excerpt_id_d2ba6034366fcca143d67219ee341a22:|:excerpt_id_f1ef3b38067579dab39116dbfeca6ddc:|:excerpt_id_7c686d971d2fea42e5ba02fc141455aa:|:excerpt_id_453681d430472ffcca54f90331e78fee:|:excerpt_id_958fb948ab95cbababa3713159600cc7</data>
    </node>
    <node id="query">
      <data key="d1">variable:|:interface:|:function</data>
      <data key="d2">The variable 'query' is associated with the Vector Search Query, representing the user's search input to find relevant content.:|:query is an overridden method within CustomSmolRag that customizes the functionality of existing querying processes.:|:query is a function invoked to process the query_text, potentially returning a result based on the input.:|:Query is an interface element representing user inputs for searching within the document set, categorized by type.:|:query is a function used in SmolRag to retrieve information based on a specific test query input by the user.:|:query is a function in SmolRag that takes user input and retrieves relevant information based on the text provided.:|:query is a method within the Memory-Efficient Vector Store class that computes similarities between a query vector and stored vectors, returning the top-k closest matches.:|:query is a function that overrides existing methods to provide custom implementations for querying texts.:|:query is a method that retrieves similar vectors from the NanoVectorStore based on a given query.:|:query is a function that allows users to perform queries against the imported data to retrieve information.:|:Query represents individual queries processed in the batch, which is referenced for logging and output purposes.:|:query is a function that processes user queries against the imported documents, returning relevant results.</data>
      <data key="d3">excerpt_id_c3ca869388739cbef75785b9d8a4b3e1:|:excerpt_id_8efc423402a060df074b1830e38ed77b:|:excerpt_id_7f32de37a5cddfe45cdff7356d2a5584:|:excerpt_id_97e526b02e37e6e2b2b176a8cb9cc039:|:excerpt_id_bb6ad6a345cbdf6df0cbdc4225260a25:|:excerpt_id_f1ef3b38067579dab39116dbfeca6ddc:|:excerpt_id_adb7498f6f95f3de6fde939c658d11cf:|:excerpt_id_5421cc029bd40962f8f839ecf4a8d136:|:excerpt_id_9bec674c65e1e71d106b31cafb5387bf:|:excerpt_id_7026c9111f1e878a76710759253c04ae:|:excerpt_id_a73778302286b849ae1d8bdf13a41987:|:excerpt_id_0da14f0f2868bc4e6d5add7c81a2957c</data>
    </node>
    <node id="Document Processor">
      <data key="d1">function</data>
      <data key="d2">Handles document ingestion, chunking, and summarization for the SmolRAG architecture.:|:Document Processor is responsible for handling document ingestion, chunking, and summarization, enabling effective management of input data.</data>
      <data key="d3">excerpt_id_39a1d6ebedcdf64866e51dc2d7baf5dc:|:excerpt_id_5164d226bc36d8232fafc2660b1bfd87</data>
    </node>
    <node id="Vector Store">
      <data key="d1">component:|:storage:|:configuration:|:storage mechanism</data>
      <data key="d2">Vector Store, specifically NanoVectorStore, is a storage component that holds embeddings used for semantic search functionality.:|:Vector Store is a storage mechanism used by SmolRAG, specifically the NanoVectorStore, to store embeddings for semantic search.:|:Vector Store manages document embeddings for semantic search capabilities, allowing for efficient information retrieval based on context and meaning.:|:Manages document embeddings for semantic search capabilities within the SmolRAG architecture.</data>
      <data key="d3">excerpt_id_feb905edbf8fd771c7b080447258f0ba:|:excerpt_id_5164d226bc36d8232fafc2660b1bfd87:|:excerpt_id_39a1d6ebedcdf64866e51dc2d7baf5dc:|:excerpt_id_e1f4404cf1e9a718f626b127f773cf70</data>
    </node>
    <node id="Query Processor">
      <data key="d1">function</data>
      <data key="d2">Processes different types of queries and retrieves relevant information from the system.:|:Query Processor processes different types of queries and retrieves relevant information from the system, acting as the bridge between the user requests and stored data.</data>
      <data key="d3">excerpt_id_39a1d6ebedcdf64866e51dc2d7baf5dc:|:excerpt_id_5164d226bc36d8232fafc2660b1bfd87</data>
    </node>
    <node id="LLM Interface">
      <data key="d1">interface</data>
      <data key="d2">LLM Interface communicates with OpenAI's API for embeddings and completions, enabling advanced language processing capabilities in response to queries.:|:Communicates with OpenAI's API to facilitate embeddings and completions as part of the functionality.</data>
      <data key="d3">excerpt_id_39a1d6ebedcdf64866e51dc2d7baf5dc:|:excerpt_id_5164d226bc36d8232fafc2660b1bfd87</data>
    </node>
    <node id="API Layer">
      <data key="d1">api</data>
      <data key="d2">Exposes functionality through a REST API, allowing external interactions with the system.:|:API Layer exposes functionality through a REST API, allowing external applications to interact with SmolRAG's features and components.</data>
      <data key="d3">excerpt_id_39a1d6ebedcdf64866e51dc2d7baf5dc:|:excerpt_id_5164d226bc36d8232fafc2660b1bfd87</data>
    </node>
    <node id="Document Ingestion Flow">
      <data key="d1">feature:|:process</data>
      <data key="d2">The flow for document ingestion that involves reading documents, splitting into chunks, summarization, and embedding.:|:Document Ingestion Flow outlines the steps for processing incoming documents, including reading, chunking, summarizing, and embedding.</data>
      <data key="d3">excerpt_id_39a1d6ebedcdf64866e51dc2d7baf5dc:|:excerpt_id_5164d226bc36d8232fafc2660b1bfd87</data>
    </node>
    <node id="Query Processing Flow">
      <data key="d1">feature:|:process</data>
      <data key="d2">The flow for processing user queries, ensuring relevant information is retrieved and appropriate responses are generated.:|:Query Processing Flow describes the procedure for handling user queries, from submission through processing to generating responses using the system's components.</data>
      <data key="d3">excerpt_id_39a1d6ebedcdf64866e51dc2d7baf5dc:|:excerpt_id_5164d226bc36d8232fafc2660b1bfd87</data>
    </node>
    <node id="Cosine Similarity">
      <data key="d1">function</data>
      <data key="d2">Cosine Similarity is a function that measures the cosine of the angle between two vectors, indicating their similarity.:|:Cosine Similarity is a mathematical function used to measure the cosine of the angle between two non-zero vectors, determining their similarity.</data>
      <data key="d3">excerpt_id_ad053b14f30e2ca2cbde4877068102ef:|:excerpt_id_f6b27b7a25013f2c5751328db6d6e0e3</data>
    </node>
    <node id="Similarity Scores">
      <data key="d1">variable</data>
      <data key="d2">Similarity Scores are numeric values ranging from 0 to 1, indicating how similar two vectors are, with 1 representing perfect similarity.</data>
      <data key="d3">excerpt_id_f6b27b7a25013f2c5751328db6d6e0e3</data>
    </node>
    <node id="Threshold Filtering">
      <data key="d1">feature:|:configuration</data>
      <data key="d2">Threshold Filtering is a feature that allows for the elimination of results below a certain similarity threshold in the search results.:|:Threshold Filtering is a configurable method that filters out similarity scores that do not meet a specified threshold, with a default value of 0.02.</data>
      <data key="d3">excerpt_id_9c6c3d629e2b94029b3f534beffe4780:|:excerpt_id_f6b27b7a25013f2c5751328db6d6e0e3</data>
    </node>
    <node id="Ranking">
      <data key="d1">function</data>
      <data key="d2">Ranking is a function that orders results by their similarity scores, prioritizing the most similar excerpts.</data>
      <data key="d3">excerpt_id_f6b27b7a25013f2c5751328db6d6e0e3</data>
    </node>
    <node id="Normalization">
      <data key="d1">function</data>
      <data key="d2">Normalization is a mathematical process ensuring fair comparisons between vectors, regardless of their magnitude.</data>
      <data key="d3">excerpt_id_f6b27b7a25013f2c5751328db6d6e0e3</data>
    </node>
    <node id="Query Embedding">
      <data key="d1">api:|:function</data>
      <data key="d2">Query Embedding refers to a method used for comparing the similarity of query vectors against another set of vectors, utilizing cosine similarity.:|:Query Embedding is the process of transforming query text into vector representation using a specific model for comparison purposes.:|:Query Embedding is the process of transforming user queries into embeddings for effective comparison with excerpt embeddings.</data>
      <data key="d3">excerpt_id_ad053b14f30e2ca2cbde4877068102ef:|:excerpt_id_f6b27b7a25013f2c5751328db6d6e0e3:|:excerpt_id_9c6c3d629e2b94029b3f534beffe4780</data>
    </node>
    <node id="Vector Comparison">
      <data key="d1">function</data>
      <data key="d2">Vector Comparison refers to the method of evaluating the similarities between the query vector and all excerpt vectors in the database.</data>
      <data key="d3">excerpt_id_f6b27b7a25013f2c5751328db6d6e0e3</data>
    </node>
    <node id="result">
      <data key="d1">variable</data>
      <data key="d2">The result variable represents the response text output generated by the SmolRAG API in JSON format.:|:result is a variable that stores the output generated by the llm API after processing the provided prompt.:|:result is the output variable that stores the response generated by SmolRag based on the user's query.:|:The variable 'result' stores the output of the query executed against the SmolRAG system, holding the information retrieved based on the input query.:|:result is a variable that holds the output from a query, either from cache or freshly processed.:|:The result variable holds the data that contains type, average time, minimum time, and maximum time metrics for processing.:|:result is a variable that stores the outcome of the query made to rag, which contains the answer to the query about SmolRAG.:|:result is a variable that stores the outcome of a query processed by SmolRag, containing the information retrieved based on the user input.:|:Result refers to the output of a query in the context of the code, from which an ID is accessed.:|:Result is a variable within a loop that represents each individual result from a collection, showing details about the query's type and outcome.</data>
      <data key="d3">excerpt_id_6d692b7f7ce26d7c5b94249c8453447e:|:excerpt_id_1f85cb53bc4e7de3a80fec7f9c6b4d2c:|:excerpt_id_adb7498f6f95f3de6fde939c658d11cf:|:excerpt_id_1022857c40806a92372f49dc394cbcfe:|:excerpt_id_57aae66702d1057a0462d26360d3ccef:|:excerpt_id_a73778302286b849ae1d8bdf13a41987:|:excerpt_id_cb0e5d0ad627c9ecd6e0fb7b4ac2bb43:|:excerpt_id_31dbc989f689c5be27e9ae8b6d0588c4:|:excerpt_id_2cca7c90cc52ed8a7fc9fa49eb39d02c:|:excerpt_id_0da14f0f2868bc4e6d5add7c81a2957c</data>
    </node>
    <node id="error handling">
      <data key="d1">feature</data>
      <data key="d2">Error handling is a feature of the SmolRAG API that provides feedback on client and server errors to assist in diagnosing issues.:|:error handling encompasses the strategies implemented to manage exceptions and errors within the FastAPI framework, providing user-friendly feedback.</data>
      <data key="d3">excerpt_id_57aae66702d1057a0462d26360d3ccef:|:excerpt_id_3720213ae71a08acca1f7e46b7864f3e</data>
    </node>
    <node id="400 Bad Request">
      <data key="d1">configuration</data>
      <data key="d2">400 Bad Request is a client error response indicating that the request made to the SmolRAG API is invalid or malformed.</data>
      <data key="d3">excerpt_id_57aae66702d1057a0462d26360d3ccef</data>
    </node>
    <node id="500 Internal Server Error">
      <data key="d1">configuration</data>
      <data key="d2">500 Internal Server Error is a server error response indicating that an unexpected error occurred during query processing.</data>
      <data key="d3">excerpt_id_57aae66702d1057a0462d26360d3ccef</data>
    </node>
    <node id="API Key">
      <data key="d1">feature:|:variable:|:authentication</data>
      <data key="d2">API Key is a unique identifier used to authenticate a user or program and is often included in the request headers.:|:API Key is a unique identifier used to authenticate requests made to the OpenAI API, ensuring secure access and usage tracking.:|:API Key is a method of securing the SmolRAG API by requiring a unique key that must be included in request headers.:|:An API Key is a code passed in by computer programs calling an API to identify the calling program, its developer, or its user to the website.</data>
      <data key="d3">excerpt_id_57aae66702d1057a0462d26360d3ccef:|:excerpt_id_de1f8b8f458f74d9b97d639f4ede4c9c:|:excerpt_id_30d921e9ed8b86da0f8b9366dfbaa2a7:|:excerpt_id_3d02a7878513f8025940bb3e93ae517f</data>
    </node>
    <node id="OAuth 2.0">
      <data key="d1">api:|:authentication</data>
      <data key="d2">OAuth 2.0 is a standard for authorization allowing sophisticated authentication mechanisms for applications.:|:OAuth 2.0 is a more advanced method for authentication and authorization that can be implemented for the SmolRAG API.</data>
      <data key="d3">excerpt_id_57aae66702d1057a0462d26360d3ccef:|:excerpt_id_de1f8b8f458f74d9b97d639f4ede4c9c</data>
    </node>
    <node id="JWT">
      <data key="d1">api:|:authentication</data>
      <data key="d2">JWT stands for JSON Web Tokens, a method for stateless authentication that can be used to secure the SmolRAG API.:|:JSON Web Tokens (JWT) are a means of representing claims securely between two parties, commonly used for stateless authentication.</data>
      <data key="d3">excerpt_id_57aae66702d1057a0462d26360d3ccef:|:excerpt_id_de1f8b8f458f74d9b97d639f4ede4c9c</data>
    </node>
    <node id="Environment Variable">
      <data key="d1">configuration</data>
      <data key="d2">An Environment Variable is a dynamic named value that can affect the way running processes will behave on a computer.</data>
      <data key="d3">excerpt_id_3d02a7878513f8025940bb3e93ae517f</data>
    </node>
    <node id=".env">
      <data key="d1">file</data>
      <data key="d2">The .env file is a configuration file that stores environment variables for an application, typically used for sensitive information like API keys.</data>
      <data key="d3">excerpt_id_3d02a7878513f8025940bb3e93ae517f</data>
    </node>
    <node id="source_file">
      <data key="d1">variable</data>
      <data key="d2">source_file is a variable that holds the path to the document that is to be copied into the input_docs directory.:|:source_file is a variable representing the path to the source document that needs to be copied.</data>
      <data key="d3">excerpt_id_98568b73e1554f3852d7cabeaa3a1878:|:excerpt_id_c7eb7e74a2b8451dbfbc03d8e9baccf9</data>
    </node>
    <node id="destination">
      <data key="d1">variable</data>
      <data key="d2">destination is a variable that defines the path where the document will be copied to, constructed from an input directory and the document filename.:|:destination is a variable that holds the complete path where the source file will be copied to within the input_docs directory.</data>
      <data key="d3">excerpt_id_98568b73e1554f3852d7cabeaa3a1878:|:excerpt_id_c7eb7e74a2b8451dbfbc03d8e9baccf9</data>
    </node>
    <node id="os">
      <data key="d1">module:|:api</data>
      <data key="d2">os is a Python module that provides a way of using operating system dependent functionality like reading or writing to the file system.:|:os is an API that provides a way to interact with the operating system, particularly for file and directory manipulation.</data>
      <data key="d3">excerpt_id_98568b73e1554f3852d7cabeaa3a1878:|:excerpt_id_c7eb7e74a2b8451dbfbc03d8e9baccf9</data>
    </node>
    <node id="shutil">
      <data key="d1">module:|:api</data>
      <data key="d2">shutil is a Python module used for high-level file operations, including copying files in the provided example.:|:shutil is an API that offers a higher-level interface for file operations, including copying and removing files.</data>
      <data key="d3">excerpt_id_98568b73e1554f3852d7cabeaa3a1878:|:excerpt_id_c7eb7e74a2b8451dbfbc03d8e9baccf9</data>
    </node>
    <node id="rag.import_documents">
      <data key="d1">function</data>
      <data key="d2">rag.import_documents is a function that initiates the process of importing documents from a specified directory.</data>
      <data key="d3">excerpt_id_c7eb7e74a2b8451dbfbc03d8e9baccf9</data>
    </node>
    <node id="rag.query">
      <data key="d1">function</data>
      <data key="d2">rag.query is a function used to perform a query on the ingested documents, utilizing vector search methodology.:|:The function 'rag.query()' executes a query against the RAG (Retrieval-Augmented Generation) system to obtain results based on the provided query string.</data>
      <data key="d3">excerpt_id_31dbc989f689c5be27e9ae8b6d0588c4:|:excerpt_id_c7eb7e74a2b8451dbfbc03d8e9baccf9</data>
    </node>
    <node id="SmolRag">
      <data key="d1">api:|:configuration:|:interface:|:feature:|:class:|:function</data>
      <data key="d2">SmolRag is an advanced API designed for integrating machine learning components including document handling, LLMs, and storage solutions.:|:SmolRag is a retrieval-augmented generation system that requires precise configuration for its operation, involving parameters like excerpt size and overlap.:|:SmolRag is a feature that provides functionality for document processing, querying, and knowledge graph capabilities.:|:SmolRag is the core class that handles the logic for querying and interacting with data in the application, providing the fundamental framework for the application’s operations.:|:SmolRag is a specific application programming interface that facilitates various operations related to document handling and querying.:|:SmolRag is a function that initializes settings for managing large language models and their caching mechanisms.:|:SmolRag is an API designed for advanced retrieval-augmented generation (RAG) tasks, implementing custom components for processing documents and queries.:|:SmolRag is an API designed for managing and querying documents using custom chunking strategies, enabling efficient retrieval and interaction with information.:|:SmolRag is an API that facilitates document handling, including custom chunking strategies and querying functionalities.:|:SmolRag is a class that facilitates the retrieval and processing of documents with customizable chunking strategies.:|:SmolRag is an application that combines vector search and knowledge graph methods to enhance information retrieval and processing through comprehensive queries.:|:SmolRag is a function that works with instances of OpenAiLlm for handling retrieval-augmented generation tasks.:|:SmolRag is a function implemented in the code that manages the key-value storage for documents allowing for retrieval and interaction with excerpts.:|:SmolRag is an API that can be extended for advanced functionalities, specifically in relation to integrating and customizing document retrieval and generation processes.:|:SmolRag is a broader interface that provides a base functionality for handling relationships and ranking entities.:|:SmolRag is a class used to facilitate document importation and querying, providing various query types.</data>
      <data key="d3">excerpt_id_2e0613b4c1b81b865a2002b59fe88b17:|:excerpt_id_7f32de37a5cddfe45cdff7356d2a5584:|:excerpt_id_97e526b02e37e6e2b2b176a8cb9cc039:|:excerpt_id_9224c08a6f58fb5797f206ea7efc517e:|:excerpt_id_52671ae166986e6c86752cd3194af2af:|:excerpt_id_58afd38ac61f13786dbc05d2f0c7bf8f:|:excerpt_id_ed82afd79e512c2446b7d0cddfce1ee3:|:excerpt_id_adb7498f6f95f3de6fde939c658d11cf:|:excerpt_id_8c4cef197115ed13a173ace5189be819:|:excerpt_id_8df198dc0e22767ee72f9d76b21e44aa:|:excerpt_id_754be9b4e6d3cf65d9e60bea7edeb331:|:excerpt_id_7026c9111f1e878a76710759253c04ae:|:excerpt_id_c7eb7e74a2b8451dbfbc03d8e9baccf9:|:excerpt_id_44cefee3a8e8faba70704cd4a4d676ae:|:excerpt_id_a73778302286b849ae1d8bdf13a41987:|:excerpt_id_60a78091c7c8d6dae9b144963e93551a</data>
    </node>
    <node id="document chunking">
      <data key="d1">feature</data>
      <data key="d2">document chunking is a process by which long documents are divided into smaller, manageable pieces for better processing and search efficiency.</data>
      <data key="d3">excerpt_id_c7eb7e74a2b8451dbfbc03d8e9baccf9</data>
    </node>
    <node id="text-embedding-3-small">
      <data key="d1">api</data>
      <data key="d2">text-embedding-3-small is an API model specifically designed for generating embeddings from text.:|:text-embedding-3-small is the default model used by SmolRAG for embedding text into vectors, providing a blend of expressiveness and efficiency.</data>
      <data key="d3">excerpt_id_c86849cd9a6f6eb952b7842d703f3170:|:excerpt_id_754be9b4e6d3cf65d9e60bea7edeb331</data>
    </node>
    <node id="Dimensionality">
      <data key="d1">configuration</data>
      <data key="d2">Dimensionality refers to the size of the embedding vectors, with a default of 1536 dimensions for optimal performance.:|:Dimensionality refers to the size of the embedding vectors, with the default dimension set to 1536 but available for configuration.</data>
      <data key="d3">excerpt_id_40ff8100b340e2bffbf37fe882a8ee48:|:excerpt_id_c86849cd9a6f6eb952b7842d703f3170</data>
    </node>
    <node id="Excerpt Summaries">
      <data key="d1">example</data>
      <data key="d2">Excerpt Summaries are integrated into the embedding process, providing contextual awareness and improving retrieval effectiveness by capturing the significance of excerpts.</data>
      <data key="d3">excerpt_id_c86849cd9a6f6eb952b7842d703f3170</data>
    </node>
    <node id="DATA_DIR">
      <data key="d1">variable</data>
      <data key="d2">DATA_DIR is a constant defining the path to the data directory for storing necessary data files.:|:DATA_DIR is a path constant representing the directory for storing vector databases and other data, with a default value of 'app/data'.:|:DATA_DIR is a variable signifying the directory for storing vector databases and other data, with a default value of 'app/data'.</data>
      <data key="d3">excerpt_id_0c67144102b1d81212b12e6ef61ad148:|:excerpt_id_2d095921aff5b7f80aa22d08fd18411c:|:excerpt_id_35ac427df33971aafd001dedc2094d13</data>
    </node>
    <node id="CACHE_DIR">
      <data key="d1">configuration:|:variable</data>
      <data key="d2">CACHE_DIR is a configuration variable that stores the directory path for the embedding cache.:|:CACHE_DIR is a variable indicating the directory used for storing caches, defaulting to 'app/cache'.:|:CACHE_DIR is a path constant representing the directory for storing caches, with a default value of 'app/cache'.:|:CACHE_DIR is a constant representing the path to the cache directory used for temporary storage.</data>
      <data key="d3">excerpt_id_0c67144102b1d81212b12e6ef61ad148:|:excerpt_id_8125dcd822731acc0c981b8a1307c4d3:|:excerpt_id_2d095921aff5b7f80aa22d08fd18411c:|:excerpt_id_35ac427df33971aafd001dedc2094d13</data>
    </node>
    <node id="LOG_DIR">
      <data key="d1">variable</data>
      <data key="d2">LOG_DIR is a variable that specifies the directory for storing log files, which by default is 'app/logs'.:|:LOG_DIR is a path constant that indicates where log files for the system are stored.:|:LOG_DIR is a path constant representing the directory for storing log files, with a default value of 'app/logs'.</data>
      <data key="d3">excerpt_id_0c67144102b1d81212b12e6ef61ad148:|:excerpt_id_2d095921aff5b7f80aa22d08fd18411c:|:excerpt_id_35ac427df33971aafd001dedc2094d13</data>
    </node>
    <node id="SmolRag Initialization Parameters">
      <data key="d1">function</data>
      <data key="d2">SmolRag Initialization Parameters refers to the parameters that can be set during the instantiation of the SmolRAG class to customize its behavior and functionality.</data>
      <data key="d3">excerpt_id_2d095921aff5b7f80aa22d08fd18411c</data>
    </node>
    <node id="excerpt_fn">
      <data key="d1">variable</data>
      <data key="d2">excerpt_fn is a parameter for the SmolRag constructor that specifies a function for chunking documents, with the default being 'preserve_markdown_code_excerpts'.:|:excerpt_fn is a parameter indicating the function for chunking documents, with a default set to 'naive_overlap_excerpts'.</data>
      <data key="d3">excerpt_id_2d095921aff5b7f80aa22d08fd18411c:|:excerpt_id_35ac427df33971aafd001dedc2094d13</data>
    </node>
    <node id="llm">
      <data key="d1">variable:|:api</data>
      <data key="d2">llm is a variable that refers to the LLM interface instance used within SmolRAG, defaulting to a new OpenAiLlm instance.:|:llm is an application programming interface (API) that facilitates access to a language model capable of completing prompts and generating text.:|:llm is a parameter for the SmolRag constructor representing an LLM interface instance, defaulting to a new 'OpenAiLlm' instance.</data>
      <data key="d3">excerpt_id_cb0e5d0ad627c9ecd6e0fb7b4ac2bb43:|:excerpt_id_2d095921aff5b7f80aa22d08fd18411c:|:excerpt_id_35ac427df33971aafd001dedc2094d13</data>
    </node>
    <node id="dimensions">
      <data key="d1">configuration:|:variable</data>
      <data key="d2">dimensions represents the size of each vector being stored, dictating how many features each vector will have.:|:dimensions is a parameter for the SmolRag constructor that indicates the embedding dimensions, with the default set to 1536.:|:dimensions is a variable that indicates the number of dimensions used in vector representations, specifically set to 1536 in this context.:|:Dimensions refer to the size of the embeddings, with a default value set at 1536, which can be customized when creating a `NanoVectorStore` instance.:|:dimensions represents the embedding dimensions configured in SmolRAG, with a default value of 1536.:|:dimensions is a variable defining the dimensionality of the vector embeddings used in the system, impacting storage and computation.:|:dimensions is a configuration parameter that specifies the dimensionality of the SmolRAG instance, impacting its processing capabilities.:|:dimensions is a variable that likely holds values related to the dimensional characteristics of data being handled.</data>
      <data key="d3">excerpt_id_2e0613b4c1b81b865a2002b59fe88b17:|:excerpt_id_8efc423402a060df074b1830e38ed77b:|:excerpt_id_2d095921aff5b7f80aa22d08fd18411c:|:excerpt_id_517fe6133908102185036fafd1625255:|:excerpt_id_35ac427df33971aafd001dedc2094d13:|:excerpt_id_8c4cef197115ed13a173ace5189be819:|:excerpt_id_03db7bd394b5c8f0cca7825a7bc0976e:|:excerpt_id_f8b124e0bd021d69415fab98214a7b6b</data>
    </node>
    <node id="excerpt_size">
      <data key="d1">configuration:|:variable</data>
      <data key="d2">excerpt_size specifies the maximum size of excerpts that can be extracted from documents, ensuring effective content management.:|:excerpt_size is a parameter that defines the target size for document chunks in characters, defaulting to 2000 characters.:|:excerpt_size is a parameter that defines the maximum length of each chunk created by the custom chunking strategy.:|:excerpt_size is a parameter that defines the target size for document chunks in characters, with a default value of 2000.:|:excerpt_size is a parameter that sets the target size for document chunks in characters, which defaults to 2000.:|:excerpt_size is a configuration parameter indicating the size of the text excerpts processed by SmolRAG.:|:excerpt_size is a parameter for the SmolRag constructor specifying the target size for document chunks in characters, defaulting to 2000.:|:excerpt_size is a parameter that specifies the size limit for excerpts, set at 2000 characters.</data>
      <data key="d3">excerpt_id_2e0613b4c1b81b865a2002b59fe88b17:|:excerpt_id_8efc423402a060df074b1830e38ed77b:|:excerpt_id_ce594558fb5aeae85f51870c652a415b:|:excerpt_id_ebf9009be245dbd0ab60372e5369f496:|:excerpt_id_2d095921aff5b7f80aa22d08fd18411c:|:excerpt_id_35ac427df33971aafd001dedc2094d13:|:excerpt_id_52671ae166986e6c86752cd3194af2af:|:excerpt_id_f8b124e0bd021d69415fab98214a7b6b</data>
    </node>
    <node id="overlap">
      <data key="d1">configuration:|:variable</data>
      <data key="d2">overlap indicates the number of characters that overlap between document chunks, defaulting to 200.:|:overlap is a variable indicating the number of characters that overlap between consecutive excerpts, set at 200.:|:overlap is a parameter that indicates the number of characters that overlap between document chunks, defaulting to 200 characters.:|:overlap defines the extent of overlap between document excerpts, which aids in maintaining contextual continuity.:|:overlap is a parameter indicating how much overlap should exist between consecutive chunks.:|:overlap is a parameter for the SmolRag constructor representing the overlap between chunks in characters, with a default value of 200.:|:overlap is a configuration parameter defining the amount of overlap between text chunks during processing.:|:overlap is a parameter that defines the character overlap between chunks, allowing for context continuity, with a default value of 200 characters.</data>
      <data key="d3">excerpt_id_2e0613b4c1b81b865a2002b59fe88b17:|:excerpt_id_8efc423402a060df074b1830e38ed77b:|:excerpt_id_ce594558fb5aeae85f51870c652a415b:|:excerpt_id_ebf9009be245dbd0ab60372e5369f496:|:excerpt_id_2d095921aff5b7f80aa22d08fd18411c:|:excerpt_id_35ac427df33971aafd001dedc2094d13:|:excerpt_id_52671ae166986e6c86752cd3194af2af:|:excerpt_id_f8b124e0bd021d69415fab98214a7b6b</data>
    </node>
    <node id="Default Chunking">
      <data key="d1">feature</data>
      <data key="d2">Default Chunking is a feature that allows documents to be split into overlapping chunks of approximately 2,000 characters to maintain coherence.:|:Default Chunking is a feature of SmolRAG that divides documents into overlapping chunks of approximately 2,000 characters to maintain coherence.</data>
      <data key="d3">excerpt_id_d24dd08ee554d6069354fc456f67147f:|:excerpt_id_a91137c719a0d5f9cb906bc3ae15bc3f</data>
    </node>
    <node id="Overlap Mechanism">
      <data key="d1">feature</data>
      <data key="d2">The Overlap Mechanism is a feature that provides a 200-character overlap between document chunks to ensure continuity of context.:|:The Overlap Mechanism ensures continuity by allowing an overlap of 200 characters between document chunks.</data>
      <data key="d3">excerpt_id_d24dd08ee554d6069354fc456f67147f:|:excerpt_id_a91137c719a0d5f9cb906bc3ae15bc3f</data>
    </node>
    <node id="Code Block Preservation">
      <data key="d1">feature</data>
      <data key="d2">Code Block Preservation is a feature that maintains the integrity and structure of Markdown code blocks during the chunking process.</data>
      <data key="d3">excerpt_id_a91137c719a0d5f9cb906bc3ae15bc3f</data>
    </node>
    <node id="Paragraph Awareness">
      <data key="d1">feature</data>
      <data key="d2">Paragraph Awareness is a strategy used in SmolRAG to split text at paragraph boundaries when feasible for effective chunking.</data>
      <data key="d3">excerpt_id_a91137c719a0d5f9cb906bc3ae15bc3f</data>
    </node>
    <node id="Sentence Boundaries">
      <data key="d1">feature</data>
      <data key="d2">Sentence Boundaries are respected by SmolRAG to further divide lengthy paragraphs at sentence levels, avoiding word splitting.</data>
      <data key="d3">excerpt_id_a91137c719a0d5f9cb906bc3ae15bc3f</data>
    </node>
    <node id="naive_overlap_excerpts">
      <data key="d1">function</data>
      <data key="d2">naive_overlap_excerpts is a function that implements a simple chunking strategy to split text at regular intervals with overlap.:|:naive_overlap_excerpts is a function that splits text into chunks at regular intervals with a specified overlap for consistency.:|:naive_overlap_excerpts() is a function in chunking.py that splits text at regular intervals while allowing for overlaps between chunks.:|:naive_overlap_excerpts is a simple chunking function that regularly splits text with overlaps at defined intervals.:|:naive_overlap_excerpts is a function serving as a simpler chunking strategy for text processing.:|:naive_overlap_excerpts is a built-in chunking function that splits text at regular intervals, allowing for overlap between chunks.</data>
      <data key="d3">excerpt_id_5421cc029bd40962f8f839ecf4a8d136:|:excerpt_id_ce594558fb5aeae85f51870c652a415b:|:excerpt_id_ebf9009be245dbd0ab60372e5369f496:|:excerpt_id_23b091ffbf5cfdc68a155822645cbe8f:|:excerpt_id_a91137c719a0d5f9cb906bc3ae15bc3f:|:excerpt_id_d24dd08ee554d6069354fc456f67147f:|:excerpt_id_f8b124e0bd021d69415fab98214a7b6b</data>
    </node>
    <node id="preserve_markdown_code_excerpts">
      <data key="d1">function</data>
      <data key="d2">preserve_markdown_code_excerpts is an advanced chunking function that maintains the integrity of Markdown structure and code blocks during chunking, ensuring readability.:|:The preserve_markdown_code_excerpts function is used to chunk documents into excerpts while preserving markdown formatting, ensuring that the integrity of the documents is maintained.:|:preserve_markdown_code_excerpts is a function designed to maintain the structure of markdown code excerpts during processing.:|:preserve_markdown_code_excerpts is a function designed to maintain the integrity of markdown code excerpts during processing.:|:preserve_markdown_code_excerpts is a function that respects Markdown structure when chunking documents, aiming to maintain context.:|:preserve_markdown_code_excerpts() is a sophisticated chunking strategy that respects Markdown structures and keeps code blocks intact while splitting text.:|:preserve_markdown_code_excerpts is a function used as a chunking strategy that maintains code blocks intact while splitting text at sentence boundaries.:|:preserve_markdown_code_excerpts is an advanced chunking function that respects Markdown structures and code blocks while splitting text.:|:preserve_markdown_code_excerpts is an advanced chunking function that respects the structure of Markdown and preserves code blocks.:|:preserve_markdown_code_excerpts is an advanced chunking function that maintains the structure of Markdown and any code blocks.</data>
      <data key="d3">excerpt_id_5421cc029bd40962f8f839ecf4a8d136:|:excerpt_id_ce594558fb5aeae85f51870c652a415b:|:excerpt_id_ebf9009be245dbd0ab60372e5369f496:|:excerpt_id_23b091ffbf5cfdc68a155822645cbe8f:|:excerpt_id_d24dd08ee554d6069354fc456f67147f:|:excerpt_id_a91137c719a0d5f9cb906bc3ae15bc3f:|:excerpt_id_d4a7e13bce25a456a78a4eef57373bf4:|:excerpt_id_f8b124e0bd021d69415fab98214a7b6b:|:excerpt_id_8c4cef197115ed13a173ace5189be819:|:excerpt_id_2e0613b4c1b81b865a2002b59fe88b17</data>
    </node>
    <node id="Contextual Summarization">
      <data key="d1">function:|:feature</data>
      <data key="d2">Contextual Summarization enhances the quality of each chunk, summarizing them while considering the entire document's context.:|:Contextual Summarization is a feature that summarizes each chunk while taking the entire document as context to enhance relevance.</data>
      <data key="d3">excerpt_id_d24dd08ee554d6069354fc456f67147f:|:excerpt_id_a91137c719a0d5f9cb906bc3ae15bc3f</data>
    </node>
    <node id="LLM-Based Approach">
      <data key="d1">feature</data>
      <data key="d2">LLM-Based Approach utilizes advanced language models to generate summaries, ensuring relevant content is captured accurately.</data>
      <data key="d3">excerpt_id_a91137c719a0d5f9cb906bc3ae15bc3f</data>
    </node>
    <node id="Fallback Mechanism">
      <data key="d1">feature</data>
      <data key="d2">Fallback Mechanism ensures that a default summary is used if contextual summarization fails, maintaining processing continuity.:|:Fallback Mechanism ensures that if one approach fails to find relevant information, another may succeed, providing redundancy and reliability.:|:The Fallback Mechanism is a feature that ensures a default summary is used if the summarization process fails, maintaining the continuity of processing.</data>
      <data key="d3">excerpt_id_84dc24216724ab859775d987f5bb2e19:|:excerpt_id_40ff8100b340e2bffbf37fe882a8ee48:|:excerpt_id_a91137c719a0d5f9cb906bc3ae15bc3f</data>
    </node>
    <node id="Document Ingestion Performance">
      <data key="d1">feature</data>
      <data key="d2">Document Ingestion Performance refers to the efficiency and speed of processing documents into the system, crucial for managing large collections.</data>
      <data key="d3">excerpt_id_eb65f41dba3401c3f9ecff6a2b835fca</data>
    </node>
    <node id="Chunking">
      <data key="d1">function</data>
      <data key="d2">Chunking is a function that processes large documents into smaller pieces, which can be resource-intensive and impact performance.</data>
      <data key="d3">excerpt_id_eb65f41dba3401c3f9ecff6a2b835fca</data>
    </node>
    <node id="Summarization">
      <data key="d1">function</data>
      <data key="d2">Summarization is a function that generates brief summaries for document chunks, requiring processing power and API calls.</data>
      <data key="d3">excerpt_id_eb65f41dba3401c3f9ecff6a2b835fca</data>
    </node>
    <node id="Embedding Generation">
      <data key="d1">feature:|:function</data>
      <data key="d2">Embedding Generation is a function that creates vector representations of text chunks, often requiring API calls and being time-consuming.:|:Embedding Generation is a feature that creates vector representations for document chunks and queries, crucial for performing similarity operations.</data>
      <data key="d3">excerpt_id_eb65f41dba3401c3f9ecff6a2b835fca:|:excerpt_id_81db384c7c323402180915d5a9c65d67</data>
    </node>
    <node id="Entity Extraction">
      <data key="d1">feature:|:function</data>
      <data key="d2">Entity Extraction is a feature that identifies and classifies entities and relationships from document chunks, enhancing data organization.:|:Entity Extraction is a step in the document ingestion process that involves identifying key entities from each document excerpt using LLM-based analysis.:|:Entity Extraction retrieves entities connected by the top-ranked relationships to provide detailed insights.:|:Entity Extraction is a function that identifies and extracts relevant entities and relationships from the text, relying on API calls.:|:Entity Extraction refers to the process of identifying and classifying entities mentioned in text, which is crucial for creating knowledge graphs.</data>
      <data key="d3">excerpt_id_33641a6c02e3c56addefda7f4288b5b7:|:excerpt_id_59fb313f068a75f4e40be3bf7b095013:|:excerpt_id_81db384c7c323402180915d5a9c65d67:|:excerpt_id_eb65f41dba3401c3f9ecff6a2b835fca:|:excerpt_id_2f91a07d0891228b7332afeffe8b7a42</data>
    </node>
    <node id="Batch Processing">
      <data key="d1">function:|:optimization</data>
      <data key="d2">Batch Processing is an optimization strategy to manage memory usage by processing documents in groups rather than individually.:|:Batch Processing is a function that allows multiple items to be embedded in a single API call, optimizing embedding operations for efficiency.</data>
      <data key="d3">excerpt_id_eb65f41dba3401c3f9ecff6a2b835fca:|:excerpt_id_46387a7852ed874c1b3ab073c392b95b</data>
    </node>
    <node id="Incremental Updates">
      <data key="d1">function:|:optimization</data>
      <data key="d2">Incremental Updates is a function in SmolRAG that allows for the gradual updating of the knowledge graph when documents are modified.:|:Incremental Updates is an optimization strategy that processes only new or modified documents to save time and resources.:|:Incremental Updates describes the function where only affected excerpts are re-embedded when changes occur in documents.</data>
      <data key="d3">excerpt_id_eb65f41dba3401c3f9ecff6a2b835fca:|:excerpt_id_46387a7852ed874c1b3ab073c392b95b:|:excerpt_id_98340282e700c542414080ecac3ff4a6</data>
    </node>
    <node id="Parallel Processing">
      <data key="d1">function:|:optimization</data>
      <data key="d2">Parallel Processing executes knowledge graph and vector searches simultaneously to streamline the query response process.:|:Parallel Processing is an optimization strategy that performs independent operations simultaneously to improve efficiency.</data>
      <data key="d3">excerpt_id_eb65f41dba3401c3f9ecff6a2b835fca:|:excerpt_id_33641a6c02e3c56addefda7f4288b5b7</data>
    </node>
    <node id="Caching">
      <data key="d1">feature:|:optimization:|:function:|:example</data>
      <data key="d2">Caching is an optimization strategy that stores frequently used data to reduce the need for repeated processing and API calls.:|:Caching is a function that stores frequently accessed data to improve retrieval times and resource usage.:|:Caching is a strategy to store and reuse API responses to minimize unnecessary API calls, thus saving costs and time.:|:Caching is a performance optimization technique used to improve the efficiency of API queries by storing frequently accessed data.:|:Caching is a strategy employed to store query embeddings temporarily to prevent redundant API calls and improve efficiency.</data>
      <data key="d3">excerpt_id_dcec4d38f0e3c0cff01b04e3b7bdf6ce:|:excerpt_id_63cd91bc48a4a86dbc4244526ba83736:|:excerpt_id_b3a95e34944a889758e6b0c6d679b0e6:|:excerpt_id_eb65f41dba3401c3f9ecff6a2b835fca:|:excerpt_id_81db384c7c323402180915d5a9c65d67</data>
    </node>
    <node id="NetworkX">
      <data key="d1">library</data>
      <data key="d2">NetworkX is a Python library used for graph analysis, providing functionalities for storing and processing entities and relationships in a knowledge graph.</data>
      <data key="d3">excerpt_id_2f91a07d0891228b7332afeffe8b7a42</data>
    </node>
    <node id="Relationship Extraction">
      <data key="d1">function</data>
      <data key="d2">Relationship Extraction refers to identifying relationships between entities within the same excerpt of the document during the ingestion process.</data>
      <data key="d3">excerpt_id_2f91a07d0891228b7332afeffe8b7a42</data>
    </node>
    <node id="Property Assignment">
      <data key="d1">function</data>
      <data key="d2">Property Assignment involves linking properties to both entities and relationships to enrich the knowledge graph with additional information.</data>
      <data key="d3">excerpt_id_2f91a07d0891228b7332afeffe8b7a42</data>
    </node>
    <node id="Deduplication and Merging">
      <data key="d1">function</data>
      <data key="d2">Deduplication and Merging is the process of checking for existing entities and merging their properties to avoid redundancy in the knowledge graph.</data>
      <data key="d3">excerpt_id_2f91a07d0891228b7332afeffe8b7a42</data>
    </node>
    <node id="Graph Storage">
      <data key="d1">feature</data>
      <data key="d2">Graph Storage is the mechanism used to store entities and relationships in an efficient structure, allowing for quick retrieval and analysis.</data>
      <data key="d3">excerpt_id_2f91a07d0891228b7332afeffe8b7a42</data>
    </node>
    <node id="Graph Operations">
      <data key="d1">function</data>
      <data key="d2">Graph Operations consist of algorithms provided by NetworkX for efficient traversal and analysis of the graph structure.</data>
      <data key="d3">excerpt_id_2f91a07d0891228b7332afeffe8b7a42</data>
    </node>
    <node id="Serialization">
      <data key="d1">function</data>
      <data key="d2">Serialization is the process of converting data to a format that can be stored on disk, allowing persistence between runs.:|:Serialization is the process of saving the graph to disk, ensuring persistence of the knowledge graph between different runs of the application.:|:Serialization is a function in SmolRAG that handles converting data to a disk format for persistence between runs.</data>
      <data key="d3">excerpt_id_feb905edbf8fd771c7b080447258f0ba:|:excerpt_id_2f91a07d0891228b7332afeffe8b7a42:|:excerpt_id_e1f4404cf1e9a718f626b127f773cf70</data>
    </node>
    <node id="brid_kg_query">
      <data key="d1">function</data>
      <data key="d2">brid_kg_query is a function that performs a hybrid knowledge graph query, integrating different data retrieval methods.:|:brid_kg_query() is a function that performs a hybrid knowledge graph query, allowing users to retrieve information from both structured and unstructured sources.</data>
      <data key="d3">excerpt_id_23b091ffbf5cfdc68a155822645cbe8f:|:excerpt_id_5421cc029bd40962f8f839ecf4a8d136</data>
    </node>
    <node id="mix_query">
      <data key="d1">function</data>
      <data key="d2">mix_query is a function that combines vector search and knowledge graph queries to enhance the retrieval process.:|:mix_query() is a function that combines vector search and knowledge graph queries, enabling more versatile information retrieval.:|:mix_query allows users to process a query that combines aspects of local and global knowledge graph queries.</data>
      <data key="d3">excerpt_id_23b091ffbf5cfdc68a155822645cbe8f:|:excerpt_id_79e52f475952407e95cfdbc653290c6d:|:excerpt_id_5421cc029bd40962f8f839ecf4a8d136</data>
    </node>
    <node id="remove_document_by_id">
      <data key="d1">function</data>
      <data key="d2">The remove_document_by_id function allows users to remove a document from SmolRAG based on its document ID.:|:remove_document_by_id is a function that allows users to remove a document from SmolRAG's internal representation using the document ID.:|:remove_document_by_id is a function that allows the system to remove a document from the database using its ID.:|:remove_document_by_id() is a function that removes a document from the system based on its unique identifier.</data>
      <data key="d3">excerpt_id_9e30dc3a8159dc93859b8664cf4db134:|:excerpt_id_3de9971b782eac586dc03f5864ad60f3:|:excerpt_id_23b091ffbf5cfdc68a155822645cbe8f:|:excerpt_id_5421cc029bd40962f8f839ecf4a8d136</data>
    </node>
    <node id="OpenAiLlm">
      <data key="d1">interface:|:api</data>
      <data key="d2">OpenAiLlm is a class that provides an interface to OpenAI's API, facilitating the generation of embeddings and completions.:|:OpenAiLlm is a custom interface for interacting with OpenAI models, allowing the specification of different settings for different tasks.:|:OpenAiLlm is an API component that provides interaction with OpenAI's language model, facilitating embeddings and query processing.:|:OpenAiLlm is an API that interfaces with OpenAI's language models, capable of providing text generation and embedding services.:|:OpenAiLlm refers to the API used for large language model interactions, particularly for generating completions based on prompts.:|:OpenAiLlm interfaces with OpenAI's API to handle embeddings and completions, facilitating communication with external AI services.:|:OpenAiLlm is an interface for creating language model instances with customizable settings for completion and embedding models.:|:OpenAiLlm is a customizable interface to interact with OpenAI's API, allowing for specific settings related to language model selection and configuration.:|:OpenAiLlm is a class that provides a clean interface to OpenAI's API, facilitating the integration of embeddings and completions into applications.</data>
      <data key="d3">excerpt_id_5421cc029bd40962f8f839ecf4a8d136:|:excerpt_id_ce594558fb5aeae85f51870c652a415b:|:excerpt_id_ebf9009be245dbd0ab60372e5369f496:|:excerpt_id_23b091ffbf5cfdc68a155822645cbe8f:|:excerpt_id_70868e98ba121059de996d38d21a0dd7:|:excerpt_id_8c4cef197115ed13a173ace5189be819:|:excerpt_id_754be9b4e6d3cf65d9e60bea7edeb331:|:excerpt_id_2e0613b4c1b81b865a2002b59fe88b17:|:excerpt_id_fcc70198270a02757f7c7194e7f32c25</data>
    </node>
    <node id="get_embedding">
      <data key="d1">function</data>
      <data key="d2">get_embedding is a function of RateLimitedOpenAiLlm that retrieves the embedding for a given text after managing the rate limit.:|:get_embedding is a method that retrieves an embedding vector for a given text input using the OpenAI API.:|:get_embedding() is a method in the OpenAiLlm class that retrieves an embedding for a given piece of text, enabling semantic understanding.</data>
      <data key="d3">excerpt_id_fa24916a2f72f3ae233e5d1977ee1ae2:|:excerpt_id_23b091ffbf5cfdc68a155822645cbe8f:|:excerpt_id_5421cc029bd40962f8f839ecf4a8d136</data>
    </node>
    <node id="get_completion">
      <data key="d1">function</data>
      <data key="d2">get_completion() is a method in the OpenAiLlm class that generates a completion for a given prompt, potentially using context and caching to optimize performance.:|:get_completion is a method that generates a completion for a given prompt using OpenAI's API, with configurable options.:|:get_completion is a function of RateLimitedOpenAiLlm that processes a prompt to generate a response, also obeying the rate limit.</data>
      <data key="d3">excerpt_id_fa24916a2f72f3ae233e5d1977ee1ae2:|:excerpt_id_23b091ffbf5cfdc68a155822645cbe8f:|:excerpt_id_5421cc029bd40962f8f839ecf4a8d136</data>
    </node>
    <node id="upsert">
      <data key="d1">function</data>
      <data key="d2">upsert is a method that inserts or updates items in the NanoVectorStore, ensuring data consistency.:|:upsert is a function in BufferedVectorStore that adds items to the buffer and manages the conditions under which the buffered items are committed to the base storage.:|:The upsert function updates the data in the base storage with the contents of the buffer, ensuring that the latest data is always saved.</data>
      <data key="d3">excerpt_id_01ca0248de3b39f386fb010c1c75727a:|:excerpt_id_5421cc029bd40962f8f839ecf4a8d136:|:excerpt_id_b6a3bf9520f31279c695c790576b2216</data>
    </node>
    <node id="delete">
      <data key="d1">function</data>
      <data key="d2">delete is a method that removes specified items from the NanoVectorStore, maintaining data management.</data>
      <data key="d3">excerpt_id_5421cc029bd40962f8f839ecf4a8d136</data>
    </node>
    <node id="save">
      <data key="d1">function</data>
      <data key="d2">The save function is responsible for saving data to a base storage, and it clears the buffer after each operation.:|:save is a method that saves the current state of the NanoVectorStore to disk for persistence.:|:save is a function in BufferedVectorStore that commits any remaining buffered items to the base store and triggers a save operation.:|:save is a function that saves the current state of the store to disk, preserving all key-value pairs for future use.</data>
      <data key="d3">excerpt_id_048561f7b91b06effbd2fa38d6b6e86d:|:excerpt_id_01ca0248de3b39f386fb010c1c75727a:|:excerpt_id_b6a3bf9520f31279c695c790576b2216:|:excerpt_id_5421cc029bd40962f8f839ecf4a8d136</data>
    </node>
    <node id="Top-k Excerpts">
      <data key="d1">configuration</data>
      <data key="d2">Top-k Excerpts refer to the selected most similar excerpts based on the query embedding comparison, providing the most relevant context for further analysis.</data>
      <data key="d3">excerpt_id_ad053b14f30e2ca2cbde4877068102ef</data>
    </node>
    <node id="Context for the LLM">
      <data key="d1">feature</data>
      <data key="d2">Context for the LLM is the information derived from selected excerpts and their summaries, forming a basis for how the language model will respond or generate text.</data>
      <data key="d3">excerpt_id_ad053b14f30e2ca2cbde4877068102ef</data>
    </node>
    <node id="Strengths and Weaknesses">
      <data key="d1">feature</data>
      <data key="d2">Strengths and Weaknesses highlight the advantages and limitations of using query embeddings for information retrieval and understanding.</data>
      <data key="d3">excerpt_id_ad053b14f30e2ca2cbde4877068102ef</data>
    </node>
    <node id="Chunking Module">
      <data key="d1">function</data>
      <data key="d2">The Chunking Module provides strategies for splitting documents into manageable pieces for processing.</data>
      <data key="d3">excerpt_id_70868e98ba121059de996d38d21a0dd7</data>
    </node>
    <node id="NetworkXGraphStore">
      <data key="d1">class:|:variable:|:interface:|:api:|:configuration</data>
      <data key="d2">The NetworkXGraphStore class is a graph database implementation that utilizes NetworkX to manage the storage of entities and relationships.:|:NetworkXGraphStore is an implementation for managing a knowledge graph, allowing for the customization of storage locations within SmolRAG.:|:NetworkXGraphStore is a configuration component that utilizes NetworkX for managing and storing graph-based relationships among entities.:|:NetworkXGraphStore is utilized for managing graph-based data structures, facilitating knowledge representation within the application.:|:NetworkXGraphStore is a graph database that utilizes NetworkX for managing entities and their relationships effectively.:|:NetworkXGraphStore is an interface used for implementing knowledge graphs in a customizable manner.:|:The NetworkXGraphStore class implements a graph database built on NetworkX for managing entities and their relationships.</data>
      <data key="d3">excerpt_id_90c7838ea456feae14abfd87267bdfeb:|:excerpt_id_60a78091c7c8d6dae9b144963e93551a:|:excerpt_id_70868e98ba121059de996d38d21a0dd7:|:excerpt_id_8c4cef197115ed13a173ace5189be819:|:excerpt_id_0e491c74d7a88194d22edb5dcf034178:|:excerpt_id_517fe6133908102185036fafd1625255:|:excerpt_id_2e0613b4c1b81b865a2002b59fe88b17</data>
    </node>
    <node id="JsonKvStore">
      <data key="d1">configuration:|:class:|:api:|:variable</data>
      <data key="d2">JsonKvStore is a key-value store that manages JSON formatted data, utilized for caching query results and embeddings.:|:JsonKvStore functions as a simple key-value store for caching metadata, enhancing data retrieval performance.:|:The JsonKvStore class serves as a lightweight key-value store for caching data, supporting various operations to manage key-value pairs efficiently.:|:JsonKvStore is a Python API that allows users to create key-value stores from JSON files, providing a flexible storage solution for metadata.:|:JsonKvStore is a configuration option that specifies the storage method for key-value pairs using JSON format.:|:The JsonKvStore class offers a simple key-value store for caching and managing metadata, enhancing application performance.:|:JsonKvStore is a key-value storage solution that utilizes JSON format for data management, ideal for caching and lightweight databases.</data>
      <data key="d3">excerpt_id_90c7838ea456feae14abfd87267bdfeb:|:excerpt_id_51c03df854681a0be44a0cb38da8ceed:|:excerpt_id_70868e98ba121059de996d38d21a0dd7:|:excerpt_id_8c4cef197115ed13a173ace5189be819:|:excerpt_id_0e491c74d7a88194d22edb5dcf034178:|:excerpt_id_754be9b4e6d3cf65d9e60bea7edeb331:|:excerpt_id_2e0613b4c1b81b865a2002b59fe88b17</data>
    </node>
    <node id="API Module">
      <data key="d1">interface</data>
      <data key="d2">The API Module is a FastAPI implementation that exposes the functionalities of SmolRAG through a RESTful interface.</data>
      <data key="d3">excerpt_id_70868e98ba121059de996d38d21a0dd7</data>
    </node>
    <node id="Efficient Storage">
      <data key="d1">feature</data>
      <data key="d2">Efficient Storage refers to the mechanism by which vectors are stored in a format that optimizes fast retrieval in the NanoVectorStore.</data>
      <data key="d3">excerpt_id_dcec4d38f0e3c0cff01b04e3b7bdf6ce</data>
    </node>
    <node id="In-Memory Processing">
      <data key="d1">function</data>
      <data key="d2">In-Memory Processing allows vectors to be loaded into memory during search operations for improved speed.</data>
      <data key="d3">excerpt_id_dcec4d38f0e3c0cff01b04e3b7bdf6ce</data>
    </node>
    <node id="CRUD Operations">
      <data key="d1">feature</data>
      <data key="d2">CRUD Operations enable the creating, reading, updating, and deleting of vectors within the NanoVectorStore for effective management.</data>
      <data key="d3">excerpt_id_dcec4d38f0e3c0cff01b04e3b7bdf6ce</data>
    </node>
    <node id="Dimensionality Management">
      <data key="d1">feature:|:function</data>
      <data key="d2">Dimensionality Management involves balancing the dimensions of the vectors against performance requirements to optimize search efficiency.:|:Dimensionality Management is a feature that balances embedding dimension with performance requirements, crucial for maintaining system efficiency.</data>
      <data key="d3">excerpt_id_46387a7852ed874c1b3ab073c392b95b:|:excerpt_id_dcec4d38f0e3c0cff01b04e3b7bdf6ce</data>
    </node>
    <node id="Excerpt Retrieval">
      <data key="d1">function</data>
      <data key="d2">Excerpt Retrieval is the process of selecting the most relevant excerpts from document collections after conducting a similarity search.</data>
      <data key="d3">excerpt_id_dcec4d38f0e3c0cff01b04e3b7bdf6ce</data>
    </node>
    <node id="Summary Inclusion">
      <data key="d1">feature</data>
      <data key="d2">Summary Inclusion ensures that a summary of each excerpt is concatenated with the full text for contextual relevance.</data>
      <data key="d3">excerpt_id_dcec4d38f0e3c0cff01b04e3b7bdf6ce</data>
    </node>
    <node id="Prompt Construction">
      <data key="d1">function</data>
      <data key="d2">Prompt Construction is the final step where the formatted context is integrated into a prompt for the language model.</data>
      <data key="d3">excerpt_id_dcec4d38f0e3c0cff01b04e3b7bdf6ce</data>
    </node>
    <node id="APIKeyHeader">
      <data key="d1">interface</data>
      <data key="d2">APIKeyHeader is a FastAPI component that allows the extraction of API Key from the request headers for authentication purposes.</data>
      <data key="d3">excerpt_id_de1f8b8f458f74d9b97d639f4ede4c9c</data>
    </node>
    <node id="FastAPI">
      <data key="d1">technology:|:framework:|:configuration</data>
      <data key="d2">FastAPI is a modern, fast (high-performance) web framework for building APIs with Python based on standard Python type hints.:|:FastAPI is a modern web framework for building APIs with Python, known for its speed and efficiency in creating robust interfaces.:|:FastAPI is a modern web framework for building APIs with Python, which allows for easy handling of requests and responses.:|:FastAPI is a modern web framework for building APIs with Python 3.7+ that can be customized with middleware and error handlers.:|:FastAPI is a modern web framework used for building APIs with Python, known for its high performance and ease of use.:|:FastAPI is a modern web framework for building APIs with Python, featuring easy-to-use configuration for middlewares and dependencies.</data>
      <data key="d3">excerpt_id_b9097e11b1551a13941242fc121df006:|:excerpt_id_e65b14cb533eda0a73c1a54d86336320:|:excerpt_id_df5dd931f692d6413ff6151ca37e0c76:|:excerpt_id_de1f8b8f458f74d9b97d639f4ede4c9c:|:excerpt_id_c4c3ec315a84b895249de1a09e9984ee:|:excerpt_id_1123c47dc960c83e906ef0521acbf692</data>
    </node>
    <node id="query_endpoint">
      <data key="d1">function</data>
      <data key="d2">query_endpoint function defines an asynchronous endpoint to handle incoming queries, processing them using the defined timeout mechanism.:|:query_endpoint is an asynchronous function that handles POST requests to the FastAPI application, processing queries based on the given request.:|:query_endpoint is an asynchronous function defined to handle POST requests at the '/query' endpoint, processing incoming queries and returning results.:|:query_endpoint is an asynchronous function in FastAPI that processes incoming requests after verifying API key authentication.</data>
      <data key="d3">excerpt_id_de1f8b8f458f74d9b97d639f4ede4c9c:|:excerpt_id_f460391fbb913e0e360f66999d788989:|:excerpt_id_3720213ae71a08acca1f7e46b7864f3e:|:excerpt_id_1123c47dc960c83e906ef0521acbf692</data>
    </node>
    <node id="input_docs">
      <data key="d1">variable</data>
      <data key="d2">input_docs is the directory path where documents are kept for ingestion processing.</data>
      <data key="d3">excerpt_id_81631ae5feaa160d24c7aa3331760a64</data>
    </node>
    <node id="Document Ingestion Issues">
      <data key="d1">feature</data>
      <data key="d2">Document Ingestion Issues describes common problems and their potential causes and solutions related to the ingestion of documents.</data>
      <data key="d3">excerpt_id_81631ae5feaa160d24c7aa3331760a64</data>
    </node>
    <node id="Permission Issues">
      <data key="d1">configuration</data>
      <data key="d2">Permission Issues refer to the restrictions that may prevent documents from being accessed for ingestion due to user permissions.</data>
      <data key="d3">excerpt_id_81631ae5feaa160d24c7aa3331760a64</data>
    </node>
    <node id="Rate Limiting">
      <data key="d1">feature:|:function:|:example:|:configuration</data>
      <data key="d2">Rate Limiting is a practice to control the flow of API requests to avoid exceeding allowed limits and resulting in errors.:|:Rate Limiting is a strategy employed to control the number of API calls to avoid exceeding the API limits.:|:Rate Limiting is a feature to control the number of requests a client can make to the API within a specified time frame, ensuring fair usage.:|:Rate Limiting refers to the control mechanisms that restrict the number of requests made to the OpenAI API within a defined timeframe to avoid overloading servers.:|:Rate Limiting is a function to control the number of API calls made to prevent overload and ensure fair resource use.:|:Rate Limiting is a feature designed to prevent API rate limit errors by controlling the number of requests made to an API within a specified timeframe.</data>
      <data key="d3">excerpt_id_30d921e9ed8b86da0f8b9366dfbaa2a7:|:excerpt_id_b35b21c7869785d9ef1329f450f10a5d:|:excerpt_id_b3a95e34944a889758e6b0c6d679b0e6:|:excerpt_id_df5dd931f692d6413ff6151ca37e0c76:|:excerpt_id_81db384c7c323402180915d5a9c65d67:|:excerpt_id_81631ae5feaa160d24c7aa3331760a64</data>
    </node>
    <node id="check_resources">
      <data key="d1">function</data>
      <data key="d2">check_resources is a function that monitors the CPU and memory usage to ensure the system has adequate resources for document processing.</data>
      <data key="d3">excerpt_id_81631ae5feaa160d24c7aa3331760a64</data>
    </node>
    <node id="Mix Query Method">
      <data key="d1">function</data>
      <data key="d2">The Mix Query Method is a function within SmolRag that integrates vector search and knowledge graph techniques, tailored for complex questions requiring both semantic and structured data.</data>
      <data key="d3">excerpt_id_44cefee3a8e8faba70704cd4a4d676ae</data>
    </node>
    <node id="API Endpoint">
      <data key="d1">interface</data>
      <data key="d2">The API Endpoint provides a programmatic interface for users to interact with SmolRag through standard HTTP requests, enabling various query types.</data>
      <data key="d3">excerpt_id_44cefee3a8e8faba70704cd4a4d676ae</data>
    </node>
    <node id="Knowledge Graph Query">
      <data key="d1">function:|:variable</data>
      <data key="d2">Knowledge Graph Query is a function call to the API aimed at obtaining insights into relationships between entities.:|:Knowledge Graph Query is a type of API request dedicated to querying entities related to specific topics in the SmolRAG system.:|:The Knowledge Graph Query method focuses on retrieving structured data and relationships among entities within a specified knowledge graph.</data>
      <data key="d3">excerpt_id_453681d430472ffcca54f90331e78fee:|:excerpt_id_06064de98cbba1d78e30fa4dc9a3ba41:|:excerpt_id_44cefee3a8e8faba70704cd4a4d676ae</data>
    </node>
    <node id="Complex Question">
      <data key="d1">example</data>
      <data key="d2">A Complex Question is an inquiry that requires the integration of multiple query types for comprehensive understanding and accurate responses.</data>
      <data key="d3">excerpt_id_44cefee3a8e8faba70704cd4a4d676ae</data>
    </node>
    <node id="Similarity Computation">
      <data key="d1">function</data>
      <data key="d2">Similarity Computation involves comparing query embeddings to excerpt embeddings to determine relevance using cosine similarity.</data>
      <data key="d3">excerpt_id_9c6c3d629e2b94029b3f534beffe4780</data>
    </node>
    <node id="Top-K Selection">
      <data key="d1">function</data>
      <data key="d2">Top-K Selection is the process of identifying and selecting the top-k most similar excerpts from ranked results for further processing.</data>
      <data key="d3">excerpt_id_9c6c3d629e2b94029b3f534beffe4780</data>
    </node>
    <node id="Entity Embeddings">
      <data key="d1">feature:|:variable</data>
      <data key="d2">Entity Embeddings are generated from extracted entities, based on their names and descriptions for enhanced search capabilities.:|:Entity Embeddings are vector representations created for each entity based on its name and description, allowing for enhanced semantic understanding.</data>
      <data key="d3">excerpt_id_7c686d971d2fea42e5ba02fc141455aa:|:excerpt_id_9c6c3d629e2b94029b3f534beffe4780</data>
    </node>
    <node id="Relationship Embeddings">
      <data key="d1">feature:|:variable</data>
      <data key="d2">Relationship Embeddings are vector representations crafted based on keywords, source, target, and description of the relationships, facilitating semantic searches.:|:Relationship Embeddings are created to represent the associations between entities, aiding in understanding connections in the data.</data>
      <data key="d3">excerpt_id_7c686d971d2fea42e5ba02fc141455aa:|:excerpt_id_9c6c3d629e2b94029b3f534beffe4780</data>
    </node>
    <node id="custom_chunking_strategy">
      <data key="d1">function</data>
      <data key="d2">custom_chunking_strategy is a user-defined function that allows for implementing personalized chunking logic for the text processing in SmolRAG.:|:custom_chunking_strategy is a function used within SmolRag to define specific rules for how documents are divided into manageable chunks for processing.:|:custom_chunking_strategy is a user-defined function implemented to create personalized chunking logic for document processing within the SmolRAG framework.:|:custom_chunking_strategy is a function designed to define how documents should be divided into chunks according to specific requirements.:|:custom_chunking_strategy is a user-defined function demonstrating how to implement a custom method for chunking text into manageable pieces.:|:custom_chunking_strategy is a function that defines a strategy for chunking text into segments based on specified criteria such as excerpt size and overlap.</data>
      <data key="d3">excerpt_id_ce594558fb5aeae85f51870c652a415b:|:excerpt_id_ebf9009be245dbd0ab60372e5369f496:|:excerpt_id_adb7498f6f95f3de6fde939c658d11cf:|:excerpt_id_52671ae166986e6c86752cd3194af2af:|:excerpt_id_3de9971b782eac586dc03f5864ad60f3:|:excerpt_id_a73778302286b849ae1d8bdf13a41987</data>
    </node>
    <node id="OpenAI's embedding models">
      <data key="d1">api</data>
      <data key="d2">OpenAI's embedding models are utilized to generate vectors from text, playing a central role in the functionality of SmolRAG.</data>
      <data key="d3">excerpt_id_05e1658cae5a313a0bc5c4383179fbf5</data>
    </node>
    <node id="Embedding Dimension">
      <data key="d1">configuration</data>
      <data key="d2">Embedding Dimension specifies the size of the vector used in the embedding process, with the default set at 1536.</data>
      <data key="d3">excerpt_id_05e1658cae5a313a0bc5c4383179fbf5</data>
    </node>
    <node id="Metadata">
      <data key="d1">variable</data>
      <data key="d2">Metadata includes information related to each embedding, such as document ID, excerpt ID, and timestamp, facilitating better organization and retrieval.:|:Metadata includes additional information associated with each embedding, such as document ID, excerpt ID, and timestamp to facilitate retrieval.</data>
      <data key="d3">excerpt_id_40ff8100b340e2bffbf37fe882a8ee48:|:excerpt_id_05e1658cae5a313a0bc5c4383179fbf5</data>
    </node>
    <node id="Change Detection Mechanism">
      <data key="d1">configuration:|:function</data>
      <data key="d2">Change Detection Mechanism ensures that the information within SmolRAG remains up-to-date by monitoring and updating relevant data.:|:Change Detection Mechanism ensures that processed information remains current, enhancing the system's effectiveness.:|:Change Detection Mechanism is responsible for ensuring that information remains current within the ingestion process.</data>
      <data key="d3">excerpt_id_05e1658cae5a313a0bc5c4383179fbf5:|:excerpt_id_19a4021fa6c980fe5768130b704cc56e:|:excerpt_id_e1f4404cf1e9a718f626b127f773cf70</data>
    </node>
    <node id="Vector Search">
      <data key="d1">api:|:feature:|:function</data>
      <data key="d2">Vector Search is a feature that enables searching through a large number of vectors, although it may be slow due to the volume of data.:|:Vector Search is a function that offers rapid query execution, driven by the size of the vector database, and is considered the fastest query type.:|:Vector Search is characterized as the fastest query type with medium detail level and low structured reasoning.</data>
      <data key="d3">excerpt_id_d2ba6034366fcca143d67219ee341a22:|:excerpt_id_84dc24216724ab859775d987f5bb2e19:|:excerpt_id_e22b8da6dcf20fed5f472fe57b90902b</data>
    </node>
    <node id="Knowledge Graph Queries">
      <data key="d1">feature:|:function</data>
      <data key="d2">Knowledge Graph Queries are functions that allow users to access and query a knowledge graph in various ways, based on different query types.:|:Knowledge Graph Queries retrieve information based on the size and complexity of the knowledge graph, affecting overall performance.:|:Knowledge Graph Queries are a feature that allows for complex graph traversals, which can be computationally expensive.</data>
      <data key="d3">excerpt_id_d2ba6034366fcca143d67219ee341a22:|:excerpt_id_7c686d971d2fea42e5ba02fc141455aa:|:excerpt_id_e22b8da6dcf20fed5f472fe57b90902b</data>
    </node>
    <node id="LLM Generation">
      <data key="d1">feature</data>
      <data key="d2">LLM Generation refers to the process of generating responses using a large language model, which can be time-consuming, particularly with larger contexts.</data>
      <data key="d3">excerpt_id_e22b8da6dcf20fed5f472fe57b90902b</data>
    </node>
    <node id="Query Caching">
      <data key="d1">example</data>
      <data key="d2">Query Caching is an optimization strategy that stores previous query results to avoid reprocessing identical queries, thereby enhancing performance.</data>
      <data key="d3">excerpt_id_e22b8da6dcf20fed5f472fe57b90902b</data>
    </node>
    <node id="Embedding Caching">
      <data key="d1">example</data>
      <data key="d2">Embedding Caching is used to store query embeddings, reducing the need to regenerate them for the same query, improving response times.</data>
      <data key="d3">excerpt_id_e22b8da6dcf20fed5f472fe57b90902b</data>
    </node>
    <node id="Context Limitation">
      <data key="d1">example</data>
      <data key="d2">Context Limitation is a strategy to restrict the number of excerpts included in a context to speed up LLM processing.</data>
      <data key="d3">excerpt_id_e22b8da6dcf20fed5f472fe57b90902b</data>
    </node>
    <node id="Separate Storage">
      <data key="d1">configuration</data>
      <data key="d2">Separate Storage refers to the dedicated vector stores where embeddings for entities and relationships are kept, ensuring organized management of data.</data>
      <data key="d3">excerpt_id_7c686d971d2fea42e5ba02fc141455aa</data>
    </node>
    <node id="Semantic Search">
      <data key="d1">concept:|:function</data>
      <data key="d2">Semantic Search is a function enabled by the embeddings that allows for retrieving entities and relationships based on the meaning rather than exact matches.:|:Semantic Search refers to the capability of finding relevant content based on meaning rather than mere keywords, enabled by vector embeddings.</data>
      <data key="d3">excerpt_id_40ff8100b340e2bffbf37fe882a8ee48:|:excerpt_id_7c686d971d2fea42e5ba02fc141455aa</data>
    </node>
    <node id="Entity Search" />
    <node id="save()">
      <data key="d1">function</data>
      <data key="d2">The save() function is responsible for saving the current state of the store to disk, ensuring persistence of data.</data>
      <data key="d3">excerpt_id_90c7838ea456feae14abfd87267bdfeb</data>
    </node>
    <node id="add_node()">
      <data key="d1">function</data>
      <data key="d2">The add_node() function adds a new entity node to the graph, specifying its name and attributes for identification and characterization.</data>
      <data key="d3">excerpt_id_90c7838ea456feae14abfd87267bdfeb</data>
    </node>
    <node id="add_edge()">
      <data key="d1">function</data>
      <data key="d2">The add_edge() function creates a relationship between two entities in the graph, capturing the interactions or associations between them.</data>
      <data key="d3">excerpt_id_90c7838ea456feae14abfd87267bdfeb</data>
    </node>
    <node id="get_node()">
      <data key="d1">function</data>
      <data key="d2">The get_node() function retrieves an entity node from the graph based on its name, allowing for access and manipulation of that entity.</data>
      <data key="d3">excerpt_id_90c7838ea456feae14abfd87267bdfeb</data>
    </node>
    <node id="get_edge()">
      <data key="d1">function</data>
      <data key="d2">The get_edge() function obtains the relationship between two nodes, identifying how they are interconnected in the graph.</data>
      <data key="d3">excerpt_id_90c7838ea456feae14abfd87267bdfeb</data>
    </node>
    <node id="degree()">
      <data key="d1">function</data>
      <data key="d2">The degree() function returns the number of connections (edges) associated with a specific node in the graph, indicating its level of connectivity.</data>
      <data key="d3">excerpt_id_90c7838ea456feae14abfd87267bdfeb</data>
    </node>
    <node id="add()">
      <data key="d1">function</data>
      <data key="d2">The add() function adds a new key-value pair to the JsonKvStore, enabling storage of data in a simple and accessible manner.</data>
      <data key="d3">excerpt_id_90c7838ea456feae14abfd87267bdfeb</data>
    </node>
    <node id="get_by_key()">
      <data key="d1">function</data>
      <data key="d2">The get_by_key() function retrieves the value associated with a specified key from the key-value store, facilitating data retrieval.</data>
      <data key="d3">excerpt_id_90c7838ea456feae14abfd87267bdfeb</data>
    </node>
    <node id="Graph Degree">
      <data key="d1">variable</data>
      <data key="d2">Graph Degree represents the connectivity and relevance of entities within a network, serving as a key metric for analyzing interactions.</data>
      <data key="d3">excerpt_id_9c79fe4d43437c480a6cef767c63d764</data>
    </node>
    <node id="Top Entities">
      <data key="d1">variable</data>
      <data key="d2">Top Entities refer to entities identified as most significant within a certain context or analysis, influencing the relationships examined.</data>
      <data key="d3">excerpt_id_9c79fe4d43437c480a6cef767c63d764</data>
    </node>
    <node id="Structured Context">
      <data key="d1">function</data>
      <data key="d2">Structured Context is a function that organizes entities, relationships, and excerpts into a coherent format for clearer understanding of connections.</data>
      <data key="d3">excerpt_id_9c79fe4d43437c480a6cef767c63d764</data>
    </node>
    <node id="Relationship Awareness">
      <data key="d1">feature</data>
      <data key="d2">Relationship Awareness is a feature that highlights and identifies connections between entities, adding depth to the analysis.</data>
      <data key="d3">excerpt_id_9c79fe4d43437c480a6cef767c63d764</data>
    </node>
    <node id="Strengths">
      <data key="d1">configuration</data>
      <data key="d2">Strengths outline the benefits of the entity and relationship extraction process, emphasizing its capabilities and efficiency.</data>
      <data key="d3">excerpt_id_9c79fe4d43437c480a6cef767c63d764</data>
    </node>
    <node id="Weaknesses">
      <data key="d1">configuration</data>
      <data key="d2">Weaknesses describe the limitations of the extraction process, warning users of potential issues when interpreting the results.</data>
      <data key="d3">excerpt_id_9c79fe4d43437c480a6cef767c63d764</data>
    </node>
    <node id="Custom Adapters">
      <data key="d1">configuration</data>
      <data key="d2">Custom Adapters allow users to integrate SmolRAG with other systems, enhancing its versatility and adaptability to different environments.</data>
      <data key="d3">excerpt_id_7f2443f5ebfc8f85347fa0ad3e1b4199</data>
    </node>
    <node id="Integration Points">
      <data key="d1">feature</data>
      <data key="d2">Integration Points refer to the capabilities of SmolRAG that enable it to connect with various systems and use cases.</data>
      <data key="d3">excerpt_id_7f2443f5ebfc8f85347fa0ad3e1b4199</data>
    </node>
    <node id="Flexibility">
      <data key="d1">variable</data>
      <data key="d2">Flexibility is a variable aspect of SmolRAG that allows it to adapt to different developer needs and use cases effectively.</data>
      <data key="d3">excerpt_id_7f2443f5ebfc8f85347fa0ad3e1b4199</data>
    </node>
    <node id="Advanced RAG Capabilities">
      <data key="d1">feature</data>
      <data key="d2">Advanced RAG Capabilities are the sophisticated functionalities of SmolRAG that improve accuracy and relevance in responses to queries about documents.</data>
      <data key="d3">excerpt_id_7f2443f5ebfc8f85347fa0ad3e1b4199</data>
    </node>
    <node id="Documentation Search System">
      <data key="d1">example</data>
      <data key="d2">Documentation Search System is an example of an application that can be built using SmolRAG to enhance user access to information.</data>
      <data key="d3">excerpt_id_7f2443f5ebfc8f85347fa0ad3e1b4199</data>
    </node>
    <node id="Knowledge Base">
      <data key="d1">example</data>
      <data key="d2">Knowledge Base is another application scenario for SmolRAG, providing structured access to information and resources.</data>
      <data key="d3">excerpt_id_7f2443f5ebfc8f85347fa0ad3e1b4199</data>
    </node>
    <node id="Question-Answering Application">
      <data key="d1">example</data>
      <data key="d2">Question-Answering Application exemplifies how SmolRAG can be utilized to generate responses based on user queries.</data>
      <data key="d3">excerpt_id_7f2443f5ebfc8f85347fa0ad3e1b4199</data>
    </node>
    <node id="Query Ambiguity">
      <data key="d1">configuration</data>
      <data key="d2">Query Ambiguity refers to the challenge of handling different meanings or interpretations of queries in the context of similarity search.</data>
      <data key="d3">excerpt_id_6c59f654d2d8c621cf5fea19de72d0fe</data>
    </node>
    <node id="Semantic Gaps">
      <data key="d1">configuration</data>
      <data key="d2">Semantic Gaps involve the discrepancies in meaning that can occur due to varied contexts, which SmolRAG aims to bridge using knowledge graph information.</data>
      <data key="d3">excerpt_id_6c59f654d2d8c621cf5fea19de72d0fe</data>
    </node>
    <node id="Out-of-Domain Queries">
      <data key="d1">configuration</data>
      <data key="d2">Out-of-Domain Queries refer to queries that do not match any documents, which SmolRAG is equipped to handle gracefully.</data>
      <data key="d3">excerpt_id_6c59f654d2d8c621cf5fea19de72d0fe</data>
    </node>
    <node id="Long Documents">
      <data key="d1">configuration</data>
      <data key="d2">Long Documents pose a challenge in information retrieval, and SmolRAG uses chunking and summarization techniques to manage them effectively.</data>
      <data key="d3">excerpt_id_6c59f654d2d8c621cf5fea19de72d0fe</data>
    </node>
    <node id="Rare Terms">
      <data key="d1">configuration</data>
      <data key="d2">Rare Terms are infrequent terms in queries which need to be balanced with overall semantic meaning during retrieval processes.</data>
      <data key="d3">excerpt_id_6c59f654d2d8c621cf5fea19de72d0fe</data>
    </node>
    <node id="Knowledge Graph Integration">
      <data key="d1">function</data>
      <data key="d2">Knowledge Graph Integration is a functionality that combines vector search with graph-based retrieval, enhancing the search capabilities of SmolRAG.</data>
      <data key="d3">excerpt_id_6c59f654d2d8c621cf5fea19de72d0fe</data>
    </node>
    <node id="Entity-Based Search">
      <data key="d1">function</data>
      <data key="d2">Entity-Based Search utilizes entity embeddings to locate relevant entities within the knowledge graph.</data>
      <data key="d3">excerpt_id_6c59f654d2d8c621cf5fea19de72d0fe</data>
    </node>
    <node id="Relationship-Based Search">
      <data key="d1">function</data>
      <data key="d2">Relationship-Based Search involves identifying relationships between entities based on their semantic similarities.</data>
      <data key="d3">excerpt_id_6c59f654d2d8c621cf5fea19de72d0fe</data>
    </node>
    <node id="Hybrid Approaches">
      <data key="d1">function</data>
      <data key="d2">Hybrid Approaches refer to combining various search strategies to utilize their complementary strengths in information retrieval.</data>
      <data key="d3">excerpt_id_6c59f654d2d8c621cf5fea19de72d0fe</data>
    </node>
    <node id="Weighted Combinations">
      <data key="d1">function</data>
      <data key="d2">Weighted Combinations allow for the adjustment of the influence that different search methods have, depending on the characteristics of the query.</data>
      <data key="d3">excerpt_id_6c59f654d2d8c621cf5fea19de72d0fe</data>
    </node>
    <node id="SmolRag API">
      <data key="d1">api</data>
      <data key="d2">The SmolRag API is a web service built with FastAPI, allowing for query processing and other functionalities.:|:SmolRag API is an application programming interface designed to support existing clients while allowing for version flexibility through different API versions.</data>
      <data key="d3">excerpt_id_b9097e11b1551a13941242fc121df006:|:excerpt_id_df5dd931f692d6413ff6151ca37e0c76</data>
    </node>
    <node id="QueryRequest">
      <data key="d1">configuration:|:class:|:example:|:model:|:function</data>
      <data key="d2">QueryRequest is a Pydantic model representing the structure of a request made to the query endpoint, enforcing type and validation rules for incoming data.:|:QueryRequest is a configuration representing the expected structure for the incoming request to the API for querying.:|:QueryRequest is a Pydantic model that represents the structure of query requests made to the API.:|:QueryRequest is an example structure for incoming request containing the query text and query type expected by the endpoint.:|:QueryRequest is a model class used to structure the data for incoming queries, enforcing types and providing documentation for parameters.:|:QueryRequest is a Pydantic model that defines the structure of requests made to the FastAPI endpoint, including validation rules.</data>
      <data key="d3">excerpt_id_df5dd931f692d6413ff6151ca37e0c76:|:excerpt_id_e0d2ab7be18b619d1b6cfd5900b9347e:|:excerpt_id_ed82afd79e512c2446b7d0cddfce1ee3:|:excerpt_id_1123c47dc960c83e906ef0521acbf692:|:excerpt_id_3720213ae71a08acca1f7e46b7864f3e:|:excerpt_id_0c67144102b1d81212b12e6ef61ad148</data>
    </node>
    <node id="slowapi">
      <data key="d1">package</data>
      <data key="d2">slowapi is a Python package used to implement rate limiting in FastAPI applications, offering a simple way to protect your API.</data>
      <data key="d3">excerpt_id_df5dd931f692d6413ff6151ca37e0c76</data>
    </node>
    <node id="CORS Configuration">
      <data key="d1">feature</data>
      <data key="d2">CORS Configuration allows web applications from different domains to make requests to the API, enabling cross-origin resource sharing.</data>
      <data key="d3">excerpt_id_df5dd931f692d6413ff6151ca37e0c76</data>
    </node>
    <node id="API Versioning">
      <data key="d1">feature</data>
      <data key="d2">API Versioning allows the API to support multiple versions simultaneously, accommodating breaking changes while maintaining compatibility with existing clients.</data>
      <data key="d3">excerpt_id_df5dd931f692d6413ff6151ca37e0c76</data>
    </node>
    <node id="High Memory Usage">
      <data key="d1">symptom</data>
      <data key="d2">High Memory Usage refers to a situation where the system or application is consuming an excessive amount of memory resources, leading to potential errors or performance degradation.</data>
      <data key="d3">excerpt_id_98e0d419e4d21933f163a50d476d4728</data>
    </node>
    <node id="Errors during entity extraction">
      <data key="d1">feature</data>
      <data key="d2">Errors during entity extraction highlight issues encountered while trying to identify and extract entities from provided content.</data>
      <data key="d3">excerpt_id_98e0d419e4d21933f163a50d476d4728</data>
    </node>
    <node id="LLM API Errors">
      <data key="d1">api</data>
      <data key="d2">LLM API Errors denote failures or issues encountered when interacting with a Large Language Model API during the completion process.</data>
      <data key="d3">excerpt_id_98e0d419e4d21933f163a50d476d4728</data>
    </node>
    <node id="Malformed Content">
      <data key="d1">configuration</data>
      <data key="d2">Malformed Content indicates that the data structure or format does not conform to expected standards, leading to extraction difficulties.</data>
      <data key="d3">excerpt_id_98e0d419e4d21933f163a50d476d4728</data>
    </node>
    <node id="Timeout Issues">
      <data key="d1">configuration</data>
      <data key="d2">Timeout Issues refer to situations where the request to an API or a process exceeds the predetermined time limit, causing failures in data retrieval.</data>
      <data key="d3">excerpt_id_98e0d419e4d21933f163a50d476d4728</data>
    </node>
    <node id="Implement Robust Error Handling">
      <data key="d1">function</data>
      <data key="d2">Implement Robust Error Handling is a coding approach that outlines how to manage and respond to errors effectively during entity extraction procedures.</data>
      <data key="d3">excerpt_id_98e0d419e4d21933f163a50d476d4728</data>
    </node>
    <node id="Default or Retry">
      <data key="d1">variable</data>
      <data key="d2">Default or Retry refers to the fallback options provided in error handling scenarios to ensure continuity in the execution of data extraction.</data>
      <data key="d3">excerpt_id_98e0d419e4d21933f163a50d476d4728</data>
    </node>
    <node id="requests">
      <data key="d1">library</data>
      <data key="d2">Requests is a Python library used for making HTTP requests, allowing users to interact with APIs including SmolRAG's REST API.</data>
      <data key="d3">excerpt_id_9e30dc3a8159dc93859b8664cf4db134</data>
    </node>
    <node id="SmolRag class">
      <data key="d1">configuration:|:feature</data>
      <data key="d2">The SmolRag class is the main feature of the SmolRAG API that enables users to create instances of the API for document ingestion.:|:The SmolRag class is part of the SmolRAG framework, instantiated to manage and manipulate documents within the system.:|:SmolRag class is the primary class used to initialize the SmolRAG API and can accept customization options like custom chunking strategies.</data>
      <data key="d3">excerpt_id_9e30dc3a8159dc93859b8664cf4db134:|:excerpt_id_98568b73e1554f3852d7cabeaa3a1878:|:excerpt_id_3de9971b782eac586dc03f5864ad60f3</data>
    </node>
    <node id="source_to_doc_kv">
      <data key="d1">variable</data>
      <data key="d2">source_to_doc_kv is a variable used to map source identifiers to their respective documents in the SmolRag function.:|:source_to_doc_kv is a variable that serves as a mapping between file paths and document IDs, allowing users to retrieve document IDs based on file paths.:|:source_to_doc_kv is a variable representing a key-value store that maps sources to documents, initialized with a specific JSON path.:|:source_to_doc_kv is a key-value store that maintains the mapping between file paths and their corresponding document IDs within SmolRAG.</data>
      <data key="d3">excerpt_id_9e30dc3a8159dc93859b8664cf4db134:|:excerpt_id_9224c08a6f58fb5797f206ea7efc517e:|:excerpt_id_51c03df854681a0be44a0cb38da8ceed:|:excerpt_id_3de9971b782eac586dc03f5864ad60f3</data>
    </node>
    <node id="document_id">
      <data key="d1">variable</data>
      <data key="d2">document_id is a variable representing the unique identifier of a document within SmolRAG, used for operations like removal.</data>
      <data key="d3">excerpt_id_9e30dc3a8159dc93859b8664cf4db134</data>
    </node>
    <node id="doc_id">
      <data key="d1">variable</data>
      <data key="d2">doc_id is a specific instance of a document identifier, used in the functions to reference or remove a document from the system.</data>
      <data key="d3">excerpt_id_9e30dc3a8159dc93859b8664cf4db134</data>
    </node>
    <node id="Cross-Referencing">
      <data key="d1">function</data>
      <data key="d2">Cross-Referencing is the function that maintains connections between entities, relationships, and the excerpts they originate from, enabling complex query capabilities.</data>
      <data key="d3">excerpt_id_46387a7852ed874c1b3ab073c392b95b</data>
    </node>
    <node id="Embedding Cache">
      <data key="d1">configuration</data>
      <data key="d2">Embedding Cache is a configuration that stores previously computed embeddings to prevent redundant API calls and improve performance.</data>
      <data key="d3">excerpt_id_46387a7852ed874c1b3ab073c392b95b</data>
    </node>
    <node id="High-Quality Models">
      <data key="d1">feature</data>
      <data key="d2">High-Quality Models refers to the use of state-of-the-art embedding models from OpenAI to ensure effective retrieval performance.</data>
      <data key="d3">excerpt_id_46387a7852ed874c1b3ab073c392b95b</data>
    </node>
    <node id="Contextual Enhancement">
      <data key="d1">feature</data>
      <data key="d2">Contextual Enhancement is a feature that improves embedding quality by including summaries and context.</data>
      <data key="d3">excerpt_id_46387a7852ed874c1b3ab073c392b95b</data>
    </node>
    <node id="Threshold Tuning">
      <data key="d1">feature:|:function</data>
      <data key="d2">Threshold Tuning is a feature that allows adjustable similarity thresholds to manage the balance between precision and recall in retrieval tasks.:|:Threshold Tuning is a process of adjusting similarity thresholds in SmolRAG to balance precision and recall.</data>
      <data key="d3">excerpt_id_46387a7852ed874c1b3ab073c392b95b:|:excerpt_id_9852e72fbe12ed839b385c87873fec09</data>
    </node>
    <node id="Evaluation Framework">
      <data key="d1">configuration</data>
      <data key="d2">Evaluation Framework offers tools for assessing retrieval performance on test queries, playing a key role in system performance management.</data>
      <data key="d3">excerpt_id_46387a7852ed874c1b3ab073c392b95b</data>
    </node>
    <node id="Continuous Improvement">
      <data key="d1">function</data>
      <data key="d2">Continuous Improvement is a function designed to facilitate the incorporation of new embedding models, enhancing system capabilities over time.</data>
      <data key="d3">excerpt_id_46387a7852ed874c1b3ab073c392b95b</data>
    </node>
    <node id="Embedding Quality and Evaluation" />
    <node id="embeddings_db">
      <data key="d1">configuration:|:variable</data>
      <data key="d2">embeddings_db represents a specific instance of `NanoVectorStore` configured with a path and dimensionality for storing embeddings.:|:embeddings_db is a variable representing a specific database instance for storing embeddings.</data>
      <data key="d3">excerpt_id_60a78091c7c8d6dae9b144963e93551a:|:excerpt_id_517fe6133908102185036fafd1625255</data>
    </node>
    <node id="entities_db">
      <data key="d1">configuration:|:variable</data>
      <data key="d2">entities_db is another instance of `NanoVectorStore` designed for storing entity data with corresponding dimensionality settings.:|:entities_db is a variable representing a database dedicated to storing entities extracted from documents.</data>
      <data key="d3">excerpt_id_60a78091c7c8d6dae9b144963e93551a:|:excerpt_id_517fe6133908102185036fafd1625255</data>
    </node>
    <node id="relationships_db">
      <data key="d1">configuration:|:variable</data>
      <data key="d2">relationships_db is a variable representing a database for storing relationships among entities extracted from documents.:|:relationships_db is a `NanoVectorStore` instance for storing relationship data between entities, configured similarly to the embeddings and entities.</data>
      <data key="d3">excerpt_id_60a78091c7c8d6dae9b144963e93551a:|:excerpt_id_517fe6133908102185036fafd1625255</data>
    </node>
    <node id="graph_db">
      <data key="d1">configuration:|:variable</data>
      <data key="d2">graph_db is an instance of `NetworkXGraphStore` that is configured to store the knowledge graph at a specified local path.:|:graph_db represents a variable that stores the database structure for graph-based data.</data>
      <data key="d3">excerpt_id_8efc423402a060df074b1830e38ed77b:|:excerpt_id_517fe6133908102185036fafd1625255</data>
    </node>
    <node id="Key-Value Stores">
      <data key="d1">configuration:|:storage:|:storage mechanism:|:feature</data>
      <data key="d2">Key-Value Stores within SmolRAG are utilized for managing metadata, mappings, and caching, and can be customized based on user requirements.:|:Key-Value Stores are used for storing metadata, mappings, and caches, providing quick access to frequently used data.:|:Key-Value Stores such as JsonKvStore facilitate the management of metadata, mappings, and caches within the system.:|:Key-Value Stores, specifically JsonKvStore, manage metadata, mappings, and caches in SmolRAG.</data>
      <data key="d3">excerpt_id_feb905edbf8fd771c7b080447258f0ba:|:excerpt_id_517fe6133908102185036fafd1625255:|:excerpt_id_e329d73f72654b591f8c6832617f0209:|:excerpt_id_e1f4404cf1e9a718f626b127f773cf70</data>
    </node>
    <node id="Content Hashing">
      <data key="d1">function</data>
      <data key="d2">Content Hashing generates a unique hash for each document's content to detect changes effectively.:|:Content Hashing is a function that generates a unique hash for a document's content to detect any changes effectively.</data>
      <data key="d3">excerpt_id_feb905edbf8fd771c7b080447258f0ba:|:excerpt_id_7fedf9d4b30621d6c79f65db2d09ce1a</data>
    </node>
    <node id="Path-Based Tracking">
      <data key="d1">function</data>
      <data key="d2">Path-Based Tracking monitors documents using their file paths and hashes, facilitating efficient change detection.:|:Path-Based Tracking is a function that monitors documents based on their file path and associated content hash.</data>
      <data key="d3">excerpt_id_feb905edbf8fd771c7b080447258f0ba:|:excerpt_id_7fedf9d4b30621d6c79f65db2d09ce1a</data>
    </node>
    <node id="Automatic Updates">
      <data key="d1">function</data>
      <data key="d2">Automatic Updates are performed by the system to remove old embeddings and create new ones when document content changes.:|:Automatic Updates automatically create new embeddings and graph entries when a document's content changes, ensuring data is current.</data>
      <data key="d3">excerpt_id_feb905edbf8fd771c7b080447258f0ba:|:excerpt_id_7fedf9d4b30621d6c79f65db2d09ce1a</data>
    </node>
    <node id="Selective Processing">
      <data key="d1">function</data>
      <data key="d2">Selective Processing is a function that reprocesses only those documents that have changed, improving efficiency.:|:Selective Processing ensures that only documents that have changed are reprocessed to save time and resources.</data>
      <data key="d3">excerpt_id_feb905edbf8fd771c7b080447258f0ba:|:excerpt_id_7fedf9d4b30621d6c79f65db2d09ce1a</data>
    </node>
    <node id="Consistency Maintenance">
      <data key="d1">function:|:feature</data>
      <data key="d2">Consistency Maintenance ensures that all components of the system remain synchronized after updates, supporting data integrity.:|:Consistency Maintenance ensures all components of SmolRAG remain synchronized, particularly vector stores and knowledge graphs.</data>
      <data key="d3">excerpt_id_feb905edbf8fd771c7b080447258f0ba:|:excerpt_id_7fedf9d4b30621d6c79f65db2d09ce1a</data>
    </node>
    <node id="File Structure">
      <data key="d1">configuration</data>
      <data key="d2">File Structure defines how data is organized in the app/data directory, with separate files for different components.:|:File Structure organizes data in the app/data directory, separating files for different components for easy navigation.</data>
      <data key="d3">excerpt_id_feb905edbf8fd771c7b080447258f0ba:|:excerpt_id_e1f4404cf1e9a718f626b127f773cf70</data>
    </node>
    <node id="Logging">
      <data key="d1">feature:|:function</data>
      <data key="d2">Logging refers to the implementation of detailed tracking for performance-critical operations to facilitate debugging and monitoring.:|:Logging is a feature that records each step of the ingestion process to facilitate debugging and performance monitoring.:|:Logging refers to the detailed tracking of each step in the ingestion process for debugging and performance monitoring.</data>
      <data key="d3">excerpt_id_feb905edbf8fd771c7b080447258f0ba:|:excerpt_id_a932de00c67d51e468546b00d37959d4:|:excerpt_id_e1f4404cf1e9a718f626b127f773cf70</data>
    </node>
    <node id="Performance Metrics">
      <data key="d1">feature</data>
      <data key="d2">Performance Metrics track processing time and resource usage, helping to optimize system performance.:|:Performance Metrics track and log processing time and resource usage during the document ingestion process.</data>
      <data key="d3">excerpt_id_feb905edbf8fd771c7b080447258f0ba:|:excerpt_id_19a4021fa6c980fe5768130b704cc56e</data>
    </node>
    <node id="Warning System">
      <data key="d1">feature</data>
      <data key="d2">Warning System is a built-in feature that flags potential issues during the ingestion process for user attention.:|:Warning System flags potential issues with warnings to ensure user attention during the ingestion process.:|:Warning System alerts users to potential issues detected during the processing of documents, aiding in proactive management.</data>
      <data key="d3">excerpt_id_feb905edbf8fd771c7b080447258f0ba:|:excerpt_id_19a4021fa6c980fe5768130b704cc56e:|:excerpt_id_e1f4404cf1e9a718f626b127f773cf70</data>
    </node>
    <node id="Asynchronous Processing">
      <data key="d1">feature</data>
      <data key="d2">Asynchronous Processing allows for long-running queries to be handled in the background without blocking the API, improving performance and user experience.:|:Asynchronous Processing allows for non-interactive use cases to process queries without requiring immediate responses, enhancing efficiency and performance.</data>
      <data key="d3">excerpt_id_abcf57555611c91d669a12c878d8428b:|:excerpt_id_1e99d3a705e109f5103d3d1958b6a8db</data>
    </node>
    <node id="QueryCache">
      <data key="d1">class</data>
      <data key="d2">QueryCache is a class designed to implement caching mechanisms for query results, allowing for improved performance and speed by storing and retrieving cached data.:|:QueryCache is a class designed to store and manage cached query results to optimize processing time by avoiding redundant computations.</data>
      <data key="d3">excerpt_id_2cca7c90cc52ed8a7fc9fa49eb39d02c:|:excerpt_id_abcf57555611c91d669a12c878d8428b</data>
    </node>
    <node id="get_cache_key">
      <data key="d1">function</data>
      <data key="d2">get_cache_key is a function within the QueryCache class that generates a unique cache key based on the query text and type, enabling the identification of cached results.:|:get_cache_key is a method within the QueryCache class that generates a unique cache key based on the query text and type, enabling effective cache retrieval.</data>
      <data key="d3">excerpt_id_2cca7c90cc52ed8a7fc9fa49eb39d02c:|:excerpt_id_abcf57555611c91d669a12c878d8428b</data>
    </node>
    <node id="get_from_cache">
      <data key="d1">function</data>
      <data key="d2">get_from_cache is a method in the QueryCache class that attempts to retrieve previously cached results based on a unique cache key.:|:get_from_cache is a method in the QueryCache class that retrieves cached results based on the generated cache key, allowing quick access to previously stored data.</data>
      <data key="d3">excerpt_id_2cca7c90cc52ed8a7fc9fa49eb39d02c:|:excerpt_id_abcf57555611c91d669a12c878d8428b</data>
    </node>
    <node id="save_to_cache">
      <data key="d1">function</data>
      <data key="d2">save_to_cache is a method in the QueryCache class that stores the result of a processed query in the cache for future retrieval.:|:save_to_cache is a function that saves query results to a cache file for future retrieval, enhancing performance by avoiding repeated queries.</data>
      <data key="d3">excerpt_id_2cca7c90cc52ed8a7fc9fa49eb39d02c:|:excerpt_id_abcf57555611c91d669a12c878d8428b</data>
    </node>
    <node id="cache_dir">
      <data key="d1">variable:|:configuration</data>
      <data key="d2">cache_dir is a variable that holds the directory path where cached query results are stored.:|:cache_dir is a configuration variable that specifies the directory where cache files are stored.:|:cache_dir is a variable that holds the directory path where cached query results are stored, ensuring organized data management.</data>
      <data key="d3">excerpt_id_2cca7c90cc52ed8a7fc9fa49eb39d02c:|:excerpt_id_f460391fbb913e0e360f66999d788989:|:excerpt_id_abcf57555611c91d669a12c878d8428b</data>
    </node>
    <node id="query_text">
      <data key="d1">variable</data>
      <data key="d2">query_text is a variable representing the text of the query being processed or looked up in the cache.:|:query_text is a variable that represents the text of the query being processed, serving as the primary input for the cache system.</data>
      <data key="d3">excerpt_id_0da14f0f2868bc4e6d5add7c81a2957c:|:excerpt_id_abcf57555611c91d669a12c878d8428b</data>
    </node>
    <node id="query_type">
      <data key="d1">configuration:|:variable</data>
      <data key="d2">query_type is a variable indicating the type of query being made, influencing how the API processes the request.:|:Query_type specifies the type of query to be executed, which can be `standard`, `local_kg`, or `mix` in the context of SmolRAG.:|:query_type is a variable that specifies the type of query being processed, assisting in generating the unique cache key.:|:query_type is a variable that indicates the type of query the user intends to make, influencing the response generated by SmolRag.</data>
      <data key="d3">excerpt_id_abcf57555611c91d669a12c878d8428b:|:excerpt_id_a73778302286b849ae1d8bdf13a41987:|:excerpt_id_adb7498f6f95f3de6fde939c658d11cf:|:excerpt_id_63cd91bc48a4a86dbc4244526ba83736</data>
    </node>
    <node id="cached_result">
      <data key="d1">variable</data>
      <data key="d2">cached_result is a variable used to store the result retrieved from the cache, if available, allowing for efficient reuse of previous computations.:|:cached_result is a variable used to store previously calculated results, utilized to avoid reprocessing queries.</data>
      <data key="d3">excerpt_id_0da14f0f2868bc4e6d5add7c81a2957c:|:excerpt_id_abcf57555611c91d669a12c878d8428b</data>
    </node>
    <node id="app/cache/query_cache">
      <data key="d1">location</data>
      <data key="d2">app/cache/query_cache is the defined directory where cached results are saved, ensuring persistence between application sessions.</data>
      <data key="d3">excerpt_id_abcf57555611c91d669a12c878d8428b</data>
    </node>
    <node id="Global Knowledge Graph Query Process">
      <data key="d1">function</data>
      <data key="d2">The Global Knowledge Graph Query Process focuses on extracting and prioritizing relationships through keyword extraction, relationship search, ranking, and entity extraction.</data>
      <data key="d3">excerpt_id_33641a6c02e3c56addefda7f4288b5b7</data>
    </node>
    <node id="Keyword Extraction">
      <data key="d1">function</data>
      <data key="d2">Keyword Extraction is a function designed to identify and extract relevant keywords from a given query or text.:|:Keyword Extraction is a process where high-level keywords are identified from a query to facilitate further relationship searches in the knowledge graph.</data>
      <data key="d3">excerpt_id_33641a6c02e3c56addefda7f4288b5b7:|:excerpt_id_fcc70198270a02757f7c7194e7f32c25</data>
    </node>
    <node id="Relationship Search">
      <data key="d1">function</data>
      <data key="d2">Relationship Search uses the extracted keywords to find relevant relationships within the knowledge graph.</data>
      <data key="d3">excerpt_id_33641a6c02e3c56addefda7f4288b5b7</data>
    </node>
    <node id="Relationship Ranking">
      <data key="d1">function</data>
      <data key="d2">Relationship Ranking assesses the strength and connectivity of relationships to determine their relevance.</data>
      <data key="d3">excerpt_id_33641a6c02e3c56addefda7f4288b5b7</data>
    </node>
    <node id="Context Construction">
      <data key="d1">function</data>
      <data key="d2">Context Construction creates a structured context from the identified relationships, entities, and excerpts for better understanding.</data>
      <data key="d3">excerpt_id_33641a6c02e3c56addefda7f4288b5b7</data>
    </node>
    <node id="Hybrid Knowledge Graph Query Process">
      <data key="d1">function</data>
      <data key="d2">The Hybrid Knowledge Graph Query Process combines local and global search methods for a more comprehensive retrieval of entities and relationships.</data>
      <data key="d3">excerpt_id_33641a6c02e3c56addefda7f4288b5b7</data>
    </node>
    <node id="Dual Search">
      <data key="d1">function</data>
      <data key="d2">Dual Search performs both entity-focused and relationship-focused searches to comprehensively address queries.</data>
      <data key="d3">excerpt_id_33641a6c02e3c56addefda7f4288b5b7</data>
    </node>
    <node id="Result Combination">
      <data key="d1">function</data>
      <data key="d2">Result Combination merges outcomes from the dual searches and ranks them for relevance.</data>
      <data key="d3">excerpt_id_33641a6c02e3c56addefda7f4288b5b7</data>
    </node>
    <node id="Knowledge Graph and Vector Search Integration">
      <data key="d1">function</data>
      <data key="d2">Knowledge Graph and Vector Search Integration involves combining knowledge graph queries with vector search results for enhanced context.</data>
      <data key="d3">excerpt_id_33641a6c02e3c56addefda7f4288b5b7</data>
    </node>
    <node id="LLM Processing">
      <data key="d1">function</data>
      <data key="d2">LLM Processing delivers the structured context to a language model for generating responses based on the gathered information.</data>
      <data key="d3">excerpt_id_33641a6c02e3c56addefda7f4288b5b7</data>
    </node>
    <node id="get_query_system_prompt">
      <data key="d1">function</data>
      <data key="d2">The function get_query_system_prompt(context) retrieves the system prompt for vector search queries, allowing for efficient querying.</data>
      <data key="d3">excerpt_id_a2942c9d0b2929a3d0693885ce2c32aa</data>
    </node>
    <node id="excerpt_summary_prompt">
      <data key="d1">function</data>
      <data key="d2">The function excerpt_summary_prompt(full_doc, excerpt) generates prompts for summarizing specific excerpts from documents.</data>
      <data key="d3">excerpt_id_a2942c9d0b2929a3d0693885ce2c32aa</data>
    </node>
    <node id="get_extract_entities_prompt">
      <data key="d1">function</data>
      <data key="d2">The function get_extract_entities_prompt(excerpt) provides a prompt aimed at extracting entities and their relationships from text.:|:get_extract_entities_prompt is a function designed to create a prompt for extracting entities from a given text.</data>
      <data key="d3">excerpt_id_a2942c9d0b2929a3d0693885ce2c32aa:|:excerpt_id_cb0e5d0ad627c9ecd6e0fb7b4ac2bb43</data>
    </node>
    <node id="get_high_low_level_keywords_prompt">
      <data key="d1">function</data>
      <data key="d2">The function get_high_low_level_keywords_prompt(query) is responsible for extracting both high-level and low-level keywords from a given query.</data>
      <data key="d3">excerpt_id_a2942c9d0b2929a3d0693885ce2c32aa</data>
    </node>
    <node id="get_kg_query_system_prompt">
      <data key="d1">function</data>
      <data key="d2">The function get_kg_query_system_prompt(context) retrieves the system prompt dedicated to knowledge graph queries, facilitating structured data retrieval.</data>
      <data key="d3">excerpt_id_a2942c9d0b2929a3d0693885ce2c32aa</data>
    </node>
    <node id="get_mix_system_prompt">
      <data key="d1">function</data>
      <data key="d2">The function get_mix_system_prompt(excerpt_context, kg_context) develops prompts for mixed queries, combining insights from different contexts.</data>
      <data key="d3">excerpt_id_a2942c9d0b2929a3d0693885ce2c32aa</data>
    </node>
    <node id="read_file">
      <data key="d1">function</data>
      <data key="d2">The function read_file(path) is used to read a file from disk, making its content accessible for further processing.</data>
      <data key="d3">excerpt_id_a2942c9d0b2929a3d0693885ce2c32aa</data>
    </node>
    <node id="get_docs">
      <data key="d1">function</data>
      <data key="d2">The function get_docs(directory) retrieves all documents located within a specified directory, streamlining document management.</data>
      <data key="d3">excerpt_id_a2942c9d0b2929a3d0693885ce2c32aa</data>
    </node>
    <node id="make_hash">
      <data key="d1">function</data>
      <data key="d2">The function make_hash(content, prefix='') generates a hash of given content, ensuring data integrity and uniqueness for further use.</data>
      <data key="d3">excerpt_id_a2942c9d0b2929a3d0693885ce2c32aa</data>
    </node>
    <node id="split_string_by_multi_markers">
      <data key="d1">function</data>
      <data key="d2">The function split_string_by_multi_markers(text, markers) divides a string into segments based on multiple specified markers for easier manipulation.</data>
      <data key="d3">excerpt_id_a2942c9d0b2929a3d0693885ce2c32aa</data>
    </node>
    <node id="clean_str">
      <data key="d1">function</data>
      <data key="d2">The function clean_str(s) processes a string to remove unwanted characters, enhancing data quality.</data>
      <data key="d3">excerpt_id_a2942c9d0b2929a3d0693885ce2c32aa</data>
    </node>
    <node id="extract_json_from_text">
      <data key="d1">function</data>
      <data key="d2">The function extract_json_from_text(text) identifies and extracts JSON data embedded within a larger text block, facilitating data integration.</data>
      <data key="d3">excerpt_id_a2942c9d0b2929a3d0693885ce2c32aa</data>
    </node>
    <node id="truncate_list_by_token_size">
      <data key="d1">function</data>
      <data key="d2">The function truncate_list_by_token_size(items, get_text_for_row, max_token_size) adjusts the size of a list to fit a specified token limit, ensuring compatibility with processing constraints.</data>
      <data key="d3">excerpt_id_a2942c9d0b2929a3d0693885ce2c32aa</data>
    </node>
    <node id="list_of_list_to_csv">
      <data key="d1">function</data>
      <data key="d2">The function list_of_list_to_csv(list_of_list) converts a list of lists into CSV format for better data handling and organization.</data>
      <data key="d3">excerpt_id_a2942c9d0b2929a3d0693885ce2c32aa</data>
    </node>
    <node id="Ships">
      <data key="d1">variable</data>
      <data key="d2">Ships are ranked by their weight and connectivity, indicating a method of classification in naval or logistical contexts.</data>
      <data key="d3">excerpt_id_2f5e12b98d229a1119f45f912ee45c12</data>
    </node>
    <node id="Weight">
      <data key="d1">configuration</data>
      <data key="d2">Weight refers to a measurement criterion for classifying ships, impacting their rank and functional capabilities.</data>
      <data key="d3">excerpt_id_2f5e12b98d229a1119f45f912ee45c12</data>
    </node>
    <node id="Connectivity">
      <data key="d1">configuration</data>
      <data key="d2">Connectivity refers to the ability of ships to be linked or networked, serving as another classification criterion for their ranking.</data>
      <data key="d3">excerpt_id_2f5e12b98d229a1119f45f912ee45c12</data>
    </node>
    <node id="Test Queries">
      <data key="d1">function</data>
      <data key="d2">Test Queries refer to predefined queries used to evaluate the retrieval performance of the similarity search in SmolRAG.</data>
      <data key="d3">excerpt_id_9852e72fbe12ed839b385c87873fec09</data>
    </node>
    <node id="Precision and Recall">
      <data key="d1">feature</data>
      <data key="d2">Precision and Recall are metrics used to measure the accuracy and completeness of search results in SmolRAG's similarity search.</data>
      <data key="d3">excerpt_id_9852e72fbe12ed839b385c87873fec09</data>
    </node>
    <node id="Model Selection">
      <data key="d1">function:|:example</data>
      <data key="d2">Model Selection involves comparing different embedding models to determine which provides the best performance for similarity search.:|:Model Selection involves choosing appropriate models to balance accuracy and performance, possibly opting for smaller, faster models when feasible.</data>
      <data key="d3">excerpt_id_9852e72fbe12ed839b385c87873fec09:|:excerpt_id_81db384c7c323402180915d5a9c65d67</data>
    </node>
    <node id="User Feedback">
      <data key="d1">variable</data>
      <data key="d2">User Feedback is utilized to enhance search quality over time by incorporating insights from users.</data>
      <data key="d3">excerpt_id_9852e72fbe12ed839b385c87873fec09</data>
    </node>
    <node id="Question Answering">
      <data key="d1">example</data>
      <data key="d2">Question Answering demonstrates the application of SmolRAG in finding relevant information for specific queries.</data>
      <data key="d3">excerpt_id_9852e72fbe12ed839b385c87873fec09</data>
    </node>
    <node id="Document Exploration">
      <data key="d1">example</data>
      <data key="d2">Document Exploration showcases how SmolRAG can discover related content across different documents.</data>
      <data key="d3">excerpt_id_9852e72fbe12ed839b385c87873fec09</data>
    </node>
    <node id="Concept Search">
      <data key="d1">example</data>
      <data key="d2">Concept Search refers to finding information about concepts even when different terminology is used.</data>
      <data key="d3">excerpt_id_9852e72fbe12ed839b385c87873fec09</data>
    </node>
    <node id="Technical Support">
      <data key="d1">example</data>
      <data key="d2">Technical Support highlights how SmolRAG can locate relevant documentation to assist with technical issues.</data>
      <data key="d3">excerpt_id_9852e72fbe12ed839b385c87873fec09</data>
    </node>
    <node id="Knowledge Discovery">
      <data key="d1">example</data>
      <data key="d2">Knowledge Discovery is the process of uncovering connections between different pieces of information using SmolRAG's capabilities.</data>
      <data key="d3">excerpt_id_9852e72fbe12ed839b385c87873fec09</data>
    </node>
    <node id="Advanced Models">
      <data key="d1">feature</data>
      <data key="d2">Advanced Models refer to the incorporation of newer and more powerful embedding models to enhance SmolRAG's search capabilities.</data>
      <data key="d3">excerpt_id_9852e72fbe12ed839b385c87873fec09</data>
    </node>
    <node id="Approximate Search">
      <data key="d1">function</data>
      <data key="d2">Approximate Search is a method implemented in SmolRAG for searching larger collections efficiently.</data>
      <data key="d3">excerpt_id_9852e72fbe12ed839b385c87873fec09</data>
    </node>
    <node id="Multi-Modal Search">
      <data key="d1">feature</data>
      <data key="d2">Multi-Modal Search extends SmolRAG's capabilities to handle images and non-text content alongside text.</data>
      <data key="d3">excerpt_id_9852e72fbe12ed839b385c87873fec09</data>
    </node>
    <node id="Personalization">
      <data key="d1">feature</data>
      <data key="d2">Personalization involves adapting search results in SmolRAG based on individual user preferences and history.</data>
      <data key="d3">excerpt_id_9852e72fbe12ed839b385c87873fec09</data>
    </node>
    <node id="Federated Search">
      <data key="d1">function</data>
      <data key="d2">Federated Search allows searching across multiple vector stores or knowledge bases within SmolRAG.</data>
      <data key="d3">excerpt_id_9852e72fbe12ed839b385c87873fec09</data>
    </node>
    <node id="v1_router">
      <data key="d1">configuration:|:interface</data>
      <data key="d2">v1_router is a configuration component that defines the API routes and logic for version 1 of the SmolRag API.:|:v1_router is an interface that represents the v1 version of the API endpoints, included in the FastAPI application.</data>
      <data key="d3">excerpt_id_b9097e11b1551a13941242fc121df006:|:excerpt_id_453681d430472ffcca54f90331e78fee</data>
    </node>
    <node id="v2_router">
      <data key="d1">configuration:|:interface</data>
      <data key="d2">v2_router is a configuration component that defines the API routes and logic for version 2 of the SmolRag API.:|:v2_router is an interface that represents the v2 version of the API endpoints, also included in the FastAPI application.</data>
      <data key="d3">excerpt_id_b9097e11b1551a13941242fc121df006:|:excerpt_id_453681d430472ffcca54f90331e78fee</data>
    </node>
    <node id="query_endpoint_v1">
      <data key="d1">function</data>
      <data key="d2">query_endpoint_v1 is a function handling the processing of queries based on the logic defined for version 1 of the API.</data>
      <data key="d3">excerpt_id_b9097e11b1551a13941242fc121df006</data>
    </node>
    <node id="query_endpoint_v2">
      <data key="d1">function</data>
      <data key="d2">query_endpoint_v2 is an asynchronous function that processes queries using v2 logic within the FastAPI application.:|:query_endpoint_v2 is a function handling the processing of queries based on the logic defined for version 2 of the API.</data>
      <data key="d3">excerpt_id_b9097e11b1551a13941242fc121df006:|:excerpt_id_453681d430472ffcca54f90331e78fee</data>
    </node>
    <node id="llm.get_completion">
      <data key="d1">function</data>
      <data key="d2">The function llm.get_completion is used to retrieve completions based on a given prompt, typically as part of a language model interaction.</data>
      <data key="d3">excerpt_id_65383440b6cc941c8450b659b284a24d</data>
    </node>
    <node id="logger.error">
      <data key="d1">function</data>
      <data key="d2">The function logger.error is utilized to log error messages, aiding in debugging and tracking issues that occur during execution.</data>
      <data key="d3">excerpt_id_65383440b6cc941c8450b659b284a24d</data>
    </node>
    <node id="sanitize_content">
      <data key="d1">function</data>
      <data key="d2">The function sanitize_content is designed to clean and remove problematic characters or patterns from a given content input to ensure its integrity.</data>
      <data key="d3">excerpt_id_65383440b6cc941c8450b659b284a24d</data>
    </node>
    <node id="retry_with_backoff">
      <data key="d1">function</data>
      <data key="d2">The function retry_with_backoff implements error handling with a strategy of retrying a function call with increasing wait times upon encountering exceptions.</data>
      <data key="d3">excerpt_id_65383440b6cc941c8450b659b284a24d</data>
    </node>
    <node id="with_file_lock">
      <data key="d1">function</data>
      <data key="d2">The function with_file_lock uses file locking mechanisms to ensure exclusive access to a file during operations to prevent concurrent access issues.</data>
      <data key="d3">excerpt_id_65383440b6cc941c8450b659b284a24d</data>
    </node>
    <node id="backup_vector_store">
      <data key="d1">function</data>
      <data key="d2">The function backup_vector_store is responsible for creating backups of the vector store, ensuring data preservation in case of issues or corruption.</data>
      <data key="d3">excerpt_id_65383440b6cc941c8450b659b284a24d</data>
    </node>
    <node id="Vector Store Issues">
      <data key="d1">feature</data>
      <data key="d2">Vector Store Issues refer to potential errors or corruption scenarios within the vector store, impacting its functionality and reliability.</data>
      <data key="d3">excerpt_id_65383440b6cc941c8450b659b284a24d</data>
    </node>
    <node id="Disk Space Issues">
      <data key="d1">example</data>
      <data key="d2">Disk Space Issues are one of the potential causes of vector store errors, highlighting the importance of having sufficient available storage for operations.</data>
      <data key="d3">excerpt_id_65383440b6cc941c8450b659b284a24d</data>
    </node>
    <node id="File Permission Problems">
      <data key="d1">example</data>
      <data key="d2">File Permission Problems refer to issues related to inadequate access rights for files, potentially leading to operational failures in the vector store.</data>
      <data key="d3">excerpt_id_65383440b6cc941c8450b659b284a24d</data>
    </node>
    <node id="Concurrent Access Issues">
      <data key="d1">example</data>
      <data key="d2">Concurrent Access Issues occur when multiple processes attempt to access the vector store files simultaneously, risking data integrity.</data>
      <data key="d3">excerpt_id_65383440b6cc941c8450b659b284a24d</data>
    </node>
    <node id="Power Loss During Write Operations">
      <data key="d1">example</data>
      <data key="d2">Power Loss During Write Operations signifies a potential risk where unexpected power outages during data writes can corrupt the vector store.</data>
      <data key="d3">excerpt_id_65383440b6cc941c8450b659b284a24d</data>
    </node>
    <node id="Custom Chunking Strategy Example">
      <data key="d1">example</data>
      <data key="d2">Custom Chunking Strategy Example demonstrates how to implement a custom chunking strategy for processing text documents.</data>
      <data key="d3">excerpt_id_52671ae166986e6c86752cd3194af2af</data>
    </node>
    <node id="text">
      <data key="d1">variable</data>
      <data key="d2">Text is a key field in the queries variable representing the user query to be processed.:|:text is the input string that needs to be chunked according to the custom strategy defined.</data>
      <data key="d3">excerpt_id_52671ae166986e6c86752cd3194af2af:|:excerpt_id_97e526b02e37e6e2b2b176a8cb9cc039</data>
    </node>
    <node id="paragraphs">
      <data key="d1">variable</data>
      <data key="d2">paragraphs is a list created by splitting the input text into separate paragraphs for processing.</data>
      <data key="d3">excerpt_id_52671ae166986e6c86752cd3194af2af</data>
    </node>
    <node id="chunks">
      <data key="d1">variable</data>
      <data key="d2">chunks is a list that stores the final chunks of text generated by the custom chunking strategy.</data>
      <data key="d3">excerpt_id_52671ae166986e6c86752cd3194af2af</data>
    </node>
    <node id="current_chunk">
      <data key="d1">variable</data>
      <data key="d2">current_chunk is a temporary variable used to build the current chunk of text during the iteration over paragraphs.</data>
      <data key="d3">excerpt_id_52671ae166986e6c86752cd3194af2af</data>
    </node>
    <node id="rag">
      <data key="d1">variable:|:interface:|:configuration:|:api</data>
      <data key="d2">rag is a variable that holds an instance of the SmolRag class, which incorporates the configured key-value stores for its functionality.:|:rag is a variable representing a resource that contains information about documents and excerpts, utilized in memory management and pruning processes.:|:rag is a variable representing the retriever-augmented generation model used to query embeddings.:|:RAG is an interface that performs various querying types to return results based on different methods of information retrieval.:|:rag is an instance of the SmolRag class that uses the custom chunking strategy to import and process documents.:|:rag is a variable representing an instance of the SmolRAG class, which can be configured with chunking strategies and parameters.:|:rag is an interface or tool used for querying documents, providing access to its features and functionalities.:|:rag is a variable that denotes a representation of a graph, which can be inspected for nodes and edges.:|:rag is an API that allows interaction with imported documents and facilitates querying the data.</data>
      <data key="d3">excerpt_id_8125dcd822731acc0c981b8a1307c4d3:|:excerpt_id_8efc423402a060df074b1830e38ed77b:|:excerpt_id_1022857c40806a92372f49dc394cbcfe:|:excerpt_id_cb0e5d0ad627c9ecd6e0fb7b4ac2bb43:|:excerpt_id_cbb4e8dad766e2f663005e81522d4b82:|:excerpt_id_52671ae166986e6c86752cd3194af2af:|:excerpt_id_f8b124e0bd021d69415fab98214a7b6b:|:excerpt_id_51c03df854681a0be44a0cb38da8ceed:|:excerpt_id_f460391fbb913e0e360f66999d788989</data>
    </node>
    <node id="Semantic Drift">
      <data key="d1">feature</data>
      <data key="d2">Semantic Drift refers to the potential issue where long or complex documents may not be accurately represented by fixed-length vectors, impacting the quality of embeddings.</data>
      <data key="d3">excerpt_id_13f0a88ca4ce9d7111d35d577b03200f</data>
    </node>
    <node id="Domain Specificity">
      <data key="d1">feature:|:limitation</data>
      <data key="d2">Domain Specificity highlights how the quality of entity and relationship extraction may differ based on the subject area.:|:Domain Specificity highlights that general-purpose embedding models may not effectively capture nuances specific to particular fields or industries.</data>
      <data key="d3">excerpt_id_13f0a88ca4ce9d7111d35d577b03200f:|:excerpt_id_98340282e700c542414080ecac3ff4a6</data>
    </node>
    <node id="Language Limitations">
      <data key="d1">feature</data>
      <data key="d2">Language Limitations indicate that the performance of embedding models can vary depending on the language and the technical domain being addressed.</data>
      <data key="d3">excerpt_id_13f0a88ca4ce9d7111d35d577b03200f</data>
    </node>
    <node id="Computational Cost">
      <data key="d1">feature</data>
      <data key="d2">Computational Cost emphasizes the significant resources required for generating and storing embeddings, especially in large document collections.</data>
      <data key="d3">excerpt_id_13f0a88ca4ce9d7111d35d577b03200f</data>
    </node>
    <node id="API Dependency">
      <data key="d1">feature</data>
      <data key="d2">API Dependency refers to the reliance on external embedding APIs, which can introduce vulnerabilities and potential failure points in the system.</data>
      <data key="d3">excerpt_id_13f0a88ca4ce9d7111d35d577b03200f</data>
    </node>
    <node id="Model Upgrades">
      <data key="d1">function</data>
      <data key="d2">Model Upgrades describe the planned support for newer and more powerful embedding models as they are developed, ensuring the system remains current.</data>
      <data key="d3">excerpt_id_13f0a88ca4ce9d7111d35d577b03200f</data>
    </node>
    <node id="Local Embeddings">
      <data key="d1">function</data>
      <data key="d2">Local Embeddings involve the potential integration of local embedding models to minimize reliance on external APIs, enhancing system independence.</data>
      <data key="d3">excerpt_id_13f0a88ca4ce9d7111d35d577b03200f</data>
    </node>
    <node id="Multi-Modal Support">
      <data key="d1">function</data>
      <data key="d2">Multi-Modal Support refers to the possible extension of the system's capabilities to handle embeddings from various content forms, such as images, in addition to text.</data>
      <data key="d3">excerpt_id_13f0a88ca4ce9d7111d35d577b03200f</data>
    </node>
    <node id="Hierarchical Embeddings">
      <data key="d1">function</data>
      <data key="d2">Hierarchical Embeddings is an exploration of embedding approaches that focus on better handling of long documents through organized structures.</data>
      <data key="d3">excerpt_id_13f0a88ca4ce9d7111d35d577b03200f</data>
    </node>
    <node id="Fine-Tuning">
      <data key="d1">function</data>
      <data key="d2">Fine-Tuning refers to the potential support for adjusting embedding models for specific domains, enhancing their effectiveness in targeted applications.</data>
      <data key="d3">excerpt_id_13f0a88ca4ce9d7111d35d577b03200f</data>
    </node>
    <node id="doc_to_source_kv">
      <data key="d1">variable</data>
      <data key="d2">doc_to_source_kv is a variable that maps documents back to their respective sources, enabling bidirectional reference.:|:doc_to_source_kv is a variable representing a key-value store that maps documents back to their sources, initialized with a specific JSON path.</data>
      <data key="d3">excerpt_id_9224c08a6f58fb5797f206ea7efc517e:|:excerpt_id_51c03df854681a0be44a0cb38da8ceed</data>
    </node>
    <node id="doc_to_excerpt_kv">
      <data key="d1">variable</data>
      <data key="d2">doc_to_excerpt_kv is a variable designed to map documents to their excerpts, facilitating excerpt retrieval.:|:doc_to_excerpt_kv is a variable representing a key-value store that maps documents to excerpts, initialized with a specific JSON path.</data>
      <data key="d3">excerpt_id_9224c08a6f58fb5797f206ea7efc517e:|:excerpt_id_51c03df854681a0be44a0cb38da8ceed</data>
    </node>
    <node id="excerpt_kv">
      <data key="d1">variable</data>
      <data key="d2">excerpt_kv is a variable that stores key-value pairs for excerpts, acting as a storage for excerpted content.:|:excerpt_kv is a variable used to hold key-value pairs representing excerpts from documents.:|:excerpt_kv is a variable representing a key-value store for excerpts, initialized with a specific JSON path.</data>
      <data key="d3">excerpt_id_8efc423402a060df074b1830e38ed77b:|:excerpt_id_9224c08a6f58fb5797f206ea7efc517e:|:excerpt_id_51c03df854681a0be44a0cb38da8ceed</data>
    </node>
    <node id="Modular Design">
      <data key="d1">configuration</data>
      <data key="d2">Modular Design of the ingestion process allows for customization and extension, making it adaptable for various text-based content types.</data>
      <data key="d3">excerpt_id_19a4021fa6c980fe5768130b704cc56e</data>
    </node>
    <node id="cache">
      <data key="d1">interface</data>
      <data key="d2">cache is an interface that provides methods for storing and retrieving cached results to optimize query performance.</data>
      <data key="d3">excerpt_id_0da14f0f2868bc4e6d5add7c81a2957c</data>
    </node>
    <node id="Knowledge Graph Maintenance">
      <data key="d1">function</data>
      <data key="d2">Knowledge Graph Maintenance refers to the mechanisms employed by SmolRAG to keep the knowledge graph updated, consistent, and optimized for performance.</data>
      <data key="d3">excerpt_id_98340282e700c542414080ecac3ff4a6</data>
    </node>
    <node id="Consistency Checks">
      <data key="d1">function</data>
      <data key="d2">Consistency Checks are processes that ensure the knowledge graph remains consistent during updates in SmolRAG.</data>
      <data key="d3">excerpt_id_98340282e700c542414080ecac3ff4a6</data>
    </node>
    <node id="Orphan Handling">
      <data key="d1">function</data>
      <data key="d2">Orphan Handling refers to the management of entities and relationships in the graph that do not have associated excerpts anymore.</data>
      <data key="d3">excerpt_id_98340282e700c542414080ecac3ff4a6</data>
    </node>
    <node id="Graph Pruning">
      <data key="d1">function</data>
      <data key="d2">Graph Pruning is an optional operation that can remove less important entities and relationships from the knowledge graph.</data>
      <data key="d3">excerpt_id_98340282e700c542414080ecac3ff4a6</data>
    </node>
    <node id="Performance Optimization">
      <data key="d1">function:|:configuration:|:feature</data>
      <data key="d2">Performance Optimization refers to best practices designed to improve the speed and efficiency of the system’s operations.:|:Performance Optimization is a feature that includes best practices for improving application speed and efficiency in the context of the SmolRAG framework.:|:Performance Optimization consists of strategies designed to enhance the efficiency of querying and traversing the knowledge graph.</data>
      <data key="d3">excerpt_id_c3ca869388739cbef75785b9d8a4b3e1:|:excerpt_id_98340282e700c542414080ecac3ff4a6:|:excerpt_id_ed82afd79e512c2446b7d0cddfce1ee3</data>
    </node>
    <node id="Strengths and Limitations">
      <data key="d1">concept</data>
      <data key="d2">Strengths and Limitations encompass the advantages and drawbacks of the knowledge graph approach in SmolRAG, highlighting how it functions in different contexts.</data>
      <data key="d3">excerpt_id_98340282e700c542414080ecac3ff4a6</data>
    </node>
    <node id="Explicit Connections">
      <data key="d1">feature</data>
      <data key="d2">Explicit Connections allow the knowledge graph to capture and represent clear relationships between various concepts.</data>
      <data key="d3">excerpt_id_98340282e700c542414080ecac3ff4a6</data>
    </node>
    <node id="Structured Reasoning">
      <data key="d1">feature</data>
      <data key="d2">Structured Reasoning enables thoughtful and organized deductions regarding entities and their interconnections within the knowledge graph.</data>
      <data key="d3">excerpt_id_98340282e700c542414080ecac3ff4a6</data>
    </node>
    <node id="Complementary to Vectors">
      <data key="d1">feature</data>
      <data key="d2">Complementary to Vectors indicates that the knowledge graph provides additional insights that may not be represented through vector embeddings alone.</data>
      <data key="d3">excerpt_id_98340282e700c542414080ecac3ff4a6</data>
    </node>
    <node id="Multi-Hop Reasoning">
      <data key="d1">feature</data>
      <data key="d2">Multi-Hop Reasoning supports complex deductions involving multiple connections in the knowledge graph.</data>
      <data key="d3">excerpt_id_98340282e700c542414080ecac3ff4a6</data>
    </node>
    <node id="Explainability">
      <data key="d1">feature</data>
      <data key="d2">Explainability refers to the clarity and interpretability of graph structures compared to vector embeddings in conveying relationships.</data>
      <data key="d3">excerpt_id_98340282e700c542414080ecac3ff4a6</data>
    </node>
    <node id="Extraction Quality">
      <data key="d1">limitation</data>
      <data key="d2">Extraction Quality addresses the reliance on accurate capture of entities and relationships for the effectiveness of the knowledge graph.</data>
      <data key="d3">excerpt_id_98340282e700c542414080ecac3ff4a6</data>
    </node>
    <node id="Coverage">
      <data key="d1">limitation</data>
      <data key="d2">Coverage denotes the potential gaps in information captured in the knowledge graph from the original documents.</data>
      <data key="d3">excerpt_id_98340282e700c542414080ecac3ff4a6</data>
    </node>
    <node id="Complexity">
      <data key="d1">limitation:|:weakness</data>
      <data key="d2">Complexity refers to the potential intricacies of conducting graph queries that could exceed simple vector search operations.:|:Complexity refers to the challenge posed by intricate processing requirements, which may extend query response times.:|:Complexity highlights the intricate nature of a processing pipeline, indicating potential challenges in execution.</data>
      <data key="d3">excerpt_id_84dc24216724ab859775d987f5bb2e19:|:excerpt_id_958fb948ab95cbababa3713159600cc7:|:excerpt_id_98340282e700c542414080ecac3ff4a6</data>
    </node>
    <node id="Scaling">
      <data key="d1">limitation</data>
      <data key="d2">Scaling pertains to the increase in resource demands required for graph operations as the knowledge graph expands.</data>
      <data key="d3">excerpt_id_98340282e700c542414080ecac3ff4a6</data>
    </node>
    <node id="EMBEDDINGS_DB">
      <data key="d1">variable</data>
      <data key="d2">EMBEDDINGS_DB is a constant that provides the path to the embeddings database.</data>
      <data key="d3">excerpt_id_0c67144102b1d81212b12e6ef61ad148</data>
    </node>
    <node id="KG_DB">
      <data key="d1">variable</data>
      <data key="d2">KG_DB denotes the path to the knowledge graph database which is crucial for data relationships.</data>
      <data key="d3">excerpt_id_0c67144102b1d81212b12e6ef61ad148</data>
    </node>
    <node id="api/main.py">
      <data key="d1">file</data>
      <data key="d2">The api/main.py file implements the API using FastAPI, providing an interface for system interactions.:|:api/main.py is the Python file where the FastAPI application is defined and configured.</data>
      <data key="d3">excerpt_id_c4c3ec315a84b895249de1a09e9984ee:|:excerpt_id_0c67144102b1d81212b12e6ef61ad148</data>
    </node>
    <node id="app">
      <data key="d1">variable:|:function</data>
      <data key="d2">app is the FastAPI application instance that serves as the main entry point for the API.:|:app is an instance of the FastAPI application that manages middleware, routing, and various services within the web application.:|:app is an instance of the FastAPI application, initiated with a title and configured for various functionalities.</data>
      <data key="d3">excerpt_id_ed82afd79e512c2446b7d0cddfce1ee3:|:excerpt_id_c4c3ec315a84b895249de1a09e9984ee:|:excerpt_id_0c67144102b1d81212b12e6ef61ad148</data>
    </node>
    <node id="QueryResponse">
      <data key="d1">model</data>
      <data key="d2">QueryResponse is a Pydantic model defining the structure of responses returned by the API.</data>
      <data key="d3">excerpt_id_0c67144102b1d81212b12e6ef61ad148</data>
    </node>
    <node id="query_map">
      <data key="d1">variable</data>
      <data key="d2">query_map is a variable presumably used to map query types to their respective processing functions for execution.:|:query_map is a mapping that links query type strings to specific SmolRAG methods, facilitating request handling.:|:query_map is a dictionary that maps query types to their corresponding processing functions, allowing dynamic execution based on user input.</data>
      <data key="d3">excerpt_id_3720213ae71a08acca1f7e46b7864f3e:|:excerpt_id_1123c47dc960c83e906ef0521acbf692:|:excerpt_id_0c67144102b1d81212b12e6ef61ad148</data>
    </node>
    <node id="validate_request()">
      <data key="d1">function</data>
      <data key="d2">validate_request() is a function that checks the validity of incoming query requests before processing.</data>
      <data key="d3">excerpt_id_0c67144102b1d81212b12e6ef61ad148</data>
    </node>
    <node id="query_endpoint()">
      <data key="d1">function</data>
      <data key="d2">query_endpoint() is a function responsible for handling query requests and responding to clients.</data>
      <data key="d3">excerpt_id_0c67144102b1d81212b12e6ef61ad148</data>
    </node>
    <node id="set_logger()">
      <data key="d1">function</data>
      <data key="d2">set_logger() is a function that sets up logging with specified configurations for the application.:|:set_logger() is a function that initializes the logger with a specified log file and level of detail.</data>
      <data key="d3">excerpt_id_9224c08a6f58fb5797f206ea7efc517e:|:excerpt_id_0c67144102b1d81212b12e6ef61ad148</data>
    </node>
    <node id="performance metrics">
      <data key="d1">feature</data>
      <data key="d2">performance metrics are logged to monitor the processing steps and overall system performance.</data>
      <data key="d3">excerpt_id_0c67144102b1d81212b12e6ef61ad148</data>
    </node>
    <node id="error responses">
      <data key="d1">feature</data>
      <data key="d2">error responses are generated to inform clients of issues during API processing, including status codes and messages.</data>
      <data key="d3">excerpt_id_0c67144102b1d81212b12e6ef61ad148</data>
    </node>
    <node id="data flow">
      <data key="d1">concept</data>
      <data key="d2">data flow describes the structured process by which data moves through the SmolRAG system, ensuring organized processing.</data>
      <data key="d3">excerpt_id_0c67144102b1d81212b12e6ef61ad148</data>
    </node>
    <node id="Rich Context">
      <data key="d1">feature</data>
      <data key="d2">Rich Context is a feature that generates detailed contexts including both entities and their interrelationships, facilitating deeper understanding.:|:Rich Context provides the richest context for the LLM to generate responses, enhancing the quality of output.</data>
      <data key="d3">excerpt_id_84dc24216724ab859775d987f5bb2e19:|:excerpt_id_958fb948ab95cbababa3713159600cc7</data>
    </node>
    <node id="Robust Performance">
      <data key="d1">feature</data>
      <data key="d2">Robust Performance indicates that the system generally performs well across a diverse array of query types, ensuring reliability in outputs.</data>
      <data key="d3">excerpt_id_958fb948ab95cbababa3713159600cc7</data>
    </node>
    <node id="Information Overload">
      <data key="d1">weakness</data>
      <data key="d2">Information Overload presents situations where too much information may overwhelm the LLM's processing capabilities.:|:Information Overload is a potential issue where the system may provide excessive information, complicating the user's understanding.</data>
      <data key="d3">excerpt_id_84dc24216724ab859775d987f5bb2e19:|:excerpt_id_958fb948ab95cbababa3713159600cc7</data>
    </node>
    <node id="Resource Intensity">
      <data key="d1">weakness</data>
      <data key="d2">Resource Intensity outlines the requirement for more computational power compared to simpler queries, potentially limiting accessibility.:|:Resource Intensity refers to the query type that is the most computationally intensive, impacting performance.</data>
      <data key="d3">excerpt_id_84dc24216724ab859775d987f5bb2e19:|:excerpt_id_958fb948ab95cbababa3713159600cc7</data>
    </node>
    <node id="Balancing Challenge">
      <data key="d1">weakness</data>
      <data key="d2">Balancing Challenge indicates the difficulty in managing local versus global information effectively within query responses.</data>
      <data key="d3">excerpt_id_958fb948ab95cbababa3713159600cc7</data>
    </node>
    <node id="Dependency Chain">
      <data key="d1">weakness</data>
      <data key="d2">Dependency Chain highlights reliance on the quality of both entity and relationship extraction for optimal performance.</data>
      <data key="d3">excerpt_id_958fb948ab95cbababa3713159600cc7</data>
    </node>
    <node id="Implementation">
      <data key="d1">configuration</data>
      <data key="d2">Implementation describes the process of executing the mix query which combines vector search and hybrid approaches into a cohesive output.</data>
      <data key="d3">excerpt_id_958fb948ab95cbababa3713159600cc7</data>
    </node>
    <node id="High-Dimensional Space">
      <data key="d1">concept</data>
      <data key="d2">High-Dimensional Space refers to the representation of queries and documents as vectors, facilitating the identification of conceptually similar content.</data>
      <data key="d3">excerpt_id_6feed1d0b430f2139ef9246b1e1758d3</data>
    </node>
    <node id="Retrieval Mechanisms">
      <data key="d1">feature</data>
      <data key="d2">Retrieval Mechanisms in SmolRAG are features that allow for accurate and contextually relevant information retrieval using various search methods.</data>
      <data key="d3">excerpt_id_6feed1d0b430f2139ef9246b1e1758d3</data>
    </node>
    <node id="Vector Search Query Type">
      <data key="d1">configuration</data>
      <data key="d2">Vector Search Query Type is a specific configuration within SmolRAG for executing similarity searches based on vector representations.</data>
      <data key="d3">excerpt_id_6feed1d0b430f2139ef9246b1e1758d3</data>
    </node>
    <node id="Knowledge Graph Approaches">
      <data key="d1">feature</data>
      <data key="d2">Knowledge Graph Approaches are additional retrieval features in SmolRAG that can be combined with vector search to enhance information retrieval capabilities.</data>
      <data key="d3">excerpt_id_6feed1d0b430f2139ef9246b1e1758d3</data>
    </node>
    <node id="Swagger UI">
      <data key="d1">feature</data>
      <data key="d2">Swagger UI is an interactive API documentation feature that automatically generates documentation for the FastAPI application, accessible at a specific URL.</data>
      <data key="d3">excerpt_id_453681d430472ffcca54f90331e78fee</data>
    </node>
    <node id="ReDoc">
      <data key="d1">feature</data>
      <data key="d2">ReDoc is another interactive documentation feature that works alongside Swagger UI for the FastAPI application, enhancing user experience in exploring API documentation.</data>
      <data key="d3">excerpt_id_453681d430472ffcca54f90331e78fee</data>
    </node>
    <node id="Example API Requests">
      <data key="d1">example</data>
      <data key="d2">Example API Requests provides representative ways to interact with the SmolRAG API using curl and Python requests, illustrating standard and specialized queries.</data>
      <data key="d3">excerpt_id_453681d430472ffcca54f90331e78fee</data>
    </node>
    <node id="Standard Query">
      <data key="d1">variable:|:function</data>
      <data key="d2">Standard Query is a function call to the API that retrieves information based on a basic question format.:|:Standard Query refers to a type of API request format used to send basic information queries to the SmolRAG API.</data>
      <data key="d3">excerpt_id_06064de98cbba1d78e30fa4dc9a3ba41:|:excerpt_id_453681d430472ffcca54f90331e78fee</data>
    </node>
    <node id="kup_path">
      <data key="d1">variable</data>
      <data key="d2">kup_path is a variable potentially representing a path in a system, possibly related to a specific configuration or API call.</data>
      <data key="d3">excerpt_id_025af8cc196b4a0f0777ff0f427b6dff</data>
    </node>
    <node id="Symptom: Missing or incorrect embeddings">
      <data key="d1">feature</data>
      <data key="d2">This feature outlines symptoms related to the absence or inaccuracies of embeddings generated within a system.</data>
      <data key="d3">excerpt_id_025af8cc196b4a0f0777ff0f427b6dff</data>
    </node>
    <node id="Potential Causes">
      <data key="d1">configuration</data>
      <data key="d2">Potential Causes refers to a list of reasons why embeddings might be missing or incorrect, focusing on embedding generation failures and model issues.</data>
      <data key="d3">excerpt_id_025af8cc196b4a0f0777ff0f427b6dff</data>
    </node>
    <node id="Solutions">
      <data key="d1">function</data>
      <data key="d2">Solutions is a segment providing actionable items to address the issues regarding missing or incorrect embeddings.</data>
      <data key="d3">excerpt_id_025af8cc196b4a0f0777ff0f427b6dff</data>
    </node>
    <node id="check_embeddings">
      <data key="d1">function</data>
      <data key="d2">check_embeddings is a function designed to verify the existence of embeddings for a document by checking associated excerpts.</data>
      <data key="d3">excerpt_id_025af8cc196b4a0f0777ff0f427b6dff</data>
    </node>
    <node id="Flask">
      <data key="d1">technology</data>
      <data key="d2">Flask is a web application framework in Python that is used to create the web interface for interacting with the SmolRag API.:|:Flask is a micro web framework for Python used to create web applications, allowing for easy integration of APIs like SmolRag.</data>
      <data key="d3">excerpt_id_adb7498f6f95f3de6fde939c658d11cf:|:excerpt_id_a73778302286b849ae1d8bdf13a41987</data>
    </node>
    <node id="semantic meaning">
      <data key="d1">concept</data>
      <data key="d2">Semantic meaning refers to the underlying meaning of words and phrases, represented in a format that enhances information retrieval.</data>
      <data key="d3">excerpt_id_3e377a1f38aab6a7301bb88392d388d4</data>
    </node>
    <node id="high-quality embeddings">
      <data key="d1">feature</data>
      <data key="d2">High-quality embeddings refer to the representations created by SmolRAG, which enable efficient retrieval of information based on semantic understanding.</data>
      <data key="d3">excerpt_id_3e377a1f38aab6a7301bb88392d388d4</data>
    </node>
    <node id="similarity search mechanisms">
      <data key="d1">function</data>
      <data key="d2">Similarity search mechanisms are functions that allow the identification of relevant information based on similarity to queries, enhancing retrieval accuracy.</data>
      <data key="d3">excerpt_id_3e377a1f38aab6a7301bb88392d388d4</data>
    </node>
    <node id="query()">
      <data key="d1">function</data>
      <data key="d2">query() is a function that executes a vector search query to retrieve relevant documents based on query vectors.</data>
      <data key="d3">excerpt_id_9224c08a6f58fb5797f206ea7efc517e</data>
    </node>
    <node id="local_kg_query()">
      <data key="d1">function</data>
      <data key="d2">local_kg_query() is a function that performs a query on the local knowledge graph to find associated information.</data>
      <data key="d3">excerpt_id_9224c08a6f58fb5797f206ea7efc517e</data>
    </node>
    <node id="global_kg_query()">
      <data key="d1">function</data>
      <data key="d2">global_kg_query() is a function that queries a global knowledge graph for broader context and data retrieval.</data>
      <data key="d3">excerpt_id_9224c08a6f58fb5797f206ea7efc517e</data>
    </node>
    <node id="hybrid_kg_query()">
      <data key="d1">function</data>
      <data key="d2">hybrid_kg_query() is a function that combines both vector search and knowledge graph queries to gather comprehensive results.</data>
      <data key="d3">excerpt_id_9224c08a6f58fb5797f206ea7efc517e</data>
    </node>
    <node id="mix_query()">
      <data key="d1">function</data>
      <data key="d2">mix_query() is a function that integrates various querying techniques to cross-reference and enrich results.</data>
      <data key="d3">excerpt_id_9224c08a6f58fb5797f206ea7efc517e</data>
    </node>
    <node id="app/logger.py">
      <data key="d1">configuration</data>
      <data key="d2">app/logger.py is a configuration file for setting up the logging system in the SmolRAG application.</data>
      <data key="d3">excerpt_id_9224c08a6f58fb5797f206ea7efc517e</data>
    </node>
    <node id="custom_log.log">
      <data key="d1">configuration</data>
      <data key="d2">custom_log.log is the specified log file where logging information is stored during the application's runtime.</data>
      <data key="d3">excerpt_id_9224c08a6f58fb5797f206ea7efc517e</data>
    </node>
    <node id="uvicorn">
      <data key="d1">api</data>
      <data key="d2">uvicorn is an ASGI server used to run the SmolRAG API application, which can be configured for different hosts and ports.:|:uvicorn is an ASGI server used to run FastAPI applications and is executed with specific host and port configurations.</data>
      <data key="d3">excerpt_id_9224c08a6f58fb5797f206ea7efc517e:|:excerpt_id_c4c3ec315a84b895249de1a09e9984ee</data>
    </node>
    <node id="api.main:app">
      <data key="d1">api</data>
      <data key="d2">api.main:app is the reference to the main application of the SmolRAG API, coded with FastAPI for handling requests and responses.</data>
      <data key="d3">excerpt_id_9224c08a6f58fb5797f206ea7efc517e</data>
    </node>
    <node id="Memory-Efficient Vector Store">
      <data key="d1">class</data>
      <data key="d2">Memory-Efficient Vector Store is a class designed to manage memory-efficient vector storage, incorporating functionality for initialization and querying.</data>
      <data key="d3">excerpt_id_bb6ad6a345cbdf6df0cbdc4225260a25</data>
    </node>
    <node id="initialize">
      <data key="d1">function</data>
      <data key="d2">initialize is a method within MemmapVectorStore that sets up the memory-mapped array and loads previous data if available.:|:initialize is a method within the Memory-Efficient Vector Store class that sets up the memory-mapped array, either creating a new one or loading an existing one based on the file path provided.</data>
      <data key="d3">excerpt_id_03db7bd394b5c8f0cca7825a7bc0976e:|:excerpt_id_bb6ad6a345cbdf6df0cbdc4225260a25</data>
    </node>
    <node id="add_vector">
      <data key="d1">function</data>
      <data key="d2">add_vector is a method in the Memory-Efficient Vector Store class intended for adding new vectors to the storage but is a simplified example in the current context.</data>
      <data key="d3">excerpt_id_bb6ad6a345cbdf6df0cbdc4225260a25</data>
    </node>
    <node id="self.file_path">
      <data key="d1">variable</data>
      <data key="d2">self.file_path is an instance variable that holds the path to the file being used for memory-mapped array storage in the Memory-Efficient Vector Store class.</data>
      <data key="d3">excerpt_id_bb6ad6a345cbdf6df0cbdc4225260a25</data>
    </node>
    <node id="self.dimensions">
      <data key="d1">variable</data>
      <data key="d2">self.dimensions is an instance variable representing the dimensions of the vectors stored in the Memory-Efficient Vector Store.</data>
      <data key="d3">excerpt_id_bb6ad6a345cbdf6df0cbdc4225260a25</data>
    </node>
    <node id="self.metadata">
      <data key="d1">variable:|:}|"variable"</data>
      <data key="d2">self.metadata refers to a collection of metadata associated with document chunks, used to retrieve specific information based on indices.:|:self.metadata is an instance variable used to store metadata related to the vectors in the Memory-Efficient Vector Store for reference during query operations.</data>
      <data key="d3">excerpt_id_e329d73f72654b591f8c6832617f0209:|:excerpt_id_bb6ad6a345cbdf6df0cbdc4225260a25</data>
    </node>
    <node id="Graph Algorithms">
      <data key="d1">function</data>
      <data key="d2">Graph Algorithms encompass various computational techniques applied to analyze graph data and extract insights.</data>
      <data key="d3">excerpt_id_59fb313f068a75f4e40be3bf7b095013</data>
    </node>
    <node id="Temporal Information">
      <data key="d1">feature</data>
      <data key="d2">Temporal Information relates to data that is specific to temporal dimensions, enhancing knowledge representation in SmolRAG.</data>
      <data key="d3">excerpt_id_59fb313f068a75f4e40be3bf7b095013</data>
    </node>
    <node id="User Feedback Integration">
      <data key="d1">feature</data>
      <data key="d2">User Feedback Integration involves incorporating user suggestions to improve the underlying knowledge graph's performance and accuracy.</data>
      <data key="d3">excerpt_id_59fb313f068a75f4e40be3bf7b095013</data>
    </node>
    <node id="Document Ingestion Pipeline">
      <data key="d1">function</data>
      <data key="d2">The Document Ingestion Pipeline is a series of processing steps that read documents from an input directory, chunking them, and processing them concurrently using asynchronous tasks.:|:Document Ingestion Pipeline is a function within SmolRAG that handles the reading, chunking, summarizing, embedding, and storing of documents.</data>
      <data key="d3">excerpt_id_a94908d6a99d624559f006ef6ef883ec:|:excerpt_id_d4a7e13bce25a456a78a4eef57373bf4</data>
    </node>
    <node id="Query Processing Pipeline">
      <data key="d1">function</data>
      <data key="d2">The Query Processing Pipeline handles incoming queries by validating them, calling appropriate methods, processing based on query type, and formatting results for return.:|:Query Processing Pipeline is a function within SmolRAG responsible for validating and processing incoming queries based on their types.</data>
      <data key="d3">excerpt_id_a94908d6a99d624559f006ef6ef883ec:|:excerpt_id_d4a7e13bce25a456a78a4eef57373bf4</data>
    </node>
    <node id="Excerpts">
      <data key="d1">variable</data>
      <data key="d2">Excerpts are segments of documents that are generated during the document ingestion process for summarization and embedding.</data>
      <data key="d3">excerpt_id_a94908d6a99d624559f006ef6ef883ec</data>
    </node>
    <node id="Summaries">
      <data key="d1">variable</data>
      <data key="d2">Summaries are concise representations of the excerpts produced during the document ingestion, aiming to capture key information.</data>
      <data key="d3">excerpt_id_a94908d6a99d624559f006ef6ef883ec</data>
    </node>
    <node id="Entities and Relationships">
      <data key="d1">example</data>
      <data key="d2">Entities and Relationships refer to the data that is extracted from the documents as part of the ingestion and processing pipelines.</data>
      <data key="d3">excerpt_id_a94908d6a99d624559f006ef6ef883ec</data>
    </node>
    <node id="Input Directory">
      <data key="d1">configuration</data>
      <data key="d2">The Input Directory is specified as 'app/input_docs/', where SmolRAG retrieves documents for ingestion, supporting various text-based formats.:|:Input Directory is a specified location from which the documents are read for processing in the SmolRAG system.</data>
      <data key="d3">excerpt_id_a94908d6a99d624559f006ef6ef883ec:|:excerpt_id_dc65135b9ad9bfac43cc3ae95a7b4158</data>
    </node>
    <node id="Results">
      <data key="d1">variable</data>
      <data key="d2">Results are the final outputs returned after processing the queries, formatted according to the query type.</data>
      <data key="d3">excerpt_id_a94908d6a99d624559f006ef6ef883ec</data>
    </node>
    <node id="Query Time">
      <data key="d1">variable</data>
      <data key="d2">Query Time indicates the duration it takes to achieve results, which may vary among different query types.</data>
      <data key="d3">excerpt_id_84dc24216724ab859775d987f5bb2e19</data>
    </node>
    <node id="Context Limit Challenges">
      <data key="d1">weakness</data>
      <data key="d2">Context Limit Challenges refer to the frequent encounter of token limit constraints, impacting information retrieval.</data>
      <data key="d3">excerpt_id_84dc24216724ab859775d987f5bb2e19</data>
    </node>
    <node id="Local KG">
      <data key="d1">api</data>
      <data key="d2">Local KG operates at medium speed, providing high detail for entities and medium structured reasoning.</data>
      <data key="d3">excerpt_id_84dc24216724ab859775d987f5bb2e19</data>
    </node>
    <node id="Global KG">
      <data key="d1">api</data>
      <data key="d2">Global KG also functions at medium speed with a high level of detail for concepts and medium structured reasoning.</data>
      <data key="d3">excerpt_id_84dc24216724ab859775d987f5bb2e19</data>
    </node>
    <node id="Hybrid KG">
      <data key="d1">api</data>
      <data key="d2">Hybrid KG is a slow query type that offers high detail and structured reasoning but has high resource usage.</data>
      <data key="d3">excerpt_id_84dc24216724ab859775d987f5bb2e19</data>
    </node>
    <node id="Mix">
      <data key="d1">api</data>
      <data key="d2">Mix is the slowest query type, delivering the highest detail, structured reasoning, and incorporates both conceptual and entity-related queries.</data>
      <data key="d3">excerpt_id_84dc24216724ab859775d987f5bb2e19</data>
    </node>
    <node id="Comparative Analysis of Query Types">
      <data key="d1">function</data>
      <data key="d2">Comparative Analysis of Query Types serves as a framework for understanding the characteristics and best use cases for different query types.</data>
      <data key="d3">excerpt_id_84dc24216724ab859775d987f5bb2e19</data>
    </node>
    <node id="http://localhost:8000/query">
      <data key="d1">interface</data>
      <data key="d2">The URL http://localhost:8000/query serves as an interface for sending requests to the SmolRAG API for various types of queries.</data>
      <data key="d3">excerpt_id_06064de98cbba1d78e30fa4dc9a3ba41</data>
    </node>
    <node id="payload">
      <data key="d1">variable</data>
      <data key="d2">Payload represents the data structure containing the query text and type to be sent with the API request.:|:Payload refers to the data structure sent in the requests, which contains parameters such as 'text' and 'query_type' to specify the request details.</data>
      <data key="d3">excerpt_id_06064de98cbba1d78e30fa4dc9a3ba41:|:excerpt_id_63cd91bc48a4a86dbc4244526ba83736</data>
    </node>
    <node id="headers">
      <data key="d1">configuration</data>
      <data key="d2">Headers are configuration settings that define the content type of the request, ensuring the API correctly processes the incoming data.</data>
      <data key="d3">excerpt_id_06064de98cbba1d78e30fa4dc9a3ba41</data>
    </node>
    <node id="response">
      <data key="d1">variable</data>
      <data key="d2">Response is the result obtained from the API call, containing information requested based on the specified query type.:|:Response is the output received from the API after making a request, typically in JSON format.</data>
      <data key="d3">excerpt_id_06064de98cbba1d78e30fa4dc9a3ba41:|:excerpt_id_63cd91bc48a4a86dbc4244526ba83736</data>
    </node>
    <node id="filter_func">
      <data key="d1">function</data>
      <data key="d2">filter_func is a lambda function that filters results based on the `__id__` of the excerpt to determine if an embedding exists.</data>
      <data key="d3">excerpt_id_8125dcd822731acc0c981b8a1307c4d3</data>
    </node>
    <node id="excerpt_id">
      <data key="d1">variable</data>
      <data key="d2">excerpt_id is a variable used to identify a specific excerpt for which an embedding is being searched.:|:excerpt_id is a variable that holds the unique identifier for a specific excerpt, enabling the retrieval of pertinent information.</data>
      <data key="d3">excerpt_id_38c732d43cab759a55244eaa09fa38a6:|:excerpt_id_8125dcd822731acc0c981b8a1307c4d3</data>
    </node>
    <node id="results">
      <data key="d1">variable</data>
      <data key="d2">results is a variable that stores the outcome of the embedding search, indicating whether any embeddings were found for the given excerpt_id.:|:Results is a variable that holds the results of multiple queries, which is printed individually in a loop.:|:Results is the variable that stores the output of processed queries, allowing for iteration and display.:|:Results is a list collecting the outcomes of each query processed, organizing them for output.:|:Results are a collection of outcomes returned by the queries processed against the SmolRAG API, containing data based on user requests.</data>
      <data key="d3">excerpt_id_6d692b7f7ce26d7c5b94249c8453447e:|:excerpt_id_8125dcd822731acc0c981b8a1307c4d3:|:excerpt_id_97e526b02e37e6e2b2b176a8cb9cc039:|:excerpt_id_79e52f475952407e95cfdbc653290c6d:|:excerpt_id_9bec674c65e1e71d106b31cafb5387bf</data>
    </node>
    <node id="clear_embedding_cache">
      <data key="d1">function</data>
      <data key="d2">clear_embedding_cache is a function that removes the embedding cache file if it exists to allow regeneration of embeddings.</data>
      <data key="d3">excerpt_id_8125dcd822731acc0c981b8a1307c4d3</data>
    </node>
    <node id="cache_path">
      <data key="d1">variable</data>
      <data key="d2">cache_path indicates the full path of the embedding cache file, constructed from the CACHE_DIR variable.</data>
      <data key="d3">excerpt_id_8125dcd822731acc0c981b8a1307c4d3</data>
    </node>
    <node id="verify_embedding_dimensions">
      <data key="d1">function</data>
      <data key="d2">verify_embedding_dimensions is a function that checks if the dimensions of a retrieved embedding match the expected dimensions.</data>
      <data key="d3">excerpt_id_8125dcd822731acc0c981b8a1307c4d3</data>
    </node>
    <node id="expected_dim">
      <data key="d1">variable</data>
      <data key="d2">expected_dim is a variable defining the expected dimensionality of the embeddings, set to 1536 by default.</data>
      <data key="d3">excerpt_id_8125dcd822731acc0c981b8a1307c4d3</data>
    </node>
    <node id="sample_id">
      <data key="d1">variable</data>
      <data key="d2">sample_id is a variable that holds the identifier of a sample embedding for dimension verification.</data>
      <data key="d3">excerpt_id_8125dcd822731acc0c981b8a1307c4d3</data>
    </node>
    <node id="sample_vector">
      <data key="d1">variable</data>
      <data key="d2">sample_vector is a variable that stores the vector representation of the sample embedding.</data>
      <data key="d3">excerpt_id_8125dcd822731acc0c981b8a1307c4d3</data>
    </node>
    <node id="actual_dim">
      <data key="d1">variable</data>
      <data key="d2">actual_dim stores the actual dimensionality of the sample_vector retrieved during dimension verification.</data>
      <data key="d3">excerpt_id_8125dcd822731acc0c981b8a1307c4d3</data>
    </node>
    <node id="knowledge_graph_issues">
      <data key="d1">concept</data>
      <data key="d2">knowledge_graph_issues refers to problems related to incorrect or missing entities and relationships in the knowledge graph.</data>
      <data key="d3">excerpt_id_8125dcd822731acc0c981b8a1307c4d3</data>
    </node>
    <node id="symptom">
      <data key="d1">concept</data>
      <data key="d2">symptom describes the observable problems experienced when there are issues in the knowledge graph.</data>
      <data key="d3">excerpt_id_8125dcd822731acc0c981b8a1307c4d3</data>
    </node>
    <node id="potential_causes">
      <data key="d1">concept</data>
      <data key="d2">potential_causes outlines the reasons that might lead to symptoms in the entity extraction and knowledge graph.</data>
      <data key="d3">excerpt_id_8125dcd822731acc0c981b8a1307c4d3</data>
    </node>
    <node id="solutions">
      <data key="d1">concept</data>
      <data key="d2">solutions suggest steps to troubleshoot and resolve the identified issues in the knowledge graph.</data>
      <data key="d3">excerpt_id_8125dcd822731acc0c981b8a1307c4d3</data>
    </node>
    <node id="Flask Web Application">
      <data key="d1">configuration:|:api</data>
      <data key="d2">Flask Web Application is an API designed to query documents efficiently, facilitating interaction with data.:|:Flask Web Application is a framework that supports running the SmolRAG API, enabling the creation and management of web applications.</data>
      <data key="d3">excerpt_id_97e526b02e37e6e2b2b176a8cb9cc039:|:excerpt_id_79e52f475952407e95cfdbc653290c6d</data>
    </node>
    <node id="queries">
      <data key="d1">variable</data>
      <data key="d2">Queries is a list of dictionaries containing text queries and their respective types for processing in batch.:|:Queries are structured requests containing text and types intended for interaction with the SmolRAG API, allowing users to retrieve information based on the specified types.:|:Queries represent specific questions or requests that are sent to the SmolRag API for processing.</data>
      <data key="d3">excerpt_id_97e526b02e37e6e2b2b176a8cb9cc039:|:excerpt_id_79e52f475952407e95cfdbc653290c6d:|:excerpt_id_8df198dc0e22767ee72f9d76b21e44aa</data>
    </node>
    <node id="Batch Processing Example">
      <data key="d1">example</data>
      <data key="d2">The Batch Processing Example illustrates how to efficiently handle multiple queries to the SmolRAG API in a scripted manner.</data>
      <data key="d3">excerpt_id_79e52f475952407e95cfdbc653290c6d</data>
    </node>
    <node id="local_kg_query">
      <data key="d1">function</data>
      <data key="d2">local_kg_query is a function that allows users to query a local knowledge graph for information related to their input text.</data>
      <data key="d3">excerpt_id_79e52f475952407e95cfdbc653290c6d</data>
    </node>
    <node id="global_kg_query">
      <data key="d1">function</data>
      <data key="d2">global_kg_query is a function that retrieves information from a global knowledge graph based on user queries.</data>
      <data key="d3">excerpt_id_79e52f475952407e95cfdbc653290c6d</data>
    </node>
    <node id="hybrid_kg_query">
      <data key="d1">function</data>
      <data key="d2">hybrid_kg_query combines approaches from both local and global knowledge graphs to process user queries for richer information.</data>
      <data key="d3">excerpt_id_79e52f475952407e95cfdbc653290c6d</data>
    </node>
    <node id="CORSMiddleware">
      <data key="d1">configuration:|:api:|:feature</data>
      <data key="d2">CORSMiddleware is a feature in FastAPI that facilitates Cross-Origin Resource Sharing, allowing resources to be shared across different origins.:|:CORSMiddleware is a middleware component used to handle Cross-Origin Resource Sharing (CORS) configurations in FastAPI applications, allowing for flexible API access.:|:CORSMiddleware is a middleware component that enables Cross-Origin Resource Sharing, allowing secure access from different origins.</data>
      <data key="d3">excerpt_id_e0d2ab7be18b619d1b6cfd5900b9347e:|:excerpt_id_c4c3ec315a84b895249de1a09e9984ee:|:excerpt_id_ed82afd79e512c2446b7d0cddfce1ee3</data>
    </node>
    <node id="top_indices">
      <data key="d1">variable</data>
      <data key="d2">top_indices is a variable that stores the indices of the top-k most similar items based on a computed similarity score.</data>
      <data key="d3">excerpt_id_e329d73f72654b591f8c6832617f0209</data>
    </node>
    <node id="similarities">
      <data key="d1">variable</data>
      <data key="d2">similarities is a variable that holds the similarity scores computed for different document chunks.:|:similarities is a variable that holds the computed similarity scores between the sample vectors and the query vector.</data>
      <data key="d3">excerpt_id_e329d73f72654b591f8c6832617f0209:|:excerpt_id_450b2f19c98596bfc6089aeec9514ca4</data>
    </node>
    <node id="Vector Database Files">
      <data key="d1">configuration</data>
      <data key="d2">Vector Database Files are configuration files that store embeddings for all document chunks, playing a critical role in similarity searches.</data>
      <data key="d3">excerpt_id_e329d73f72654b591f8c6832617f0209</data>
    </node>
    <node id="Knowledge Graph Files">
      <data key="d1">configuration</data>
      <data key="d2">Knowledge Graph Files contain the structure and properties of the knowledge graph, enabling efficient queries and data retrieval.</data>
      <data key="d3">excerpt_id_e329d73f72654b591f8c6832617f0209</data>
    </node>
    <node id="Log Files">
      <data key="d1">configuration</data>
      <data key="d2">Log Files are used to store detailed logs of application activities, especially at DEBUG level for monitoring and debugging purposes.</data>
      <data key="d3">excerpt_id_e329d73f72654b591f8c6832617f0209</data>
    </node>
    <node id="setup_logger">
      <data key="d1">function</data>
      <data key="d2">setup_logger is a function that configures logging with specific parameters such as log directory, file name, size limits, and backup count.</data>
      <data key="d3">excerpt_id_e329d73f72654b591f8c6832617f0209</data>
    </node>
    <node id="RotatingFileHandler">
      <data key="d1">api:|:feature</data>
      <data key="d2">RotatingFileHandler is a feature that facilitates rotation of log files to prevent them from growing indefinitely, ensuring manageable log sizes.:|:The RotatingFileHandler is a logging handler that rotates log files based on a specified maximum size, preventing the creation of excessively large log files.</data>
      <data key="d3">excerpt_id_e329d73f72654b591f8c6832617f0209:|:excerpt_id_b6a3bf9520f31279c695c790576b2216</data>
    </node>
    <node id="Compression">
      <data key="d1">example</data>
      <data key="d2">Compression refers to the strategy of reducing the size of stored data, which can help optimize disk usage in the application.</data>
      <data key="d3">excerpt_id_e329d73f72654b591f8c6832617f0209</data>
    </node>
    <node id="Selective Storage">
      <data key="d1">example</data>
      <data key="d2">Selective Storage involves storing only essential information to optimize disk usage, deriving any additional data as necessary.</data>
      <data key="d3">excerpt_id_e329d73f72654b591f8c6832617f0209</data>
    </node>
    <node id="Regular Cleanup">
      <data key="d1">example</data>
      <data key="d2">Regular Cleanup is the practice of implementing policies to remove old or unused data to maintain optimal disk space.</data>
      <data key="d3">excerpt_id_e329d73f72654b591f8c6832617f0209</data>
    </node>
    <node id="Efficient Serialization">
      <data key="d1">example</data>
      <data key="d2">Efficient Serialization refers to the use of compact data formats to optimize the storage of data, thereby saving space.</data>
      <data key="d3">excerpt_id_e329d73f72654b591f8c6832617f0209</data>
    </node>
    <node id="Log Rotation">
      <data key="d1">example</data>
      <data key="d2">Log Rotation is the process of periodically renaming and archiving log files to prevent any single log file from becoming too large.</data>
      <data key="d3">excerpt_id_e329d73f72654b591f8c6832617f0209</data>
    </node>
    <node id="logger">
      <data key="d1">variable</data>
      <data key="d2">Logger is a variable that holds the logging configuration for tracking performance information within the PerformanceMonitor class.:|:The logger variable holds the instance of the configured logger created by setup_rotating_logger, allowing logging throughout the application.:|:logger is a variable that represents a logging instance configured to write logs based on the defined settings in setup_logger.:|:logger is an instance used for logging errors and information, helping in debugging and monitoring the API's performance.</data>
      <data key="d3">excerpt_id_e329d73f72654b591f8c6832617f0209:|:excerpt_id_b6a3bf9520f31279c695c790576b2216:|:excerpt_id_3720213ae71a08acca1f7e46b7864f3e:|:excerpt_id_a932de00c67d51e468546b00d37959d4</data>
    </node>
    <node id="Query Type Selection Strategies">
      <data key="d1">feature</data>
      <data key="d2">Strategies designed to enhance the choice of query types to optimize response quality in a system.</data>
      <data key="d3">excerpt_id_eefa49769efd623d4dac1e62ed2a7ced</data>
    </node>
    <node id="Question Analysis">
      <data key="d1">function</data>
      <data key="d2">A method used to determine the intent of a question, whether it pertains to specific entities or broader concepts.</data>
      <data key="d3">excerpt_id_eefa49769efd623d4dac1e62ed2a7ced</data>
    </node>
    <node id="Iterative Refinement">
      <data key="d1">function</data>
      <data key="d2">A process that begins with simpler query types and escalates to complex ones based on response adequacy.</data>
      <data key="d3">excerpt_id_eefa49769efd623d4dac1e62ed2a7ced</data>
    </node>
    <node id="Domain-Specific Defaults">
      <data key="d1">configuration</data>
      <data key="d2">Predefined query types that are tailored to consistently perform better in particular domains or document types.</data>
      <data key="d3">excerpt_id_eefa49769efd623d4dac1e62ed2a7ced</data>
    </node>
    <node id="Response Time Requirements">
      <data key="d1">variable</data>
      <data key="d2">Factors that weigh the balance between response quality and response time according to use cases.</data>
      <data key="d3">excerpt_id_eefa49769efd623d4dac1e62ed2a7ced</data>
    </node>
    <node id="Computational Resource Constraints">
      <data key="d1">variable</data>
      <data key="d2">Limitations on resources that influence the choice of query types for efficiency.</data>
      <data key="d3">excerpt_id_eefa49769efd623d4dac1e62ed2a7ced</data>
    </node>
    <node id="API Integration">
      <data key="d1">feature</data>
      <data key="d2">The ability to incorporate query type selection capabilities within applications using the SmolRAG framework.</data>
      <data key="d3">excerpt_id_eefa49769efd623d4dac1e62ed2a7ced</data>
    </node>
    <node id="Python API">
      <data key="d1">interface</data>
      <data key="d2">The programming interface provided for users to integrate SmolRAG into their applications using Python.</data>
      <data key="d3">excerpt_id_eefa49769efd623d4dac1e62ed2a7ced</data>
    </node>
    <node id="REST API">
      <data key="d1">interface</data>
      <data key="d2">The endpoint provided for facilitating queries via HTTP requests, allowing query type specification.</data>
      <data key="d3">excerpt_id_eefa49769efd623d4dac1e62ed2a7ced</data>
    </node>
    <node id="Uvicorn">
      <data key="d1">function</data>
      <data key="d2">Uvicorn is a lightweight ASGI server used for development and small deployments of APIs.</data>
      <data key="d3">excerpt_id_63cd91bc48a4a86dbc4244526ba83736</data>
    </node>
    <node id="Gunicorn">
      <data key="d1">function</data>
      <data key="d2">Gunicorn is a Python WSGI HTTP server that can be used with Uvicorn workers to handle multiple requests in a production environment.</data>
      <data key="d3">excerpt_id_63cd91bc48a4a86dbc4244526ba83736</data>
    </node>
    <node id="Docker">
      <data key="d1">function</data>
      <data key="d2">Docker is a platform used to containerize applications, including APIs, for consistent deployment across different environments.</data>
      <data key="d3">excerpt_id_63cd91bc48a4a86dbc4244526ba83736</data>
    </node>
    <node id="Horizontal Scaling">
      <data key="d1">feature:|:configuration</data>
      <data key="d2">Horizontal Scaling refers to adding more machines or instances to handle increased loads on the API.:|:Horizontal Scaling involves distributing workloads across multiple machines to improve processing efficiency and manage large data sets.</data>
      <data key="d3">excerpt_id_d819e633cca45f5553e358a312c96667:|:excerpt_id_63cd91bc48a4a86dbc4244526ba83736</data>
    </node>
    <node id="enAiLlm">
      <data key="d1">function</data>
      <data key="d2">enAiLlm is a function that appears to be used for processing text and generating responses, likely in natural language processing applications.</data>
      <data key="d3">excerpt_id_cb0e5d0ad627c9ecd6e0fb7b4ac2bb43</data>
    </node>
    <node id="sample_excerpt">
      <data key="d1">variable</data>
      <data key="d2">sample_excerpt is a variable that holds a sample text, which is intended for use in further processing or analysis.</data>
      <data key="d3">excerpt_id_cb0e5d0ad627c9ecd6e0fb7b4ac2bb43</data>
    </node>
    <node id="inspect_graph">
      <data key="d1">function</data>
      <data key="d2">inspect_graph is a function developed to inspect a graph structure, providing details about its nodes and edges.</data>
      <data key="d3">excerpt_id_cb0e5d0ad627c9ecd6e0fb7b4ac2bb43</data>
    </node>
    <node id="Graph Structure">
      <data key="d1">configuration</data>
      <data key="d2">Graph Structure refers to the underlying blueprint of how nodes and edges are organized in a graph.</data>
      <data key="d3">excerpt_id_cb0e5d0ad627c9ecd6e0fb7b4ac2bb43</data>
    </node>
    <node id="nodes">
      <data key="d1">configuration</data>
      <data key="d2">nodes represent the individual elements of data within the graph structure, possibly containing attributes related to their purpose.</data>
      <data key="d3">excerpt_id_cb0e5d0ad627c9ecd6e0fb7b4ac2bb43</data>
    </node>
    <node id="edges">
      <data key="d1">configuration</data>
      <data key="d2">edges are the connections between nodes in the graph structure, representing relationships or pathways between them.</data>
      <data key="d3">excerpt_id_cb0e5d0ad627c9ecd6e0fb7b4ac2bb43</data>
    </node>
    <node id="Query">
      <data key="d1">function</data>
      <data key="d2">Query is a function or action that retrieves data based on the specified parameters, represented as 'query' in results.</data>
      <data key="d3">excerpt_id_6d692b7f7ce26d7c5b94249c8453447e</data>
    </node>
    <node id="Type">
      <data key="d1">variable</data>
      <data key="d2">Type is a field within a result that indicates the specific classification of that result.</data>
      <data key="d3">excerpt_id_6d692b7f7ce26d7c5b94249c8453447e</data>
    </node>
    <node id="Advanced Configuration Example">
      <data key="d1">example</data>
      <data key="d2">Advanced Configuration Example illustrates how to set up SmolRAG with custom components for advanced users.</data>
      <data key="d3">excerpt_id_6d692b7f7ce26d7c5b94249c8453447e</data>
    </node>
    <node id="Print Results">
      <data key="d1">function</data>
      <data key="d2">Print Results is a function that processes and outputs each query result in a formatted manner.</data>
      <data key="d3">excerpt_id_6d692b7f7ce26d7c5b94249c8453447e</data>
    </node>
    <node id="Query Endpoint Configuration">
      <data key="d1">configuration</data>
      <data key="d2">The Query Endpoint Configuration outlines how the API endpoint can be customized, including parameters for query handling such as text, query_type, and max_results.</data>
      <data key="d3">excerpt_id_ed82afd79e512c2446b7d0cddfce1ee3</data>
    </node>
    <node id="CustomSmolRag">
      <data key="d1">class:|:configuration</data>
      <data key="d2">CustomSmolRag is a subclass of SmolRag that allows for advanced customization through additional initialization and method overrides.:|:CustomSmolRag is a subclass of SmolRag which allows for modifications in the ranking logic when retrieving entities from relationships.:|:CustomSmolRag is a subclass designed to modify the behavior of context extraction to limit the number of excerpts processed.:|:CustomSmolRag is a subclass of SmolRag that allows for advanced customization, providing methods to extend functionality and customize querying methods.:|:CustomSmolRag is a subclass of SmolRag, designed to modify the threshold settings for query excerpts to enhance precision in data retrieval.</data>
      <data key="d3">excerpt_id_7f32de37a5cddfe45cdff7356d2a5584:|:excerpt_id_58afd38ac61f13786dbc05d2f0c7bf8f:|:excerpt_id_ed82afd79e512c2446b7d0cddfce1ee3:|:excerpt_id_38c732d43cab759a55244eaa09fa38a6:|:excerpt_id_fe5d529dab986843e6821f4c56079a32</data>
    </node>
    <node id="up_logger">
      <data key="d1">function</data>
      <data key="d2">up_logger is a function used for logging application events by appending log entries to a specified log file.</data>
      <data key="d3">excerpt_id_81db384c7c323402180915d5a9c65d67</data>
    </node>
    <node id="OpenAI's API">
      <data key="d1">api</data>
      <data key="d2">OpenAI's API provides functionalities for generating embeddings, summarizing text, and responding to queries, forming a core component of SmolRAG.</data>
      <data key="d3">excerpt_id_81db384c7c323402180915d5a9c65d67</data>
    </node>
    <node id="Excerpt Summarization">
      <data key="d1">feature</data>
      <data key="d2">Excerpt Summarization is a feature that generates concise summaries for document chunks to facilitate quicker review and understanding.</data>
      <data key="d3">excerpt_id_81db384c7c323402180915d5a9c65d67</data>
    </node>
    <node id="Response Generation">
      <data key="d1">feature</data>
      <data key="d2">Response Generation is a feature that synthesizes a final response to user queries based on processed data and API outputs.</data>
      <data key="d3">excerpt_id_81db384c7c323402180915d5a9c65d67</data>
    </node>
    <node id="Optimization Strategies">
      <data key="d1">concept</data>
      <data key="d2">Optimization Strategies refer to methods employed to improve the efficiency and cost-effectiveness of API usage in SmolRAG.</data>
      <data key="d3">excerpt_id_81db384c7c323402180915d5a9c65d67</data>
    </node>
    <node id="Batching">
      <data key="d1">example</data>
      <data key="d2">Batching is an optimization strategy that involves grouping multiple API requests to reduce overhead and improve performance.</data>
      <data key="d3">excerpt_id_81db384c7c323402180915d5a9c65d67</data>
    </node>
    <node id="Retry Logic">
      <data key="d1">feature:|:example</data>
      <data key="d2">Retry Logic is a methodology implemented to handle API failures gracefully by attempting requests again after an error occurs.:|:Retry Logic is a feature that implements robust strategies to attempt again after an API failure, ensuring that temporary issues do not halt the application’s functionality.</data>
      <data key="d3">excerpt_id_b35b21c7869785d9ef1329f450f10a5d:|:excerpt_id_81db384c7c323402180915d5a9c65d67</data>
    </node>
    <node id="API Batching" />
    <node id="Adaptive Query Selection">
      <data key="d1">feature</data>
      <data key="d2">Adaptive Query Selection is a feature aimed at automatically choosing the optimal query type based on the user's question, enhancing responsiveness.</data>
      <data key="d3">excerpt_id_d2ba6034366fcca143d67219ee341a22</data>
    </node>
    <node id="Personalized Query Processing">
      <data key="d1">feature</data>
      <data key="d2">Personalized Query Processing adapts the handling of queries according to user preferences and historical interactions, tailoring responses.</data>
      <data key="d3">excerpt_id_d2ba6034366fcca143d67219ee341a22</data>
    </node>
    <node id="Multi-Stage Querying">
      <data key="d1">feature</data>
      <data key="d2">Multi-Stage Querying employs an iterative process to refine results based on initial queries, increasing the accuracy of responses.</data>
      <data key="d3">excerpt_id_d2ba6034366fcca143d67219ee341a22</data>
    </node>
    <node id="Domain-Specific Optimizations">
      <data key="d1">feature</data>
      <data key="d2">Domain-Specific Optimizations provide specialized query types tailored to specific content areas, enhancing query effectiveness.</data>
      <data key="d3">excerpt_id_d2ba6034366fcca143d67219ee341a22</data>
    </node>
    <node id="Interactive Querying">
      <data key="d1">feature</data>
      <data key="d2">Interactive Querying enables the refinement of queries based on feedback from initial results, allowing for dynamic adjustments to user inquiries.</data>
      <data key="d3">excerpt_id_d2ba6034366fcca143d67219ee341a22</data>
    </node>
    <node id="Document Management">
      <data key="d1">feature</data>
      <data key="d2">Document Management is a feature of the SmolRAG API that involves adding, updating, and removing documents, providing key operations for document handling.</data>
      <data key="d3">excerpt_id_1e99d3a705e109f5103d3d1958b6a8db</data>
    </node>
    <node id="System Information">
      <data key="d1">feature</data>
      <data key="d2">System Information is a feature within the SmolRAG API that allows users to retrieve information about the system, enhancing user understanding and transparency.</data>
      <data key="d3">excerpt_id_1e99d3a705e109f5103d3d1958b6a8db</data>
    </node>
    <node id="Webhooks">
      <data key="d1">feature</data>
      <data key="d2">Webhooks are a feature of the SmolRAG API that enable notification to external systems once queries are completed, facilitating integrations and real-time updates.</data>
      <data key="d3">excerpt_id_1e99d3a705e109f5103d3d1958b6a8db</data>
    </node>
    <node id="Add Document Endpoint">
      <data key="d1">example</data>
      <data key="d2">The Add Document Endpoint is an example of an API endpoint where a POST request can be made to add a document to the system, utilizing a DocumentRequest payload.</data>
      <data key="d3">excerpt_id_1e99d3a705e109f5103d3d1958b6a8db</data>
    </node>
    <node id="Remove Document Endpoint">
      <data key="d1">example</data>
      <data key="d2">The Remove Document Endpoint is an example of an API endpoint where a DELETE request can be made to remove a document using its document ID.</data>
      <data key="d3">excerpt_id_1e99d3a705e109f5103d3d1958b6a8db</data>
    </node>
    <node id="Get Info Endpoint">
      <data key="d1">example</data>
      <data key="d2">The Get Info Endpoint is an example of an API endpoint that allows retrieving system information via a GET request.</data>
      <data key="d3">excerpt_id_1e99d3a705e109f5103d3d1958b6a8db</data>
    </node>
    <node id="Async Query Endpoint">
      <data key="d1">example</data>
      <data key="d2">The Async Query Endpoint is an example for initiating an asynchronous query, allowing background processing and immediate response to the user.</data>
      <data key="d3">excerpt_id_1e99d3a705e109f5103d3d1958b6a8db</data>
    </node>
    <node id="Get Query Result Endpoint">
      <data key="d1">example</data>
      <data key="d2">The Get Query Result Endpoint is an example where users can request the result of an asynchronous query using the provided query ID.</data>
      <data key="d3">excerpt_id_1e99d3a705e109f5103d3d1958b6a8db</data>
    </node>
    <node id="Webhook Query Endpoint">
      <data key="d1">example</data>
      <data key="d2">The Webhook Query Endpoint serves as an example to process a query and notify an external system when results are available via a POST request.</data>
      <data key="d3">excerpt_id_1e99d3a705e109f5103d3d1958b6a8db</data>
    </node>
    <node id="Edge">
      <data key="d1">variable</data>
      <data key="d2">Edge refers to the connections within the knowledge graph that are being evaluated and printed for understanding.</data>
      <data key="d3">excerpt_id_fcc70198270a02757f7c7194e7f32c25</data>
    </node>
    <node id="RAG">
      <data key="d1">configuration</data>
      <data key="d2">RAG (Retrieval-Augmented Generation) refers to the configurations and structures used for managing knowledge graph queries.</data>
      <data key="d3">excerpt_id_fcc70198270a02757f7c7194e7f32c25</data>
    </node>
    <node id="Graph Traversal">
      <data key="d1">function</data>
      <data key="d2">Graph Traversal is a function that navigates through the knowledge graph to return the desired results based on the query.</data>
      <data key="d3">excerpt_id_fcc70198270a02757f7c7194e7f32c25</data>
    </node>
    <node id="Ranking Parameters">
      <data key="d1">variable</data>
      <data key="d2">Ranking Parameters are the adjustable factors that influence the results of the querying process in the knowledge graph.</data>
      <data key="d3">excerpt_id_fcc70198270a02757f7c7194e7f32c25</data>
    </node>
    <node id="Debug Keyword Extraction">
      <data key="d1">feature</data>
      <data key="d2">Debug Keyword Extraction is a feature that helps identify problems in the keyword extraction process associated with the knowledge graph queries.</data>
      <data key="d3">excerpt_id_fcc70198270a02757f7c7194e7f32c25</data>
    </node>
    <node id="Trace Graph Traversal">
      <data key="d1">feature</data>
      <data key="d2">Trace Graph Traversal is a feature that allows developers to follow the path of a graph query and analyze potential issues.</data>
      <data key="d3">excerpt_id_fcc70198270a02757f7c7194e7f32c25</data>
    </node>
    <node id="embeddings_path">
      <data key="d1">variable</data>
      <data key="d2">embeddings_path is a variable that defines the file path for storing embedding vectors in the system.</data>
      <data key="d3">excerpt_id_8c4cef197115ed13a173ace5189be819</data>
    </node>
    <node id="entities_path">
      <data key="d1">variable</data>
      <data key="d2">entities_path is a variable that specifies the path to the database for storing entity representations.</data>
      <data key="d3">excerpt_id_8c4cef197115ed13a173ace5189be819</data>
    </node>
    <node id="relationships_path">
      <data key="d1">variable</data>
      <data key="d2">relationships_path is a variable indicating the path for storing relationship information between entities.</data>
      <data key="d3">excerpt_id_8c4cef197115ed13a173ace5189be819</data>
    </node>
    <node id="kg_path">
      <data key="d1">variable</data>
      <data key="d2">kg_path is a variable that points to the path for the knowledge graph database used by the system.</data>
      <data key="d3">excerpt_id_8c4cef197115ed13a173ace5189be819</data>
    </node>
    <node id="source_to_doc_path">
      <data key="d1">variable</data>
      <data key="d2">source_to_doc_path is a variable that specifies the path for the mapping of sources to documents.</data>
      <data key="d3">excerpt_id_8c4cef197115ed13a173ace5189be819</data>
    </node>
    <node id="doc_to_source_path">
      <data key="d1">variable</data>
      <data key="d2">doc_to_source_path is a variable indicating the path for mapping documents back to their sources.</data>
      <data key="d3">excerpt_id_8c4cef197115ed13a173ace5189be819</data>
    </node>
    <node id="doc_to_excerpt_path">
      <data key="d1">variable</data>
      <data key="d2">doc_to_excerpt_path is a variable that holds the path for mapping documents to excerpts.</data>
      <data key="d3">excerpt_id_8c4cef197115ed13a173ace5189be819</data>
    </node>
    <node id="excerpt_path">
      <data key="d1">variable</data>
      <data key="d2">excerpt_path is a variable that designates the path for storing excerpts from the documents.</data>
      <data key="d3">excerpt_id_8c4cef197115ed13a173ace5189be819</data>
    </node>
    <node id="query_cache_path">
      <data key="d1">variable</data>
      <data key="d2">query_cache_path represents the path for the cache where query results are saved for quick access, improving performance.:|:query_cache_path is a variable that sets the path for the cache that stores previous queries.</data>
      <data key="d3">excerpt_id_2e0613b4c1b81b865a2002b59fe88b17:|:excerpt_id_8c4cef197115ed13a173ace5189be819</data>
    </node>
    <node id="embedding_cache_path">
      <data key="d1">variable</data>
      <data key="d2">embedding_cache_path is a variable that defines the path for caching embeddings to optimize performance.:|:embedding_cache_path stores the path for caching embeddings, enhancing the system's ability to retrieve recent data efficiently.</data>
      <data key="d3">excerpt_id_2e0613b4c1b81b865a2002b59fe88b17:|:excerpt_id_8c4cef197115ed13a173ace5189be819</data>
    </node>
    <node id="Speed">
      <data key="d1">variable</data>
      <data key="d2">Speed refers to the importance of processing or response time, prioritized over accuracy in specific contexts.</data>
      <data key="d3">excerpt_id_b3a95e34944a889758e6b0c6d679b0e6</data>
    </node>
    <node id="Chunk Size and Overlap">
      <data key="d1">configuration</data>
      <data key="d2">Chunk Size and Overlap is a configuration setting that adjusts how data is processed based on document characteristics.</data>
      <data key="d3">excerpt_id_b3a95e34944a889758e6b0c6d679b0e6</data>
    </node>
    <node id="Query Type">
      <data key="d1">variable</data>
      <data key="d2">Query Type refers to the classification of queries based on their specific use case, affecting processing strategies.</data>
      <data key="d3">excerpt_id_b3a95e34944a889758e6b0c6d679b0e6</data>
    </node>
    <node id="Memory Usage Monitoring">
      <data key="d1">feature</data>
      <data key="d2">Memory Usage Monitoring is a feature that tracks the amount of memory used, crucial for performance in large document collections.</data>
      <data key="d3">excerpt_id_b3a95e34944a889758e6b0c6d679b0e6</data>
    </node>
    <node id="Token Limits">
      <data key="d1">variable</data>
      <data key="d2">Token Limits refer to the maximum number of tokens allowed in processing queries or summarizations.</data>
      <data key="d3">excerpt_id_b3a95e34944a889758e6b0c6d679b0e6</data>
    </node>
    <node id="Default Configuration">
      <data key="d1">configuration</data>
      <data key="d2">Default Configuration is the baseline setting provided at the outset, which can be altered according to specific needs.</data>
      <data key="d3">excerpt_id_b3a95e34944a889758e6b0c6d679b0e6</data>
    </node>
    <node id="Custom Configuration">
      <data key="d1">configuration</data>
      <data key="d2">Custom Configuration involves adjusting the default settings to optimize performance for specific user scenarios.</data>
      <data key="d3">excerpt_id_b3a95e34944a889758e6b0c6d679b0e6</data>
    </node>
    <node id="Accuracy" />
    <node id="API" />
    <node id="BatchEmbedder">
      <data key="d1">api:|:configuration</data>
      <data key="d2">BatchEmbedder is a class that handles embedding multiple texts in batches using the OpenAI API, managing the API key, model, and batch size settings.:|:BatchEmbedder is an API used for embedding multiple pieces of text into vector representations, facilitating the processing of text data for machine learning tasks.</data>
      <data key="d3">excerpt_id_d819e633cca45f5553e358a312c96667:|:excerpt_id_b35b21c7869785d9ef1329f450f10a5d</data>
    </node>
    <node id="OpenAI">
      <data key="d1">api</data>
      <data key="d2">OpenAI is an API service that provides capabilities for text embedding, allowing developers to create applications that leverage natural language processing.</data>
      <data key="d3">excerpt_id_b35b21c7869785d9ef1329f450f10a5d</data>
    </node>
    <node id="embed_texts">
      <data key="d1">function</data>
      <data key="d2">The embed_texts function is a method within BatchEmbedder that takes multiple texts as input and returns their embeddings by making batch requests to the OpenAI API.</data>
      <data key="d3">excerpt_id_b35b21c7869785d9ef1329f450f10a5d</data>
    </node>
    <node id="embedding">
      <data key="d1">variable</data>
      <data key="d2">embedding is a variable that stores the numerical representation of the input text, generated from a language model to facilitate similarity comparisons.:|:Embedding represents the numerical vector output corresponding to a text input, often used for machine learning and natural language processing tasks.:|:embedding is a variable that holds the generated embeddings, represented by a numerical array with multiple dimensions.</data>
      <data key="d3">excerpt_id_38c732d43cab759a55244eaa09fa38a6:|:excerpt_id_75e438adb9ff4c01e847c8be11bcc6e4:|:excerpt_id_b35b21c7869785d9ef1329f450f10a5d</data>
    </node>
    <node id="model">
      <data key="d1">variable</data>
      <data key="d2">The model variable specifies which embedding model to use when sending requests to the OpenAI API for generating text embeddings.</data>
      <data key="d3">excerpt_id_b35b21c7869785d9ef1329f450f10a5d</data>
    </node>
    <node id="batch_size">
      <data key="d1">variable</data>
      <data key="d2">Batch size defines the number of texts processed in a single API request, optimizing the throughput of embedding operations.</data>
      <data key="d3">excerpt_id_b35b21c7869785d9ef1329f450f10a5d</data>
    </node>
    <node id="webhook_query">
      <data key="d1">function</data>
      <data key="d2">The webhook_query function is an asynchronous function defined to handle incoming queries and send results to a specified webhook URL.</data>
      <data key="d3">excerpt_id_e65b14cb533eda0a73c1a54d86336320</data>
    </node>
    <node id="WebhookQueryRequest">
      <data key="d1">configuration</data>
      <data key="d2">WebhookQueryRequest is a request model that defines the structure of incoming queries to the webhook.</data>
      <data key="d3">excerpt_id_e65b14cb533eda0a73c1a54d86336320</data>
    </node>
    <node id="document querying">
      <data key="d1">feature</data>
      <data key="d2">Document querying is a feature of the SmolRAG API that allows users to retrieve information from documents using specified methods.</data>
      <data key="d3">excerpt_id_e65b14cb533eda0a73c1a54d86336320</data>
    </node>
    <node id="RESTful principles">
      <data key="d1">concept</data>
      <data key="d2">RESTful principles refer to the architectural style that guides the design of the SmolRAG API, promoting stateless communication and resource-based interactions.</data>
      <data key="d3">excerpt_id_e65b14cb533eda0a73c1a54d86336320</data>
    </node>
    <node id="hl_results">
      <data key="d1">variable</data>
      <data key="d2">hl_results is a variable that contains results of relationship matches, implying that it holds data relevant for evaluation.</data>
      <data key="d3">excerpt_id_58afd38ac61f13786dbc05d2f0c7bf8f</data>
    </node>
    <node id="ranking parameters">
      <data key="d1">function</data>
      <data key="d2">ranking parameters refers to settings or criteria used to determine the priority of relationships in the context of the CustomSmolRag.</data>
      <data key="d3">excerpt_id_58afd38ac61f13786dbc05d2f0c7bf8f</data>
    </node>
    <node id="to_excerpt_kv">
      <data key="d1">variable</data>
      <data key="d2">to_excerpt_kv is a variable defined in the context, used to store a mapping from document to excerpt key-value pairs.</data>
      <data key="d3">excerpt_id_8efc423402a060df074b1830e38ed77b</data>
    </node>
    <node id="embeddings">
      <data key="d1">variable</data>
      <data key="d2">embeddings is a variable that stores the output vectors generated by the embedder for the provided texts, enabling comparison and querying of text data.</data>
      <data key="d3">excerpt_id_d819e633cca45f5553e358a312c96667</data>
    </node>
    <node id="Scaling Strategies">
      <data key="d1">feature</data>
      <data key="d2">Scaling Strategies refer to methods employed to adjust system resources to handle increased volume of data and queries effectively.</data>
      <data key="d3">excerpt_id_d819e633cca45f5553e358a312c96667</data>
    </node>
    <node id="Vertical Scaling">
      <data key="d1">configuration</data>
      <data key="d2">Vertical Scaling involves upgrading existing hardware resources such as memory and CPU to enhance system performance for data processing.</data>
      <data key="d3">excerpt_id_d819e633cca45f5553e358a312c96667</data>
    </node>
    <node id="Cloud Deployment">
      <data key="d1">feature</data>
      <data key="d2">Cloud Deployment refers to methods for deploying applications in cloud environments, leveraging technologies like Docker and Kubernetes for scalability and flexibility.</data>
      <data key="d3">excerpt_id_d819e633cca45f5553e358a312c96667</data>
    </node>
    <node id="Docker Compose">
      <data key="d1">example</data>
      <data key="d2">Docker Compose is used for defining and running multi-container Docker applications, exemplified by the provided YAML snippet for scaling SmolRAG.</data>
      <data key="d3">excerpt_id_d819e633cca45f5553e358a312c96667</data>
    </node>
    <node id="Monitoring and Profiling">
      <data key="d1">feature</data>
      <data key="d2">Monitoring and Profiling involves assessing system performance and efficiency, crucial for optimizing the deployment and scaling of applications like SmolRAG.</data>
      <data key="d3">excerpt_id_d819e633cca45f5553e358a312c96667</data>
    </node>
    <node id="data">
      <data key="d1">variable</data>
      <data key="d2">Data refers to the input dataset which is being sorted according to specific criteria such as rank and weight.:|:data is a variable that holds the incoming JSON request data in the query function.</data>
      <data key="d3">excerpt_id_cbb4e8dad766e2f663005e81522d4b82:|:excerpt_id_adb7498f6f95f3de6fde939c658d11cf</data>
    </node>
    <node id="rank">
      <data key="d1">variable</data>
      <data key="d2">Rank is a variable used as a criterion for sorting the data, given more weight in the adjusted ranking process.</data>
      <data key="d3">excerpt_id_cbb4e8dad766e2f663005e81522d4b82</data>
    </node>
    <node id="weight">
      <data key="d1">variable</data>
      <data key="d2">Weight is another variable that contributes to the sorting process; it affects the order of data when combined with rank.</data>
      <data key="d3">excerpt_id_cbb4e8dad766e2f663005e81522d4b82</data>
    </node>
    <node id="standard_result">
      <data key="d1">example</data>
      <data key="d2">Standard Result demonstrates the output from a standard query method within the RAG interface.</data>
      <data key="d3">excerpt_id_cbb4e8dad766e2f663005e81522d4b82</data>
    </node>
    <node id="local_kg_result">
      <data key="d1">example</data>
      <data key="d2">Local KG Result indicates the outcome of a query using local knowledge graphs, showcasing a specific retrieval approach.</data>
      <data key="d3">excerpt_id_cbb4e8dad766e2f663005e81522d4b82</data>
    </node>
    <node id="global_kg_result">
      <data key="d1">example</data>
      <data key="d2">Global KG Result represents results obtained from global knowledge graphs, illustrating another querying strategy.</data>
      <data key="d3">excerpt_id_cbb4e8dad766e2f663005e81522d4b82</data>
    </node>
    <node id="hybrid_kg_result">
      <data key="d1">example</data>
      <data key="d2">Hybrid KG Result shows the outputs from a combination of local and global knowledge graphs, indicating a mixed approach to queries.</data>
      <data key="d3">excerpt_id_cbb4e8dad766e2f663005e81522d4b82</data>
    </node>
    <node id="mix_result">
      <data key="d1">example</data>
      <data key="d2">Mix Result reflects the outcomes from a mixed query type, wherein various querying strategies are applied in conjunction.</data>
      <data key="d3">excerpt_id_cbb4e8dad766e2f663005e81522d4b82</data>
    </node>
    <node id="documents">
      <data key="d1">function</data>
      <data key="d2">documents() is a function that likely retrieves various documents or data in a context where information is needed.:|:The function 'documents()' is used to retrieve or interact with document data in a system.</data>
      <data key="d3">excerpt_id_31dbc989f689c5be27e9ae8b6d0588c4:|:excerpt_id_1022857c40806a92372f49dc394cbcfe</data>
    </node>
    <node id="smolrag-api-1">
      <data key="d1">api</data>
      <data key="d2">smolrag-api-1 is an API that is part of a dependency configuration for performance optimization in SmolRAG.</data>
      <data key="d3">excerpt_id_a4f75c2d6d663c161d853c1243a60af5</data>
    </node>
    <node id="smolrag-api-2">
      <data key="d1">api</data>
      <data key="d2">smolrag-api-2 is another API that is listed as a dependency in the configuration for SmolRAG performance monitoring.</data>
      <data key="d3">excerpt_id_a4f75c2d6d663c161d853c1243a60af5</data>
    </node>
    <node id="Monitoring Metrics">
      <data key="d1">feature</data>
      <data key="d2">Monitoring Metrics include various parameters like Response Times, Resource Usage, API Calls, and Error Rates to assess the performance of SmolRAG.</data>
      <data key="d3">excerpt_id_a4f75c2d6d663c161d853c1243a60af5</data>
    </node>
    <node id="Profiling Tools">
      <data key="d1">feature</data>
      <data key="d2">Profiling Tools consist of cProfile, line_profiler, memory_profiler, and logging methods used to analyze performance and identify bottlenecks.</data>
      <data key="d3">excerpt_id_a4f75c2d6d663c161d853c1243a60af5</data>
    </node>
    <node id="Response Times">
      <data key="d1">variable</data>
      <data key="d2">Response Times is a monitoring metric that tracks the duration of various operations within SmolRAG.</data>
      <data key="d3">excerpt_id_a4f75c2d6d663c161d853c1243a60af5</data>
    </node>
    <node id="Resource Usage">
      <data key="d1">variable:|:metric</data>
      <data key="d2">Resource Usage is a monitoring metric that details the CPU, memory, and disk consumption during operations.:|:Resource Usage indicates the levels of CPU, memory, and disk consumed during operations, critical for optimization.:|:Resource Usage measures the amount of CPU, memory, and disk consumed during operations.</data>
      <data key="d3">excerpt_id_a4f75c2d6d663c161d853c1243a60af5:|:excerpt_id_3db25e98f4a52a9f3effc27f3a26925e:|:excerpt_id_8df198dc0e22767ee72f9d76b21e44aa</data>
    </node>
    <node id="Error Rates">
      <data key="d1">variable:|:metric</data>
      <data key="d2">Error Rates represent the frequency of operational failures under load, highlighting system reliability and robustness.:|:Error Rates provide a measure of the frequency and types of errors encountered in operations within SmolRAG.:|:Error Rates indicate the frequency of operational failures under load conditions, highlighting reliability issues.</data>
      <data key="d3">excerpt_id_a4f75c2d6d663c161d853c1243a60af5:|:excerpt_id_3db25e98f4a52a9f3effc27f3a26925e:|:excerpt_id_8df198dc0e22767ee72f9d76b21e44aa</data>
    </node>
    <node id="Simple Performance Monitoring">
      <data key="d1">example</data>
      <data key="d2">Simple Performance Monitoring refers to an example illustrating basic metrics and methods for tracking performance in SmolRAG.</data>
      <data key="d3">excerpt_id_a4f75c2d6d663c161d853c1243a60af5</data>
    </node>
    <node id="D">
      <data key="d1">variable</data>
      <data key="d2">D is a variable that appears to store an identifier or key related to excerpt data, likely utilized for referencing specific data within a given process.</data>
      <data key="d3">excerpt_id_38c732d43cab759a55244eaa09fa38a6</data>
    </node>
    <node id="score">
      <data key="d1">variable</data>
      <data key="d2">score is a variable that records a numerical value representing the quality or evaluation of the excerpt, formatted to four decimal places.</data>
      <data key="d3">excerpt_id_38c732d43cab759a55244eaa09fa38a6</data>
    </node>
    <node id="excerpt_data">
      <data key="d1">configuration</data>
      <data key="d2">excerpt_data is a dictionary configuration that contains the details of the excerpt, which includes the summary and text snippet.</data>
      <data key="d3">excerpt_id_38c732d43cab759a55244eaa09fa38a6</data>
    </node>
    <node id="Summary">
      <data key="d1">feature</data>
      <data key="d2">Summary is a feature that outputs the condensed main points of the excerpt, facilitating quick understanding.</data>
      <data key="d3">excerpt_id_38c732d43cab759a55244eaa09fa38a6</data>
    </node>
    <node id="Excerpt">
      <data key="d1">feature</data>
      <data key="d2">Excerpt is a feature that displays a portion of the text from the excerpt data, providing context and examples.</data>
      <data key="d3">excerpt_id_38c732d43cab759a55244eaa09fa38a6</data>
    </node>
    <node id="_get_query_excerpts">
      <data key="d1">function</data>
      <data key="d2">_get_query_excerpts is a function within CustomSmolRag that retrieves excerpts based on a text query, utilizing an embedding approach to compare and fetch relevant results.</data>
      <data key="d3">excerpt_id_38c732d43cab759a55244eaa09fa38a6</data>
    </node>
    <node id="top_k">
      <data key="d1">variable</data>
      <data key="d2">top_k is a variable that determines how many top similar vectors will be returned after the search process.:|:top_k is a variable that specifies the number of top results to retrieve from a query, determining the quantity of excerpts for analysis.</data>
      <data key="d3">excerpt_id_38c732d43cab759a55244eaa09fa38a6:|:excerpt_id_450b2f19c98596bfc6089aeec9514ca4</data>
    </node>
    <node id="threshold">
      <data key="d1">variable</data>
      <data key="d2">threshold is a variable that represents the level of similarity required in the query results, which can be adjusted to enhance the precision of retrieval.</data>
      <data key="d3">excerpt_id_38c732d43cab759a55244eaa09fa38a6</data>
    </node>
    <node id="Tracing">
      <data key="d1">feature</data>
      <data key="d2">Tracing is the process of collecting data across distributed systems using tools like OpenTelemetry to understand performance and request flows.</data>
      <data key="d3">excerpt_id_a932de00c67d51e468546b00d37959d4</data>
    </node>
    <node id="PerformanceMonitor">
      <data key="d1">class</data>
      <data key="d2">PerformanceMonitor is a class designed to monitor and log performance metrics such as execution time and memory usage for operations.</data>
      <data key="d3">excerpt_id_a932de00c67d51e468546b00d37959d4</data>
    </node>
    <node id="operation_name">
      <data key="d1">variable</data>
      <data key="d2">Operation_name is a variable within PerformanceMonitor that stores the name of the operation currently being monitored.</data>
      <data key="d3">excerpt_id_a932de00c67d51e468546b00d37959d4</data>
    </node>
    <node id="start_time">
      <data key="d1">variable</data>
      <data key="d2">Start_time is a variable that captures the time when a monitored operation begins.</data>
      <data key="d3">excerpt_id_a932de00c67d51e468546b00d37959d4</data>
    </node>
    <node id="start_memory">
      <data key="d1">variable</data>
      <data key="d2">Start_memory is a variable that records the initial memory usage at the start of an operation.</data>
      <data key="d3">excerpt_id_a932de00c67d51e468546b00d37959d4</data>
    </node>
    <node id="end_time">
      <data key="d1">variable</data>
      <data key="d2">End_time is a variable that captures the time when a monitored operation ends.</data>
      <data key="d3">excerpt_id_a932de00c67d51e468546b00d37959d4</data>
    </node>
    <node id="end_memory">
      <data key="d1">variable</data>
      <data key="d2">End_memory is a variable that records the memory usage at the end of an operation.</data>
      <data key="d3">excerpt_id_a932de00c67d51e468546b00d37959d4</data>
    </node>
    <node id="duration">
      <data key="d1">variable</data>
      <data key="d2">Duration represents the total time taken to complete an operation.</data>
      <data key="d3">excerpt_id_a932de00c67d51e468546b00d37959d4</data>
    </node>
    <node id="memory_change">
      <data key="d1">variable</data>
      <data key="d2">Memory_change represents the difference in memory usage from the start to the end of an operation.</data>
      <data key="d3">excerpt_id_a932de00c67d51e468546b00d37959d4</data>
    </node>
    <node id="monitor.start()">
      <data key="d1">function</data>
      <data key="d2">Monitor.start() is a method used to initiate performance tracking for an operation, recording the start time and memory usage.:|:The function monitor.start() initiates the monitoring of a query processing task, keeping track of performance metrics during its execution.</data>
      <data key="d3">excerpt_id_a932de00c67d51e468546b00d37959d4:|:excerpt_id_4e649c101b76d51df1364c3c6cc472a9</data>
    </node>
    <node id="monitor.end()">
      <data key="d1">function</data>
      <data key="d2">The function monitor.end() concludes the monitoring process and returns the statistics related to query performance.:|:Monitor.end() is a method that finalizes performance tracking, logging the duration and memory metrics of an operation.</data>
      <data key="d3">excerpt_id_a932de00c67d51e468546b00d37959d4:|:excerpt_id_4e649c101b76d51df1364c3c6cc472a9</data>
    </node>
    <node id="rag.import_documents()">
      <data key="d1">function</data>
      <data key="d2">rag.import_documents() is a method call for importing documents, which can be monitored for performance.:|:The function rag.import_documents() is responsible for importing documents into the RAG system for subsequent analysis or processing.</data>
      <data key="d3">excerpt_id_a932de00c67d51e468546b00d37959d4:|:excerpt_id_4e649c101b76d51df1364c3c6cc472a9</data>
    </node>
    <node id="rag.query()">
      <data key="d1">function</data>
      <data key="d2">The function rag.query() facilitates querying the RAG system, allowing retrieval of information based on input queries.:|:rag.query() is a method call for processing a query, which can also be monitored for performance.</data>
      <data key="d3">excerpt_id_a932de00c67d51e468546b00d37959d4:|:excerpt_id_4e649c101b76d51df1364c3c6cc472a9</data>
    </node>
    <node id="excerpts">
      <data key="d1">variable</data>
      <data key="d2">Excerpts are a collection of textual pieces derived from query results and are processed to fit within a specified token size limit.</data>
      <data key="d3">excerpt_id_2cca7c90cc52ed8a7fc9fa49eb39d02c</data>
    </node>
    <node id="key">
      <data key="d1">variable</data>
      <data key="d2">Key is a derived unique identifier for each query that is utilized to manage cache operations effectively.</data>
      <data key="d3">excerpt_id_2cca7c90cc52ed8a7fc9fa49eb39d02c</data>
    </node>
    <node id="cache_file">
      <data key="d1">variable</data>
      <data key="d2">cache_file is the complete file path for a specific cache item based on the cache key, used for reading and writing cached data.:|:cache_file is a variable that stores the file path for a cached JSON file using a specified key.</data>
      <data key="d3">excerpt_id_2cca7c90cc52ed8a7fc9fa49eb39d02c:|:excerpt_id_450b2f19c98596bfc6089aeec9514ca4</data>
    </node>
    <node id="document_ingestion">
      <data key="d1">function</data>
      <data key="d2">Document ingestion refers to the process as described by the method t('document_ingestion'), which involves importing documents into a system for processing.</data>
      <data key="d3">excerpt_id_4e649c101b76d51df1364c3c6cc472a9</data>
    </node>
    <node id="ingestion_stats">
      <data key="d1">variable</data>
      <data key="d2">ingestion_stats is a variable used to store the statistics generated at the end of the document ingestion process, as retrieved by monitor.end().</data>
      <data key="d3">excerpt_id_4e649c101b76d51df1364c3c6cc472a9</data>
    </node>
    <node id="query_stats">
      <data key="d1">variable</data>
      <data key="d2">query_stats is a variable that stores statistics generated at the end of the query processing phase, as gathered by monitor.end().</data>
      <data key="d3">excerpt_id_4e649c101b76d51df1364c3c6cc472a9</data>
    </node>
    <node id="approximate_vector_search">
      <data key="d1">function</data>
      <data key="d2">approximate_vector_search is a function that implements an approximate nearest neighbor search for large datasets, utilizing a simplified vector similarity computation.</data>
      <data key="d3">excerpt_id_450b2f19c98596bfc6089aeec9514ca4</data>
    </node>
    <node id="sample_size">
      <data key="d1">variable</data>
      <data key="d2">sample_size is a variable that defines the number of randomly sampled vectors for initial filtering, capped at 1000 or the total length of the vectors list.</data>
      <data key="d3">excerpt_id_450b2f19c98596bfc6089aeec9514ca4</data>
    </node>
    <node id="FAISS">
      <data key="d1">library</data>
      <data key="d2">FAISS is a library designed to facilitate efficient approximate nearest neighbor search, particularly in large datasets.</data>
      <data key="d3">excerpt_id_450b2f19c98596bfc6089aeec9514ca4</data>
    </node>
    <node id="candidate_vectors">
      <data key="d1">variable</data>
      <data key="d2">candidate_vectors refers to a collection of vectors that are evaluated to find the most similar candidates.:|:candidate_vectors is a variable that contains the subset of vectors selected as top candidates for exact similarity calculation.</data>
      <data key="d3">excerpt_id_fe5d529dab986843e6821f4c56079a32:|:excerpt_id_450b2f19c98596bfc6089aeec9514ca4</data>
    </node>
    <node id="parallel_query">
      <data key="d1">function</data>
      <data key="d2">parallel_query is a function within SmolRAG that executes queries in parallel to improve efficiency and response times when retrieving information from documents.</data>
      <data key="d3">excerpt_id_6c06a295a7f56782823d65a71c55d286</data>
    </node>
    <node id="Hardware Considerations">
      <data key="d1">configuration</data>
      <data key="d2">Hardware Considerations provide guidelines on the physical resources required for optimal performance of SmolRAG, including CPU, memory, storage, and network requirements.</data>
      <data key="d3">excerpt_id_6c06a295a7f56782823d65a71c55d286</data>
    </node>
    <node id="CPU Considerations">
      <data key="d1">configuration</data>
      <data key="d2">CPU Considerations detail the crucial aspects of CPU architecture affecting SmolRAG's performance, such as core count, clock speed, and cache size.</data>
      <data key="d3">excerpt_id_6c06a295a7f56782823d65a71c55d286</data>
    </node>
    <node id="Memory Considerations">
      <data key="d1">configuration</data>
      <data key="d2">Memory Considerations outline the needs regarding RAM capacity, speed, and configuration to ensure efficient operation of SmolRAG.</data>
      <data key="d3">excerpt_id_6c06a295a7f56782823d65a71c55d286</data>
    </node>
    <node id="Storage Considerations">
      <data key="d1">configuration</data>
      <data key="d2">Storage Considerations emphasize the importance of storage type, capacity, and I/O performance in supporting SmolRAG's operational requirements.</data>
      <data key="d3">excerpt_id_6c06a295a7f56782823d65a71c55d286</data>
    </node>
    <node id="Network Considerations">
      <data key="d1">configuration</data>
      <data key="d2">Network Considerations address the importance of bandwidth, latency, and reliability for API calls and distributed systems using SmolRAG.</data>
      <data key="d3">excerpt_id_6c06a295a7f56782823d65a71c55d286</data>
    </node>
    <node id="Example: Hardware Recommendations">
      <data key="d1">example</data>
      <data key="d2">Example: Hardware Recommendations provide specific hardware configurations for different deployment sizes of SmolRAG, ranging from small to large deployments.</data>
      <data key="d3">excerpt_id_6c06a295a7f56782823d65a71c55d286</data>
    </node>
    <node id="query_vector">
      <data key="d1">variable</data>
      <data key="d2">query_vector is a variable representing the vector used in querying candidate vectors during the top-k retrieval process.</data>
      <data key="d3">excerpt_id_fe5d529dab986843e6821f4c56079a32</data>
    </node>
    <node id="top_candidates">
      <data key="d1">variable</data>
      <data key="d2">top_candidates is a list containing the most relevant candidates based on similarity scores.</data>
      <data key="d3">excerpt_id_fe5d529dab986843e6821f4c56079a32</data>
    </node>
    <node id="top_k_indices">
      <data key="d1">variable</data>
      <data key="d2">top_k_indices is an array of indices representing the top-k elements based on their similarity scores.</data>
      <data key="d3">excerpt_id_fe5d529dab986843e6821f4c56079a32</data>
    </node>
    <node id="fast_query">
      <data key="d1">function</data>
      <data key="d2">fast_query is a function designed to perform a fast vector search query using a standard vector search method.</data>
      <data key="d3">excerpt_id_fe5d529dab986843e6821f4c56079a32</data>
    </node>
    <node id="memory_efficient_query">
      <data key="d1">function</data>
      <data key="d2">memory_efficient_query is a function that performs a query while managing memory usage by forcing garbage collection before and after the query.</data>
      <data key="d3">excerpt_id_fe5d529dab986843e6821f4c56079a32</data>
    </node>
    <node id="memory_safe_query">
      <data key="d1">function</data>
      <data key="d2">memory_safe_query checks the system's memory usage before executing a query to avoid low memory issues.</data>
      <data key="d3">excerpt_id_fe5d529dab986843e6821f4c56079a32</data>
    </node>
    <node id="API Issues">
      <data key="d1">feature</data>
      <data key="d2">API Issues refers to common problems encountered while interacting with the OpenAI API, including invalid keys and rate limiting.</data>
      <data key="d3">excerpt_id_fe5d529dab986843e6821f4c56079a32</data>
    </node>
    <node id="32+ GB RAM">
      <data key="d1">variable</data>
      <data key="d2">32+ GB RAM refers to a specific configuration of RAM utilized in systems, indicating a high capacity for processing.</data>
      <data key="d3">excerpt_id_3db25e98f4a52a9f3effc27f3a26925e</data>
    </node>
    <node id="200+ GB SSD storage">
      <data key="d1">variable</data>
      <data key="d2">200+ GB SSD storage represents a considerable amount of solid-state drive storage, crucial for high-speed data access and system responsiveness.</data>
      <data key="d3">excerpt_id_3db25e98f4a52a9f3effc27f3a26925e</data>
    </node>
    <node id="Distributed Deployment">
      <data key="d1">configuration</data>
      <data key="d2">Distributed Deployment is an architectural strategy that enhances system resilience and scalability by distributing workloads across multiple servers or nodes.</data>
      <data key="d3">excerpt_id_3db25e98f4a52a9f3effc27f3a26925e</data>
    </node>
    <node id="Performance Testing">
      <data key="d1">function</data>
      <data key="d2">Performance Testing is a systematic process aimed at identifying system bottlenecks and validating performance optimizations under various conditions.</data>
      <data key="d3">excerpt_id_3db25e98f4a52a9f3effc27f3a26925e</data>
    </node>
    <node id="Benchmark Tests">
      <data key="d1">feature</data>
      <data key="d2">Benchmark Tests are used to measure performance metrics for standard operations, providing baseline data for comparison.</data>
      <data key="d3">excerpt_id_3db25e98f4a52a9f3effc27f3a26925e</data>
    </node>
    <node id="Load Tests">
      <data key="d1">feature</data>
      <data key="d2">Load Tests assess performance under varying load conditions, determining how well systems function when faced with increased demands.</data>
      <data key="d3">excerpt_id_3db25e98f4a52a9f3effc27f3a26925e</data>
    </node>
    <node id="Stress Tests">
      <data key="d1">feature</data>
      <data key="d2">Stress Tests examine performance at or beyond expected capacity to uncover weaknesses and limit behavior of a system.</data>
      <data key="d3">excerpt_id_3db25e98f4a52a9f3effc27f3a26925e</data>
    </node>
    <node id="Endurance Tests">
      <data key="d1">feature</data>
      <data key="d2">Endurance Tests measure how well a system performs over extended periods, ensuring reliability over time.</data>
      <data key="d3">excerpt_id_3db25e98f4a52a9f3effc27f3a26925e</data>
    </node>
    <node id="Throughput">
      <data key="d1">metric</data>
      <data key="d2">Throughput refers to the volume of operations processed per unit of time, serving as a key indicator of system efficiency.</data>
      <data key="d3">excerpt_id_3db25e98f4a52a9f3effc27f3a26925e</data>
    </node>
    <node id="Latency">
      <data key="d1">variable:|:metric</data>
      <data key="d2">Latency measures the time taken for each operation, impacting user experience and system responsiveness.:|:Latency refers to the duration it takes for each operation to complete, which is an important performance metric.</data>
      <data key="d3">excerpt_id_3db25e98f4a52a9f3effc27f3a26925e:|:excerpt_id_8df198dc0e22767ee72f9d76b21e44aa</data>
    </node>
    <node id="Simple Benchmark Script">
      <data key="d1">example</data>
      <data key="d2">Simple Benchmark Script serves as a practical illustration of a basic performance testing approach, facilitating the measurement of system performance.</data>
      <data key="d3">excerpt_id_3db25e98f4a52a9f3effc27f3a26925e</data>
    </node>
    <node id="OpenAI API">
      <data key="d1">api</data>
      <data key="d2">OpenAI API is an application programming interface used to interact with OpenAI's machine learning models, such as embeddings, allowing developers to utilize advanced natural language processing capabilities.</data>
      <data key="d3">excerpt_id_30d921e9ed8b86da0f8b9366dfbaa2a7</data>
    </node>
    <node id="Quota">
      <data key="d1">configuration</data>
      <data key="d2">Quota refers to the maximum amount of resources or number of requests that can be consumed by the OpenAI API within a specified period, which helps manage usage costs.</data>
      <data key="d3">excerpt_id_30d921e9ed8b86da0f8b9366dfbaa2a7</data>
    </node>
    <node id="Service Disruption">
      <data key="d1">feature</data>
      <data key="d2">Service Disruption represents instances where the OpenAI API is temporarily unavailable due to unexpected issues or maintenance, affecting user access and functionality.</data>
      <data key="d3">excerpt_id_30d921e9ed8b86da0f8b9366dfbaa2a7</data>
    </node>
    <node id="Verify OpenAI API Key Function">
      <data key="d1">function</data>
      <data key="d2">Verify OpenAI API Key Function is a Python function designed to check the validity of the OpenAI API key by making a simple API call and handling any exceptions that may arise.</data>
      <data key="d3">excerpt_id_30d921e9ed8b86da0f8b9366dfbaa2a7</data>
    </node>
    <node id="benchmark_queries">
      <data key="d1">function</data>
      <data key="d2">The benchmark_queries function measures and returns the performance metrics of various query types on the SmolRag API.</data>
      <data key="d3">excerpt_id_8df198dc0e22767ee72f9d76b21e44aa</data>
    </node>
    <node id="test_queries">
      <data key="d1">variable</data>
      <data key="d2">Test_queries is a predefined list of example questions used to evaluate the performance of the SmolRag API.</data>
      <data key="d3">excerpt_id_8df198dc0e22767ee72f9d76b21e44aa</data>
    </node>
    <node id="standard_results">
      <data key="d1">variable</data>
      <data key="d2">Standard_results holds the benchmark data for queries run with standard type, showing their performance metrics.</data>
      <data key="d3">excerpt_id_8df198dc0e22767ee72f9d76b21e44aa</data>
    </node>
    <node id="kg_results">
      <data key="d1">variable</data>
      <data key="d2">Kg_results contains performance data for queries executed under the hybrid knowledge graph type.</data>
      <data key="d3">excerpt_id_8df198dc0e22767ee72f9d76b21e44aa</data>
    </node>
    <node id="mix_results">
      <data key="d1">variable</data>
      <data key="d2">Mix_results has performance data for queries that utilize a mix of different query types.</data>
      <data key="d3">excerpt_id_8df198dc0e22767ee72f9d76b21e44aa</data>
    </node>
    <node id="queries by type">
      <data key="d1">feature</data>
      <data key="d2">Queries by type is a capability of the SmolRag API that allows for querying using various methods like standard and hybrid knowledge graphs.</data>
      <data key="d3">excerpt_id_8df198dc0e22767ee72f9d76b21e44aa</data>
    </node>
    <node id="API key">
      <data key="d1">variable</data>
      <data key="d2">API key is a variable used to verify the validity of an interface for accessing a service.</data>
      <data key="d3">excerpt_id_fa24916a2f72f3ae233e5d1977ee1ae2</data>
    </node>
    <node id="RateLimitedOpenAiLlm">
      <data key="d1">class</data>
      <data key="d2">RateLimitedOpenAiLlm is a class that implements a rate limiting mechanism for requests made to an OpenAI language model, ensuring compliance with set limits.</data>
      <data key="d3">excerpt_id_fa24916a2f72f3ae233e5d1977ee1ae2</data>
    </node>
    <node id="_wait_for_rate_limit">
      <data key="d1">function</data>
      <data key="d2">_wait_for_rate_limit is a private function in RateLimitedOpenAiLlm that ensures requests are spaced according to the specified rate limit.</data>
      <data key="d3">excerpt_id_fa24916a2f72f3ae233e5d1977ee1ae2</data>
    </node>
    <node id="min_seconds_per_request">
      <data key="d1">variable</data>
      <data key="d2">min_seconds_per_request is a variable representing the minimum interval between requests to comply with the requests per minute setting.</data>
      <data key="d3">excerpt_id_fa24916a2f72f3ae233e5d1977ee1ae2</data>
    </node>
    <node id="print">
      <data key="d1">function</data>
      <data key="d2">Print is a function used to output information to the console, formatted to display type and timing metrics.</data>
      <data key="d3">excerpt_id_1f85cb53bc4e7de3a80fec7f9c6b4d2c</data>
    </node>
    <node id="Avg Time">
      <data key="d1">feature</data>
      <data key="d2">Avg Time is a calculated feature representing the average time it takes for a process to complete, expressed in seconds.</data>
      <data key="d3">excerpt_id_1f85cb53bc4e7de3a80fec7f9c6b4d2c</data>
    </node>
    <node id="Min Time">
      <data key="d1">feature</data>
      <data key="d2">Min Time indicates the minimum duration taken by a process, providing insight into its fastest completion time.</data>
      <data key="d3">excerpt_id_1f85cb53bc4e7de3a80fec7f9c6b4d2c</data>
    </node>
    <node id="Max Time">
      <data key="d1">feature</data>
      <data key="d2">Max Time signifies the maximum duration recorded for a process, highlighting the slowest completion time.</data>
      <data key="d3">excerpt_id_1f85cb53bc4e7de3a80fec7f9c6b4d2c</data>
    </node>
    <node id="f-string">
      <data key="d1">example</data>
      <data key="d2">f-string is a formatting technique in Python that allows for the dynamic insertion of variables into strings, exemplified in the output methods shown.</data>
      <data key="d3">excerpt_id_1f85cb53bc4e7de3a80fec7f9c6b4d2c</data>
    </node>
    <node id="self.min_seconds_per_request">
      <data key="d1">variable</data>
      <data key="d2">self.min_seconds_per_request is a variable that stores the minimum number of seconds allowed between requests to manage request frequency.</data>
      <data key="d3">excerpt_id_6eb845511a3798c85225934f19cae61f</data>
    </node>
    <node id="time_since_last_request">
      <data key="d1">variable</data>
      <data key="d2">time_since_last_request is a variable that holds the time elapsed since the last request, used for calculating delays.</data>
      <data key="d3">excerpt_id_6eb845511a3798c85225934f19cae61f</data>
    </node>
    <node id="self.last_request_time">
      <data key="d1">variable</data>
      <data key="d2">self.last_request_time is a variable that records the timestamp of the last request made, essential for tracking timing.</data>
      <data key="d3">excerpt_id_6eb845511a3798c85225934f19cae61f</data>
    </node>
    <node id="sleep_time">
      <data key="d1">variable</data>
      <data key="d2">sleep_time is a variable that represents the duration to pause operations, aiding in backoff strategies.</data>
      <data key="d3">excerpt_id_6eb845511a3798c85225934f19cae61f</data>
    </node>
    <node id="retry_with_exponential_backoff">
      <data key="d1">function</data>
      <data key="d2">retry_with_exponential_backoff is a function designed to retry a specified operation with delays that increase exponentially with the number of retries, incorporating optional jitter to avoid contention.</data>
      <data key="d3">excerpt_id_6eb845511a3798c85225934f19cae61f</data>
    </node>
    <node id="initial_delay">
      <data key="d1">configuration</data>
      <data key="d2">initial_delay is a configuration parameter that sets the starting delay time before the first retry attempt.</data>
      <data key="d3">excerpt_id_6eb845511a3798c85225934f19cae61f</data>
    </node>
    <node id="exponential_base">
      <data key="d1">configuration</data>
      <data key="d2">exponential_base is a configuration parameter that defines the factor by which the delay increases after each retry.</data>
      <data key="d3">excerpt_id_6eb845511a3798c85225934f19cae61f</data>
    </node>
    <node id="jitter">
      <data key="d1">configuration</data>
      <data key="d2">jitter is a boolean configuration that determines whether random noise should be added to the delay to reduce the chances of collisions during retries.</data>
      <data key="d3">excerpt_id_6eb845511a3798c85225934f19cae61f</data>
    </node>
    <node id="max_retries">
      <data key="d1">configuration</data>
      <data key="d2">max_retries is a configuration setting that limits the maximum number of retry attempts before failing.</data>
      <data key="d3">excerpt_id_6eb845511a3798c85225934f19cae61f</data>
    </node>
    <node id="errors">
      <data key="d1">configuration</data>
      <data key="d2">errors is a configuration that specifies which exceptions should trigger a retry, allowing for flexible error handling.</data>
      <data key="d3">excerpt_id_6eb845511a3798c85225934f19cae61f</data>
    </node>
    <node id="Cloud Provider Selection">
      <data key="d1">configuration</data>
      <data key="d2">Cloud Provider Selection involves choosing the right cloud provider based on compute options, managed services, and pricing models.</data>
      <data key="d3">excerpt_id_4b1d39bb3b412ccb5521449ed59095c6</data>
    </node>
    <node id="Containerization">
      <data key="d1">configuration</data>
      <data key="d2">Containerization refers to the methodology of packaging software applications into containers, focusing on resource limits and image optimization.</data>
      <data key="d3">excerpt_id_4b1d39bb3b412ccb5521449ed59095c6</data>
    </node>
    <node id="Serverless Considerations">
      <data key="d1">configuration</data>
      <data key="d2">Serverless Considerations involves managing the performance aspects of serverless functions, including cold starts and memory allocation.</data>
      <data key="d3">excerpt_id_4b1d39bb3b412ccb5521449ed59095c6</data>
    </node>
    <node id="Kubernetes Resource Configuration">
      <data key="d1">example</data>
      <data key="d2">Kubernetes Resource Configuration is an example resource setup in Kubernetes for deploying the SmolRAG API with defined resource requests and limits.</data>
      <data key="d3">excerpt_id_4b1d39bb3b412ccb5521449ed59095c6</data>
    </node>
    <node id="data-volume">
      <data key="d1">variable</data>
      <data key="d2">data-volume is a persistent volume used in Kubernetes to store data for the SmolRAG application.:|:data-volume is a variable representing a persistent volume claim for data storage, ensuring that data persists across pod restarts.</data>
      <data key="d3">excerpt_id_4b1d39bb3b412ccb5521449ed59095c6:|:excerpt_id_ab0c2359f35ddf542e46336b81a7e409</data>
    </node>
    <node id="docs-volume">
      <data key="d1">variable</data>
      <data key="d2">docs-volume is a variable that represents a persistent volume claim dedicated for document storage, facilitating the management of documents processing.:|:docs-volume is a persistent volume in Kubernetes to store input documents for the SmolRAG application.</data>
      <data key="d3">excerpt_id_4b1d39bb3b412ccb5521449ed59095c6:|:excerpt_id_ab0c2359f35ddf542e46336b81a7e409</data>
    </node>
    <node id="fastapi">
      <data key="d1">api</data>
      <data key="d2">FastAPI is a modern web framework for building APIs with Python, known for its speed and ease of use.</data>
      <data key="d3">excerpt_id_3720213ae71a08acca1f7e46b7864f3e</data>
    </node>
    <node id="request format">
      <data key="d1">feature</data>
      <data key="d2">request format refers to the expected structure of the data sent to the API, which must be validated to ensure proper processing.</data>
      <data key="d3">excerpt_id_3720213ae71a08acca1f7e46b7864f3e</data>
    </node>
    <node id="request timeouts">
      <data key="d1">feature</data>
      <data key="d2">request timeouts are implemented to prevent the server from hanging indefinitely on requests, ensuring responsive API behavior.</data>
      <data key="d3">excerpt_id_3720213ae71a08acca1f7e46b7864f3e</data>
    </node>
    <node id="smolrag-data-pvc">
      <data key="d1">configuration</data>
      <data key="d2">smolrag-data-pvc is the persistent volume claim used for the data volume, which is essential for maintaining data integrity within the system.</data>
      <data key="d3">excerpt_id_ab0c2359f35ddf542e46336b81a7e409</data>
    </node>
    <node id="smolrag-docs-pvc">
      <data key="d1">configuration</data>
      <data key="d2">smolrag-docs-pvc is the persistent volume claim assigned for the document volume, crucial for document-related operations in the system.</data>
      <data key="d3">excerpt_id_ab0c2359f35ddf542e46336b81a7e409</data>
    </node>
    <node id="HTTPException">
      <data key="d1">api</data>
      <data key="d2">HTTPException is an API error handler that raises an exception in response to an error, providing a status code and detail about the issue.</data>
      <data key="d3">excerpt_id_1123c47dc960c83e906ef0521acbf692</data>
    </node>
    <node id="process_query_with_timeout">
      <data key="d1">function</data>
      <data key="d2">process_query_with_timeout function executes a given query with a specified timeout, ensuring that the operation does not hang indefinitely.:|:process_query_with_timeout is a function invoked within 'query_endpoint' to manage query execution with a timeout mechanism.</data>
      <data key="d3">excerpt_id_1123c47dc960c83e906ef0521acbf692:|:excerpt_id_f460391fbb913e0e360f66999d788989</data>
    </node>
    <node id="prune_old_documents">
      <data key="d1">function</data>
      <data key="d2">prune_old_documents is a function designed to remove documents from the vector database that are older than a specified threshold, ensuring the system's efficiency.</data>
      <data key="d3">excerpt_id_f460391fbb913e0e360f66999d788989</data>
    </node>
    <node id="clean_old_cache_files">
      <data key="d1">function</data>
      <data key="d2">clean_old_cache_files is a function responsible for deleting cache files that exceed a specified age, maintaining optimal cache storage.</data>
      <data key="d3">excerpt_id_f460391fbb913e0e360f66999d788989</data>
    </node>
    <node id="threshold_time">
      <data key="d1">variable</data>
      <data key="d2">threshold_time is a variable that sets the time limit for determining whether a cache file is considered old and eligible for removal.:|:threshold_time is a variable representing a calculated time limit used to identify outdated documents and cache files.</data>
      <data key="d3">excerpt_id_3e82863c53e1d9f1a2c455e3b10d5c48:|:excerpt_id_f460391fbb913e0e360f66999d788989</data>
    </node>
    <node id="time">
      <data key="d1">api</data>
      <data key="d2">time is an API used within the cleaning functions to manage and retrieve timestamps for document and file management.</data>
      <data key="d3">excerpt_id_f460391fbb913e0e360f66999d788989</data>
    </node>
    <node id="file_mtime">
      <data key="d1">variable</data>
      <data key="d2">file_mtime is a variable representing the last modification time of a file, used as a reference to determine whether a file should be deleted or retained based on its age.</data>
      <data key="d3">excerpt_id_3e82863c53e1d9f1a2c455e3b10d5c48</data>
    </node>
    <node id="file_path">
      <data key="d1">variable</data>
      <data key="d2">file_path is a variable that holds the location of an old cache file, which is subject to deletion if its modification time exceeds the threshold.:|:file_path is a parameter that defines the location where the memory-mapped file will be created or accessed.</data>
      <data key="d3">excerpt_id_03db7bd394b5c8f0cca7825a7bc0976e:|:excerpt_id_3e82863c53e1d9f1a2c455e3b10d5c48</data>
    </node>
    <node id="optimize_memory">
      <data key="d1">function</data>
      <data key="d2">optimize_memory is a function designed to force garbage collection in Python, monitor memory usage before and after collection, and report the amount of memory freed.</data>
      <data key="d3">excerpt_id_3e82863c53e1d9f1a2c455e3b10d5c48</data>
    </node>
    <node id="psutil">
      <data key="d1">api</data>
      <data key="d2">psutil is a Python library that provides an interface for retrieving information on system utilization (CPU, memory, disks, network, sensors) and running processes.</data>
      <data key="d3">excerpt_id_3e82863c53e1d9f1a2c455e3b10d5c48</data>
    </node>
    <node id="gc">
      <data key="d1">api</data>
      <data key="d2">gc is the garbage collection interface in Python, used to manage memory by automatically freeing up memory occupied by objects that are no longer in use.</data>
      <data key="d3">excerpt_id_3e82863c53e1d9f1a2c455e3b10d5c48</data>
    </node>
    <node id="Memory Usage Metrics">
      <data key="d1">feature</data>
      <data key="d2">Memory Usage Metrics provides insight into the memory consumption of a Python application before and after garbage collection is enforced, illustrating memory efficiency.</data>
      <data key="d3">excerpt_id_3e82863c53e1d9f1a2c455e3b10d5c48</data>
    </node>
    <node id="Memory">
      <data key="d1">variable</data>
      <data key="d2">Memory refers to the amount of memory available before and after operations, measured in megabytes (MB).</data>
      <data key="d3">excerpt_id_f14c1300eef7ee3f8f678d652b5e2c17</data>
    </node>
    <node id="CPU usage">
      <data key="d1">symptom</data>
      <data key="d2">CPU usage indicates the amount of processing power being utilized, where high CPU usage can lead to performance bottlenecks.</data>
      <data key="d3">excerpt_id_f14c1300eef7ee3f8f678d652b5e2c17</data>
    </node>
    <node id="cProfile">
      <data key="d1">function</data>
      <data key="d2">cProfile is a Python module for measuring where time is being spent in your application, allowing for performance profiling.</data>
      <data key="d3">excerpt_id_f14c1300eef7ee3f8f678d652b5e2c17</data>
    </node>
    <node id="pstats">
      <data key="d1">module</data>
      <data key="d2">pstats is a Python module that provides tools to analyze profiling results from cProfile.</data>
      <data key="d3">excerpt_id_f14c1300eef7ee3f8f678d652b5e2c17</data>
    </node>
    <node id="profile_function">
      <data key="d1">function</data>
      <data key="d2">The profile_function is a user-defined function that profiles another function's performance using cProfile.</data>
      <data key="d3">excerpt_id_f14c1300eef7ee3f8f678d652b5e2c17</data>
    </node>
    <node id="optimized_similarity">
      <data key="d1">function</data>
      <data key="d2">optimized_similarity is a function that calculates the similarity between vectors in an optimized manner using vectorized operations.</data>
      <data key="d3">excerpt_id_f14c1300eef7ee3f8f678d652b5e2c17</data>
    </node>
    <node id="process_with_controlled_batches">
      <data key="d1">function</data>
      <data key="d2">process_with_controlled_batches is a function that processes items in controlled sizes to manage system resources effectively.</data>
      <data key="d3">excerpt_id_f14c1300eef7ee3f8f678d652b5e2c17</data>
    </node>
    <node id="Symptoms">
      <data key="d1">concept</data>
      <data key="d2">Symptoms provide an overview of performance issues such as high CPU usage and disk I/O bottlenecks.</data>
      <data key="d3">excerpt_id_f14c1300eef7ee3f8f678d652b5e2c17</data>
    </node>
    <node id="Disk I/O bottlenecks">
      <data key="d1">feature</data>
      <data key="d2">Disk I/O bottlenecks refer to performance issues related to the input/output operations of a disk, which can affect system efficiency.</data>
      <data key="d3">excerpt_id_01ca0248de3b39f386fb010c1c75727a</data>
    </node>
    <node id="BufferedVectorStore">
      <data key="d1">class</data>
      <data key="d2">BufferedVectorStore is a class designed to optimize vector store operations by buffering data before committing it to the base store, which reduces the frequency of disk writes.</data>
      <data key="d3">excerpt_id_01ca0248de3b39f386fb010c1c75727a</data>
    </node>
    <node id="base_store">
      <data key="d1">variable</data>
      <data key="d2">base_store is a variable representing the primary storage system used by BufferedVectorStore to manage data.</data>
      <data key="d3">excerpt_id_01ca0248de3b39f386fb010c1c75727a</data>
    </node>
    <node id="buffer">
      <data key="d1">variable</data>
      <data key="d2">buffer is a variable used in BufferedVectorStore that temporarily holds data items before they are committed to the base_store.</data>
      <data key="d3">excerpt_id_01ca0248de3b39f386fb010c1c75727a</data>
    </node>
    <node id="buffer_size">
      <data key="d1">variable</data>
      <data key="d2">buffer_size is a variable determining the maximum number of items held in the buffer before it triggers an upsert operation to the base store.</data>
      <data key="d3">excerpt_id_01ca0248de3b39f386fb010c1c75727a</data>
    </node>
    <node id="setup_rotating_logger">
      <data key="d1">function</data>
      <data key="d2">The setup_rotating_logger function configures a logger that uses RotatingFileHandler for managing log file size and creating backups.</data>
      <data key="d3">excerpt_id_b6a3bf9520f31279c695c790576b2216</data>
    </node>
    <node id="log_path">
      <data key="d1">variable</data>
      <data key="d2">The log_path variable specifies the file path for storing the log files.</data>
      <data key="d3">excerpt_id_b6a3bf9520f31279c695c790576b2216</data>
    </node>
    <node id="max_bytes">
      <data key="d1">variable</data>
      <data key="d2">The max_bytes variable defines the maximum size of the log file before it is rotated.</data>
      <data key="d3">excerpt_id_b6a3bf9520f31279c695c790576b2216</data>
    </node>
    <node id="backup_count">
      <data key="d1">variable</data>
      <data key="d2">The backup_count variable determines how many backup log files are kept after rotation.</data>
      <data key="d3">excerpt_id_b6a3bf9520f31279c695c790576b2216</data>
    </node>
    <node id="Logger">
      <data key="d1">api</data>
      <data key="d2">Logger is a utility that allows the recording of log messages from different parts of an application, helping in troubleshooting and monitoring.</data>
      <data key="d3">excerpt_id_03db7bd394b5c8f0cca7825a7bc0976e</data>
    </node>
    <node id="Handler">
      <data key="d1">configuration</data>
      <data key="d2">Handler is a component that processes and handles log messages, determining how the messages are outputted, such as to a file or console.</data>
      <data key="d3">excerpt_id_03db7bd394b5c8f0cca7825a7bc0976e</data>
    </node>
    <node id="Formatter">
      <data key="d1">configuration</data>
      <data key="d2">Formatter is a tool that specifies the layout of log messages, including their content and appearance.</data>
      <data key="d3">excerpt_id_03db7bd394b5c8f0cca7825a7bc0976e</data>
    </node>
    <node id="MemmapVectorStore">
      <data key="d1">function</data>
      <data key="d2">MemmapVectorStore is a class that provides an interface for storing vectors in memory-mapped files, efficiently managing large datasets.</data>
      <data key="d3">excerpt_id_03db7bd394b5c8f0cca7825a7bc0976e</data>
    </node>
    <node id="save_metadata">
      <data key="d1">function</data>
      <data key="d2">save_metadata is a method that writes the metadata of the MemmapVectorStore to a separate file for tracking the number of vectors stored.</data>
      <data key="d3">excerpt_id_03db7bd394b5c8f0cca7825a7bc0976e</data>
    </node>
    <node id="load_metadata">
      <data key="d1">function</data>
      <data key="d2">load_metadata is a function that reads metadata from a specified file and converts its contents into an integer value stored in the count variable.:|:load_metadata is a method that reads the metadata file to retrieve the current count of vectors stored.</data>
      <data key="d3">excerpt_id_03db7bd394b5c8f0cca7825a7bc0976e:|:excerpt_id_d14d4b5fb9d1135b6a915fef1087d3b4</data>
    </node>
    <node id="max_vectors">
      <data key="d1">variable</data>
      <data key="d2">max_vectors limits the total number of vectors that can be stored in the memory-mapped file, ensuring efficient memory use.</data>
      <data key="d3">excerpt_id_03db7bd394b5c8f0cca7825a7bc0976e</data>
    </node>
    <node id="metadata_file">
      <data key="d1">variable</data>
      <data key="d2">metadata_file is a variable that likely holds the file path to the metadata file from which the count will be loaded.:|:metadata_file is used to store metadata information related to the MemmapVectorStore, including the count of stored vectors.</data>
      <data key="d3">excerpt_id_03db7bd394b5c8f0cca7825a7bc0976e:|:excerpt_id_d14d4b5fb9d1135b6a915fef1087d3b4</data>
    </node>
    <node id="numpy">
      <data key="d1">interface</data>
      <data key="d2">numpy is a library providing support for large, multi-dimensional arrays and matrices, along with a collection of mathematical functions to operate on them.</data>
      <data key="d3">excerpt_id_03db7bd394b5c8f0cca7825a7bc0976e</data>
    </node>
    <node id="count">
      <data key="d1">variable</data>
      <data key="d2">count is a variable that stores an integer value, initialized by converting the contents of a metadata file read during the execution of the load_metadata function.</data>
      <data key="d3">excerpt_id_d14d4b5fb9d1135b6a915fef1087d3b4</data>
    </node>
    <node id="app/logs/">
      <data key="d1">feature</data>
      <data key="d2">app/logs/ is a directory that stores log files generated by the application, which are essential for tracking the application's operational details.</data>
      <data key="d3">excerpt_id_d14d4b5fb9d1135b6a915fef1087d3b4</data>
    </node>
    <node id="main.log">
      <data key="d1">file</data>
      <data key="d2">main.log is the primary log file that records significant events and errors within the application, useful for troubleshooting purposes.</data>
      <data key="d3">excerpt_id_d14d4b5fb9d1135b6a915fef1087d3b4</data>
    </node>
    <node id="set_logger">
      <data key="d1">function</data>
      <data key="d2">set_logger is a function responsible for configuring the logging settings for the application, including changing the log level to DEBUG for verbose logging.</data>
      <data key="d3">excerpt_id_d14d4b5fb9d1135b6a915fef1087d3b4</data>
    </node>
    <node id="embeddings.db">
      <data key="d1">file</data>
      <data key="d2">embeddings.db is the database file that likely stores vector representation of data for retrieval in the application, crucial for functionality.</data>
      <data key="d3">excerpt_id_d14d4b5fb9d1135b6a915fef1087d3b4</data>
    </node>
    <node id="edding">
      <data key="d1">function</data>
      <data key="d2">edding is a function that generates embeddings from a provided text input, commonly used in natural language processing and machine learning tasks.</data>
      <data key="d3">excerpt_id_75e438adb9ff4c01e847c8be11bcc6e4</data>
    </node>
    <node id="Test text">
      <data key="d1">example</data>
      <data key="d2">Test text is a sample string used as input for the embedding function, demonstrating its capability to process text.</data>
      <data key="d3">excerpt_id_75e438adb9ff4c01e847c8be11bcc6e4</data>
    </node>
    <node id="len">
      <data key="d1">function</data>
      <data key="d2">len is a built-in function in Python that returns the number of items in an object, such as a list or string, used here to determine the dimensionality of the embedding.</data>
      <data key="d3">excerpt_id_75e438adb9ff4c01e847c8be11bcc6e4</data>
    </node>
    <node id="check_system_resources">
      <data key="d1">function</data>
      <data key="d2">check_system_resources is a function designed to monitor and output the status of system resources such as CPU, memory, and disk usage.</data>
      <data key="d3">excerpt_id_7026c9111f1e878a76710759253c04ae</data>
    </node>
    <node id="available memory">
      <data key="d1">variable</data>
      <data key="d2">available memory indicates the total available memory in MB, as displayed in the check_system_resources function.</data>
      <data key="d3">excerpt_id_7026c9111f1e878a76710759253c04ae</data>
    </node>
    <node id="Free Disk Space">
      <data key="d1">variable</data>
      <data key="d2">Free Disk Space indicates the amount of disk space available in GB, which is crucial for system operations.</data>
      <data key="d3">excerpt_id_7026c9111f1e878a76710759253c04ae</data>
    </node>
    <node id="troubleshooting guide">
      <data key="d1">feature</data>
      <data key="d2">troubleshooting guide is a document that outlines common issues and solutions encountered when using SmolRAG, guiding users through diagnostic steps.</data>
      <data key="d3">excerpt_id_7026c9111f1e878a76710759253c04ae</data>
    </node>
    <node id="SmolRag Initialization">
      <data key="d1">feature</data>
      <data key="d2">SmolRag Initialization refers to the parameters that can be provided while initializing the SmolRag class to customize its behavior and functionality.</data>
      <data key="d3">excerpt_id_35ac427df33971aafd001dedc2094d13</data>
    </node>
    <node id="vector store">
      <data key="d1">feature</data>
      <data key="d2">The vector store feature provides a mechanism to store and retrieve vector representations of data, enhancing search and matching capabilities.</data>
      <data key="d3">excerpt_id_23b091ffbf5cfdc68a155822645cbe8f</data>
    </node>
    <node id="OpenAI's Language Models">
      <data key="d1">api</data>
      <data key="d2">OpenAI's Language Models are used to generate summaries from text using carefully crafted prompts, playing a crucial role in the summarization process.</data>
      <data key="d3">excerpt_id_40ff8100b340e2bffbf37fe882a8ee48</data>
    </node>
    <node id="Summarization Process">
      <data key="d1">function</data>
      <data key="d2">The Summarization Process involves creating concise summaries from excerpts to understand their significance within larger documents during query retrieval.</data>
      <data key="d3">excerpt_id_40ff8100b340e2bffbf37fe882a8ee48</data>
    </node>
    <node id="Vector Embedding Generation">
      <data key="d1">function</data>
      <data key="d2">Vector Embedding Generation refers to the process of creating vector representations from excerpts and their summaries to enable semantic search capabilities.</data>
      <data key="d3">excerpt_id_40ff8100b340e2bffbf37fe882a8ee48</data>
    </node>
    <node id="Embedding Model">
      <data key="d1">configuration</data>
      <data key="d2">The Embedding Model configuration specifies which models are used to generate embedding vectors, with the default set to OpenAI's text-embedding-3-small.</data>
      <data key="d3">excerpt_id_40ff8100b340e2bffbf37fe882a8ee48</data>
    </node>
    <node id="__init__() method">
      <data key="d1">function</data>
      <data key="d2">The __init__() method initializes an object with specific parameters, crucial for setting up instances of various classes.</data>
      <data key="d3">excerpt_id_0e491c74d7a88194d22edb5dcf034178</data>
    </node>
    <node id="upsert() method">
      <data key="d1">function</data>
      <data key="d2">The upsert() method is used to insert or update items in the vector store, ensuring that the data is current and available.</data>
      <data key="d3">excerpt_id_0e491c74d7a88194d22edb5dcf034178</data>
    </node>
    <node id="query() method">
      <data key="d1">function</data>
      <data key="d2">The query() method retrieves similar vectors from the vector store based on a specified query.</data>
      <data key="d3">excerpt_id_0e491c74d7a88194d22edb5dcf034178</data>
    </node>
    <node id="add_node() method">
      <data key="d1">function</data>
      <data key="d2">The add_node() method in NetworkXGraphStore adds an entity to the graph, essential for constructing the graph structure.</data>
      <data key="d3">excerpt_id_0e491c74d7a88194d22edb5dcf034178</data>
    </node>
    <node id="add_edge() method">
      <data key="d1">function</data>
      <data key="d2">The add_edge() method connects two nodes in the graph, establishing relationships between entities.</data>
      <data key="d3">excerpt_id_0e491c74d7a88194d22edb5dcf034178</data>
    </node>
    <node id="gpt-3.5-turbo">
      <data key="d1">api</data>
      <data key="d2">gpt-3.5-turbo is an API model used for natural language processing tasks.</data>
      <data key="d3">excerpt_id_754be9b4e6d3cf65d9e60bea7edeb331</data>
    </node>
    <node id="gpt-4">
      <data key="d1">api</data>
      <data key="d2">gpt-4 is a more advanced API model designed for improved natural language processing capabilities compared to previous models.</data>
      <data key="d3">excerpt_id_754be9b4e6d3cf65d9e60bea7edeb331</data>
    </node>
    <node id="text-embedding-3-large">
      <data key="d1">variable</data>
      <data key="d2">text-embedding-3-large is a variable that denotes a specific model used for text embeddings in the context of the application.</data>
      <data key="d3">excerpt_id_60a78091c7c8d6dae9b144963e93551a</data>
    </node>
    <node id="Asyncio">
      <data key="d1">technology</data>
      <data key="d2">Asyncio is a Python library used for concurrent processing, enabling multiple tasks to run simultaneously and efficiently manage I/O-bound operations.</data>
      <data key="d3">excerpt_id_7fedf9d4b30621d6c79f65db2d09ce1a</data>
    </node>
    <node id="Concurrent Processing">
      <data key="d1">function</data>
      <data key="d2">Concurrent Processing allows multiple documents to be processed at the same time, significantly speeding up data ingestion.</data>
      <data key="d3">excerpt_id_7fedf9d4b30621d6c79f65db2d09ce1a</data>
    </node>
    <node id="Parallel API Calls">
      <data key="d1">function</data>
      <data key="d2">Parallel API Calls enable the system to execute embedding and completion requests concurrently, reducing total processing time.</data>
      <data key="d3">excerpt_id_7fedf9d4b30621d6c79f65db2d09ce1a</data>
    </node>
    <node id="asyncio.gather()">
      <data key="d1">function</data>
      <data key="d2">The `asyncio.gather()` function is utilized to combine multiple asynchronous tasks for more efficient processing in SmolRAG.</data>
      <data key="d3">excerpt_id_7fedf9d4b30621d6c79f65db2d09ce1a</data>
    </node>
    <node id="AsyncLimiter">
      <data key="d1">variable</data>
      <data key="d2">An `AsyncLimiter` in SmolRAG controls the rate of API calls to prevent throttling and ensure smooth processing.</data>
      <data key="d3">excerpt_id_7fedf9d4b30621d6c79f65db2d09ce1a</data>
    </node>
    <node id="Change Detection">
      <data key="d1">feature</data>
      <data key="d2">Change Detection is a mechanism within SmolRAG that ensures documents are kept up-to-date by tracking modifications and reprocessing as needed.</data>
      <data key="d3">excerpt_id_7fedf9d4b30621d6c79f65db2d09ce1a</data>
    </node>
    <node id="remove">
      <data key="d1">function</data>
      <data key="d2">remove is a function that deletes a key-value pair from the store, ensuring that the specified key no longer retains any associated value.</data>
      <data key="d3">excerpt_id_048561f7b91b06effbd2fa38d6b6e86d</data>
    </node>
    <node id="equal">
      <data key="d1">function</data>
      <data key="d2">equal is a function that checks whether a key's value matches a given value, allowing for validation within the store.</data>
      <data key="d3">excerpt_id_048561f7b91b06effbd2fa38d6b6e86d</data>
    </node>
    <node id="query_cache_kv">
      <data key="d1">variable</data>
      <data key="d2">query_cache_kv is a variable that represents a key-value store with JSON support for caching query results.</data>
      <data key="d3">excerpt_id_60a78091c7c8d6dae9b144963e93551a</data>
    </node>
    <node id="embedding_cache_kv">
      <data key="d1">variable</data>
      <data key="d2">embedding_cache_kv is a variable that indicates a key-value store specifically for caching embeddings.</data>
      <data key="d3">excerpt_id_60a78091c7c8d6dae9b144963e93551a</data>
    </node>
    <node id="Graph Store Configuration">
      <data key="d1">configuration</data>
      <data key="d2">Graph Store Configuration defines how the knowledge graph for entities and relationships is set up and modified.</data>
      <data key="d3">excerpt_id_60a78091c7c8d6dae9b144963e93551a</data>
    </node>
    <node id="/query">
      <data key="d1">interface</data>
      <data key="d2">The /query interface is an endpoint in the Flask application where users can send queries to interact with SmolRag.</data>
      <data key="d3">excerpt_id_adb7498f6f95f3de6fde939c658d11cf</data>
    </node>
    <node id="asyncio">
      <data key="d1">technology:|:library</data>
      <data key="d2">Asyncio is a Python library used for writing concurrent code using the async/await syntax, which is integral to the functionality of SmolRAG.:|:Asyncio is a Python library used to write concurrent code using the async/await syntax; it is utilized in SmolRAG for parallel processing of tasks.</data>
      <data key="d3">excerpt_id_9bec674c65e1e71d106b31cafb5387bf:|:excerpt_id_d4a7e13bce25a456a78a4eef57373bf4</data>
    </node>
    <node id="rate limiting">
      <data key="d1">configuration</data>
      <data key="d2">Rate limiting is a configuration setting applied to API calls within SmolRAG to prevent throttling and ensure smooth system operation.</data>
      <data key="d3">excerpt_id_d4a7e13bce25a456a78a4eef57373bf4</data>
    </node>
    <node id="data ingestion speed">
      <data key="d1">variable</data>
      <data key="d2">Data ingestion speed is a variable affected by the use of asyncio for parallel processing, significantly enhancing performance when handling large document collections.</data>
      <data key="d3">excerpt_id_d4a7e13bce25a456a78a4eef57373bf4</data>
    </node>
    <node id="Import Documents">
      <data key="d1">function</data>
      <data key="d2">Import Documents is a method within SmolRag for ensuring that necessary documents are loaded for querying.</data>
      <data key="d3">excerpt_id_97e526b02e37e6e2b2b176a8cb9cc039</data>
    </node>
    <node id="type">
      <data key="d1">variable</data>
      <data key="d2">Type indicates the category or classification of each query's result, providing context for the output.:|:Type categorizes the nature of the query, such as standard or local knowledge graph.</data>
      <data key="d3">excerpt_id_9bec674c65e1e71d106b31cafb5387bf:|:excerpt_id_97e526b02e37e6e2b2b176a8cb9cc039</data>
    </node>
    <node id="print results">
      <data key="d1">function</data>
      <data key="d2">Print results is a function that formats and outputs the results of queries, enhancing readability for the user.</data>
      <data key="d3">excerpt_id_9bec674c65e1e71d106b31cafb5387bf</data>
    </node>
    <node id="parallel processing">
      <data key="d1">feature</data>
      <data key="d2">Parallel processing is a feature of SmolRAG that allows multiple processes, such as document processing, embeddings generation, and entity extraction, to occur simultaneously for improved performance.</data>
      <data key="d3">excerpt_id_9bec674c65e1e71d106b31cafb5387bf</data>
    </node>
    <node id="advanced configuration">
      <data key="d1">configuration</data>
      <data key="d2">Advanced configuration refers to the capability to customize components of SmolRAG for enhanced functionality and tailored processing.</data>
      <data key="d3">excerpt_id_9bec674c65e1e71d106b31cafb5387bf</data>
    </node>
    <node id="Query Endpoint">
      <data key="d1">api</data>
      <data key="d2">The Query Endpoint is a FastAPI endpoint that processes incoming queries, customizable with various parameters like query type and maximum results.</data>
      <data key="d3">excerpt_id_e0d2ab7be18b619d1b6cfd5900b9347e</data>
    </node>
    <node id="Asyncio Implementation">
      <data key="d1">feature</data>
      <data key="d2">Asyncio Implementation enhances performance through parallel processing, allowing multiple documents to be processed simultaneously using Python's asyncio library.</data>
      <data key="d3">excerpt_id_e0d2ab7be18b619d1b6cfd5900b9347e</data>
    </node>
    <node id="Rate Limiting Configuration">
      <data key="d1">configuration</data>
      <data key="d2">Rate Limiting Configuration manages the speed of API calls to prevent throttling by setting a maximum rate for requests.</data>
      <data key="d3">excerpt_id_e0d2ab7be18b619d1b6cfd5900b9347e</data>
    </node>
    <node id="CustomRateLimitedSmolRag">
      <data key="d1">example</data>
      <data key="d2">CustomRateLimitedSmolRag is an example of a subclass extending SmolRag to implement customized rate limiting.</data>
      <data key="d3">excerpt_id_e0d2ab7be18b619d1b6cfd5900b9347e</data>
    </node>
    <node id="custom_query">
      <data key="d1">function</data>
      <data key="d2">custom_query is a method implemented within CustomSmolRag to facilitate specific querying capabilities tailored to user requirements.:|:custom_query is a function that implements a custom query method, allowing for tailored query implementations.</data>
      <data key="d3">excerpt_id_7f32de37a5cddfe45cdff7356d2a5584:|:excerpt_id_c3ca869388739cbef75785b9d8a4b3e1</data>
    </node>
    <node id="custom components">
      <data key="d1">configuration</data>
      <data key="d2">Custom components refer to the specific elements that can be tailored within SmolRAG to adapt to various use cases and ensure optimal integration.</data>
      <data key="d3">excerpt_id_31dbc989f689c5be27e9ae8b6d0588c4</data>
    </node>
    <node id="existing systems">
      <data key="d1">configuration</data>
      <data key="d2">Existing systems are the current frameworks or infrastructures that can be integrated with SmolRAG, benefiting from its flexible design.</data>
      <data key="d3">excerpt_id_31dbc989f689c5be27e9ae8b6d0588c4</data>
    </node>
    <node id="Custom LLM interface">
      <data key="d1">feature</data>
      <data key="d2">Custom LLM interface allows users to implement their own versions of the core language model interface tailored to their specific requirements.</data>
      <data key="d3">excerpt_id_c3ca869388739cbef75785b9d8a4b3e1</data>
    </node>
    <node id="Custom vector store">
      <data key="d1">feature</data>
      <data key="d2">Custom vector store enables users to create their own implementation of the data structure that stores vector representations efficiently.</data>
      <data key="d3">excerpt_id_c3ca869388739cbef75785b9d8a4b3e1</data>
    </node>
    <node id="Custom knowledge graph store">
      <data key="d1">feature</data>
      <data key="d2">Custom knowledge graph store allows for the implementation of a tailored storage solution for knowledge graphs.</data>
      <data key="d3">excerpt_id_c3ca869388739cbef75785b9d8a4b3e1</data>
    </node>
    <node id="Custom key-value store">
      <data key="d1">feature</data>
      <data key="d2">Custom key-value store permits users to implement a storage mechanism that uses key-value pairs to manage data efficiently.</data>
      <data key="d3">excerpt_id_c3ca869388739cbef75785b9d8a4b3e1</data>
    </node>
    <node id="Custom chunking strategies">
      <data key="d1">feature</data>
      <data key="d2">Custom chunking strategies provide users with options to manage how documents are segmented for processing.</data>
      <data key="d3">excerpt_id_c3ca869388739cbef75785b9d8a4b3e1</data>
    </node>
    <node id="Resource Efficiency">
      <data key="d1">configuration</data>
      <data key="d2">Resource Efficiency involves strategies to monitor and manage resource usage effectively, especially with large document collections.</data>
      <data key="d3">excerpt_id_c3ca869388739cbef75785b9d8a4b3e1</data>
    </node>
    <node id="Customization Strategy">
      <data key="d1">configuration</data>
      <data key="d2">Customization Strategy provides guidelines for users to modify and adapt the system’s default configuration for their use.</data>
      <data key="d3">excerpt_id_c3ca869388739cbef75785b9d8a4b3e1</data>
    </node>
    <node id="Contextual Understanding">
      <data key="d1">feature</data>
      <data key="d2">Contextual understanding in SmolRAG preserves document context through intelligent chunking and summarization, enhancing the retrieval process.</data>
      <data key="d3">excerpt_id_87030b6b3fa79706b6853abbb475c551</data>
    </node>
    <node id="Flexible Querying">
      <data key="d1">function</data>
      <data key="d2">Flexible querying is a functionality of SmolRAG that allows multiple methods to handle different question types and information needs.</data>
      <data key="d3">excerpt_id_87030b6b3fa79706b6853abbb475c551</data>
    </node>
    <node id="Raw Documents">
      <data key="d1">variable</data>
      <data key="d2">Raw Documents refer to the unprocessed textual files that are input into the SmolRAG system for transformation and analysis.</data>
      <data key="d3">excerpt_id_dc65135b9ad9bfac43cc3ae95a7b4158</data>
    </node>
    <node id="File Identification">
      <data key="d1">feature</data>
      <data key="d2">File Identification involves recognizing each file by its path and a content hash, which aids in change detection during the document ingestion process.</data>
      <data key="d3">excerpt_id_dc65135b9ad9bfac43cc3ae95a7b4158</data>
    </node>
    <node id="Metadata Extraction">
      <data key="d1">function</data>
      <data key="d2">Metadata Extraction preserves file paths and essential metadata from documents to provide context and reference during querying.</data>
      <data key="d3">excerpt_id_dc65135b9ad9bfac43cc3ae95a7b4158</data>
    </node>
    <node id="Import Documents Method">
      <data key="d1">api</data>
      <data key="d2">The Import Documents Method is an API operation that triggers the ingestion process for new or modified documents placed in the input_docs directory.</data>
      <data key="d3">excerpt_id_dc65135b9ad9bfac43cc3ae95a7b4158</data>
    </node>
    <edge source="SmolRAG" target="LightRAG">
      <data key="d4">SmolRAG is inspired by LightRAG, indicating a direct influence in its design for retrieval-augmented generation capabilities.:|:SmolRAG is inspired by LightRAG, which shapes its design and retrieval functions.</data>
      <data key="d5">foundation, inspiration:|:design inspiration, influence</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_87030b6b3fa79706b6853abbb475c551:|:excerpt_id_cb26db70dcd624e7b0e4b4273956b799</data>
    </edge>
    <edge source="SmolRAG" target="Vector Embeddings">
      <data key="d4">SmolRAG utilizes vector embeddings to provide semantic representation of document content for improved querying.:|:SmolRAG utilizes vector embeddings as a foundational component for its semantic search capabilities.</data>
      <data key="d5">query enhancement, semantic meaning:|:search capabilities, core functionality</data>
      <data key="d6">19.0</data>
      <data key="d7">excerpt_id_05e1658cae5a313a0bc5c4383179fbf5:|:excerpt_id_cb26db70dcd624e7b0e4b4273956b799</data>
    </edge>
    <edge source="SmolRAG" target="Knowledge Graphs">
      <data key="d4">Knowledge graphs are used in SmolRAG to enable deeper understanding through structured knowledge representation.</data>
      <data key="d5">structured search, contextual understanding</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_cb26db70dcd624e7b0e4b4273956b799</data>
    </edge>
    <edge source="SmolRAG" target="Large Language Models">
      <data key="d4">SmolRAG employs large language models to generate relevant responses, facilitating effective user interaction.:|:Large language models are part of SmolRAG's architecture to generate accurate answers to queries.</data>
      <data key="d5">user interaction, response generation:|:response generation, technology</data>
      <data key="d6">20.0</data>
      <data key="d7">excerpt_id_87030b6b3fa79706b6853abbb475c551:|:excerpt_id_cb26db70dcd624e7b0e4b4273956b799</data>
    </edge>
    <edge source="SmolRAG" target="SmolRag Class">
      <data key="d4">The SmolRag Class serves as the main entry point for the SmolRAG system, orchestrating its operations.:|:The SmolRag Class serves as the core component implementing the functionalities of the SmolRAG system.:|:The SmolRAG API is accessed through the SmolRag class, which serves as the implementation interface for users.</data>
      <data key="d5">core functionality, system orchestration:|:system architecture, core functionality:|:API access, implementation</data>
      <data key="d6">38.0</data>
      <data key="d7">excerpt_id_70868e98ba121059de996d38d21a0dd7:|:excerpt_id_a94908d6a99d624559f006ef6ef883ec:|:excerpt_id_9a13bcbb5440ec94b603d6b198fcf7cc</data>
    </edge>
    <edge source="SmolRAG" target="Document Ingestion Example">
      <data key="d4">Document Ingestion Example demonstrates practical use of the SmolRAG API for importing documents, showcasing its application.</data>
      <data key="d5">practical application, usage</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_9a13bcbb5440ec94b603d6b198fcf7cc</data>
    </edge>
    <edge source="SmolRAG" target="Excerpt Embeddings">
      <data key="d4">SmolRAG employs Excerpt Embeddings as a core function to enhance its content retrieval capabilities.</data>
      <data key="d5">feature implementation, embedding function</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_dc80c8904c8ce4e245e92a5bec8771ed</data>
    </edge>
    <edge source="SmolRAG" target="OPENAI_API_KEY">
      <data key="d4">SmolRAG requires the OPENAI_API_KEY variable for authentication, which is essential for accessing its features that rely on the OpenAI API.</data>
      <data key="d5">authentication, functionality</data>
      <data key="d6">20.0</data>
      <data key="d7">excerpt_id_4df59d4084f8e159d0d92fc0fd19ada4</data>
    </edge>
    <edge source="SmolRAG" target="COMPLETION_MODEL">
      <data key="d4">SmolRAG utilizes the COMPLETION_MODEL variable to determine the model used for text completions, enhancing user interaction with the software.</data>
      <data key="d5">model specification, performance</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_4df59d4084f8e159d0d92fc0fd19ada4</data>
    </edge>
    <edge source="SmolRAG" target="EMBEDDING_MODEL">
      <data key="d4">SmolRAG uses the EMBEDDING_MODEL variable to specify the embedding model, impacting data processing and analysis capabilities.</data>
      <data key="d5">model specification, data processing</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_4df59d4084f8e159d0d92fc0fd19ada4</data>
    </edge>
    <edge source="SmolRAG" target="Example .env file">
      <data key="d4">The Example .env file serves as a practical guide for setting up environment variables in SmolRAG, facilitating the configuration process.</data>
      <data key="d5">configuration guide, practical usage</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_4df59d4084f8e159d0d92fc0fd19ada4</data>
    </edge>
    <edge source="SmolRAG" target="import_documents">
      <data key="d4">SmolRAG uses the function import_documents to facilitate document ingestion within its API framework.:|:SmolRAG utilizes the import_documents function to manage the integration of documents into its system.:|:SmolRAG utilizes the import_documents function to process and manage file ingestion automatically.</data>
      <data key="d5">ingestion, function usage:|:document processing, automation:|:document management, API functionality</data>
      <data key="d6">35.0</data>
      <data key="d7">excerpt_id_9bec674c65e1e71d106b31cafb5387bf:|:excerpt_id_f2b7fbadfa83b8b0ea536a4b85fef7d6:|:excerpt_id_3de9971b782eac586dc03f5864ad60f3</data>
    </edge>
    <edge source="SmolRAG" target="Supported Formats">
      <data key="d4">SmolRAG supports specific file formats for ingestion, ensuring compatibility with necessary document types.</data>
      <data key="d5">file compatibility, supported types</data>
      <data key="d6">14.0</data>
      <data key="d7">excerpt_id_f2b7fbadfa83b8b0ea536a4b85fef7d6</data>
    </edge>
    <edge source="SmolRAG" target="Document Chunking Strategies">
      <data key="d4">SmolRAG employs Document Chunking Strategies to ensure efficient handling of ingested documents.</data>
      <data key="d5">document handling, strategy implementation</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_f2b7fbadfa83b8b0ea536a4b85fef7d6</data>
    </edge>
    <edge source="SmolRAG" target="Document Ingestion Time">
      <data key="d4">SmolRAG's performance is directly affected by Document Ingestion Time, as a faster ingestion leads to improved performance metrics.</data>
      <data key="d5">performance, efficiency</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_9b3e7699a2ad7cd3ed369e4a0e702290</data>
    </edge>
    <edge source="SmolRAG" target="Query Response Time">
      <data key="d4">Query Response Time is a crucial performance metric for SmolRAG, indicating how quickly it can respond to user queries.</data>
      <data key="d5">performance, user experience</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_9b3e7699a2ad7cd3ed369e4a0e702290</data>
    </edge>
    <edge source="SmolRAG" target="Embedding Generation Time">
      <data key="d4">Embedding Generation Time is necessary for SmolRAG's ability to perform effectively, making it a significant performance consideration.</data>
      <data key="d5">performance, necessity</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_9b3e7699a2ad7cd3ed369e4a0e702290</data>
    </edge>
    <edge source="SmolRAG" target="Memory Usage">
      <data key="d4">The performance of SmolRAG is influenced by Memory Usage, as higher usage can lead to bottlenecks in processing.:|:Memory usage is a critical consideration for the SmolRAG API, especially when handling complex queries and data structures."+</data>
      <data key="d5">resource management:|:resource management, performance</data>
      <data key="d6">14.0</data>
      <data key="d7">excerpt_id_63cd91bc48a4a86dbc4244526ba83736:|:excerpt_id_9b3e7699a2ad7cd3ed369e4a0e702290</data>
    </edge>
    <edge source="SmolRAG" target="Disk Usage">
      <data key="d4">Disk Usage impacts the overall resource management of SmolRAG, as inadequate storage can hinder its performance.</data>
      <data key="d5">resource management, performance</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_9b3e7699a2ad7cd3ed369e4a0e702290</data>
    </edge>
    <edge source="SmolRAG" target="CPU Usage">
      <data key="d4">CPU Usage reflects the computational demands of SmolRAG during operations, directly affecting performance outcomes.</data>
      <data key="d5">resource consumption, performance</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_9b3e7699a2ad7cd3ed369e4a0e702290</data>
    </edge>
    <edge source="SmolRAG" target="API Calls">
      <data key="d4">The number of API Calls made to external services impacts both cost and performance of SmolRAG, linking its functionality to external factors.</data>
      <data key="d5">external dependencies, performance</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_9b3e7699a2ad7cd3ed369e4a0e702290</data>
    </edge>
    <edge source="SmolRAG" target="Retrieval Precision">
      <data key="d4">Retrieval Precision is vital for assessing SmolRAG's effectiveness in returning relevant results to user queries.</data>
      <data key="d5">quality assessment, performance</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_9b3e7699a2ad7cd3ed369e4a0e702290</data>
    </edge>
    <edge source="SmolRAG" target="Retrieval Recall">
      <data key="d4">Retrieval Recall is essential to measure how well SmolRAG identifies all relevant excerpts, impacting its overall reliability.</data>
      <data key="d5">quality assessment, performance</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_9b3e7699a2ad7cd3ed369e4a0e702290</data>
    </edge>
    <edge source="SmolRAG" target="Response Quality">
      <data key="d4">Response Quality is directly tied to how effectively SmolRAG processes queries and retrieves information, affecting user satisfaction.</data>
      <data key="d5">user satisfaction, performance</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_9b3e7699a2ad7cd3ed369e4a0e702290</data>
    </edge>
    <edge source="SmolRAG" target="Knowledge Graph">
      <data key="d4">SmolRAG utilizes Knowledge Graph to maintain entities and relationships for effective data retrieval.:|:Knowledge Graph supports SmolRAG by storing entities and their relationships for enhanced information retrieval.:|:SmolRAG utilizes the Knowledge Graph to enhance its search capabilities and establish structured representations of information.:|:SmolRAG integrates knowledge graphs for enhanced semantic search and knowledge representation.:|:SmolRAG builds a knowledge graph from extracted entities and relationships, enhancing document understanding and search functionality.:|:SmolRAG's architecture includes a Knowledge Graph that supports structured representations of information for query resolution.:|:SmolRAG constructs the Knowledge Graph from extracted entities and relationships, allowing structured interaction with the document content.</data>
      <data key="d5">system architecture, integration:|:data storage, relationships:|:search enhancement, structured representation:|:structured information, document understanding:|:semantic search, integration:|:data structure, information retrieval:|:data management, knowledge representation</data>
      <data key="d6">79.0</data>
      <data key="d7">excerpt_id_e1f4404cf1e9a718f626b127f773cf70:|:excerpt_id_40ff8100b340e2bffbf37fe882a8ee48:|:excerpt_id_05e1658cae5a313a0bc5c4383179fbf5:|:excerpt_id_87030b6b3fa79706b6853abbb475c551:|:excerpt_id_59fb313f068a75f4e40be3bf7b095013:|:excerpt_id_feb905edbf8fd771c7b080447258f0ba:|:excerpt_id_9e82c97bd0829ec40084f1a45d364353</data>
    </edge>
    <edge source="SmolRAG" target="smol_rag.py">
      <data key="d4">SmolRAG is orchestrated by the `SmolRag` class defined in smol_rag.py, which integrates all functionalities.</data>
      <data key="d5">system architecture, core functionality</data>
      <data key="d6">20.0</data>
      <data key="d7">excerpt_id_f1fae642defef59936a03b705fb37221</data>
    </edge>
    <edge source="SmolRAG" target="Vector Search Query">
      <data key="d4">SmolRAG implements the Vector Search Query as one of its core functionalities to enhance search capabilities.</data>
      <data key="d5">functionality, search enhancement</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_f1ef3b38067579dab39116dbfeca6ddc</data>
    </edge>
    <edge source="SmolRAG" target="Local Knowledge Graph Query">
      <data key="d4">SmolRAG incorporates the Local Knowledge Graph Query to help identify entities and their relationships based on low-level keywords.</data>
      <data key="d5">entity relations, functionality</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_f1ef3b38067579dab39116dbfeca6ddc</data>
    </edge>
    <edge source="SmolRAG" target="Global Knowledge Graph Query">
      <data key="d4">Global Knowledge Graph Query is implemented within SmolRAG to facilitate high-level keyword searches and establish connections between entities.</data>
      <data key="d5">entity relations, functionality</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_f1ef3b38067579dab39116dbfeca6ddc</data>
    </edge>
    <edge source="SmolRAG" target="Hybrid Knowledge Graph Query">
      <data key="d4">The Hybrid Knowledge Graph Query is a feature of SmolRAG that utilizes both local and global approaches for effective querying.</data>
      <data key="d5">functionality, advanced querying</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_f1ef3b38067579dab39116dbfeca6ddc</data>
    </edge>
    <edge source="SmolRAG" target="Mix Query">
      <data key="d4">Mix Query combines the vector search and knowledge graph functionalities available in SmolRAG for enhanced user experience.:|:Mix Query is supported by SmolRAG as a resource-intensive method that combines several query approaches.</data>
      <data key="d5">query functionality, resource intensive:|:functionality, enhanced querying</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_d2ba6034366fcca143d67219ee341a22:|:excerpt_id_f1ef3b38067579dab39116dbfeca6ddc</data>
    </edge>
    <edge source="SmolRAG" target="Cosine Similarity">
      <data key="d4">SmolRAG relies on Cosine Similarity as its primary metric for determining the similarity between vectors.</data>
      <data key="d5">similarity measurement, feature dependency</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_f6b27b7a25013f2c5751328db6d6e0e3</data>
    </edge>
    <edge source="SmolRAG" target="NanoVectorStore">
      <data key="d4">NanoVectorStore is utilized within SmolRAG to store and retrieve embeddings, enhancing the feature's operation.:|:SmolRAG incorporates NanoVectorStore to manage the storage and retrieval of embeddings efficiently.:|:SmolRAG utilizes the NanoVectorStore to manage its embeddings and perform similarity searches efficiently.:|:NanoVectorStore supports SmolRAG in managing embeddings and conducting similarity searches efficiently.:|:SmolRAG uses NanoVectorStore to store and manage embeddings, which is vital for maintaining the operational efficiency of the application.:|:SmolRAG incorporates `NanoVectorStore` for embedding storage and retrieval, showcasing its role as a fundamental feature of the framework.:|:SmolRAG utilizes NanoVectorStore for managing embeddings, allowing for efficient storage and retrieval processes.</data>
      <data key="d5">system integration, data management:|:storage, management:|:embedding management, efficiency:|:integration, functionality:|:data storage, retrieval:|:database support, efficiency:|:core functionality, embedding management</data>
      <data key="d6">86.0</data>
      <data key="d7">excerpt_id_dcec4d38f0e3c0cff01b04e3b7bdf6ce:|:excerpt_id_9c6c3d629e2b94029b3f534beffe4780:|:excerpt_id_70868e98ba121059de996d38d21a0dd7:|:excerpt_id_c86849cd9a6f6eb952b7842d703f3170:|:excerpt_id_f6b27b7a25013f2c5751328db6d6e0e3:|:excerpt_id_ebf9009be245dbd0ab60372e5369f496:|:excerpt_id_517fe6133908102185036fafd1625255</data>
    </edge>
    <edge source="SmolRAG" target="result">
      <data key="d4">The SmolRAG API generates the result variable, which contains the text output based on user queries.</data>
      <data key="d5">output generation, data response</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_57aae66702d1057a0462d26360d3ccef</data>
    </edge>
    <edge source="SmolRAG" target="API Key">
      <data key="d4">The SmolRAG API can be secured by implementing an API Key authentication method, enhancing security.</data>
      <data key="d5">security measures, authentication</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_57aae66702d1057a0462d26360d3ccef</data>
    </edge>
    <edge source="SmolRAG" target="OAuth 2.0">
      <data key="d4">For advanced security requirements, the SmolRAG API can implement OAuth 2.0 for authentication.</data>
      <data key="d5">security measures, authentication</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_57aae66702d1057a0462d26360d3ccef</data>
    </edge>
    <edge source="SmolRAG" target="JWT">
      <data key="d4">JWT can be utilized for stateless authentication in securing the SmolRAG API.</data>
      <data key="d5">security measures, authentication</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_57aae66702d1057a0462d26360d3ccef</data>
    </edge>
    <edge source="SmolRAG" target="text-embedding-3-small">
      <data key="d4">SmolRAG incorporates the text-embedding-3-small model as its default for generating embeddings, influencing its performance and capability.</data>
      <data key="d5">integration, performance</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_c86849cd9a6f6eb952b7842d703f3170</data>
    </edge>
    <edge source="SmolRAG" target="Excerpt Summaries">
      <data key="d4">SmolRAG includes Excerpt Summaries in its embedding process to enhance context and retrieval effectiveness.</data>
      <data key="d5">contextual enhancement, retrieval improvement</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_c86849cd9a6f6eb952b7842d703f3170</data>
    </edge>
    <edge source="SmolRAG" target="INPUT_DOCS_DIR">
      <data key="d4">SmolRAG uses INPUT_DOCS_DIR to define the directory path where input documents are stored, which is vital for its operation.</data>
      <data key="d5">configuration, dependency</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_2d095921aff5b7f80aa22d08fd18411c</data>
    </edge>
    <edge source="SmolRAG" target="DATA_DIR">
      <data key="d4">SmolRAG references DATA_DIR to determine the folder for storing vector databases and data, indicating a direct dependency.</data>
      <data key="d5">configuration, dependency</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_2d095921aff5b7f80aa22d08fd18411c</data>
    </edge>
    <edge source="SmolRAG" target="CACHE_DIR">
      <data key="d4">SmolRAG utilizes CACHE_DIR for caching purposes, linking its functionality to this directory setting.</data>
      <data key="d5">configuration, dependency</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_2d095921aff5b7f80aa22d08fd18411c</data>
    </edge>
    <edge source="SmolRAG" target="LOG_DIR">
      <data key="d4">SmolRAG uses LOG_DIR to specify where log files are stored, essential for its logging functionality.</data>
      <data key="d5">configuration, dependency</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_2d095921aff5b7f80aa22d08fd18411c</data>
    </edge>
    <edge source="SmolRAG" target="definitions.py">
      <data key="d4">SmolRAG configuration references definitions.py, which defines the directory structure paths that can be customized.:|:definitions.py provides the default directory structure and configuration options for SmolRAG, making it integral for initialization.</data>
      <data key="d5">customization, configuration:|:configuration, source code</data>
      <data key="d6">17.0</data>
      <data key="d7">excerpt_id_2d095921aff5b7f80aa22d08fd18411c:|:excerpt_id_35ac427df33971aafd001dedc2094d13</data>
    </edge>
    <edge source="SmolRAG" target="Default Chunking">
      <data key="d4">SmolRAG uses Default Chunking as a primary feature to manage document text effectively.:|:SmolRAG implements Default Chunking as a core function for breaking down documents into manageable pieces.</data>
      <data key="d5">document processing, chunking:|:document management, chunking strategy</data>
      <data key="d6">25.0</data>
      <data key="d7">excerpt_id_d24dd08ee554d6069354fc456f67147f:|:excerpt_id_a91137c719a0d5f9cb906bc3ae15bc3f</data>
    </edge>
    <edge source="SmolRAG" target="Overlap Mechanism">
      <data key="d4">The Overlap Mechanism is embedded within SmolRAG to enhance the continuity of information across chunks.</data>
      <data key="d5">information continuity, chunking</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_a91137c719a0d5f9cb906bc3ae15bc3f</data>
    </edge>
    <edge source="SmolRAG" target="Code Block Preservation">
      <data key="d4">SmolRAG incorporates Code Block Preservation to maintain the structure of Markdown code during chunking.</data>
      <data key="d5">maintaining structure, document processing</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_a91137c719a0d5f9cb906bc3ae15bc3f</data>
    </edge>
    <edge source="SmolRAG" target="Paragraph Awareness">
      <data key="d4">SmolRAG's Paragraph Awareness strategy helps to segment text effectively for coherent chunking.</data>
      <data key="d5">effective segmentation, chunking</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_a91137c719a0d5f9cb906bc3ae15bc3f</data>
    </edge>
    <edge source="SmolRAG" target="naive_overlap_excerpts">
      <data key="d4">naive_overlap_excerpts function is one of the strategies employed by SmolRAG for basic document chunking.:|:SmolRAG utilizes the naive_overlap_excerpts function as one of its built-in chunking strategies to process documents effectively.:|:SmolRAG utilizes the naive_overlap_excerpts function for document chunking as part of its processing capabilities.</data>
      <data key="d5">basic chunking, functionality:|:chunking strategy, processing:|:chunking strategy, framework function</data>
      <data key="d6">22.0</data>
      <data key="d7">excerpt_id_ce594558fb5aeae85f51870c652a415b:|:excerpt_id_a91137c719a0d5f9cb906bc3ae15bc3f:|:excerpt_id_ebf9009be245dbd0ab60372e5369f496</data>
    </edge>
    <edge source="SmolRAG" target="preserve_markdown_code_excerpts">
      <data key="d4">SmolRAG incorporates preserve_markdown_code_excerpts to maintain the integrity of Markdown code blocks during chunking.:|:SmolRAG also incorporates preserve_markdown_code_excerpts to handle Markdown structures during document processing.:|:preserve_markdown_code_excerpts is a specialized function in SmolRAG that focuses on preserving Markdown structure.:|:SmolRAG offers preserve_markdown_code_excerpts as an advanced option for document chunking, enhancing its functionality.</data>
      <data key="d5">chunking strategy, Markdown handling:|:document processing, Markdown preservation:|:document formatting, functionality:|:chunking strategy, flexibility</data>
      <data key="d6">43.0</data>
      <data key="d7">excerpt_id_d24dd08ee554d6069354fc456f67147f:|:excerpt_id_a91137c719a0d5f9cb906bc3ae15bc3f:|:excerpt_id_ce594558fb5aeae85f51870c652a415b:|:excerpt_id_ebf9009be245dbd0ab60372e5369f496</data>
    </edge>
    <edge source="SmolRAG" target="Contextual Summarization">
      <data key="d4">SmolRAG utilizes Contextual Summarization to enhance the quality and relevancy of each document chunk.:|:Contextual Summarization enhances the output quality of SmolRAG by summarizing the context of chunks based on the whole document.</data>
      <data key="d5">summary enhancement, relevance:|:summarization, context improvement</data>
      <data key="d6">26.0</data>
      <data key="d7">excerpt_id_d24dd08ee554d6069354fc456f67147f:|:excerpt_id_a91137c719a0d5f9cb906bc3ae15bc3f</data>
    </edge>
    <edge source="SmolRAG" target="NetworkX">
      <data key="d4">SmolRAG utilizes NetworkX as its foundational library to build and manage the knowledge graph."+</data>
      <data key="d5">implementation, integration</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_2f91a07d0891228b7332afeffe8b7a42</data>
    </edge>
    <edge source="SmolRAG" target="Graph Storage">
      <data key="d4">SmolRAG employs Graph Storage for maintaining the entities and relationships of the knowledge graph."+</data>
      <data key="d5">storage, structure</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_2f91a07d0891228b7332afeffe8b7a42</data>
    </edge>
    <edge source="SmolRAG" target="Chunking Module">
      <data key="d4">The Chunking Module is a key component of SmolRAG that aids in processing documents efficiently by breaking them into manageable pieces.</data>
      <data key="d5">document processing, modular design</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_70868e98ba121059de996d38d21a0dd7</data>
    </edge>
    <edge source="SmolRAG" target="OpenAiLlm">
      <data key="d4">SmolRAG employs the OpenAiLlm interface for integrating language model functionalities into its processing pipeline.:|:OpenAiLlm is integrated with SmolRAG to facilitate communication with OpenAI's services for embeddings and completions.</data>
      <data key="d5">integration, language modeling:|:API integration, external communication</data>
      <data key="d6">25.0</data>
      <data key="d7">excerpt_id_ebf9009be245dbd0ab60372e5369f496:|:excerpt_id_70868e98ba121059de996d38d21a0dd7</data>
    </edge>
    <edge source="SmolRAG" target="NetworkXGraphStore">
      <data key="d4">NetworkXGraphStore enables SmolRAG to manage entities and relationships through a graph database structure, supporting data interactions.:|:SmolRAG leverages `NetworkXGraphStore` for managing knowledge graphs, indicating its flexibility in handling relationships and entities.</data>
      <data key="d5">entity management, graph database:|:core functionality, graph management</data>
      <data key="d6">24.0</data>
      <data key="d7">excerpt_id_70868e98ba121059de996d38d21a0dd7:|:excerpt_id_517fe6133908102185036fafd1625255</data>
    </edge>
    <edge source="SmolRAG" target="JsonKvStore">
      <data key="d4">JsonKvStore plays a role within SmolRAG for key-value caching mechanism, improving metadata processing efficiency.</data>
      <data key="d5">caching, metadata handling</data>
      <data key="d6">12.0</data>
      <data key="d7">excerpt_id_70868e98ba121059de996d38d21a0dd7</data>
    </edge>
    <edge source="SmolRAG" target="API Module">
      <data key="d4">The API Module provides a RESTful interface for SmolRAG, allowing external systems to interact with its functionalities.</data>
      <data key="d5">external interface, integration</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_70868e98ba121059de996d38d21a0dd7</data>
    </edge>
    <edge source="SmolRAG" target="In-Memory Processing">
      <data key="d4">SmolRAG implements In-Memory Processing to enhance the speed of vector searches in conjunction with the NanoVectorStore.</data>
      <data key="d5">performance optimization, functionality</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_dcec4d38f0e3c0cff01b04e3b7bdf6ce</data>
    </edge>
    <edge source="SmolRAG" target="Caching">
      <data key="d4">SmolRAG employs Caching to reduce redundancy in API calls for enhanced search efficiency.:|:Caching can be implemented within the SmolRAG API to optimize performance for frequently made queries."+</data>
      <data key="d5">performance improvement, efficiency:|:performance improvement</data>
      <data key="d6">23.0</data>
      <data key="d7">excerpt_id_dcec4d38f0e3c0cff01b04e3b7bdf6ce:|:excerpt_id_63cd91bc48a4a86dbc4244526ba83736</data>
    </edge>
    <edge source="SmolRAG" target="Dimensionality Management">
      <data key="d4">SmolRAG utilizes Dimensionality Management to ensure vector performance aligns with system requirements.</data>
      <data key="d5">performance optimization, functionality</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_dcec4d38f0e3c0cff01b04e3b7bdf6ce</data>
    </edge>
    <edge source="SmolRAG" target="custom_chunking_strategy">
      <data key="d4">SmolRAG allows users to define a custom_chunking_strategy function for tailored chunking logic in document processing.:|:Users can implement the custom_chunking_strategy function within SmolRAG to tailor the chunking process according to specific needs.</data>
      <data key="d5">customization, user-defined:|:customization, flexibility</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_ce594558fb5aeae85f51870c652a415b:|:excerpt_id_ebf9009be245dbd0ab60372e5369f496</data>
    </edge>
    <edge source="SmolRAG" target="Change Detection Mechanism">
      <data key="d4">The Change Detection Mechanism is a feature within SmolRAG that keeps its data current by detecting updates and modifications.:|:The Change Detection Mechanism is a crucial function of SmolRAG that ensures the information remains up-to-date.</data>
      <data key="d5">data accuracy, system functionality:|:up-to-date information, system efficiency</data>
      <data key="d6">26.0</data>
      <data key="d7">excerpt_id_05e1658cae5a313a0bc5c4383179fbf5:|:excerpt_id_e1f4404cf1e9a718f626b127f773cf70</data>
    </edge>
    <edge source="SmolRAG" target="Vector Search">
      <data key="d4">SmolRAG functions alongside Vector Search, likely utilizing it to improve file processing capabilities.:|:SmolRAG includes Vector Search as one of its functions to enhance query performance primarily based on vector data size.</data>
      <data key="d5">functionality synergy:|:query functionality, performance</data>
      <data key="d6">14.0</data>
      <data key="d7">excerpt_id_d2ba6034366fcca143d67219ee341a22:|:excerpt_id_e22b8da6dcf20fed5f472fe57b90902b</data>
    </edge>
    <edge source="SmolRAG" target="Entity Embeddings">
      <data key="d4">SmolRAG creates Entity Embeddings for its entities, using their names and descriptions to enhance semantic understanding.</data>
      <data key="d5">embedding, semantic understanding</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_7c686d971d2fea42e5ba02fc141455aa</data>
    </edge>
    <edge source="SmolRAG" target="Relationship Embeddings">
      <data key="d4">SmolRAG generates Relationship Embeddings based on the relationships' characteristics to facilitate semantic searches.</data>
      <data key="d5">embedding, semantic search</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_7c686d971d2fea42e5ba02fc141455aa</data>
    </edge>
    <edge source="SmolRAG" target="Separate Storage">
      <data key="d4">SmolRAG utilizes Separate Storage for organizing the embeddings, ensuring efficient data management.</data>
      <data key="d5">data management, organization</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_7c686d971d2fea42e5ba02fc141455aa</data>
    </edge>
    <edge source="SmolRAG" target="Knowledge Graph Queries">
      <data key="d4">SmolRAG utilizes Knowledge Graph Queries to extract information driven by the complexity of the knowledge graph.:|:SmolRAG supports various types of Knowledge Graph Queries, allowing flexibility in knowledge retrieval.</data>
      <data key="d5">query processing, flexibility:|:query functionality, complexity</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_d2ba6034366fcca143d67219ee341a22:|:excerpt_id_7c686d971d2fea42e5ba02fc141455aa</data>
    </edge>
    <edge source="SmolRAG" target="Custom Adapters">
      <data key="d4">SmolRAG utilizes Custom Adapters to connect with other systems, increasing its functionality and adaptability.</data>
      <data key="d5">integration, adaptability</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_7f2443f5ebfc8f85347fa0ad3e1b4199</data>
    </edge>
    <edge source="SmolRAG" target="Integration Points">
      <data key="d4">Integration Points are part of SmolRAG's features that enable it to work seamlessly in various environments.</data>
      <data key="d5">features, versatility</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_7f2443f5ebfc8f85347fa0ad3e1b4199</data>
    </edge>
    <edge source="SmolRAG" target="Flexibility">
      <data key="d4">Flexibility in SmolRAG allows it to be tailored to meet diverse developer needs and various applications.</data>
      <data key="d5">adaptability, user-centric</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_7f2443f5ebfc8f85347fa0ad3e1b4199</data>
    </edge>
    <edge source="SmolRAG" target="Advanced RAG Capabilities">
      <data key="d4">SmolRAG offers Advanced RAG Capabilities that enhance its performance in delivering accurate responses.</data>
      <data key="d5">performance, sophistication</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_7f2443f5ebfc8f85347fa0ad3e1b4199</data>
    </edge>
    <edge source="SmolRAG" target="Documentation Search System">
      <data key="d4">SmolRAG can be employed to build a Documentation Search System, showcasing its application potential.</data>
      <data key="d5">application, use case</data>
      <data key="d6">14.0</data>
      <data key="d7">excerpt_id_7f2443f5ebfc8f85347fa0ad3e1b4199</data>
    </edge>
    <edge source="SmolRAG" target="Knowledge Base">
      <data key="d4">SmolRAG can effectively support the creation of a Knowledge Base, illustrating its versatility in application.</data>
      <data key="d5">application, versatility</data>
      <data key="d6">14.0</data>
      <data key="d7">excerpt_id_7f2443f5ebfc8f85347fa0ad3e1b4199</data>
    </edge>
    <edge source="SmolRAG" target="Question-Answering Application">
      <data key="d4">SmolRAG provides the foundation for a Question-Answering Application, reflecting its capabilities in practical scenarios.</data>
      <data key="d5">application, user engagement</data>
      <data key="d6">14.0</data>
      <data key="d7">excerpt_id_7f2443f5ebfc8f85347fa0ad3e1b4199</data>
    </edge>
    <edge source="SmolRAG" target="Query Ambiguity">
      <data key="d4">SmolRAG addresses Query Ambiguity by implementing different query types to manage ambiguities effectively.</data>
      <data key="d5">query management, information retrieval</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_6c59f654d2d8c621cf5fea19de72d0fe</data>
    </edge>
    <edge source="SmolRAG" target="Semantic Gaps">
      <data key="d4">SmolRAG incorporates knowledge graph information to address Semantic Gaps in queries.</data>
      <data key="d5">semantic understanding, information enhancement</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_6c59f654d2d8c621cf5fea19de72d0fe</data>
    </edge>
    <edge source="SmolRAG" target="Out-of-Domain Queries">
      <data key="d4">SmolRAG gracefully handles Out-of-Domain Queries, improving the overall user experience.</data>
      <data key="d5">user experience, query handling</data>
      <data key="d6">14.0</data>
      <data key="d7">excerpt_id_6c59f654d2d8c621cf5fea19de72d0fe</data>
    </edge>
    <edge source="SmolRAG" target="Long Documents">
      <data key="d4">SmolRAG improves retrieval of Long Documents by using chunking and summarization techniques.</data>
      <data key="d5">document management, retrieval efficiency</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_6c59f654d2d8c621cf5fea19de72d0fe</data>
    </edge>
    <edge source="SmolRAG" target="Rare Terms">
      <data key="d4">SmolRAG seeks to balance the importance of Rare Terms with overall semantic meaning in search results.</data>
      <data key="d5">term management, semantic balance</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_6c59f654d2d8c621cf5fea19de72d0fe</data>
    </edge>
    <edge source="SmolRAG" target="Knowledge Graph Integration">
      <data key="d4">SmolRAG employs Knowledge Graph Integration to enhance its similarity search capabilities.</data>
      <data key="d5">search enhancement, feature integration</data>
      <data key="d6">20.0</data>
      <data key="d7">excerpt_id_6c59f654d2d8c621cf5fea19de72d0fe</data>
    </edge>
    <edge source="SmolRAG" target="Entity-Based Search">
      <data key="d4">SmolRAG includes Entity-Based Search to locate relevant entities effectively within the system.</data>
      <data key="d5">entity retrieval, effectiveness</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_6c59f654d2d8c621cf5fea19de72d0fe</data>
    </edge>
    <edge source="SmolRAG" target="Relationship-Based Search">
      <data key="d4">SmolRAG features Relationship-Based Search to identify relationships between entities in a semantic context.</data>
      <data key="d5">relationship management, semantic analysis</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_6c59f654d2d8c621cf5fea19de72d0fe</data>
    </edge>
    <edge source="SmolRAG" target="Hybrid Approaches">
      <data key="d4">SmolRAG uses Hybrid Approaches to blend multiple search strategies for better outcomes.</data>
      <data key="d5">strategy blending, search optimization</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_6c59f654d2d8c621cf5fea19de72d0fe</data>
    </edge>
    <edge source="SmolRAG" target="Weighted Combinations">
      <data key="d4">SmolRAG implements Weighted Combinations to adjust the influence of various search methods based on query types.</data>
      <data key="d5">method adjustment, query optimization</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_6c59f654d2d8c621cf5fea19de72d0fe</data>
    </edge>
    <edge source="SmolRAG" target="requests">
      <data key="d4">SmolRAG uses requests library to facilitate HTTP interactions with its REST API functionalities.</data>
      <data key="d5">API interaction, HTTP requests</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_9e30dc3a8159dc93859b8664cf4db134</data>
    </edge>
    <edge source="SmolRAG" target="Key-Value Stores">
      <data key="d4">SmolRAG employs Key-Value Stores to manage essential metadata and caches.:|:Key-Value Stores provide necessary support for managing metadata within SmolRAG's infrastructure.:|:SmolRAG utilizes key-value stores for managing various metadata and caching, enhancing overall performance and flexibility.</data>
      <data key="d5">metadata management, caching:|:metadata management, data organization:|:data management, performance improvement</data>
      <data key="d6">29.0</data>
      <data key="d7">excerpt_id_feb905edbf8fd771c7b080447258f0ba:|:excerpt_id_517fe6133908102185036fafd1625255:|:excerpt_id_e1f4404cf1e9a718f626b127f773cf70</data>
    </edge>
    <edge source="SmolRAG" target="Content Hashing">
      <data key="d4">SmolRAG employs Content Hashing to identify changes in documents, ensuring data integrity within the system.</data>
      <data key="d5">change detection, data integrity</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_feb905edbf8fd771c7b080447258f0ba</data>
    </edge>
    <edge source="SmolRAG" target="Path-Based Tracking">
      <data key="d4">SmolRAG utilizes Path-Based Tracking to monitor documents and facilitate effective content management.</data>
      <data key="d5">document management, monitoring</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_feb905edbf8fd771c7b080447258f0ba</data>
    </edge>
    <edge source="SmolRAG" target="Automatic Updates">
      <data key="d4">SmolRAG incorporates Automatic Updates to manage document changes efficiently and keep the data current.</data>
      <data key="d5">data updating, efficiency</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_feb905edbf8fd771c7b080447258f0ba</data>
    </edge>
    <edge source="SmolRAG" target="Selective Processing">
      <data key="d4">SmolRAG integrates Selective Processing to enhance performance by only reprocessing modified documents.</data>
      <data key="d5">performance enhancement, efficiency</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_feb905edbf8fd771c7b080447258f0ba</data>
    </edge>
    <edge source="SmolRAG" target="Consistency Maintenance">
      <data key="d4">Consistency Maintenance is a critical function within SmolRAG that ensures system components remain synchronized after updates.:|:Consistency Maintenance works alongside SmolRAG's features to ensure all components are synchronized after updates.</data>
      <data key="d5">data consistency, synchronization:|:system synchronization, data cohesion</data>
      <data key="d6">26.0</data>
      <data key="d7">excerpt_id_feb905edbf8fd771c7b080447258f0ba:|:excerpt_id_7fedf9d4b30621d6c79f65db2d09ce1a</data>
    </edge>
    <edge source="SmolRAG" target="Vector Store">
      <data key="d4">SmolRAG uses Vector Store to store embeddings, enabling semantic search functionalities.:|:Vector Store is part of SmolRAG’s storage solutions, enabling efficient semantic search capabilities.</data>
      <data key="d5">data storage, semantic search</data>
      <data key="d6">24.0</data>
      <data key="d7">excerpt_id_feb905edbf8fd771c7b080447258f0ba:|:excerpt_id_e1f4404cf1e9a718f626b127f773cf70</data>
    </edge>
    <edge source="SmolRAG" target="File Structure">
      <data key="d4">File Structure organization is a key component of SmolRAG, facilitating the management of processed data.:|:SmolRAG organizes its data according to a defined File Structure for better data accessibility.</data>
      <data key="d5">data organization, structure:|:data organization, accessibility</data>
      <data key="d6">22.0</data>
      <data key="d7">excerpt_id_feb905edbf8fd771c7b080447258f0ba:|:excerpt_id_e1f4404cf1e9a718f626b127f773cf70</data>
    </edge>
    <edge source="SmolRAG" target="Serialization">
      <data key="d4">Serialization is utilized by SmolRAG to save data in a persistent manner, ensuring availability between runs.:|:SmolRAG implements Serialization to persist data between system runs, ensuring continuity.</data>
      <data key="d5">data persistence, accessibility:|:data persistence, system continuity</data>
      <data key="d6">27.0</data>
      <data key="d7">excerpt_id_feb905edbf8fd771c7b080447258f0ba:|:excerpt_id_e1f4404cf1e9a718f626b127f773cf70</data>
    </edge>
    <edge source="SmolRAG" target="Error Handling">
      <data key="d4">Error Handling is a feature of SmolRAG that ensures the system can manage and rectify processing errors.:|:Error Handling in SmolRAG aids in maintaining operational reliability during document ingestion.</data>
      <data key="d5">error management, system resilience:|:reliability, operational integrity</data>
      <data key="d6">27.0</data>
      <data key="d7">excerpt_id_feb905edbf8fd771c7b080447258f0ba:|:excerpt_id_e1f4404cf1e9a718f626b127f773cf70</data>
    </edge>
    <edge source="SmolRAG" target="Logging">
      <data key="d4">Logging provides visibility into SmolRAG's processes, allowing for monitoring and debugging of operations.:|:SmolRAG incorporates Logging to track processing steps for debugging and monitoring purposes.</data>
      <data key="d5">tracking, monitoring:|:monitoring, operational visibility</data>
      <data key="d6">24.0</data>
      <data key="d7">excerpt_id_feb905edbf8fd771c7b080447258f0ba:|:excerpt_id_e1f4404cf1e9a718f626b127f773cf70</data>
    </edge>
    <edge source="SmolRAG" target="Performance Metrics">
      <data key="d4">Performance Metrics are tracked by SmolRAG to optimize the system's performance and resources used.</data>
      <data key="d5">system performance, optimization</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_feb905edbf8fd771c7b080447258f0ba</data>
    </edge>
    <edge source="SmolRAG" target="Warning System">
      <data key="d4">Warning System aids SmolRAG by notifying users of potential issues, enhancing overall system management.:|:The Warning System in SmolRAG notifies users of potential issues during data processing.</data>
      <data key="d5">notification, issue tracking:|:issue notification, proactive management</data>
      <data key="d6">21.0</data>
      <data key="d7">excerpt_id_feb905edbf8fd771c7b080447258f0ba:|:excerpt_id_e1f4404cf1e9a718f626b127f773cf70</data>
    </edge>
    <edge source="SmolRAG" target="Test Queries">
      <data key="d4">SmolRAG utilizes Test Queries to evaluate the performance of its similarity search functionality.</data>
      <data key="d5">evaluation, performance metrics</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_9852e72fbe12ed839b385c87873fec09</data>
    </edge>
    <edge source="SmolRAG" target="User Feedback">
      <data key="d4">SmolRAG incorporates User Feedback to continually improve the quality of its search results over time.</data>
      <data key="d5">improvement, user engagement</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_9852e72fbe12ed839b385c87873fec09</data>
    </edge>
    <edge source="SmolRAG" target="Precision and Recall">
      <data key="d4">SmolRAG measures its search accuracy and completeness using Precision and Recall metrics.</data>
      <data key="d5">performance evaluation, quality metrics</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_9852e72fbe12ed839b385c87873fec09</data>
    </edge>
    <edge source="SmolRAG" target="Question Answering">
      <data key="d4">SmolRAG facilitates Question Answering by finding relevant information to address specific questions.</data>
      <data key="d5">application, relevance</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_9852e72fbe12ed839b385c87873fec09</data>
    </edge>
    <edge source="SmolRAG" target="Document Exploration">
      <data key="d4">Document Exploration is an application of SmolRAG's similarity search to discover related content.</data>
      <data key="d5">application, discovery</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_9852e72fbe12ed839b385c87873fec09</data>
    </edge>
    <edge source="SmolRAG" target="Technical Support">
      <data key="d4">SmolRAG's similarity search assists in locating relevant documentation for Technical Support purposes.</data>
      <data key="d5">assistance, application</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_9852e72fbe12ed839b385c87873fec09</data>
    </edge>
    <edge source="SmolRAG" target="Knowledge Discovery">
      <data key="d4">SmolRAG aids in Knowledge Discovery by uncovering connections between various information pieces.</data>
      <data key="d5">application, connections</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_9852e72fbe12ed839b385c87873fec09</data>
    </edge>
    <edge source="SmolRAG" target="Multi-Modal Search">
      <data key="d4">SmolRAG is evolving to include Multi-Modal Search capabilities, thus enriching its functionality.</data>
      <data key="d5">evolution, expansion</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_9852e72fbe12ed839b385c87873fec09</data>
    </edge>
    <edge source="SmolRAG" target="Personalization">
      <data key="d4">SmolRAG adapts its search results through Personalization based on user preferences.</data>
      <data key="d5">adaptation, user-centric</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_9852e72fbe12ed839b385c87873fec09</data>
    </edge>
    <edge source="SmolRAG" target="Semantic Drift">
      <data key="d4">SmolRAG acknowledges the challenge of Semantic Drift when dealing with lengthy or complex documents that might affect embedding accuracy.</data>
      <data key="d5">limitations, embedding fidelity</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_13f0a88ca4ce9d7111d35d577b03200f</data>
    </edge>
    <edge source="SmolRAG" target="Domain Specificity">
      <data key="d4">SmolRAG recognizes the issue of Domain Specificity, aiming to improve the capture of industry-specific nuances in embeddings.</data>
      <data key="d5">limitations, adaptation</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_13f0a88ca4ce9d7111d35d577b03200f</data>
    </edge>
    <edge source="SmolRAG" target="Language Limitations">
      <data key="d4">SmolRAG addresses Language Limitations to enhance the performance of embeddings across various languages and technical domains.</data>
      <data key="d5">limitations, performance</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_13f0a88ca4ce9d7111d35d577b03200f</data>
    </edge>
    <edge source="SmolRAG" target="Computational Cost">
      <data key="d4">SmolRAG's capabilities bring attention to the Computational Cost associated with managing large embedding collections.</data>
      <data key="d5">resource management, efficiency</data>
      <data key="d6">5.0</data>
      <data key="d7">excerpt_id_13f0a88ca4ce9d7111d35d577b03200f</data>
    </edge>
    <edge source="SmolRAG" target="API Dependency">
      <data key="d4">SmolRAG's reliance on external APIs introduces potential risks, as highlighted in the context of API Dependency.</data>
      <data key="d5">vulnerability, external reliance</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_13f0a88ca4ce9d7111d35d577b03200f</data>
    </edge>
    <edge source="SmolRAG" target="Model Upgrades">
      <data key="d4">SmolRAG plans to incorporate Model Upgrades to stay aligned with advancements in the field of embeddings.</data>
      <data key="d5">innovation, system enhancement</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_13f0a88ca4ce9d7111d35d577b03200f</data>
    </edge>
    <edge source="SmolRAG" target="Local Embeddings">
      <data key="d4">The implementation of Local Embeddings is proposed to strengthen SmolRAG's independence from external API dependencies.</data>
      <data key="d5">independence, efficiency</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_13f0a88ca4ce9d7111d35d577b03200f</data>
    </edge>
    <edge source="SmolRAG" target="Multi-Modal Support">
      <data key="d4">SmolRAG's future directions include the pursuit of Multi-Modal Support to broaden the horizons of embedding capabilities.</data>
      <data key="d5">diversity, future-proof</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_13f0a88ca4ce9d7111d35d577b03200f</data>
    </edge>
    <edge source="SmolRAG" target="Hierarchical Embeddings">
      <data key="d4">The exploration of Hierarchical Embeddings is a strategic choice for SmolRAG to improve handling of long documents.</data>
      <data key="d5">document structure, improvement</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_13f0a88ca4ce9d7111d35d577b03200f</data>
    </edge>
    <edge source="SmolRAG" target="Fine-Tuning">
      <data key="d4">SmolRAG's consideration for Fine-Tuning embedding models indicates a focus on customization for specific use cases.</data>
      <data key="d5">customization, specificity</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_13f0a88ca4ce9d7111d35d577b03200f</data>
    </edge>
    <edge source="SmolRAG" target="rag">
      <data key="d4">SmolRAG exemplifies the capabilities of the rag interface, demonstrating its adaptability and potential for various applications.:|:rag is an instance of the SmolRAG API, used to access its functionality for document ingestion.:|:rag is an instance of the SmolRAG feature, utilizing its key-value store configurations for operation.:|:rag is an instance of the SmolRAG API, initialized to process documents and queries.</data>
      <data key="d5">implementation, instantiation:|:feature demonstration, adaptability:|:instance, initialization:|:instance, functionality</data>
      <data key="d6">43.0</data>
      <data key="d7">excerpt_id_98568b73e1554f3852d7cabeaa3a1878:|:excerpt_id_f8b124e0bd021d69415fab98214a7b6b:|:excerpt_id_51c03df854681a0be44a0cb38da8ceed:|:excerpt_id_1022857c40806a92372f49dc394cbcfe</data>
    </edge>
    <edge source="SmolRAG" target="Document Ingestion Process">
      <data key="d4">SmolRAG operates the Document Ingestion Process, integrating various methodologies to enhance document usability.</data>
      <data key="d5">document processing, integration</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_19a4021fa6c980fe5768130b704cc56e</data>
    </edge>
    <edge source="SmolRAG" target="Similarity Search">
      <data key="d4">SmolRAG includes the Similarity Search function that enhances information retrieval based on semantic meaning.</data>
      <data key="d5">information retrieval, semantic search</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_6feed1d0b430f2139ef9246b1e1758d3</data>
    </edge>
    <edge source="SmolRAG" target="high-quality embeddings">
      <data key="d4">SmolRAG utilizes high-quality embeddings to create vector representations that capture semantic meaning for retrieval purposes.</data>
      <data key="d5">functionality, data representation</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_3e377a1f38aab6a7301bb88392d388d4</data>
    </edge>
    <edge source="SmolRAG" target="similarity search mechanisms">
      <data key="d4">SmolRAG employs similarity search mechanisms to facilitate the retrieval of relevant information based on semantic meaning.</data>
      <data key="d5">retrieval efficiency, technology</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_3e377a1f38aab6a7301bb88392d388d4</data>
    </edge>
    <edge source="SmolRAG" target="Entity Extraction">
      <data key="d4">Entity Extraction is a critical function within SmolRAG that enables the creation of the Knowledge Graph by identifying entities from text.</data>
      <data key="d5">core functionality, data processing</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_59fb313f068a75f4e40be3bf7b095013</data>
    </edge>
    <edge source="SmolRAG" target="Flask Web Application">
      <data key="d4">SmolRAG operates as an API within a Flask web application, indicating its foundational role in web-based document querying.</data>
      <data key="d5">integration, web application</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_79e52f475952407e95cfdbc653290c6d</data>
    </edge>
    <edge source="SmolRAG" target="local_kg_query">
      <data key="d4">local_kg_query is a function available in the SmolRAG API, facilitating specific types of queries related to local knowledge graphs.</data>
      <data key="d5">functionality, integration</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_79e52f475952407e95cfdbc653290c6d</data>
    </edge>
    <edge source="SmolRAG" target="global_kg_query">
      <data key="d4">global_kg_query is another function of the SmolRAG API, allowing for broader knowledge retrieval beyond local databases.</data>
      <data key="d5">functionality, integration</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_79e52f475952407e95cfdbc653290c6d</data>
    </edge>
    <edge source="SmolRAG" target="hybrid_kg_query">
      <data key="d4">hybrid_kg_query enhances the capabilities of the SmolRAG API by merging local and global data queries for improved results.</data>
      <data key="d5">functionality, integration</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_79e52f475952407e95cfdbc653290c6d</data>
    </edge>
    <edge source="SmolRAG" target="mix_query">
      <data key="d4">mix_query is incorporated in the SmolRAG API, enabling users to query multiple knowledge graphs simultaneously for comprehensive insights.</data>
      <data key="d5">functionality, integration</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_79e52f475952407e95cfdbc653290c6d</data>
    </edge>
    <edge source="SmolRAG" target="payload">
      <data key="d4">SmolRAG API utilizes the payload to process and retrieve information based on the provided query."+</data>
      <data key="d5">data transmission</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_63cd91bc48a4a86dbc4244526ba83736</data>
    </edge>
    <edge source="SmolRAG" target="response">
      <data key="d4">The response is generated after querying the SmolRAG API, indicating the result of the requested operation."+</data>
      <data key="d5">output generation</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_63cd91bc48a4a86dbc4244526ba83736</data>
    </edge>
    <edge source="SmolRAG" target="Gunicorn">
      <data key="d4">Gunicorn assists in deploying the SmolRAG API on multiple workers for handling production requests effectively."+</data>
      <data key="d5">scalability</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_63cd91bc48a4a86dbc4244526ba83736</data>
    </edge>
    <edge source="SmolRAG" target="Docker">
      <data key="d4">Docker is recommended for containerizing the SmolRAG API to ensure consistent deployment across various environments."+</data>
      <data key="d5">deployment consistency</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_63cd91bc48a4a86dbc4244526ba83736</data>
    </edge>
    <edge source="SmolRAG" target="Horizontal Scaling">
      <data key="d4">Horizontal scaling can be applied to the SmolRAG API to manage high traffic by adding more server instances."+</data>
      <data key="d5">load management</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_63cd91bc48a4a86dbc4244526ba83736</data>
    </edge>
    <edge source="SmolRAG" target="Advanced Configuration Example">
      <data key="d4">SmolRAG is referenced in the context of applying the Advanced Configuration Example to customize processing.</data>
      <data key="d5">configuration use case, customization</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_6d692b7f7ce26d7c5b94249c8453447e</data>
    </edge>
    <edge source="SmolRAG" target="up_logger">
      <data key="d4">up_logger is a function utilized within the SmolRAG configuration for logging purposes, indicating its role in the system's operations.</data>
      <data key="d5">function inclusion, logging</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_81db384c7c323402180915d5a9c65d67</data>
    </edge>
    <edge source="SmolRAG" target="OpenAI's API">
      <data key="d4">SmolRAG relies on OpenAI's API to perform its core operations including embeddings and responses, demonstrating a foundational technology dependency.</data>
      <data key="d5">dependency, core functionality</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_81db384c7c323402180915d5a9c65d67</data>
    </edge>
    <edge source="SmolRAG" target="Optimization Strategies">
      <data key="d4">Optimization Strategies are employed in SmolRAG to enhance API usage efficiency and manage operational costs effectively.</data>
      <data key="d5">efficiency, cost management</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_81db384c7c323402180915d5a9c65d67</data>
    </edge>
    <edge source="SmolRAG" target="Adaptive Query Selection">
      <data key="d4">Adaptive Query Selection is a feature of SmolRAG designed to automate the selection of the most suitable query type for user inquiries.</data>
      <data key="d5">feature, automation</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_d2ba6034366fcca143d67219ee341a22</data>
    </edge>
    <edge source="SmolRAG" target="Personalized Query Processing">
      <data key="d4">Personalized Query Processing is a feature within SmolRAG that customizes query handling based on user data.</data>
      <data key="d5">feature, user personalization</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_d2ba6034366fcca143d67219ee341a22</data>
    </edge>
    <edge source="SmolRAG" target="Multi-Stage Querying">
      <data key="d4">Multi-Stage Querying is implemented in SmolRAG to improve result accuracy through iterative refinement of queries.</data>
      <data key="d5">feature, iterative refinement</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_d2ba6034366fcca143d67219ee341a22</data>
    </edge>
    <edge source="SmolRAG" target="Domain-Specific Optimizations">
      <data key="d4">Domain-Specific Optimizations are functionalities of SmolRAG that provide tailored query types for different content areas.</data>
      <data key="d5">feature, specialization</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_d2ba6034366fcca143d67219ee341a22</data>
    </edge>
    <edge source="SmolRAG" target="Interactive Querying">
      <data key="d4">Interactive Querying is a feature of SmolRAG that allows queries to be refined dynamically based on feedback from initial results.</data>
      <data key="d5">feature, dynamic response</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_d2ba6034366fcca143d67219ee341a22</data>
    </edge>
    <edge source="SmolRAG" target="Query Types">
      <data key="d4">SmolRAG utilizes different Query Types to enhance its functionality in providing responses to users based on their specific needs.</data>
      <data key="d5">functionality, adaptability</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_e67e24565dae8dec6e972c21f5e33ed4</data>
    </edge>
    <edge source="SmolRAG" target="parallel_query">
      <data key="d4">SmolRAG utilizes the parallel_query function to enhance performance when processing document queries, allowing for quick and efficient responses.</data>
      <data key="d5">performance enhancement, API functionality</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_6c06a295a7f56782823d65a71c55d286</data>
    </edge>
    <edge source="SmolRAG" target="Hardware Considerations">
      <data key="d4">Hardware Considerations outline the necessary physical resources that impact the performance of SmolRAG, highlighting its dependency on hardware efficiency.</data>
      <data key="d5">hardware dependency, performance factors</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_6c06a295a7f56782823d65a71c55d286</data>
    </edge>
    <edge source="SmolRAG" target="Cloud Provider Selection">
      <data key="d4">SmolRAG cloud deployment performance is influenced by the selection of the right cloud provider, affecting its optimized usage.</data>
      <data key="d5">performance optimization, cloud deployment</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_4b1d39bb3b412ccb5521449ed59095c6</data>
    </edge>
    <edge source="SmolRAG" target="Containerization">
      <data key="d4">Containerization is essential for deploying SmolRAG effectively, including managing resource limits and image sizes.</data>
      <data key="d5">resource management, application deployment</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_4b1d39bb3b412ccb5521449ed59095c6</data>
    </edge>
    <edge source="SmolRAG" target="data-volume">
      <data key="d4">SmolRAG utilizes data-volume as part of its resource management strategy for performance optimization.</data>
      <data key="d5">resource management, performance optimization</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_ab0c2359f35ddf542e46336b81a7e409</data>
    </edge>
    <edge source="SmolRAG" target="docs-volume">
      <data key="d4">SmolRAG relies on docs-volume for efficient document handling as part of its performance optimization process.</data>
      <data key="d5">resource management, document handling</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_ab0c2359f35ddf542e46336b81a7e409</data>
    </edge>
    <edge source="SmolRAG" target="SmolRag Initialization">
      <data key="d4">SmolRAG includes initialization parameters that modify its behavior, illustrating flexibility in configuration.</data>
      <data key="d5">customization, flexibility</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_35ac427df33971aafd001dedc2094d13</data>
    </edge>
    <edge source="SmolRAG" target="excerpt_size">
      <data key="d4">SmolRAG uses the excerpt_size variable to determine how large the document chunks should be, affecting how documents are processed.</data>
      <data key="d5">chunk size configuration, processing parameter</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_ce594558fb5aeae85f51870c652a415b</data>
    </edge>
    <edge source="SmolRAG" target="overlap">
      <data key="d4">The overlap variable is used within SmolRAG to maintain context continuity between chunks, enhancing the text processing experience.</data>
      <data key="d5">context preservation, processing parameter</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_ce594558fb5aeae85f51870c652a415b</data>
    </edge>
    <edge source="SmolRAG" target="Asyncio">
      <data key="d4">SmolRAG leverages Asyncio to enhance its processing capabilities, particularly for concurrent tasks and I/O management.</data>
      <data key="d5">feature-technology integration</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_7fedf9d4b30621d6c79f65db2d09ce1a</data>
    </edge>
    <edge source="SmolRAG" target="Concurrent Processing">
      <data key="d4">SmolRAG utilizes Concurrent Processing to allow multiple documents to be processed simultaneously, enhancing ingestion speed.</data>
      <data key="d5">speed enhancement, efficiency</data>
      <data key="d6">20.0</data>
      <data key="d7">excerpt_id_7fedf9d4b30621d6c79f65db2d09ce1a</data>
    </edge>
    <edge source="SmolRAG" target="Parallel API Calls">
      <data key="d4">Parallel API Calls are a key feature of SmolRAG, enabling multiple tasks to run concurrently, thus optimizing performance.</data>
      <data key="d5">performance optimization, parallelism</data>
      <data key="d6">20.0</data>
      <data key="d7">excerpt_id_7fedf9d4b30621d6c79f65db2d09ce1a</data>
    </edge>
    <edge source="SmolRAG" target="Change Detection">
      <data key="d4">Change Detection is a feature of SmolRAG that ensures documents are always up-to-date by tracking and processing changes.</data>
      <data key="d5">data integrity, update management</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_7fedf9d4b30621d6c79f65db2d09ce1a</data>
    </edge>
    <edge source="SmolRAG" target="remove_document_by_id">
      <data key="d4">SmolRAG employs the remove_document_by_id function to handle documents that need to be deleted based on user input.</data>
      <data key="d5">document management, API functionality</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_3de9971b782eac586dc03f5864ad60f3</data>
    </edge>
    <edge source="SmolRAG" target="Document Ingestion Pipeline">
      <data key="d4">The SmolRAG interface incorporates the Document Ingestion Pipeline to facilitate the reading and processing of documents.</data>
      <data key="d5">system functionality, integration</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_d4a7e13bce25a456a78a4eef57373bf4</data>
    </edge>
    <edge source="SmolRAG" target="Query Processing Pipeline">
      <data key="d4">The SmolRAG interface also integrates the Query Processing Pipeline for handling and responding to user queries.</data>
      <data key="d5">system functionality, integration</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_d4a7e13bce25a456a78a4eef57373bf4</data>
    </edge>
    <edge source="SmolRAG" target="asyncio">
      <data key="d4">SmolRAG leverages asyncio to implement parallel processing, thereby improving performance for document handling.</data>
      <data key="d5">performance, concurrency</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_9bec674c65e1e71d106b31cafb5387bf</data>
    </edge>
    <edge source="SmolRAG" target="advanced configuration">
      <data key="d4">Advanced configuration allows users to customize and enhance the capabilities of the SmolRAG API.</data>
      <data key="d5">customization, enhancement</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_9bec674c65e1e71d106b31cafb5387bf</data>
    </edge>
    <edge source="SmolRAG" target="custom components">
      <data key="d4">SmolRAG is designed to utilize custom components to enhance its flexibility and adaptability for various configurations.</data>
      <data key="d5">flexibility, adaptability</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_31dbc989f689c5be27e9ae8b6d0588c4</data>
    </edge>
    <edge source="SmolRAG" target="existing systems">
      <data key="d4">SmolRAG can be integrated with existing systems, indicating a relationship of compatibility and enhancement.</data>
      <data key="d5">integration, compatibility</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_31dbc989f689c5be27e9ae8b6d0588c4</data>
    </edge>
    <edge source="SmolRAG" target="Core Principles">
      <data key="d4">Core Principles guide SmolRAG's design, ensuring simplicity, efficiency, and flexibility.</data>
      <data key="d5">design guidance, principles</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_87030b6b3fa79706b6853abbb475c551</data>
    </edge>
    <edge source="SmolRAG" target="Contextual Understanding">
      <data key="d4">Contextual understanding is a feature within SmolRAG that enhances the accuracy of information retrieval.</data>
      <data key="d5">feature enhancement, accuracy</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_87030b6b3fa79706b6853abbb475c551</data>
    </edge>
    <edge source="SmolRAG" target="Flexible Querying">
      <data key="d4">Flexible querying allows SmolRAG to adapt to different question types, serving diverse user demands.</data>
      <data key="d5">adaptability, user needs</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_87030b6b3fa79706b6853abbb475c551</data>
    </edge>
    <edge source="SmolRAG" target="High-Level Architecture">
      <data key="d4">High-Level Architecture outlines the components of SmolRAG that collaboratively process documents and answer queries.</data>
      <data key="d5">component interaction, processing</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_87030b6b3fa79706b6853abbb475c551</data>
    </edge>
    <edge source="Vector Embeddings" target="OpenAI's embedding models">
      <data key="d4">OpenAI's embedding models are responsible for generating vector embeddings from text, thus directly impacting their quality and performance.</data>
      <data key="d5">text processing, model utilization</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_05e1658cae5a313a0bc5c4383179fbf5</data>
    </edge>
    <edge source="Vector Embeddings" target="NanoVectorStore">
      <data key="d4">Vector embeddings generated are stored in the NanoVectorStore for efficient retrieval during search operations.</data>
      <data key="d5">storage, retrieval efficiency</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_05e1658cae5a313a0bc5c4383179fbf5</data>
    </edge>
    <edge source="Vector Embeddings" target="Metadata">
      <data key="d4">Metadata provides context and additional information for each embedding, improving the search accuracy and management of embeddings.</data>
      <data key="d5">contextual information, search enhancement</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_05e1658cae5a313a0bc5c4383179fbf5</data>
    </edge>
    <edge source="Core Principles" target="High-Level Architecture">
      <data key="d4">Core Principles guide the design of High-Level Architecture, ensuring all components align with the intended goals of SmolRAG.</data>
      <data key="d5">design philosophy, structural alignment</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_cb26db70dcd624e7b0e4b4273956b799</data>
    </edge>
    <edge source="Similarity Search" target="High-Dimensional Space">
      <data key="d4">The Similarity Search function operates within High-Dimensional Space by representing queries and documents as vectors.</data>
      <data key="d5">vector representation, search mechanism</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_6feed1d0b430f2139ef9246b1e1758d3</data>
    </edge>
    <edge source="Similarity Search" target="Retrieval Mechanisms">
      <data key="d4">Retrieval Mechanisms include the Similarity Search function, allowing for more accurate and relevant search results.</data>
      <data key="d5">search features, accuracy</data>
      <data key="d6">14.0</data>
      <data key="d7">excerpt_id_6feed1d0b430f2139ef9246b1e1758d3</data>
    </edge>
    <edge source="Embedding Models" target="text-embedding-3-small">
      <data key="d4">text-embedding-3-small is one of the models under the category of Embedding Models, affecting the quality of retrieval results.</data>
      <data key="d5">model classification, performance</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_c86849cd9a6f6eb952b7842d703f3170</data>
    </edge>
    <edge source="SmolRAG API" target="Endpoint&quot;/query">
      <data key="d4">The SmolRAG API provides access to the `/query` endpoint which is used for processing queries through the API.</data>
      <data key="d5">API functionality, endpoint access</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_e9a4b3b83fa7390d9e03b26469553d2e</data>
    </edge>
    <edge source="SmolRAG API" target="Query Types">
      <data key="d4">The SmolRAG API utilizes various Query Types to enhance the querying process, helping users customize their queries.</data>
      <data key="d5">configuration, customization</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_e9a4b3b83fa7390d9e03b26469553d2e</data>
    </edge>
    <edge source="SmolRAG API" target="Error Handling">
      <data key="d4">Error Handling is a feature of the SmolRAG API that ensures issues during query processing are effectively managed.</data>
      <data key="d5">feature, reliability</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_e9a4b3b83fa7390d9e03b26469553d2e</data>
    </edge>
    <edge source="SmolRAG API" target="query_endpoint_v2">
      <data key="d4">The query_endpoint_v2 function is part of the SmolRAG API, serving as an endpoint for executing queries.</data>
      <data key="d5">endpoint, functionality</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_453681d430472ffcca54f90331e78fee</data>
    </edge>
    <edge source="SmolRAG API" target="Swagger UI">
      <data key="d4">Swagger UI provides documentation for the SmolRAG API, enhancing user understanding and interaction with its endpoints.</data>
      <data key="d5">documentation, user interface</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_453681d430472ffcca54f90331e78fee</data>
    </edge>
    <edge source="SmolRAG API" target="ReDoc">
      <data key="d4">ReDoc also serves as documentation for the SmolRAG API, complementing the information provided by Swagger UI.</data>
      <data key="d5">documentation, user interface</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_453681d430472ffcca54f90331e78fee</data>
    </edge>
    <edge source="SmolRAG API" target="Document Management">
      <data key="d4">The SmolRAG API provides the Document Management feature which allows users to perform document-related operations through its endpoints.</data>
      <data key="d5">functionality, document operations</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_1e99d3a705e109f5103d3d1958b6a8db</data>
    </edge>
    <edge source="SmolRAG API" target="System Information">
      <data key="d4">The SmolRAG API includes the System Information feature that enhances user's understanding of the system through retrieval of relevant data.</data>
      <data key="d5">functionality, system data</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_1e99d3a705e109f5103d3d1958b6a8db</data>
    </edge>
    <edge source="SmolRAG API" target="Asynchronous Processing">
      <data key="d4">The SmolRAG API is designed to support Asynchronous Processing, allowing efficient handling of long-running tasks without blocking requests.</data>
      <data key="d5">functionality, performance enhancement</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_1e99d3a705e109f5103d3d1958b6a8db</data>
    </edge>
    <edge source="SmolRAG API" target="Webhooks">
      <data key="d4">The SmolRAG API incorporates Webhooks as a feature to notify external systems, facilitating communication and integrations.</data>
      <data key="d5">functionality, external communication</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_1e99d3a705e109f5103d3d1958b6a8db</data>
    </edge>
    <edge source="SmolRAG API" target="webhook_query">
      <data key="d4">The SmolRAG API includes the webhook_query function to handle incoming query requests and process them accordingly.</data>
      <data key="d5">API functionality, request handling</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_e65b14cb533eda0a73c1a54d86336320</data>
    </edge>
    <edge source="SmolRAG API" target="document querying">
      <data key="d4">The SmolRAG API features document querying as a core capability, allowing users to interact with documents effectively.</data>
      <data key="d5">API features, user interaction</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_e65b14cb533eda0a73c1a54d86336320</data>
    </edge>
    <edge source="SmolRAG API" target="RESTful principles">
      <data key="d4">The SmolRAG API is built upon RESTful principles, ensuring an organized approach to API design and usage.</data>
      <data key="d5">design principles, API architecture</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_e65b14cb533eda0a73c1a54d86336320</data>
    </edge>
    <edge source="SmolRAG API" target="FastAPI">
      <data key="d4">The SmolRAG API leverages FastAPI to enhance its performance and provide a user-friendly interface for developers.</data>
      <data key="d5">technology integration, performance</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_e65b14cb533eda0a73c1a54d86336320</data>
    </edge>
    <edge source="POST Method" target="Endpoint&quot;/query">
      <data key="d4">The POST Method is required to send requests to the `/query` endpoint for processing queries.</data>
      <data key="d5">request method, interaction</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_e9a4b3b83fa7390d9e03b26469553d2e</data>
    </edge>
    <edge source="Request Format" target="Response Format">
      <data key="d4">The Request Format and Response Format are related as the request structure informs the type of response that will be generated by the API.</data>
      <data key="d5">request-response relationship</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_e9a4b3b83fa7390d9e03b26469553d2e</data>
    </edge>
    <edge source="Error Handling" target="Continuous Improvement">
      <data key="d4">Error Handling ensures that Continuous Improvement processes do not disrupt system operations, supporting ongoing enhancements.</data>
      <data key="d5">reliability, system robustness</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_46387a7852ed874c1b3ab073c392b95b</data>
    </edge>
    <edge source="Document Ingestion" target="SmolRAG Document Ingestion Process">
      <data key="d4">The SmolRAG Document Ingestion Process includes the function of Document Ingestion, which is pivotal for transforming documents into analyzable formats.</data>
      <data key="d5">feature-function relationship</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_dc65135b9ad9bfac43cc3ae95a7b4158</data>
    </edge>
    <edge source="Document Ingestion" target="Raw Documents">
      <data key="d4">Document Ingestion operates on Raw Documents to facilitate their transformation and analysis within the SmolRAG system.</data>
      <data key="d5">function-variable relationship</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_dc65135b9ad9bfac43cc3ae95a7b4158</data>
    </edge>
    <edge source="Document Ingestion" target="Supported Formats">
      <data key="d4">Supported Formats are the specific types of files that the Document Ingestion function can process during its operation.</data>
      <data key="d5">variable-function relationship</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_dc65135b9ad9bfac43cc3ae95a7b4158</data>
    </edge>
    <edge source="Environment Variables" target="API Key">
      <data key="d4">Environment Variables are used to store the API Key securely, allowing it to be accessed by the application without hardcoding sensitive information.</data>
      <data key="d5">security, configuration</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_30d921e9ed8b86da0f8b9366dfbaa2a7</data>
    </edge>
    <edge source="SmolRag Class" target="Basic Setup">
      <data key="d4">Basic Setup involves using the SmolRag class to initialize the SmolRAG environment and prepare it for use.</data>
      <data key="d5">initialization, setup</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_9a13bcbb5440ec94b603d6b198fcf7cc</data>
    </edge>
    <edge source="SmolRag Class" target="Chunking Strategy">
      <data key="d4">The Chunking Strategy is an optional customization available when initializing a SmolRag instance, enhancing its functionality.</data>
      <data key="d5">customization, functionality</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_9a13bcbb5440ec94b603d6b198fcf7cc</data>
    </edge>
    <edge source="Chunking Strategy" target="Document Ingestion Performance">
      <data key="d4">Chunking Strategy influences Document Ingestion Performance by determining how documents are divided for processing.</data>
      <data key="d5">performance optimization, strategy impact</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_eb65f41dba3401c3f9ecff6a2b835fca</data>
    </edge>
    <edge source="Document Ingestion Example" target="INPUT_DOCS_DIR">
      <data key="d4">Document Ingestion Example provides a scenario where documents are imported from the INPUT_DOCS_DIR to utilize SmolRAG's capabilities.</data>
      <data key="d5">file management, directory usage</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_9a13bcbb5440ec94b603d6b198fcf7cc</data>
    </edge>
    <edge source="INPUT_DOCS_DIR" target="definitions.py">
      <data key="d4">The definitions.py file defines INPUT_DOCS_DIR as a key constant important for file handling in the system.</data>
      <data key="d5">file structure, configuration</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_0c67144102b1d81212b12e6ef61ad148</data>
    </edge>
    <edge source="INPUT_DOCS_DIR" target="import_documents">
      <data key="d4">INPUT_DOCS_DIR is the target directory from which the import_documents function imports documents for processing.</data>
      <data key="d5">directory, document ingestion</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_98568b73e1554f3852d7cabeaa3a1878</data>
    </edge>
    <edge source="Excerpt Embeddings" target="Cosine Similarity">
      <data key="d4">Excerpt Embeddings are the subject of analysis in the application of Cosine Similarity for comparison with Query Embeddings.</data>
      <data key="d5">vector analysis, similarity measurement</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_ad053b14f30e2ca2cbde4877068102ef</data>
    </edge>
    <edge source="Embedding Generation Process" target="Excerpt Preparation">
      <data key="d4">Excerpt Preparation is a step within the Embedding Generation Process focused on preparing documents for embedding.</data>
      <data key="d5">process, preparation step</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_dc80c8904c8ce4e245e92a5bec8771ed</data>
    </edge>
    <edge source="Combined Content" target="API Call">
      <data key="d4">Combined Content serves as the input in the API Call to generate vector representations through the embedding process.</data>
      <data key="d5">input-output relationship, embedding process</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_dc80c8904c8ce4e245e92a5bec8771ed</data>
    </edge>
    <edge source="Combined Content" target="Vector Embedding Generation">
      <data key="d4">Vector Embedding Generation uses Combined Content, which consists of both the excerpt and its summary for creating embeddings.</data>
      <data key="d5">embedding, data representation</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_40ff8100b340e2bffbf37fe882a8ee48</data>
    </edge>
    <edge source="API Call" target="Vector Creation">
      <data key="d4">The API Call results in Vector Creation, generating the vector representation from the provided content.</data>
      <data key="d5">process flow, vector generation</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_dc80c8904c8ce4e245e92a5bec8771ed</data>
    </edge>
    <edge source="Vector Creation" target="NanoVectorStore">
      <data key="d4">Vector Creation outputs a vector that is subsequently stored in the NanoVectorStore for semantic searching.</data>
      <data key="d5">output storage, data management</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_dc80c8904c8ce4e245e92a5bec8771ed</data>
    </edge>
    <edge source="NanoVectorStore" target="Dimensionality">
      <data key="d4">The efficiency of Vector Storage and Indexing in NanoVectorStore is influenced by the Dimensionality of the embeddings it manages.</data>
      <data key="d5">performance, efficiency</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_c86849cd9a6f6eb952b7842d703f3170</data>
    </edge>
    <edge source="NanoVectorStore" target="upsert">
      <data key="d4">NanoVectorStore implements the upsert method to manage embeddings efficiently.</data>
      <data key="d5">data management, method functionality</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_5421cc029bd40962f8f839ecf4a8d136</data>
    </edge>
    <edge source="NanoVectorStore" target="query">
      <data key="d4">NanoVectorStore provides the query method to retrieve similar vectors based on user queries.</data>
      <data key="d5">retrieval functionality, data interaction</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_5421cc029bd40962f8f839ecf4a8d136</data>
    </edge>
    <edge source="NanoVectorStore" target="delete">
      <data key="d4">NanoVectorStore includes the delete method to remove items from the database as needed.</data>
      <data key="d5">data management, item removal</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_5421cc029bd40962f8f839ecf4a8d136</data>
    </edge>
    <edge source="NanoVectorStore" target="save">
      <data key="d4">NanoVectorStore has a save method to persist data to disk, ensuring data integrity.</data>
      <data key="d5">data management, persistence</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_5421cc029bd40962f8f839ecf4a8d136</data>
    </edge>
    <edge source="NanoVectorStore" target="Efficient Storage">
      <data key="d4">Efficient Storage is a key feature of the NanoVectorStore that allows for optimized retrieval.</data>
      <data key="d5">feature, performance</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_dcec4d38f0e3c0cff01b04e3b7bdf6ce</data>
    </edge>
    <edge source="NanoVectorStore" target="CRUD Operations">
      <data key="d4">CRUD Operations are essential functionalities provided by the NanoVectorStore, allowing users to manage vectors effectively.</data>
      <data key="d5">management, capability</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_dcec4d38f0e3c0cff01b04e3b7bdf6ce</data>
    </edge>
    <edge source="NanoVectorStore" target="embeddings_db">
      <data key="d4">embeddings_db is an instance of `NanoVectorStore`, specifically utilized for managing embeddings in SmolRAG.</data>
      <data key="d5">configuration usage, instantiation</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_517fe6133908102185036fafd1625255</data>
    </edge>
    <edge source="NanoVectorStore" target="entities_db">
      <data key="d4">entities_db is also an instance of `NanoVectorStore`, highlighting its purpose for handling entity data within the framework.</data>
      <data key="d5">configuration usage, instantiation</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_517fe6133908102185036fafd1625255</data>
    </edge>
    <edge source="NanoVectorStore" target="relationships_db">
      <data key="d4">relationships_db is an instance of `NanoVectorStore` responsible for storing relationships, complementing the roles of embeddings_db and entities_db.</data>
      <data key="d5">configuration usage, instantiation</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_517fe6133908102185036fafd1625255</data>
    </edge>
    <edge source="NanoVectorStore" target="SmolRag">
      <data key="d4">SmolRag employs NanoVectorStore for storing embedding representations, showing its role in the overall architecture.:|:SmolRag utilizes NanoVectorStore for efficient management of vector embeddings, enhancing data retrieval operations.:|:SmolRag utilizes NanoVectorStore to handle the configuration for embedding storage and retrieval.</data>
      <data key="d5">data storage, integration:|:data management, efficiency:|:configuration, storage management</data>
      <data key="d6">24.0</data>
      <data key="d7">excerpt_id_2e0613b4c1b81b865a2002b59fe88b17:|:excerpt_id_8c4cef197115ed13a173ace5189be819:|:excerpt_id_60a78091c7c8d6dae9b144963e93551a</data>
    </edge>
    <edge source="NanoVectorStore" target="Metadata">
      <data key="d4">NanoVectorStore associates its storage capabilities with Metadata to enhance the efficiency of retrieval processes.</data>
      <data key="d5">storage, efficiency</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_40ff8100b340e2bffbf37fe882a8ee48</data>
    </edge>
    <edge source="NanoVectorStore" target="vector_store.py">
      <data key="d4">The NanoVectorStore class is implemented in vector_store.py, representing its functionality and location."+</data>
      <data key="d5">class implementation</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_0e491c74d7a88194d22edb5dcf034178</data>
    </edge>
    <edge source="NanoVectorStore" target="upsert() method">
      <data key="d4">The upsert() method is a key function of the NanoVectorStore class, directly related to its core functionality."+</data>
      <data key="d5">functionality</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_0e491c74d7a88194d22edb5dcf034178</data>
    </edge>
    <edge source="OPENAI_API_KEY" target="Environment Variable">
      <data key="d4">OPENAI_API_KEY is an instance of an Environment Variable that is specifically used to store an API key.</data>
      <data key="d5">implementation, storage</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_3d02a7878513f8025940bb3e93ae517f</data>
    </edge>
    <edge source="OPENAI_API_KEY" target=".env">
      <data key="d4">OPENAI_API_KEY is defined within the .env file for environmental configuration and management of sensitive data.</data>
      <data key="d5">configuration, file storage</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_3d02a7878513f8025940bb3e93ae517f</data>
    </edge>
    <edge source="OPENAI_API_KEY" target="API Key">
      <data key="d4">The API Key is directly related to OPENAI_API_KEY as it represents the actual key value necessary to access OpenAI services.</data>
      <data key="d5">authentication, access</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_3d02a7878513f8025940bb3e93ae517f</data>
    </edge>
    <edge source="OPENAI_API_KEY" target="Document Ingestion Issues">
      <data key="d4">OPENAI_API_KEY is essential in ensuring secure access to the APIs that manage document ingestion and processing.</data>
      <data key="d5">API access, security</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_81631ae5feaa160d24c7aa3331760a64</data>
    </edge>
    <edge source="OPENAI_API_KEY" target="Kubernetes Resource Configuration">
      <data key="d4">The OPENAI_API_KEY is referenced in the Kubernetes setup, emphasizing its role in authenticating API requests for SmolRAG.</data>
      <data key="d5">authentication, environment setups</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_4b1d39bb3b412ccb5521449ed59095c6</data>
    </edge>
    <edge source="COMPLETION_MODEL" target="OpenAiLlm">
      <data key="d4">The OpenAiLlm interface uses the COMPLETION_MODEL variable to specify the model for generating text completions.</data>
      <data key="d5">model specification, functionality</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_ebf9009be245dbd0ab60372e5369f496</data>
    </edge>
    <edge source="COMPLETION_MODEL" target="definitions.py">
      <data key="d4">The definitions.py file specifies COMPLETION_MODEL as the default OpenAI model for completions utilized in the system.</data>
      <data key="d5">file structure, configuration</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_0c67144102b1d81212b12e6ef61ad148</data>
    </edge>
    <edge source="EMBEDDING_MODEL" target="OpenAiLlm">
      <data key="d4">The OpenAiLlm interface utilizes the EMBEDDING_MODEL variable to define the model used for generating embeddings.</data>
      <data key="d5">model specification, functionality</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_ebf9009be245dbd0ab60372e5369f496</data>
    </edge>
    <edge source="EMBEDDING_MODEL" target="definitions.py">
      <data key="d4">The definitions.py file contains EMBEDDING_MODEL, which is critical for embedding operations in the system.</data>
      <data key="d5">file structure, configuration</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_0c67144102b1d81212b12e6ef61ad148</data>
    </edge>
    <edge source="Directory Structure Configuration" target="app/definitions.py">
      <data key="d4">The file app/definitions.py contains the definitions for the directory structure which can be customized as per Directory Structure Configuration requirements.</data>
      <data key="d5">file organization, customization</data>
      <data key="d6">14.0</data>
      <data key="d7">excerpt_id_4df59d4084f8e159d0d92fc0fd19ada4</data>
    </edge>
    <edge source="import_documents" target="app/input_docs/">
      <data key="d4">The import_documents function processes files located in the app/input_docs/ directory, highlighting its role in document ingestion.</data>
      <data key="d5">directory processing, file management</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_f2b7fbadfa83b8b0ea536a4b85fef7d6</data>
    </edge>
    <edge source="import_documents" target="SmolRag class">
      <data key="d4">The SmolRag class includes the import_documents function to manage the importation and updating of documents in its system.:|:The SmolRag class initializes functionalities like import_documents to facilitate document management within the API.</data>
      <data key="d5">document management, functionality:|:initialization, API functionality</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_9e30dc3a8159dc93859b8664cf4db134:|:excerpt_id_3de9971b782eac586dc03f5864ad60f3</data>
    </edge>
    <edge source="import_documents" target="SmolRag">
      <data key="d4">import_documents is invoked to load necessary documents into SmolRag, ensuring all data is ready for querying.:|:The import_documents function is a key part of setting up the SmolRag API, allowing it to function with required data.:|:SmolRag utilizes the import_documents function to load essential documents for its operation.</data>
      <data key="d5">functionality, configuration:|:setup, functionality:|:setup, data readiness</data>
      <data key="d6">23.0</data>
      <data key="d7">excerpt_id_7026c9111f1e878a76710759253c04ae:|:excerpt_id_adb7498f6f95f3de6fde939c658d11cf:|:excerpt_id_a73778302286b849ae1d8bdf13a41987</data>
    </edge>
    <edge source="import_documents" target="queries">
      <data key="d4">The import_documents function is essential as it ensures that documents are available for the queries to interact with.</data>
      <data key="d5">dependency, data availability</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_79e52f475952407e95cfdbc653290c6d</data>
    </edge>
    <edge source="import_documents" target="rag">
      <data key="d4">The import_documents function is a component of the rag API that enables importing documents for processing.:|:rag utilizes the import_documents function to load the documents into the system for processing.</data>
      <data key="d5">api functionality, document management:|:function call, document processing</data>
      <data key="d6">25.0</data>
      <data key="d7">excerpt_id_8efc423402a060df074b1830e38ed77b:|:excerpt_id_98568b73e1554f3852d7cabeaa3a1878</data>
    </edge>
    <edge source="import_documents" target="parallel processing">
      <data key="d4">The function import_documents is integral to enabling parallel processing within the SmolRAG framework.</data>
      <data key="d5">functionality, efficiency</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_9bec674c65e1e71d106b31cafb5387bf</data>
    </edge>
    <edge source="Memory Usage" target="check_system_resources">
      <data key="d4">check_system_resources tracks Memory Usage to ensure there is adequate memory for running processes.</data>
      <data key="d5">performance monitoring, resource allocation</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_7026c9111f1e878a76710759253c04ae</data>
    </edge>
    <edge source="Disk Usage" target="check_system_resources">
      <data key="d4">check_system_resources monitors Disk Usage to prevent potential issues related to insufficient disk space.</data>
      <data key="d5">performance monitoring, capacity management</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_7026c9111f1e878a76710759253c04ae</data>
    </edge>
    <edge source="CPU Usage" target="check_system_resources">
      <data key="d4">check_system_resources reports on the CPU Usage, which is vital for maintaining efficient system operation.</data>
      <data key="d5">performance monitoring, efficiency</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_7026c9111f1e878a76710759253c04ae</data>
    </edge>
    <edge source="API Calls" target="Monitoring Metrics">
      <data key="d4">API Calls metrics provide insights into the performance related to API requests.".</data>
      <data key="d5">performance metrics, API management</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_a4f75c2d6d663c161d853c1243a60af5</data>
    </edge>
    <edge source="Retrieval Recall" target="Response Quality">
      <data key="d4">Retrieval Recall directly impacts Response Quality since retrieving relevant excerpts is essential for producing accurate responses.</data>
      <data key="d5">performance metrics, dependencies</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_eb65f41dba3401c3f9ecff6a2b835fca</data>
    </edge>
    <edge source="Knowledge Graph" target="Entities">
      <data key="d4">The Knowledge Graph is composed of Entities that represent distinct concepts extracted from documents.</data>
      <data key="d5">component structure, concept extraction</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_9e82c97bd0829ec40084f1a45d364353</data>
    </edge>
    <edge source="Knowledge Graph" target="Relationships">
      <data key="d4">The Relationships within the Knowledge Graph define the connections between Entities, enhancing the representation of knowledge.</data>
      <data key="d5">connections, knowledge representation</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_9e82c97bd0829ec40084f1a45d364353</data>
    </edge>
    <edge source="Knowledge Graph" target="Document Ingestion Process">
      <data key="d4">The Document Ingestion Process is responsible for building the Knowledge Graph by extracting relevant information from documents.</data>
      <data key="d5">knowledge construction, information extraction</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_9e82c97bd0829ec40084f1a45d364353</data>
    </edge>
    <edge source="Knowledge Graph" target="Document Processor">
      <data key="d4">The Knowledge Graph stores entities and relationships that are extracted from the documents processed by the Document Processor.:|:Knowledge Graph stores the entities and relationships that result from the processing done by Document Processor.</data>
      <data key="d5">data storage, extraction:|:data storage, processing result</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_39a1d6ebedcdf64866e51dc2d7baf5dc:|:excerpt_id_5164d226bc36d8232fafc2660b1bfd87</data>
    </edge>
    <edge source="Knowledge Graph" target="Query Processor">
      <data key="d4">The Query Processor retrieves relevant information from the Knowledge Graph based on user queries.</data>
      <data key="d5">information retrieval, querying</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_5164d226bc36d8232fafc2660b1bfd87</data>
    </edge>
    <edge source="Knowledge Graph" target="User Feedback Integration">
      <data key="d4">User Feedback Integration is directly related to the enhancement of the Knowledge Graph's performance and its ability to evolve over time.</data>
      <data key="d5">improvement process, user engagement</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_59fb313f068a75f4e40be3bf7b095013</data>
    </edge>
    <edge source="Knowledge Graph" target="Graph Algorithms">
      <data key="d4">Graph Algorithms are utilized within the Knowledge Graph to analyze the relationships between entities and improve analysis capabilities.</data>
      <data key="d5">analysis techniques, relationship insights</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_59fb313f068a75f4e40be3bf7b095013</data>
    </edge>
    <edge source="Knowledge Graph" target="Temporal Information">
      <data key="d4">Temporal Information enhances the Knowledge Graph by allowing it to incorporate time-related data into the structured representation.</data>
      <data key="d5">data enhancement, temporal modeling</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_59fb313f068a75f4e40be3bf7b095013</data>
    </edge>
    <edge source="Knowledge Graph" target="Semantic Search">
      <data key="d4">The Knowledge Graph supports Semantic Search by providing a structured understanding of document entities and relationships.</data>
      <data key="d5">information retrieval, contextual understanding</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_40ff8100b340e2bffbf37fe882a8ee48</data>
    </edge>
    <edge source="Entities" target="Entity Properties">
      <data key="d4">Each Entity has specific Entity Properties that define their characteristics and how they are referenced in the system.</data>
      <data key="d5">attributes, characteristics</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_9e82c97bd0829ec40084f1a45d364353</data>
    </edge>
    <edge source="Document Ingestion Process" target="Entity Extraction">
      <data key="d4">Entity Extraction is a step within the Document Ingestion Process, focusing on identifying key entities from text."+</data>
      <data key="d5">process steps, analysis</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_2f91a07d0891228b7332afeffe8b7a42</data>
    </edge>
    <edge source="Document Ingestion Process" target="Relationship Extraction">
      <data key="d4">Relationship Extraction directly follows Entity Extraction in the Document Ingestion Process, identifying how entities relate."+</data>
      <data key="d5">process steps, analysis</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_2f91a07d0891228b7332afeffe8b7a42</data>
    </edge>
    <edge source="Document Ingestion Process" target="Performance Metrics">
      <data key="d4">Performance Metrics are tracked as part of the Document Ingestion Process to assess its efficiency and resource usage.</data>
      <data key="d5">monitoring, efficiency</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_19a4021fa6c980fe5768130b704cc56e</data>
    </edge>
    <edge source="Document Ingestion Process" target="Warning System">
      <data key="d4">Warning System is implemented within the Document Ingestion Process to identify potential issues during document handling.</data>
      <data key="d5">error handling, reliability</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_19a4021fa6c980fe5768130b704cc56e</data>
    </edge>
    <edge source="Document Ingestion Process" target="Change Detection Mechanism">
      <data key="d4">Change Detection Mechanism is a crucial part of the Document Ingestion Process that ensures information remains up-to-date.</data>
      <data key="d5">information accuracy, maintenance</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_19a4021fa6c980fe5768130b704cc56e</data>
    </edge>
    <edge source="Document Ingestion Process" target="Modular Design">
      <data key="d4">Modular Design provides flexibility and adaptability to the Document Ingestion Process, allowing for customizations according to user needs.</data>
      <data key="d5">flexibility, customization</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_19a4021fa6c980fe5768130b704cc56e</data>
    </edge>
    <edge source="smol_rag.py" target="chunking.py">
      <data key="d4">The document chunking strategies in chunking.py are utilized by the SmolRag class for processing input documents.</data>
      <data key="d5">document processing, modular design</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_f1fae642defef59936a03b705fb37221</data>
    </edge>
    <edge source="smol_rag.py" target="openai_llm.py">
      <data key="d4">The `SmolRag` class utilizes the interface defined in openai_llm.py to communicate with OpenAI's API.</data>
      <data key="d5">API interaction, system integration</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_f1fae642defef59936a03b705fb37221</data>
    </edge>
    <edge source="smol_rag.py" target="vector_store.py">
      <data key="d4">The `SmolRag` class interacts with the vector database implemented in vector_store.py for managing document embeddings.</data>
      <data key="d5">data management, search functionality</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_f1fae642defef59936a03b705fb37221</data>
    </edge>
    <edge source="smol_rag.py" target="graph_store.py">
      <data key="d4">The knowledge graph functionality provided by graph_store.py is integrated within the `SmolRag` class for structured data representation.</data>
      <data key="d5">data structure, knowledge representation</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_f1fae642defef59936a03b705fb37221</data>
    </edge>
    <edge source="smol_rag.py" target="kv_store.py">
      <data key="d4">The key-value pairs managed by kv_store.py are used by the `SmolRag` class for efficient data handling.</data>
      <data key="d5">data handling, efficiency</data>
      <data key="d6">14.0</data>
      <data key="d7">excerpt_id_f1fae642defef59936a03b705fb37221</data>
    </edge>
    <edge source="smol_rag.py" target="prompts.py">
      <data key="d4">The prompts defined in prompts.py are used by `SmolRag` during various operational scenarios.</data>
      <data key="d5">operations, system prompts</data>
      <data key="d6">12.0</data>
      <data key="d7">excerpt_id_f1fae642defef59936a03b705fb37221</data>
    </edge>
    <edge source="smol_rag.py" target="utilities.py">
      <data key="d4">The utility functions from utilities.py are called by the SmolRag class to perform common operations.</data>
      <data key="d5">support functions, common operations</data>
      <data key="d6">12.0</data>
      <data key="d7">excerpt_id_f1fae642defef59936a03b705fb37221</data>
    </edge>
    <edge source="smol_rag.py" target="logger.py">
      <data key="d4">The logging configuration in logger.py helps monitor the activities of the `SmolRag` class.</data>
      <data key="d5">monitoring, system logging</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_f1fae642defef59936a03b705fb37221</data>
    </edge>
    <edge source="smol_rag.py" target="definitions.py">
      <data key="d4">The constants defined in definitions.py are referenced throughout the `SmolRag` class for proper functioning.</data>
      <data key="d5">constants, operational reference</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_f1fae642defef59936a03b705fb37221</data>
    </edge>
    <edge source="smol_rag.py" target="&quot;evaluation/">
      <data key="d4">The evaluation framework in evaluation/ assesses the performance of the `SmolRag` implementation.</data>
      <data key="d5">performance assessment, evaluation framework</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_f1fae642defef59936a03b705fb37221</data>
    </edge>
    <edge source="chunking.py" target="naive_overlap_excerpts">
      <data key="d4">chunking.py includes the naive_overlap_excerpts function as a strategy for document chunking.:|:chunking.py includes the naive_overlap_excerpts() function as part of its document chunking strategies, linking it to chunking functionality.</data>
      <data key="d5">module implementation, functionality:|:module functionality, chunking strategy</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_23b091ffbf5cfdc68a155822645cbe8f:|:excerpt_id_5421cc029bd40962f8f839ecf4a8d136</data>
    </edge>
    <edge source="chunking.py" target="preserve_markdown_code_excerpts">
      <data key="d4">chunking.py also includes preserve_markdown_code_excerpts for advanced chunking while respecting Markdown.:|:chunking.py contains the preserve_markdown_code_excerpts() function, which is a key implementation detail of the module.</data>
      <data key="d5">module implementation, functionality:|:module functionality, document handling</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_23b091ffbf5cfdc68a155822645cbe8f:|:excerpt_id_5421cc029bd40962f8f839ecf4a8d136</data>
    </edge>
    <edge source="graph_store.py" target="NetworkXGraphStore">
      <data key="d4">The NetworkXGraphStore class is defined in graph_store.py, indicating where the graph database functionality resides.</data>
      <data key="d5">class implementation</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_0e491c74d7a88194d22edb5dcf034178</data>
    </edge>
    <edge source="kv_store.py" target="JsonKvStore">
      <data key="d4">The JsonKvStore class is implemented in kv_store.py, showing the file association for the key-value store."+</data>
      <data key="d5">class implementation</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_0e491c74d7a88194d22edb5dcf034178</data>
    </edge>
    <edge source="prompts.py" target="utilities.py">
      <data key="d4">The prompts defined in prompts.py are processed using utility functions from utilities.py, highlighting a functional dependency in the system architecture.:|:Functions in utilities.py provide support for the operational aspects of prompts defined in prompts.py, improving overall utility.:|:Both prompts.py and utilities.py facilitate key operations within the system, with the former managing prompts and the latter providing utility functions for various tasks.</data>
      <data key="d5">system architecture, functional dependency:|:supportive functions, operational efficiency:|:system functioning, operational complementarity</data>
      <data key="d6">24.0</data>
      <data key="d7">excerpt_id_a2942c9d0b2929a3d0693885ce2c32aa:|:excerpt_id_048561f7b91b06effbd2fa38d6b6e86d</data>
    </edge>
    <edge source="prompts.py" target="SmolRag">
      <data key="d4">SmolRag’s query processing can be customized through the prompts defined in prompts.py.</data>
      <data key="d5">configuration, customization</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_9224c08a6f58fb5797f206ea7efc517e</data>
    </edge>
    <edge source="utilities.py" target="definitions.py">
      <data key="d4">Utilities defined in utilities.py may use constants and paths defined in definitions.py for their implementations, establishing a functional dependency.</data>
      <data key="d5">functional reliance, component interaction</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_048561f7b91b06effbd2fa38d6b6e86d</data>
    </edge>
    <edge source="logger.py" target="set_logger()">
      <data key="d4">set_logger() is implemented in logger.py to configure the logging settings for the application.</data>
      <data key="d5">logging setup, maintenance</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_0c67144102b1d81212b12e6ef61ad148</data>
    </edge>
    <edge source="definitions.py" target="DATA_DIR">
      <data key="d4">The definitions.py file defines DATA_DIR for specifying the path to the data directory used by the system.</data>
      <data key="d5">file structure, configuration</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_0c67144102b1d81212b12e6ef61ad148</data>
    </edge>
    <edge source="definitions.py" target="CACHE_DIR">
      <data key="d4">The definitions.py file includes CACHE_DIR, which is used to define the cache directory path in the system.</data>
      <data key="d5">file structure, configuration</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_0c67144102b1d81212b12e6ef61ad148</data>
    </edge>
    <edge source="definitions.py" target="LOG_DIR">
      <data key="d4">The definitions.py file outlines LOG_DIR that shows where logs are stored for monitoring purposes.</data>
      <data key="d5">file structure, configuration</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_0c67144102b1d81212b12e6ef61ad148</data>
    </edge>
    <edge source="definitions.py" target="EMBEDDINGS_DB">
      <data key="d4">The definitions.py file contains EMBEDDINGS_DB, critical for accessing the embeddings database.</data>
      <data key="d5">file structure, configuration</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_0c67144102b1d81212b12e6ef61ad148</data>
    </edge>
    <edge source="definitions.py" target="KG_DB">
      <data key="d4">The definitions.py file defines KG_DB, which indicates the path to the knowledge graph database needed for data relationships.</data>
      <data key="d5">file structure, configuration</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_0c67144102b1d81212b12e6ef61ad148</data>
    </edge>
    <edge source="&quot;api/" target="main.py">
      <data key="d4">The main.py file contains the API endpoints that directly utilize the functions defined in the SmolRag class.</data>
      <data key="d5">API structure, functionality</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_f1fae642defef59936a03b705fb37221</data>
    </edge>
    <edge source="Vector Search Query" target="query">
      <data key="d4">The variable 'query' represents the search input for the Vector Search Query, essential for its execution.</data>
      <data key="d5">execution, input variable</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_f1ef3b38067579dab39116dbfeca6ddc</data>
    </edge>
    <edge source="Vector Search Query" target="Mix Query Method">
      <data key="d4">The Mix Query Method includes the Vector Search Query as part of its strategy to answer complex questions.</data>
      <data key="d5">query integration, comprehensive results</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_44cefee3a8e8faba70704cd4a4d676ae</data>
    </edge>
    <edge source="Local Knowledge Graph Query" target="Entity Search">
      <data key="d4">Local Knowledge Graph Query involves an Entity Search process that extracts low-level keywords to find relevant entities.</data>
      <data key="d5">query process, relevance</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_7c686d971d2fea42e5ba02fc141455aa</data>
    </edge>
    <edge source="Global Knowledge Graph Query" target="Knowledge Graph Queries">
      <data key="d4">Global Knowledge Graph Query is a specific type of Knowledge Graph Queries focused on high-level keywords.</data>
      <data key="d5">query type, focus</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_7c686d971d2fea42e5ba02fc141455aa</data>
    </edge>
    <edge source="Global Knowledge Graph Query" target="Relationship Awareness">
      <data key="d4">The Global Knowledge Graph Query utilizes Relationship Awareness to identify and retrieve significant connections among entities.</data>
      <data key="d5">information retrieval, connectivity</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_9c79fe4d43437c480a6cef767c63d764</data>
    </edge>
    <edge source="Hybrid Knowledge Graph Query" target="Knowledge Graph Queries">
      <data key="d4">Hybrid Knowledge Graph Query is a comprehensive type of Knowledge Graph Queries that combines local and global approaches.</data>
      <data key="d5">query type, combination</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_7c686d971d2fea42e5ba02fc141455aa</data>
    </edge>
    <edge source="Mix Query" target="Knowledge Graph Queries">
      <data key="d4">Mix Query is categorized as a type of Knowledge Graph Queries that integrates results from both graph and vector searches.</data>
      <data key="d5">query integration, functionality</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_7c686d971d2fea42e5ba02fc141455aa</data>
    </edge>
    <edge source="Mix Query" target="Example API Requests">
      <data key="d4">Mix Query is illustrated in the Example API Requests, demonstrating its unique use case within the SmolRAG API.</data>
      <data key="d5">usage, illustration</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_453681d430472ffcca54f90331e78fee</data>
    </edge>
    <edge source="query" target="query_text">
      <data key="d4">query_text is the input provided to the query function for processing and returning a result.</data>
      <data key="d5">data flow, input-output</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_0da14f0f2868bc4e6d5add7c81a2957c</data>
    </edge>
    <edge source="query" target="result">
      <data key="d4">The query function generates a result based on the text provided by the user, supported by SmolRag's capabilities.:|:The result variable stores the output generated from the query function, showcasing the link between processing input and generating output.:|:The query function processes the query_text to derive the result, demonstrating a direct functional link.</data>
      <data key="d5">function execution, output generation:|:output processing, function outcome:|:process flow, information retrieval</data>
      <data key="d6">27.0</data>
      <data key="d7">excerpt_id_a73778302286b849ae1d8bdf13a41987:|:excerpt_id_adb7498f6f95f3de6fde939c658d11cf:|:excerpt_id_0da14f0f2868bc4e6d5add7c81a2957c</data>
    </edge>
    <edge source="query" target="query_type">
      <data key="d4">The query_type variable influences the behavior of the query function, indicating the specific query method being requested.:|:query_type determines how the query function processes the user input, affecting the outcome of the request.</data>
      <data key="d5">variable usage, function behavior:|:parameter, processing variation</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_adb7498f6f95f3de6fde939c658d11cf:|:excerpt_id_a73778302286b849ae1d8bdf13a41987</data>
    </edge>
    <edge source="query" target="Memory-Efficient Vector Store">
      <data key="d4">query performs analysis on stored vectors using the Memory-Efficient Vector Store to retrieve relevant results based on input.</data>
      <data key="d5">retrieving data, analysis</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_bb6ad6a345cbdf6df0cbdc4225260a25</data>
    </edge>
    <edge source="query" target="rag">
      <data key="d4">The query function is part of the rag API, allowing for data retrieval from the imported documents.</data>
      <data key="d5">api functionality, information retrieval</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_8efc423402a060df074b1830e38ed77b</data>
    </edge>
    <edge source="query" target="SmolRag">
      <data key="d4">The query function interacts directly with the SmolRag API to provide results based on user inquiries.:|:SmolRag employs the query function to interact with the imported documents and retrieve necessary information.</data>
      <data key="d5">functionality, information retrieval:|:API interaction, functionality</data>
      <data key="d6">17.0</data>
      <data key="d7">excerpt_id_7026c9111f1e878a76710759253c04ae:|:excerpt_id_adb7498f6f95f3de6fde939c658d11cf</data>
    </edge>
    <edge source="query" target="check_system_resources">
      <data key="d4">The implementation of the check_system_resources function ensures that the system's resource status does not hinder the query function outputs.</data>
      <data key="d5">system performance, resource management</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_7026c9111f1e878a76710759253c04ae</data>
    </edge>
    <edge source="query" target="Flask">
      <data key="d4">The query function is part of the Flask application, indicating integration between the two for handling user queries.</data>
      <data key="d5">application logic, API handling</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_adb7498f6f95f3de6fde939c658d11cf</data>
    </edge>
    <edge source="query" target="data">
      <data key="d4">The data variable is used within the query function to process the user's input, showing its role in query handling.</data>
      <data key="d5">input processing, function usage</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_adb7498f6f95f3de6fde939c658d11cf</data>
    </edge>
    <edge source="query" target="text">
      <data key="d4">The query interface utilizes the text variable to execute user searches.</data>
      <data key="d5">user input, query execution</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_97e526b02e37e6e2b2b176a8cb9cc039</data>
    </edge>
    <edge source="query" target="type">
      <data key="d4">The query interface references the type variable to differentiate between query processing methods.</data>
      <data key="d5">query categorization, processing type</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_97e526b02e37e6e2b2b176a8cb9cc039</data>
    </edge>
    <edge source="query" target="CustomSmolRag">
      <data key="d4">query is an overridden function in CustomSmolRag that modifies the behavior of the original query method.</data>
      <data key="d5">method overriding, behavior modification</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_7f32de37a5cddfe45cdff7356d2a5584</data>
    </edge>
    <edge source="query" target="custom_query">
      <data key="d4">custom_query is a specific implementation that allows for a tailored approach to text querying, supplementing the generic query method.</data>
      <data key="d5">function customization, enhancement</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_c3ca869388739cbef75785b9d8a4b3e1</data>
    </edge>
    <edge source="Document Processor" target="Vector Store">
      <data key="d4">The Document Processor provides processed documents to the Vector Store for embedding and retrieval purposes.:|:Document Processor produces embeddings that are managed by the Vector Store for semantic search purposes.</data>
      <data key="d5">data management, processing flow:|:document processing, embedding</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_39a1d6ebedcdf64866e51dc2d7baf5dc:|:excerpt_id_5164d226bc36d8232fafc2660b1bfd87</data>
    </edge>
    <edge source="Document Processor" target="Document Ingestion Flow">
      <data key="d4">Document Ingestion Flow is a process executed by the Document Processor for managing incoming documents.:|:The Document Ingestion Flow outlines the process that includes the roles of the Document Processor in preparing documents.</data>
      <data key="d5">process description, functionality:|:process outline, document management</data>
      <data key="d6">13.0</data>
      <data key="d7">excerpt_id_39a1d6ebedcdf64866e51dc2d7baf5dc:|:excerpt_id_5164d226bc36d8232fafc2660b1bfd87</data>
    </edge>
    <edge source="Query Processor" target="LLM Interface">
      <data key="d4">The LLM Interface communicates with the Query Processor to generate responses using the information retrieved by queries.:|:Query Processor uses the LLM Interface to leverage OpenAI's API in generating responses to user queries.</data>
      <data key="d5">query processing, external communication:|:response generation, interaction</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_39a1d6ebedcdf64866e51dc2d7baf5dc:|:excerpt_id_5164d226bc36d8232fafc2660b1bfd87</data>
    </edge>
    <edge source="Query Processor" target="API Layer">
      <data key="d4">API Layer allows user queries to be submitted to the Query Processor, facilitating user interaction with the system.:|:The API Layer allows users to submit queries to the Query Processor, facilitating user interactions with the system.</data>
      <data key="d5">user interaction, API communication:|:user interaction, access point</data>
      <data key="d6">14.0</data>
      <data key="d7">excerpt_id_39a1d6ebedcdf64866e51dc2d7baf5dc:|:excerpt_id_5164d226bc36d8232fafc2660b1bfd87</data>
    </edge>
    <edge source="Query Processor" target="Query Processing Flow">
      <data key="d4">The Query Processing Flow details the steps taken by the Query Processor to handle user queries effectively.:|:Query Processing Flow outlines the steps taken by the Query Processor in handling user queries.</data>
      <data key="d5">process description, functionality:|:process outline, query handling</data>
      <data key="d6">13.0</data>
      <data key="d7">excerpt_id_39a1d6ebedcdf64866e51dc2d7baf5dc:|:excerpt_id_5164d226bc36d8232fafc2660b1bfd87</data>
    </edge>
    <edge source="Cosine Similarity" target="Similarity Scores">
      <data key="d4">Cosine Similarity produces Similarity Scores based on the angle between vectors, indicating their level of similarity.</data>
      <data key="d5">score generation, mathematical relationship</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_f6b27b7a25013f2c5751328db6d6e0e3</data>
    </edge>
    <edge source="Cosine Similarity" target="Query Embedding">
      <data key="d4">Query Embedding utilizes Cosine Similarity to compare its vector with other excerpts to find matches.</data>
      <data key="d5">vector comparison, similarity measurement</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_ad053b14f30e2ca2cbde4877068102ef</data>
    </edge>
    <edge source="Similarity Scores" target="Threshold Filtering">
      <data key="d4">Threshold Filtering uses Similarity Scores to determine which results should be filtered based on the defined threshold.</data>
      <data key="d5">filtering mechanism, configuration impact</data>
      <data key="d6">14.0</data>
      <data key="d7">excerpt_id_f6b27b7a25013f2c5751328db6d6e0e3</data>
    </edge>
    <edge source="Similarity Scores" target="Ranking">
      <data key="d4">Ranking orders the Similarity Scores to present the most relevant results first.</data>
      <data key="d5">ordering process, relevance</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_f6b27b7a25013f2c5751328db6d6e0e3</data>
    </edge>
    <edge source="Threshold Filtering" target="Similarity Computation">
      <data key="d4">Similarity Computation results can be refined using Threshold Filtering to remove less relevant results.</data>
      <data key="d5">refinement process, filtering</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_9c6c3d629e2b94029b3f534beffe4780</data>
    </edge>
    <edge source="Normalization" target="Vector Comparison">
      <data key="d4">Normalization ensures that Vectors are compared fairly during the Vector Comparison process.</data>
      <data key="d5">fair comparison, mathematical process</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_f6b27b7a25013f2c5751328db6d6e0e3</data>
    </edge>
    <edge source="Query Embedding" target="Vector Comparison">
      <data key="d4">Query Embedding is conducted to facilitate Vector Comparison by creating a comparable query vector.</data>
      <data key="d5">preparation process, similarity search</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_f6b27b7a25013f2c5751328db6d6e0e3</data>
    </edge>
    <edge source="Query Embedding" target="Strengths and Weaknesses">
      <data key="d4">Strengths and Weaknesses discuss the effectiveness and limitations of the Query Embedding in terms of usage and results.</data>
      <data key="d5">evaluation, effectiveness</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_ad053b14f30e2ca2cbde4877068102ef</data>
    </edge>
    <edge source="Query Embedding" target="Similarity Computation">
      <data key="d4">Query Embedding provides the necessary embeddings that are processed in Similarity Computation to find relevant excerpts.</data>
      <data key="d5">data processing, information retrieval</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_9c6c3d629e2b94029b3f534beffe4780</data>
    </edge>
    <edge source="result" target="cached_result">
      <data key="d4">cached_result is checked and used to assign a value to result, avoiding unnecessary processing if available.</data>
      <data key="d5">performance optimization, result caching</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_0da14f0f2868bc4e6d5add7c81a2957c</data>
    </edge>
    <edge source="result" target="llm">
      <data key="d4">The llm API generates output that is stored in the result variable, indicating a direct functional relationship.</data>
      <data key="d5">api output, data generation</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_cb0e5d0ad627c9ecd6e0fb7b4ac2bb43</data>
    </edge>
    <edge source="result" target="results">
      <data key="d4">The variable 'results' contains multiple instances of 'result', which are processed in a loop.</data>
      <data key="d5">data processing, loop handling</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_6d692b7f7ce26d7c5b94249c8453447e</data>
    </edge>
    <edge source="result" target="rag">
      <data key="d4">The result variable stores the output of a query executed through the rag interface, establishing a direct link between them.</data>
      <data key="d5">data retrieval, output storage</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_1022857c40806a92372f49dc394cbcfe</data>
    </edge>
    <edge source="result" target="print">
      <data key="d4">The result variable supplies data to the print function for output, linking the computation of time metrics with their display.</data>
      <data key="d5">data flow, output</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_1f85cb53bc4e7de3a80fec7f9c6b4d2c</data>
    </edge>
    <edge source="result" target="documents">
      <data key="d4">The 'documents()' function is used to generate or retrieve the 'result', indicating a direct functional operation between them.</data>
      <data key="d5">function execution, output</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_31dbc989f689c5be27e9ae8b6d0588c4</data>
    </edge>
    <edge source="result" target="rag.query">
      <data key="d4">The 'rag.query()' function produces the 'result', showcasing the input-output relationship where the query directly affects the outcome.</data>
      <data key="d5">function execution, output</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_31dbc989f689c5be27e9ae8b6d0588c4</data>
    </edge>
    <edge source="error handling" target="400 Bad Request">
      <data key="d4">Error handling addresses the occurrence of a 400 Bad Request error, providing feedback on API request issues.</data>
      <data key="d5">error management, client-side issues</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_57aae66702d1057a0462d26360d3ccef</data>
    </edge>
    <edge source="error handling" target="500 Internal Server Error">
      <data key="d4">Error handling also encompasses scenarios where a 500 Internal Server Error occurs, aiding in server-side issue diagnosis.</data>
      <data key="d5">error management, server-side issues</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_57aae66702d1057a0462d26360d3ccef</data>
    </edge>
    <edge source="error handling" target="query_endpoint">
      <data key="d4">The query_endpoint function implements error handling to manage exceptions that may arise during query processing.</data>
      <data key="d5">error management, function stability</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_3720213ae71a08acca1f7e46b7864f3e</data>
    </edge>
    <edge source="API Key" target="query_endpoint">
      <data key="d4">query_endpoint checks the validity of the API Key before processing requests.</data>
      <data key="d5">authentication, security</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_de1f8b8f458f74d9b97d639f4ede4c9c</data>
    </edge>
    <edge source="API Key" target="OpenAI API">
      <data key="d4">API Key is required to authenticate requests made to the OpenAI API, making it essential for interaction with its services.</data>
      <data key="d5">authentication, access</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_30d921e9ed8b86da0f8b9366dfbaa2a7</data>
    </edge>
    <edge source="API Key" target="Verify OpenAI API Key Function">
      <data key="d4">The Verify OpenAI API Key Function specifically checks the validity of the API Key, ensuring it is correct before making requests.</data>
      <data key="d5">validation, functionality</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_30d921e9ed8b86da0f8b9366dfbaa2a7</data>
    </edge>
    <edge source="OAuth 2.0" target="FastAPI">
      <data key="d4">FastAPI supports the implementation of OAuth 2.0 for authentication and authorization in applications.</data>
      <data key="d5">authentication, framework support</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_de1f8b8f458f74d9b97d639f4ede4c9c</data>
    </edge>
    <edge source="JWT" target="FastAPI">
      <data key="d4">FastAPI allows the use of JWT for handling stateless authentication in web applications.</data>
      <data key="d5">authentication, framework support</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_de1f8b8f458f74d9b97d639f4ede4c9c</data>
    </edge>
    <edge source="source_file" target="destination">
      <data key="d4">source_file is utilized to define the origin of the document that will be copied to the destination.".:|:source_file is copied to the destination variable, thus establishing a link between the original file location and its new location in the input_docs directory.</data>
      <data key="d5">file operations, copying:|:file operations, variable utilization</data>
      <data key="d6">20.0</data>
      <data key="d7">excerpt_id_98568b73e1554f3852d7cabeaa3a1878:|:excerpt_id_c7eb7e74a2b8451dbfbc03d8e9baccf9</data>
    </edge>
    <edge source="destination" target="rag.import_documents">
      <data key="d4">rag.import_documents is called to ensure the document is imported into the specified destination after copying from the source file.".</data>
      <data key="d5">process flow, document management</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_c7eb7e74a2b8451dbfbc03d8e9baccf9</data>
    </edge>
    <edge source="os" target="shutil">
      <data key="d4">Both os and shutil APIs are used together to manipulate files and directories.".</data>
      <data key="d5">file handling, interoperability</data>
      <data key="d6">14.0</data>
      <data key="d7">excerpt_id_c7eb7e74a2b8451dbfbc03d8e9baccf9</data>
    </edge>
    <edge source="rag.query" target="SmolRag">
      <data key="d4">rag.query is a function that operates within the context of the SmolRag feature to enable document querying.".</data>
      <data key="d5">functionality, interaction</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_c7eb7e74a2b8451dbfbc03d8e9baccf9</data>
    </edge>
    <edge source="rag.query" target="document chunking">
      <data key="d4">document chunking improves the efficiency of queries performed by rag.query through optimized document management.".</data>
      <data key="d5">efficiency, processing</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_c7eb7e74a2b8451dbfbc03d8e9baccf9</data>
    </edge>
    <edge source="SmolRag" target="Mix Query Method">
      <data key="d4">SmolRag implements the Mix Query Method to enhance its capabilities in processing and retrieving information effectively.</data>
      <data key="d5">integration, information retrieval</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_44cefee3a8e8faba70704cd4a4d676ae</data>
    </edge>
    <edge source="SmolRag" target="API Endpoint">
      <data key="d4">SmolRag can be accessed through the API Endpoint, facilitating interactions and allowing users to make varied queries.</data>
      <data key="d5">accessibility, programmatic interface</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_44cefee3a8e8faba70704cd4a4d676ae</data>
    </edge>
    <edge source="SmolRag" target="Flask">
      <data key="d4">Flask is the framework used to build the web application interface that connects to the SmolRag API, enabling user interaction.:|:Flask is used to create a web application that integrates with the SmolRag API, facilitating user interactions with document queries.</data>
      <data key="d5">integration, web application:|:framework integration, API connection</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_adb7498f6f95f3de6fde939c658d11cf:|:excerpt_id_a73778302286b849ae1d8bdf13a41987</data>
    </edge>
    <edge source="SmolRag" target="custom_chunking_strategy">
      <data key="d4">SmolRag utilizes custom_chunking_strategy to define how documents should be chunked for efficient processing.</data>
      <data key="d5">functionality, document management</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_a73778302286b849ae1d8bdf13a41987</data>
    </edge>
    <edge source="SmolRag" target="source_to_doc_kv">
      <data key="d4">SmolRag manages the source_to_doc_kv variable as part of its functionality to map sources to documents.</data>
      <data key="d5">functionality, variable management</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_9224c08a6f58fb5797f206ea7efc517e</data>
    </edge>
    <edge source="SmolRag" target="doc_to_source_kv">
      <data key="d4">SmolRag utilizes doc_to_source_kv to facilitate the reverse mapping of documents back to their sources.</data>
      <data key="d5">functionality, variable management</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_9224c08a6f58fb5797f206ea7efc517e</data>
    </edge>
    <edge source="SmolRag" target="doc_to_excerpt_kv">
      <data key="d4">SmolRag employs doc_to_excerpt_kv for linking documents to their respective excerpts, enhancing data handling.</data>
      <data key="d5">functionality, variable management</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_9224c08a6f58fb5797f206ea7efc517e</data>
    </edge>
    <edge source="SmolRag" target="excerpt_kv">
      <data key="d4">SmolRag uses excerpt_kv to store and manage excerpts associated with documents.</data>
      <data key="d5">functionality, variable management</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_9224c08a6f58fb5797f206ea7efc517e</data>
    </edge>
    <edge source="SmolRag" target="CustomSmolRag">
      <data key="d4">CustomSmolRag extends the SmolRag class, allowing for custom implementations and modifications of its core functionalities.:|:CustomSmolRag is an extension of SmolRag, modifying its methods to adjust how relationships and entities are ranked.:|:CustomSmolRag is an extension of SmolRag, inheriting its functionalities while allowing for further customization.</data>
      <data key="d5">inheritance, extension:|:extension, customization:|:class extension, relationship management</data>
      <data key="d6">27.0</data>
      <data key="d7">excerpt_id_7f32de37a5cddfe45cdff7356d2a5584:|:excerpt_id_58afd38ac61f13786dbc05d2f0c7bf8f:|:excerpt_id_ed82afd79e512c2446b7d0cddfce1ee3</data>
    </edge>
    <edge source="SmolRag" target="Performance Optimization">
      <data key="d4">Performance Optimization offers best practices tailored for improving the performance of the SmolRAG framework.:|:Performance Optimization lays out strategies that users can apply to SmolRag to enhance its performance and responsiveness.</data>
      <data key="d5">efficiency, best practices:|:efficiency, strategy</data>
      <data key="d6">15.0</data>
      <data key="d7">excerpt_id_c3ca869388739cbef75785b9d8a4b3e1:|:excerpt_id_ed82afd79e512c2446b7d0cddfce1ee3</data>
    </edge>
    <edge source="SmolRag" target="OpenAiLlm">
      <data key="d4">SmolRag utilizes OpenAiLlm for processing and generating language outputs, indicating a functional dependency between the two components.:|:SmolRag integrates with OpenAiLlm to leverage language model capabilities for text processing and generation.</data>
      <data key="d5">integration, functionality:|:API integration, functional dependency</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_2e0613b4c1b81b865a2002b59fe88b17:|:excerpt_id_8c4cef197115ed13a173ace5189be819</data>
    </edge>
    <edge source="SmolRag" target="NetworkXGraphStore">
      <data key="d4">SmolRag employs NetworkXGraphStore for managing relationships within graph-structured data, aiding in knowledge representation.:|:SmolRag integrates NetworkXGraphStore to manage entity relationships through graphs, demonstrating its capability in relationship management.:|:SmolRag implements NetworkXGraphStore to manage the knowledge graph configuration and its storage methods.</data>
      <data key="d5">graph management, configuration:|:relationship management, graph store:|:data representation, structures</data>
      <data key="d6">24.0</data>
      <data key="d7">excerpt_id_2e0613b4c1b81b865a2002b59fe88b17:|:excerpt_id_8c4cef197115ed13a173ace5189be819:|:excerpt_id_60a78091c7c8d6dae9b144963e93551a</data>
    </edge>
    <edge source="SmolRag" target="JsonKvStore">
      <data key="d4">SmolRag uses JsonKvStore to cache query results and manage key-value data structures effectively.:|:SmolRag uses JsonKvStore for caching data, highlighting the need for efficient data retrieval and storage in its operations.</data>
      <data key="d5">caching, data management:|:data management, caching</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_2e0613b4c1b81b865a2002b59fe88b17:|:excerpt_id_8c4cef197115ed13a173ace5189be819</data>
    </edge>
    <edge source="SmolRag" target="preserve_markdown_code_excerpts">
      <data key="d4">The function preserve_markdown_code_excerpts is used within SmolRag to maintain markdown formatting during data handling.:|:SmolRag leverages the preserve_markdown_code_excerpts function to ensure proper handling of markdown during document processing.</data>
      <data key="d5">document processing, functionality:|:functionality, documentation</data>
      <data key="d6">14.0</data>
      <data key="d7">excerpt_id_2e0613b4c1b81b865a2002b59fe88b17:|:excerpt_id_8c4cef197115ed13a173ace5189be819</data>
    </edge>
    <edge source="SmolRag" target="embeddings_path">
      <data key="d4">The embeddings_path variable is crucial for SmolRag to locate and store embeddings, emphasizing its need for configuration settings.</data>
      <data key="d5">configuration dependency, functionality</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_8c4cef197115ed13a173ace5189be819</data>
    </edge>
    <edge source="SmolRag" target="entities_path">
      <data key="d4">SmolRag relies on the entities_path variable to effectively manage entities, underlining the significance of configuration in its design.</data>
      <data key="d5">configuration management, functionality</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_8c4cef197115ed13a173ace5189be819</data>
    </edge>
    <edge source="SmolRag" target="relationships_path">
      <data key="d4">The relationships_path variable is essential for SmolRag to maintain relationships, showcasing its reliance on configuration paths.</data>
      <data key="d5">configuration dependency, relational management</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_8c4cef197115ed13a173ace5189be819</data>
    </edge>
    <edge source="SmolRag" target="kg_path">
      <data key="d4">The kg_path variable allows SmolRag to access its knowledge graph, highlighting its importance in the system's architecture.</data>
      <data key="d5">knowledge management, integration</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_8c4cef197115ed13a173ace5189be819</data>
    </edge>
    <edge source="SmolRag" target="source_to_doc_path">
      <data key="d4">The source_to_doc_path variable aids SmolRag in linking sources to documents, indicating its necessity for data structuring.</data>
      <data key="d5">data mapping, functionality</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_8c4cef197115ed13a173ace5189be819</data>
    </edge>
    <edge source="SmolRag" target="doc_to_source_path">
      <data key="d4">The doc_to_source_path variable supports the reverse mapping from documents to sources, reinforcing data structuring within SmolRag.</data>
      <data key="d5">data mapping, functionality</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_8c4cef197115ed13a173ace5189be819</data>
    </edge>
    <edge source="SmolRag" target="doc_to_excerpt_path">
      <data key="d4">The doc_to_excerpt_path variable functions within SmolRag to match documents to their excerpts, essential for effective data retrieval.</data>
      <data key="d5">data mapping, functionality</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_8c4cef197115ed13a173ace5189be819</data>
    </edge>
    <edge source="SmolRag" target="excerpt_path">
      <data key="d4">The excerpt_path variable is utilized by SmolRag to organize excerpts, which is crucial for document processing efficiency.</data>
      <data key="d5">data organization, functionality</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_8c4cef197115ed13a173ace5189be819</data>
    </edge>
    <edge source="SmolRag" target="query_cache_path">
      <data key="d4">query_cache_path is defined within SmolRag to enhance the speed of query results access.:|:SmolRag implements query_cache_path for caching prior queries, which is key for enhancing response times.</data>
      <data key="d5">caching, performance optimization:|:performance, efficiency</data>
      <data key="d6">15.0</data>
      <data key="d7">excerpt_id_2e0613b4c1b81b865a2002b59fe88b17:|:excerpt_id_8c4cef197115ed13a173ace5189be819</data>
    </edge>
    <edge source="SmolRag" target="embedding_cache_path">
      <data key="d4">SmolRag's use of embedding_cache_path helps to store embeddings efficiently, optimizing function performance.:|:embedding_cache_path is utilized by SmolRag for efficient caching of embeddings, optimizing performance.</data>
      <data key="d5">performance optimization, caching:|:caching, performance optimization</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_2e0613b4c1b81b865a2002b59fe88b17:|:excerpt_id_8c4cef197115ed13a173ace5189be819</data>
    </edge>
    <edge source="SmolRag" target="dimensions">
      <data key="d4">The dimensions variable is critical to SmolRag for establishing the size of the embeddings, integral to its configuration.:|:dimensions influences the vector representation capabilities of SmolRag, impacting performance and efficiency.</data>
      <data key="d5">configuration importance, dimensionality:|:data structure, performance</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_2e0613b4c1b81b865a2002b59fe88b17:|:excerpt_id_8c4cef197115ed13a173ace5189be819</data>
    </edge>
    <edge source="SmolRag" target="benchmark_queries">
      <data key="d4">The benchmark_queries function utilizes the SmolRag API to measure query performance metrics.</data>
      <data key="d5">performance measurement, function interaction</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_8df198dc0e22767ee72f9d76b21e44aa</data>
    </edge>
    <edge source="SmolRag" target="embedding_cache_kv">
      <data key="d4">embedding_cache_kv is used by SmolRag to handle caching specifically for embeddings."+</data>
      <data key="d5">caching, variable usage</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_60a78091c7c8d6dae9b144963e93551a</data>
    </edge>
    <edge source="SmolRag" target="query_cache_kv">
      <data key="d4">query_cache_kv assists SmolRag in managing the caching of query results."+</data>
      <data key="d5">caching, variable usage</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_60a78091c7c8d6dae9b144963e93551a</data>
    </edge>
    <edge source="SmolRag" target="embeddings_db">
      <data key="d4">embeddings_db is instantiated and used to customize embedding storage in conjunction with SmolRag."+</data>
      <data key="d5">storage, variable usage</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_60a78091c7c8d6dae9b144963e93551a</data>
    </edge>
    <edge source="SmolRag" target="entities_db">
      <data key="d4">entities_db is configured to hold extracted entities, enhancing SmolRag's functionality."+</data>
      <data key="d5">storage, variable usage</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_60a78091c7c8d6dae9b144963e93551a</data>
    </edge>
    <edge source="SmolRag" target="relationships_db">
      <data key="d4">relationships_db is employed by SmolRag to manage the relationships between entities."+</data>
      <data key="d5">storage, variable usage</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_60a78091c7c8d6dae9b144963e93551a</data>
    </edge>
    <edge source="SmolRag" target="Flask Web Application">
      <data key="d4">Flask Web Application uses SmolRag to handle document querying and management.</data>
      <data key="d5">API interaction, document management</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_97e526b02e37e6e2b2b176a8cb9cc039</data>
    </edge>
    <edge source="SmolRag" target="Import Documents">
      <data key="d4">SmolRag provides the Import Documents function to load necessary data for querying.</data>
      <data key="d5">data loading, functionality</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_97e526b02e37e6e2b2b176a8cb9cc039</data>
    </edge>
    <edge source="SmolRag" target="excerpt_size">
      <data key="d4">excerpt_size parameter governs the amount of content SmolRag can process at one time, affecting usability.</data>
      <data key="d5">content management, usability</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_2e0613b4c1b81b865a2002b59fe88b17</data>
    </edge>
    <edge source="SmolRag" target="overlap">
      <data key="d4">overlap parameter impacts the continuity of content processed by SmolRag, ensuring contextuality in excerpts.</data>
      <data key="d5">content continuity, processing</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_2e0613b4c1b81b865a2002b59fe88b17</data>
    </edge>
    <edge source="SmolRag" target="Custom LLM interface">
      <data key="d4">The Custom LLM interface is a component that can be passed to the SmolRag constructor, enhancing its capabilities.</data>
      <data key="d5">component enhancement, integration</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_c3ca869388739cbef75785b9d8a4b3e1</data>
    </edge>
    <edge source="SmolRag" target="Custom vector store">
      <data key="d4">The Custom vector store is integrated into the SmolRag system to allow for personalized vector representation storage.</data>
      <data key="d5">component integration, customization</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_c3ca869388739cbef75785b9d8a4b3e1</data>
    </edge>
    <edge source="SmolRag" target="Resource Efficiency">
      <data key="d4">Resource Efficiency outlines practices that help in managing the system's resource use effectively when using SmolRag.</data>
      <data key="d5">resource management, optimization</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_c3ca869388739cbef75785b9d8a4b3e1</data>
    </edge>
    <edge source="SmolRag" target="Customization Strategy">
      <data key="d4">The Customization Strategy gives guidance on how to adapt the SmolRag system to better fit user needs.</data>
      <data key="d5">system adaptation, guidelines</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_c3ca869388739cbef75785b9d8a4b3e1</data>
    </edge>
    <edge source="CACHE_DIR" target="clear_embedding_cache">
      <data key="d4">CACHE_DIR specifies the path used in the clear_embedding_cache function to locate and remove the embedding cache file.</data>
      <data key="d5">configuration, caching</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_8125dcd822731acc0c981b8a1307c4d3</data>
    </edge>
    <edge source="SmolRag Initialization Parameters" target="excerpt_fn">
      <data key="d4">excerpt_fn is one of the initialization parameters used to customize document chunking behavior within SmolRAG.</data>
      <data key="d5">parameterization, customization</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_2d095921aff5b7f80aa22d08fd18411c</data>
    </edge>
    <edge source="SmolRag Initialization Parameters" target="llm">
      <data key="d4">llm is a key initialization parameter determining the LLM interface instance used by SmolRAG, highlighting its core functionality.</data>
      <data key="d5">parameterization, core behavior</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_2d095921aff5b7f80aa22d08fd18411c</data>
    </edge>
    <edge source="SmolRag Initialization Parameters" target="dimensions">
      <data key="d4">dimensions is another critical initialization parameter ensuring the correct embedding dimensions are set for SmolRAG's processing.</data>
      <data key="d5">parameterization, configuration</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_2d095921aff5b7f80aa22d08fd18411c</data>
    </edge>
    <edge source="SmolRag Initialization Parameters" target="excerpt_size">
      <data key="d4">excerpt_size defines the target document chunk size used in SmolRAG, affecting how data is processed.</data>
      <data key="d5">parameterization, configuration</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_2d095921aff5b7f80aa22d08fd18411c</data>
    </edge>
    <edge source="excerpt_fn" target="SmolRag Initialization">
      <data key="d4">excerpt_fn is one of the parameters that allows customization of the SmolRag's document chunking behavior during initialization.</data>
      <data key="d5">parameterization, customization</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_35ac427df33971aafd001dedc2094d13</data>
    </edge>
    <edge source="llm" target="SmolRag Initialization">
      <data key="d4">llm is included in the initialization parameters, specifying the LLM interface used by SmolRag.</data>
      <data key="d5">integration, parameters</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_35ac427df33971aafd001dedc2094d13</data>
    </edge>
    <edge source="dimensions" target="graph_db">
      <data key="d4">graph_db may utilize dimensions as part of its structure or function, linking the two variables indirectly.</data>
      <data key="d5">data structure, variable interrelation</data>
      <data key="d6">12.0</data>
      <data key="d7">excerpt_id_8efc423402a060df074b1830e38ed77b</data>
    </edge>
    <edge source="dimensions" target="rag">
      <data key="d4">rag can be customized with dimensions, impacting its processing capabilities.</data>
      <data key="d5">configuration, customization</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_f8b124e0bd021d69415fab98214a7b6b</data>
    </edge>
    <edge source="dimensions" target="SmolRag Initialization">
      <data key="d4">dimensions is a configurable parameter in the SmolRag initialization that determines the embedding size used.</data>
      <data key="d5">configuration, parameters</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_35ac427df33971aafd001dedc2094d13</data>
    </edge>
    <edge source="excerpt_size" target="custom_chunking_strategy">
      <data key="d4">custom_chunking_strategy utilizes excerpt_size to determine the maximum length of each text chunk.</data>
      <data key="d5">configuration, parameter usage</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_52671ae166986e6c86752cd3194af2af</data>
    </edge>
    <edge source="excerpt_size" target="rag">
      <data key="d4">excerpt_size can be adjusted in rag to specify the size of text excerpts processed.</data>
      <data key="d5">configuration, customization</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_f8b124e0bd021d69415fab98214a7b6b</data>
    </edge>
    <edge source="overlap" target="custom_chunking_strategy">
      <data key="d4">custom_chunking_strategy accounts for overlap when creating chunks to manage context between segments.</data>
      <data key="d5">chunking dynamics, parameter usage</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_52671ae166986e6c86752cd3194af2af</data>
    </edge>
    <edge source="overlap" target="rag">
      <data key="d4">overlap parameter can be set in rag to define the overlap between text chunks during processing.</data>
      <data key="d5">configuration, chunking strategy</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_f8b124e0bd021d69415fab98214a7b6b</data>
    </edge>
    <edge source="Default Chunking" target="Overlap Mechanism">
      <data key="d4">The Overlap Mechanism is part of the Default Chunking feature, designed to maintain context continuity by overlapping chunks.</data>
      <data key="d5">context preservation, chunking strategy</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_d24dd08ee554d6069354fc456f67147f</data>
    </edge>
    <edge source="naive_overlap_excerpts" target="rag">
      <data key="d4">rag can also be configured to utilize naive_overlap_excerpts as an alternative chunking strategy.</data>
      <data key="d5">configuration, chunking strategy</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_f8b124e0bd021d69415fab98214a7b6b</data>
    </edge>
    <edge source="naive_overlap_excerpts" target="preserve_markdown_code_excerpts">
      <data key="d4">Both functions, preserve_markdown_code_excerpts and naive_overlap_excerpts, are strategies available within SmolRAG for document chunking.:|:preserve_markdown_code_excerpts() and naive_overlap_excerpts() are both functions designed for document chunking, serving similar purposes but with different strategies.".</data>
      <data key="d5">functionality, document processing:|:chunking strategies, functionality</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_d24dd08ee554d6069354fc456f67147f:|:excerpt_id_23b091ffbf5cfdc68a155822645cbe8f</data>
    </edge>
    <edge source="preserve_markdown_code_excerpts" target="OpenAiLlm">
      <data key="d4">The OpenAiLlm component operates alongside the preserve_markdown_code_excerpts function to maintain the fidelity of code during processing.</data>
      <data key="d5">functionality, code integrity</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_8c4cef197115ed13a173ace5189be819</data>
    </edge>
    <edge source="preserve_markdown_code_excerpts" target="rag">
      <data key="d4">rag can be configured to use preserve_markdown_code_excerpts as the chunking strategy for text processing.</data>
      <data key="d5">configuration, chunking strategy</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_f8b124e0bd021d69415fab98214a7b6b</data>
    </edge>
    <edge source="Contextual Summarization" target="LLM-Based Approach">
      <data key="d4">Contextual Summarization relies on the LLM-Based Approach for generating accurate summaries of document excerpts.</data>
      <data key="d5">summary generation, technology</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_a91137c719a0d5f9cb906bc3ae15bc3f</data>
    </edge>
    <edge source="Contextual Summarization" target="Fallback Mechanism">
      <data key="d4">Fallback Mechanism serves to ensure that a summary is always provided, even if Contextual Summarization fails.</data>
      <data key="d5">continuity, process reliability</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_a91137c719a0d5f9cb906bc3ae15bc3f</data>
    </edge>
    <edge source="Fallback Mechanism" target="Rich Context">
      <data key="d4">Rich Context and Fallback Mechanism work together to ensure high-quality responses by providing context and backup methods for information retrieval.</data>
      <data key="d5">response quality, redundancy</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_84dc24216724ab859775d987f5bb2e19</data>
    </edge>
    <edge source="Fallback Mechanism" target="Summarization Process">
      <data key="d4">The Fallback Mechanism is integral to the Summarization Process as it provides a default summary when initial attempts fail.</data>
      <data key="d5">error handling, reliability</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_40ff8100b340e2bffbf37fe882a8ee48</data>
    </edge>
    <edge source="Document Ingestion Performance" target="Chunking">
      <data key="d4">Document Ingestion Performance is affected by Chunking since breaking documents into smaller pieces is a key part of the ingestion process.</data>
      <data key="d5">process efficiency, impact</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_eb65f41dba3401c3f9ecff6a2b835fca</data>
    </edge>
    <edge source="Document Ingestion Performance" target="Summarization">
      <data key="d4">Document Ingestion Performance relies on Summarization to provide concise information about chunks, influencing the overall efficiency.</data>
      <data key="d5">information processing, efficiency</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_eb65f41dba3401c3f9ecff6a2b835fca</data>
    </edge>
    <edge source="Document Ingestion Performance" target="Embedding Generation">
      <data key="d4">Document Ingestion Performance is influenced by Embedding Generation since it requires generating embeddings for each chunk during ingestion.</data>
      <data key="d5">embedding processing, performance</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_eb65f41dba3401c3f9ecff6a2b835fca</data>
    </edge>
    <edge source="Document Ingestion Performance" target="Entity Extraction">
      <data key="d4">Document Ingestion Performance includes Entity Extraction as a critical step to identify important data during the ingestion process.</data>
      <data key="d5">data processing, critical function</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_eb65f41dba3401c3f9ecff6a2b835fca</data>
    </edge>
    <edge source="Document Ingestion Performance" target="Batch Processing">
      <data key="d4">Batch Processing helps improve Document Ingestion Performance by managing memory usage effectively during processing.</data>
      <data key="d5">optimization strategy, performance improvement</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_eb65f41dba3401c3f9ecff6a2b835fca</data>
    </edge>
    <edge source="Document Ingestion Performance" target="Incremental Updates">
      <data key="d4">Incremental Updates enhances Document Ingestion Performance by avoiding the need to reprocess entire document collections.</data>
      <data key="d5">efficiency, resource management</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_eb65f41dba3401c3f9ecff6a2b835fca</data>
    </edge>
    <edge source="Embedding Generation" target="Parallel Processing">
      <data key="d4">Parallel Processing can enhance the speed of Embedding Generation by processing multiple embeddings at once.</data>
      <data key="d5">processing efficiency, speed</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_eb65f41dba3401c3f9ecff6a2b835fca</data>
    </edge>
    <edge source="Embedding Generation" target="Caching">
      <data key="d4">Caching can reduce the time it takes for Embedding Generation by storing previously computed embeddings.</data>
      <data key="d5">performance enhancement, resource optimization</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_eb65f41dba3401c3f9ecff6a2b835fca</data>
    </edge>
    <edge source="Embedding Generation" target="OpenAI's API">
      <data key="d4">OpenAI's API facilitates the feature of Embedding Generation, which is essential for handling document chunks and queries.</data>
      <data key="d5">feature enablement, API functionality</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_81db384c7c323402180915d5a9c65d67</data>
    </edge>
    <edge source="Entity Extraction" target="Property Assignment">
      <data key="d4">Property Assignment enhances the entities identified through Entity Extraction, adding detailed attributes."+</data>
      <data key="d5">enrichment, detail</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_2f91a07d0891228b7332afeffe8b7a42</data>
    </edge>
    <edge source="Entity Extraction" target="Deduplication and Merging">
      <data key="d4">Deduplication and Merging ensures that entities identified do not duplicate information in the knowledge graph."+</data>
      <data key="d5">data integrity, efficiency</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_2f91a07d0891228b7332afeffe8b7a42</data>
    </edge>
    <edge source="Entity Extraction" target="Relationship Ranking">
      <data key="d4">Entity Extraction relies on the top-ranked relationships identified during the Relationship Ranking phase.</data>
      <data key="d5">selection criteria, relevance</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_33641a6c02e3c56addefda7f4288b5b7</data>
    </edge>
    <edge source="Entity Extraction" target="Context Construction">
      <data key="d4">Context Construction uses the entities retrieved during Entity Extraction to build a comprehensive context.</data>
      <data key="d5">contextualization, integration</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_33641a6c02e3c56addefda7f4288b5b7</data>
    </edge>
    <edge source="Entity Extraction" target="Response Generation">
      <data key="d4">Response Generation relies on the outputs of Entity Extraction to formulate coherent responses based on extracted data.</data>
      <data key="d5">dependency, data processing</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_81db384c7c323402180915d5a9c65d67</data>
    </edge>
    <edge source="Batch Processing" target="Cross-Referencing">
      <data key="d4">Batch Processing optimizes how Cross-Referencing handles multiple items simultaneously, enhancing efficiency.</data>
      <data key="d5">efficiency, optimization</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_46387a7852ed874c1b3ab073c392b95b</data>
    </edge>
    <edge source="Parallel Processing" target="Knowledge Graph and Vector Search Integration">
      <data key="d4">Parallel Processing is part of the Knowledge Graph and Vector Search Integration aimed at optimizing query handling.</data>
      <data key="d5">optimization, process efficiency</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_33641a6c02e3c56addefda7f4288b5b7</data>
    </edge>
    <edge source="Caching" target="API Batching">
      <data key="d4">Both Caching and API Batching are examples of Optimization Strategies aimed at minimizing redundant API calls and improving performance.</data>
      <data key="d5">efficiency strategies, performance improvement</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_81db384c7c323402180915d5a9c65d67</data>
    </edge>
    <edge source="Caching" target="Memory Usage Monitoring">
      <data key="d4">Caching directly aids in monitoring memory usage by reducing access times and resource demands.</data>
      <data key="d5">efficiency, resource optimization</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_b3a95e34944a889758e6b0c6d679b0e6</data>
    </edge>
    <edge source="Graph Storage" target="Graph Operations">
      <data key="d4">Graph Operations are executed on the entities and relationships stored in Graph Storage for analysis."+</data>
      <data key="d5">analysis, operations</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_2f91a07d0891228b7332afeffe8b7a42</data>
    </edge>
    <edge source="Graph Storage" target="Serialization">
      <data key="d4">Serialization utilizes Graph Storage to maintain the graph's state between application runs."+</data>
      <data key="d5">persistence, storage</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_2f91a07d0891228b7332afeffe8b7a42</data>
    </edge>
    <edge source="remove_document_by_id" target="SmolRag class">
      <data key="d4">The remove_document_by_id function is part of the SmolRag class, providing the ability to delete documents from the system by their document ID.</data>
      <data key="d5">document removal, class functionality</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_9e30dc3a8159dc93859b8664cf4db134</data>
    </edge>
    <edge source="remove_document_by_id" target="source_to_doc_kv">
      <data key="d4">The source_to_doc_kv variable is used in conjunction with remove_document_by_id to identify and eliminate specific documents based on their file paths.:|:source_to_doc_kv provides the necessary mapping to locate and remove documents using their IDs in remove_document_by_id.</data>
      <data key="d5">document identification, removal process:|:document identification, operational functionality</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_9e30dc3a8159dc93859b8664cf4db134:|:excerpt_id_3de9971b782eac586dc03f5864ad60f3</data>
    </edge>
    <edge source="OpenAiLlm" target="get_embedding">
      <data key="d4">OpenAiLlm is the interface that provides the method get_embedding() for obtaining text embeddings, linking the class with its functionalities.:|:OpenAiLlm provides the get_embedding method to obtain text embeddings from OpenAI API.</data>
      <data key="d5">API interface, functionality linkage:|:API usage, embedding retrieval</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_23b091ffbf5cfdc68a155822645cbe8f:|:excerpt_id_5421cc029bd40962f8f839ecf4a8d136</data>
    </edge>
    <edge source="OpenAiLlm" target="get_completion">
      <data key="d4">OpenAiLlm encapsulates the get_completion() method for generating text completions, establishing a direct relationship between the class and its capabilities.:|:OpenAiLlm encapsulates the get_completion method to generate completions based on prompts.</data>
      <data key="d5">API interface, functionality linkage:|:API usage, text generation</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_23b091ffbf5cfdc68a155822645cbe8f:|:excerpt_id_5421cc029bd40962f8f839ecf4a8d136</data>
    </edge>
    <edge source="OpenAiLlm" target="Debug Keyword Extraction">
      <data key="d4">Debug Keyword Extraction uses OpenAiLlm for generating insights and solutions to keyword extraction issues.</data>
      <data key="d5">troubleshooting, API utilization</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_fcc70198270a02757f7c7194e7f32c25</data>
    </edge>
    <edge source="OpenAiLlm" target="Trace Graph Traversal">
      <data key="d4">Trace Graph Traversal operates with OpenAiLlm to enhance the understanding of queries through detailed insights.</data>
      <data key="d5">query enhancement, API function</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_fcc70198270a02757f7c7194e7f32c25</data>
    </edge>
    <edge source="OpenAiLlm" target="gpt-4">
      <data key="d4">OpenAiLlm allows for the use of the gpt-4 model, showcasing its capability to support different models for language processing.</data>
      <data key="d5">model usage, flexibility</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_754be9b4e6d3cf65d9e60bea7edeb331</data>
    </edge>
    <edge source="OpenAiLlm" target="text-embedding-3-large">
      <data key="d4">OpenAiLlm enables the specification of an embedding model, such as text-embedding-3-large, for generating embeddings.</data>
      <data key="d5">model specification, functionality</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_754be9b4e6d3cf65d9e60bea7edeb331</data>
    </edge>
    <edge source="OpenAiLlm" target="JsonKvStore">
      <data key="d4">JsonKvStore is used within OpenAiLlm to manage caching for query and embedding results.</data>
      <data key="d5">caching, data management</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_754be9b4e6d3cf65d9e60bea7edeb331</data>
    </edge>
    <edge source="OpenAiLlm" target="gpt-3.5-turbo">
      <data key="d4">OpenAiLlm can use gpt-3.5-turbo as an API model in its operations, demonstrating its functionality with multiple models.</data>
      <data key="d5">model integration, operational functionality</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_754be9b4e6d3cf65d9e60bea7edeb331</data>
    </edge>
    <edge source="upsert" target="base_store">
      <data key="d4">The upsert function interacts directly with the base_store to write buffered items, creating a functional relationship.</data>
      <data key="d5">functionality, interaction</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_01ca0248de3b39f386fb010c1c75727a</data>
    </edge>
    <edge source="upsert" target="save">
      <data key="d4">The upsert function calls save when the buffer reaches a certain size, linking their roles in data handling processes.:|:The save function calls the upsert function to ensure that the buffer data is updated in the base storage before clearing it.</data>
      <data key="d5">data management, function call:|:process, linkage</data>
      <data key="d6">17.0</data>
      <data key="d7">excerpt_id_01ca0248de3b39f386fb010c1c75727a:|:excerpt_id_b6a3bf9520f31279c695c790576b2216</data>
    </edge>
    <edge source="save" target="remove">
      <data key="d4">The remove function affects the save function as keys must be removed before saving the store to ensure that only desired data is persisted.</data>
      <data key="d5">data management, state persistence</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_048561f7b91b06effbd2fa38d6b6e86d</data>
    </edge>
    <edge source="Top-k Excerpts" target="Context for the LLM">
      <data key="d4">Top-k Excerpts provide the foundational context that informs the LLM's responses based on the initial embedding analysis.</data>
      <data key="d5">input generation, context building</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_ad053b14f30e2ca2cbde4877068102ef</data>
    </edge>
    <edge source="NetworkXGraphStore" target="add_node()">
      <data key="d4">The NetworkXGraphStore class utilizes the add_node() function to incorporate new entities into the database.</data>
      <data key="d5">entity management, graph database</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_90c7838ea456feae14abfd87267bdfeb</data>
    </edge>
    <edge source="NetworkXGraphStore" target="add_edge()">
      <data key="d4">The add_edge() function is used by the NetworkXGraphStore to establish relationships between the added nodes.</data>
      <data key="d5">relationship management, graph database</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_90c7838ea456feae14abfd87267bdfeb</data>
    </edge>
    <edge source="NetworkXGraphStore" target="get_node()">
      <data key="d4">The get_node() function allows the NetworkXGraphStore to retrieve and access specific entities based on their names.</data>
      <data key="d5">entity retrieval, graph database</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_90c7838ea456feae14abfd87267bdfeb</data>
    </edge>
    <edge source="NetworkXGraphStore" target="degree()">
      <data key="d4">The degree() function provides insight into the connectivity of nodes managed by the NetworkXGraphStore.</data>
      <data key="d5">network analysis, connectivity</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_90c7838ea456feae14abfd87267bdfeb</data>
    </edge>
    <edge source="NetworkXGraphStore" target="graph_db">
      <data key="d4">graph_db is a specific instance of `NetworkXGraphStore` that customizes the knowledge graph storage location in SmolRAG.</data>
      <data key="d5">configuration usage, instantiation</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_517fe6133908102185036fafd1625255</data>
    </edge>
    <edge source="NetworkXGraphStore" target="add_node() method">
      <data key="d4">The add_node() method is essential for creating entities within the NetworkXGraphStore class."+</data>
      <data key="d5">functionality</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_0e491c74d7a88194d22edb5dcf034178</data>
    </edge>
    <edge source="JsonKvStore" target="add()">
      <data key="d4">The JsonKvStore uses the add() function to introduce new key-value pairs for managing cached data.</data>
      <data key="d5">data management, caching</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_90c7838ea456feae14abfd87267bdfeb</data>
    </edge>
    <edge source="JsonKvStore" target="get_by_key()">
      <data key="d4">The get_by_key() function is integral to the JsonKvStore for accessing values based on keys.</data>
      <data key="d5">data retrieval, key-value store</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_90c7838ea456feae14abfd87267bdfeb</data>
    </edge>
    <edge source="JsonKvStore" target="source_to_doc_kv">
      <data key="d4">source_to_doc_kv is created using the JsonKvStore API to store mapping from sources to documents.</data>
      <data key="d5">data storage, API usage</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_51c03df854681a0be44a0cb38da8ceed</data>
    </edge>
    <edge source="JsonKvStore" target="doc_to_source_kv">
      <data key="d4">doc_to_source_kv is created using the JsonKvStore API to store mapping from documents to sources.</data>
      <data key="d5">data storage, API usage</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_51c03df854681a0be44a0cb38da8ceed</data>
    </edge>
    <edge source="JsonKvStore" target="doc_to_excerpt_kv">
      <data key="d4">doc_to_excerpt_kv is created using the JsonKvStore API to store mapping from documents to excerpts.</data>
      <data key="d5">data storage, API usage</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_51c03df854681a0be44a0cb38da8ceed</data>
    </edge>
    <edge source="JsonKvStore" target="excerpt_kv">
      <data key="d4">excerpt_kv is created using the JsonKvStore API to store excerpts data.</data>
      <data key="d5">data storage, API usage</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_51c03df854681a0be44a0cb38da8ceed</data>
    </edge>
    <edge source="Excerpt Retrieval" target="Summary Inclusion">
      <data key="d4">Excerpt Retrieval includes Summary Inclusion to provide context for the excerpts that are selected during the search process.</data>
      <data key="d5">contextual relevance, information management</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_dcec4d38f0e3c0cff01b04e3b7bdf6ce</data>
    </edge>
    <edge source="Excerpt Retrieval" target="Prompt Construction">
      <data key="d4">Excerpt Retrieval flows into Prompt Construction, where the retrieved texts are used to build prompts for language models.</data>
      <data key="d5">workflow, integration</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_dcec4d38f0e3c0cff01b04e3b7bdf6ce</data>
    </edge>
    <edge source="APIKeyHeader" target="query_endpoint">
      <data key="d4">query_endpoint utilizes APIKeyHeader to ensure that requests are authenticated via API keys.</data>
      <data key="d5">authentication, request handling</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_de1f8b8f458f74d9b97d639f4ede4c9c</data>
    </edge>
    <edge source="FastAPI" target="SmolRag API">
      <data key="d4">The SmolRag API is built using the FastAPI framework, which allows it to operate efficiently and effectively.:|:The SmolRag API is developed using the FastAPI framework, leveraging its capabilities for building efficient APIs.</data>
      <data key="d5">framework integration, efficiency:|:framework usage, development</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_b9097e11b1551a13941242fc121df006:|:excerpt_id_df5dd931f692d6413ff6151ca37e0c76</data>
    </edge>
    <edge source="FastAPI" target="uvicorn">
      <data key="d4">uvicorn is used to run the FastAPI application which is defined in the code provided.</data>
      <data key="d5">deployment, web framework</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_c4c3ec315a84b895249de1a09e9984ee</data>
    </edge>
    <edge source="FastAPI" target="query_endpoint">
      <data key="d4">query_endpoint is an asynchronous function defined within the FastAPI framework for handling API requests.</data>
      <data key="d5">framework integration, API handling</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_1123c47dc960c83e906ef0521acbf692</data>
    </edge>
    <edge source="query_endpoint" target="QueryRequest">
      <data key="d4">The query_endpoint function uses QueryRequest to ensure the incoming data is structured correctly before further processing.</data>
      <data key="d5">data validation, function usage</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_3720213ae71a08acca1f7e46b7864f3e</data>
    </edge>
    <edge source="query_endpoint" target="request timeouts">
      <data key="d4">The query_endpoint function may utilize request timeouts to handle cases where processing might take too long.</data>
      <data key="d5">performance, responsiveness</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_3720213ae71a08acca1f7e46b7864f3e</data>
    </edge>
    <edge source="query_endpoint" target="process_query_with_timeout">
      <data key="d4">The query_endpoint function calls process_query_with_timeout to handle queries with a timeout limit.:|:query_endpoint directly invokes process_query_with_timeout to execute the query handling process.</data>
      <data key="d5">function invocation, error handling:|:function execution, dependency</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_1123c47dc960c83e906ef0521acbf692:|:excerpt_id_f460391fbb913e0e360f66999d788989</data>
    </edge>
    <edge source="input_docs" target="Document Ingestion Issues">
      <data key="d4">input_docs is the location from which documents are retrieved, directly impacting the efficiency of the Document Ingestion process.</data>
      <data key="d5">location, efficiency</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_81631ae5feaa160d24c7aa3331760a64</data>
    </edge>
    <edge source="Document Ingestion Issues" target="Permission Issues">
      <data key="d4">Permission Issues are one of the causes of Document Ingestion Issues, affecting the accessibility of necessary documents.</data>
      <data key="d5">accessibility, cause</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_81631ae5feaa160d24c7aa3331760a64</data>
    </edge>
    <edge source="Document Ingestion Issues" target="Rate Limiting">
      <data key="d4">Rate Limiting is implemented to mitigate issues that arise due to API rate limits during document ingestion.</data>
      <data key="d5">API management, solution</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_81631ae5feaa160d24c7aa3331760a64</data>
    </edge>
    <edge source="Document Ingestion Issues" target="check_resources">
      <data key="d4">check_resources helps to identify resource-related issues that can hinder efficient document ingestion.</data>
      <data key="d5">resource management, problem solving</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_81631ae5feaa160d24c7aa3331760a64</data>
    </edge>
    <edge source="Rate Limiting" target="SmolRag API">
      <data key="d4">The SmolRag API can implement Rate Limiting to control the request flow and prevent abuse.</data>
      <data key="d5">resource management, security</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_df5dd931f692d6413ff6151ca37e0c76</data>
    </edge>
    <edge source="Rate Limiting" target="slowapi">
      <data key="d4">The slowapi package is utilized by the SmolRag API to implement the Rate Limiting feature.</data>
      <data key="d5">implementation, middleware</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_df5dd931f692d6413ff6151ca37e0c76</data>
    </edge>
    <edge source="Rate Limiting" target="API">
      <data key="d4">Rate Limiting is vital for managing API calls and preventing system overloads.</data>
      <data key="d5">system management, performance</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_b3a95e34944a889758e6b0c6d679b0e6</data>
    </edge>
    <edge source="Rate Limiting" target="Retry Logic">
      <data key="d4">Rate Limiting and Retry Logic are both strategies aimed at managing API interactions to minimize errors and maintain functionality.</data>
      <data key="d5">error handling, API strategy</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_b35b21c7869785d9ef1329f450f10a5d</data>
    </edge>
    <edge source="Rate Limiting" target="OpenAI API">
      <data key="d4">Rate Limiting mechanisms are implemented within the OpenAI API to maintain performance and service stability during high demand.</data>
      <data key="d5">resource management, performance</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_30d921e9ed8b86da0f8b9366dfbaa2a7</data>
    </edge>
    <edge source="Mix Query Method" target="Knowledge Graph Query">
      <data key="d4">The Mix Query Method utilizes the Knowledge Graph Query to ensure structured data is considered in complex inquiries.</data>
      <data key="d5">data structuring, query efficacy</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_44cefee3a8e8faba70704cd4a4d676ae</data>
    </edge>
    <edge source="Knowledge Graph Query" target="Example API Requests">
      <data key="d4">Knowledge Graph Query is showcased within the Example API Requests, highlighting its specific application case.</data>
      <data key="d5">usage, illustration</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_453681d430472ffcca54f90331e78fee</data>
    </edge>
    <edge source="Similarity Computation" target="Top-K Selection">
      <data key="d4">Top-K Selection follows Similarity Computation to determine which excerpts to present based on their ranking.</data>
      <data key="d5">result determination, selection process</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_9c6c3d629e2b94029b3f534beffe4780</data>
    </edge>
    <edge source="Entity Embeddings" target="Relationship Embeddings">
      <data key="d4">Entity Embeddings are linked to Relationship Embeddings by providing details about the entities involved in relationships.</data>
      <data key="d5">data linkage, semantic connections</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_9c6c3d629e2b94029b3f534beffe4780</data>
    </edge>
    <edge source="Entity Embeddings" target="Semantic Search">
      <data key="d4">Entity Embeddings enhance the process of Semantic Search by providing meaningful representations of entities.</data>
      <data key="d5">feature, functionality</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_7c686d971d2fea42e5ba02fc141455aa</data>
    </edge>
    <edge source="Relationship Embeddings" target="Semantic Search">
      <data key="d4">Relationship Embeddings support Semantic Search by capturing the meaning behind relationships based on their characteristics.</data>
      <data key="d5">feature, functionality</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_7c686d971d2fea42e5ba02fc141455aa</data>
    </edge>
    <edge source="custom_chunking_strategy" target="rag">
      <data key="d4">rag uses the custom_chunking_strategy function to customize how documents are chunked for processing.</data>
      <data key="d5">configuration, implementation</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_52671ae166986e6c86752cd3194af2af</data>
    </edge>
    <edge source="custom_chunking_strategy" target="text">
      <data key="d4">custom_chunking_strategy processes the text input to create chunks based on the defined strategy.</data>
      <data key="d5">text processing, chunking</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_52671ae166986e6c86752cd3194af2af</data>
    </edge>
    <edge source="custom_chunking_strategy" target="SmolRag class">
      <data key="d4">The SmolRag class can be configured with custom strategies like custom_chunking_strategy for processing text in specific ways.</data>
      <data key="d5">configuration, customization</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_3de9971b782eac586dc03f5864ad60f3</data>
    </edge>
    <edge source="Vector Search" target="Knowledge Graph Queries">
      <data key="d4">Both Vector Search and Knowledge Graph Queries are features that can introduce performance bottlenecks in query performance.</data>
      <data key="d5">performance bottlenecks</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_e22b8da6dcf20fed5f472fe57b90902b</data>
    </edge>
    <edge source="Vector Search" target="Query Caching">
      <data key="d4">Query Caching can optimize the performance of the Vector Search by preventing repeated processing of identical queries.</data>
      <data key="d5">optimization strategy</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_e22b8da6dcf20fed5f472fe57b90902b</data>
    </edge>
    <edge source="Vector Search" target="Local KG">
      <data key="d4">Vector Search and Local KG offer different speeds and detail levels, providing options based on urgency and detail needed.</data>
      <data key="d5">query performance, trade-offs</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_84dc24216724ab859775d987f5bb2e19</data>
    </edge>
    <edge source="Knowledge Graph Queries" target="LLM Generation">
      <data key="d4">Knowledge Graph Queries can feed into LLM Generation, contributing to the processing complexity and time required for generating responses.</data>
      <data key="d5">data processing flow</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_e22b8da6dcf20fed5f472fe57b90902b</data>
    </edge>
    <edge source="LLM Generation" target="Context Limitation">
      <data key="d4">Context Limitation impacts LLM Generation by reducing the amount of data to be processed, making it faster and more efficient.</data>
      <data key="d5">processing efficiency</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_e22b8da6dcf20fed5f472fe57b90902b</data>
    </edge>
    <edge source="Query Caching" target="Embedding Caching">
      <data key="d4">Embedding Caching complements Query Caching by storing embeddings, thereby further speeding up response times.</data>
      <data key="d5">optimized performance</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_e22b8da6dcf20fed5f472fe57b90902b</data>
    </edge>
    <edge source="Graph Degree" target="Top Entities">
      <data key="d4">The Graph Degree metric is essential for identifying and ranking the relevance of Top Entities based on their connectivity.</data>
      <data key="d5">network analysis, relevance</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_9c79fe4d43437c480a6cef767c63d764</data>
    </edge>
    <edge source="Graph Degree" target="Structured Context">
      <data key="d4">The Structured Context function helps organize information from Graph Degree, providing clarity to the connectivity analysis.</data>
      <data key="d5">data organization, analysis support</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_9c79fe4d43437c480a6cef767c63d764</data>
    </edge>
    <edge source="Strengths" target="Weaknesses">
      <data key="d4">The Strengths and Weaknesses provide a balanced view of the extraction process, highlighting both its capabilities and its limitations.</data>
      <data key="d5">evaluation, analysis balance</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_9c79fe4d43437c480a6cef767c63d764</data>
    </edge>
    <edge source="SmolRag API" target="QueryRequest">
      <data key="d4">The SmolRag API processes incoming requests structured according to the QueryRequest configuration.</data>
      <data key="d5">request processing, configuration</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_df5dd931f692d6413ff6151ca37e0c76</data>
    </edge>
    <edge source="SmolRag API" target="CORS Configuration">
      <data key="d4">CORS Configuration allows the SmolRag API to accept requests from web applications hosted on different domains.</data>
      <data key="d5">cross-origin, web integration</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_df5dd931f692d6413ff6151ca37e0c76</data>
    </edge>
    <edge source="SmolRag API" target="API Versioning">
      <data key="d4">API Versioning is a feature that enables the SmolRag API to manage different versions simultaneously, facilitating updates without breaking existing implementations.</data>
      <data key="d5">backward compatibility, evolution</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_df5dd931f692d6413ff6151ca37e0c76</data>
    </edge>
    <edge source="SmolRag API" target="v1_router">
      <data key="d4">The v1_router is included in the SmolRag API to handle version 1 of the API calls.</data>
      <data key="d5">versioning, API functionality</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_b9097e11b1551a13941242fc121df006</data>
    </edge>
    <edge source="SmolRag API" target="v2_router">
      <data key="d4">The v2_router is included in the SmolRag API to handle version 2 of the API calls.</data>
      <data key="d5">versioning, API functionality</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_b9097e11b1551a13941242fc121df006</data>
    </edge>
    <edge source="QueryRequest" target="api/main.py">
      <data key="d4">QueryRequest is a model defined in api/main.py for structuring the requests sent to the API.</data>
      <data key="d5">API structure, request handling</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_0c67144102b1d81212b12e6ef61ad148</data>
    </edge>
    <edge source="QueryRequest" target="Query Endpoint Configuration">
      <data key="d4">The Query Endpoint Configuration utilizes the QueryRequest model to define expected request parameters, ensuring validation and structure of incoming data.</data>
      <data key="d5">request structure, validation</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_ed82afd79e512c2446b7d0cddfce1ee3</data>
    </edge>
    <edge source="QueryRequest" target="request format">
      <data key="d4">The QueryRequest model defines and validates the request format that the FastAPI endpoint expects.</data>
      <data key="d5">validation, structure</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_3720213ae71a08acca1f7e46b7864f3e</data>
    </edge>
    <edge source="QueryRequest" target="Query Endpoint">
      <data key="d4">The Query Endpoint uses the QueryRequest model to structure and validate incoming data for processing queries.</data>
      <data key="d5">data validation, API design</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_e0d2ab7be18b619d1b6cfd5900b9347e</data>
    </edge>
    <edge source="High Memory Usage" target="Errors during entity extraction">
      <data key="d4">High Memory Usage may contribute to or cause Errors during entity extraction due to resource exhaustion or performance issues.</data>
      <data key="d5">system performance, error correlation</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_98e0d419e4d21933f163a50d476d4728</data>
    </edge>
    <edge source="Errors during entity extraction" target="LLM API Errors">
      <data key="d4">LLM API Errors can directly lead to Errors during entity extraction as they hinder the expected functioning of the extraction process.</data>
      <data key="d5">direct impact, functionality issue</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_98e0d419e4d21933f163a50d476d4728</data>
    </edge>
    <edge source="Errors during entity extraction" target="Malformed Content">
      <data key="d4">Malformed Content is a potential cause of Errors during entity extraction, making it difficult to correctly parse and extract entities.</data>
      <data key="d5">data quality, extraction challenge</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_98e0d419e4d21933f163a50d476d4728</data>
    </edge>
    <edge source="Errors during entity extraction" target="Timeout Issues">
      <data key="d4">Timeout Issues can result in Errors during entity extraction as they lead to premature termination of the data retrieval process.</data>
      <data key="d5">time management, operational delay</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_98e0d419e4d21933f163a50d476d4728</data>
    </edge>
    <edge source="Errors during entity extraction" target="Implement Robust Error Handling">
      <data key="d4">Implement Robust Error Handling is a solution designed to mitigate Errors during entity extraction by anticipating and managing failures.</data>
      <data key="d5">error management, proactive solution</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_98e0d419e4d21933f163a50d476d4728</data>
    </edge>
    <edge source="LLM API Errors" target="Implement Robust Error Handling">
      <data key="d4">Implementing Robust Error Handling can potentially resolve or lessen LLM API Errors by providing mechanisms to deal with unexpected failures.</data>
      <data key="d5">solution effectiveness, mitigation strategies</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_98e0d419e4d21933f163a50d476d4728</data>
    </edge>
    <edge source="Cross-Referencing" target="Embedding Cache">
      <data key="d4">Cross-Referencing relies on the Embedding Cache to improve performance and avoid redundant calls during processing.</data>
      <data key="d5">performance optimization, data management</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_46387a7852ed874c1b3ab073c392b95b</data>
    </edge>
    <edge source="High-Quality Models" target="Embedding Quality and Evaluation">
      <data key="d4">High-Quality Models directly affect the results that come from the Evaluation Framework, ensuring accurate retrieval performance.</data>
      <data key="d5">quality assurance, performance evaluation</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_46387a7852ed874c1b3ab073c392b95b</data>
    </edge>
    <edge source="Key-Value Stores" target="Log Files">
      <data key="d4">Key-Value Stores and Log Files are both storage mechanisms in the application, indicating a connection through their roles in data management.</data>
      <data key="d5">storage systems, data management</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_e329d73f72654b591f8c6832617f0209</data>
    </edge>
    <edge source="Content Hashing" target="Change Detection">
      <data key="d4">Content Hashing is a method used in Change Detection to identify document changes effectively.</data>
      <data key="d5">change identification, data accuracy</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_7fedf9d4b30621d6c79f65db2d09ce1a</data>
    </edge>
    <edge source="Path-Based Tracking" target="Change Detection">
      <data key="d4">Path-Based Tracking complements Change Detection by monitoring files and their hashes for modification.</data>
      <data key="d5">change monitoring, efficient tracking</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_7fedf9d4b30621d6c79f65db2d09ce1a</data>
    </edge>
    <edge source="Automatic Updates" target="Change Detection">
      <data key="d4">Automatic Updates occur as a result of Change Detection when documents are modified, keeping the system current.</data>
      <data key="d5">system updates, data management</data>
      <data key="d6">14.0</data>
      <data key="d7">excerpt_id_7fedf9d4b30621d6c79f65db2d09ce1a</data>
    </edge>
    <edge source="Selective Processing" target="Change Detection">
      <data key="d4">Selective Processing helps optimize Change Detection by ensuring only modified documents are addressed.</data>
      <data key="d5">optimization, resource management</data>
      <data key="d6">14.0</data>
      <data key="d7">excerpt_id_7fedf9d4b30621d6c79f65db2d09ce1a</data>
    </edge>
    <edge source="Logging" target="PerformanceMonitor">
      <data key="d4">The PerformanceMonitor class incorporates logging to provide detailed insights into performance-critical operations.</data>
      <data key="d5">monitoring, performance tracking</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_a932de00c67d51e468546b00d37959d4</data>
    </edge>
    <edge source="Asynchronous Processing" target="Async Query Endpoint">
      <data key="d4">The Async Query Endpoint enables users to initiate background tasks as part of the Asynchronous Processing feature </data>
      <data key="d5">endpoint functionality, performance optimization</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_1e99d3a705e109f5103d3d1958b6a8db</data>
    </edge>
    <edge source="QueryCache" target="get_cache_key">
      <data key="d4">get_cache_key is a method of the QueryCache class that facilitates creating unique keys for caching.:|:The get_cache_key function belongs to the QueryCache class, serving the purpose of creating unique keys for caching queries.</data>
      <data key="d5">method, class association:|:class method relationship</data>
      <data key="d6">17.0</data>
      <data key="d7">excerpt_id_2cca7c90cc52ed8a7fc9fa49eb39d02c:|:excerpt_id_abcf57555611c91d669a12c878d8428b</data>
    </edge>
    <edge source="QueryCache" target="get_from_cache">
      <data key="d4">The get_from_cache function is a method of QueryCache that utilizes the unique keys generated for retrieving cached data.:|:get_from_cache method is part of the QueryCache class, used to retrieve cached query results based on the generated keys.</data>
      <data key="d5">method, class association:|:class method relationship</data>
      <data key="d6">17.0</data>
      <data key="d7">excerpt_id_2cca7c90cc52ed8a7fc9fa49eb39d02c:|:excerpt_id_abcf57555611c91d669a12c878d8428b</data>
    </edge>
    <edge source="QueryCache" target="save_to_cache">
      <data key="d4">save_to_cache method is a function of QueryCache that saves results to the cache for efficient future access.:|:The save_to_cache function is a method within QueryCache responsible for storing query results into files using generated cache keys.</data>
      <data key="d5">method, class association:|:class method relationship</data>
      <data key="d6">17.0</data>
      <data key="d7">excerpt_id_2cca7c90cc52ed8a7fc9fa49eb39d02c:|:excerpt_id_abcf57555611c91d669a12c878d8428b</data>
    </edge>
    <edge source="get_cache_key" target="cache_dir">
      <data key="d4">get_cache_key utilizes cache_dir to determine where to save/cache the results of queries.</data>
      <data key="d5">data management, functionality</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_abcf57555611c91d669a12c878d8428b</data>
    </edge>
    <edge source="get_cache_key" target="cache_file">
      <data key="d4">The cache_file path is generated from the cache key produced by the get_cache_key function, creating a direct link between the two.</data>
      <data key="d5">dependency, cache management</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_2cca7c90cc52ed8a7fc9fa49eb39d02c</data>
    </edge>
    <edge source="get_from_cache" target="cached_result">
      <data key="d4">get_from_cache retrieves and assigns the result to cached_result if available.</data>
      <data key="d5">data retrieval, variable management</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_abcf57555611c91d669a12c878d8428b</data>
    </edge>
    <edge source="get_from_cache" target="cache_file">
      <data key="d4">The get_from_cache function checks for the existence of a cache_file that corresponds to a query's cache key, directly relying on it for data retrieval.</data>
      <data key="d5">dependency, data retrieval</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_2cca7c90cc52ed8a7fc9fa49eb39d02c</data>
    </edge>
    <edge source="save_to_cache" target="query_text">
      <data key="d4">save_to_cache uses query_text to create a cache entry for the processed result.</data>
      <data key="d5">data storage, variable management</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_abcf57555611c91d669a12c878d8428b</data>
    </edge>
    <edge source="cache_dir" target="clean_old_cache_files">
      <data key="d4">clean_old_cache_files utilizes cache_dir to locate and manage old cache files, maintaining system efficiency.</data>
      <data key="d5">cache management, file organization</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_f460391fbb913e0e360f66999d788989</data>
    </edge>
    <edge source="query_type" target="payload">
      <data key="d4">The payload includes the query_type as part of the data being sent to the SmolRAG API for processing."+</data>
      <data key="d5">data structure</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_63cd91bc48a4a86dbc4244526ba83736</data>
    </edge>
    <edge source="Global Knowledge Graph Query Process" target="Keyword Extraction">
      <data key="d4">The Global Knowledge Graph Query Process initiates with Keyword Extraction, which is critical for subsequent steps in the process.</data>
      <data key="d5">process initiation, sequential dependency</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_33641a6c02e3c56addefda7f4288b5b7</data>
    </edge>
    <edge source="Global Knowledge Graph Query Process" target="Relationship Search">
      <data key="d4">Relationship Search follows Keyword Extraction and is central to the function of the Global Knowledge Graph Query Process.</data>
      <data key="d5">process flow, interdependence</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_33641a6c02e3c56addefda7f4288b5b7</data>
    </edge>
    <edge source="Keyword Extraction" target="RAG">
      <data key="d4">RAG utilizes the Keyword Extraction function to improve the accuracy of knowledge graph queries.</data>
      <data key="d5">query management, function utilization</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_fcc70198270a02757f7c7194e7f32c25</data>
    </edge>
    <edge source="Relationship Search" target="Relationship Ranking">
      <data key="d4">The output of Relationship Search directly feeds into Relationship Ranking to determine the relevance of found relationships.</data>
      <data key="d5">dependency, evaluation</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_33641a6c02e3c56addefda7f4288b5b7</data>
    </edge>
    <edge source="Hybrid Knowledge Graph Query Process" target="Dual Search">
      <data key="d4">The Hybrid Knowledge Graph Query Process includes the Dual Search as a key component for enhancing query results.</data>
      <data key="d5">methodology, component integration</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_33641a6c02e3c56addefda7f4288b5b7</data>
    </edge>
    <edge source="get_query_system_prompt" target="get_docs">
      <data key="d4">The function get_query_system_prompt relies on documents obtained by get_docs to formulate the prompts for vector search queries.</data>
      <data key="d5">dependency, operational flow</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_a2942c9d0b2929a3d0693885ce2c32aa</data>
    </edge>
    <edge source="get_extract_entities_prompt" target="extract_json_from_text">
      <data key="d4">The function get_extract_entities_prompt may utilize extracted JSON data as input processed by the extract_json_from_text function.</data>
      <data key="d5">data processing, input-output relationship</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_a2942c9d0b2929a3d0693885ce2c32aa</data>
    </edge>
    <edge source="get_extract_entities_prompt" target="enAiLlm">
      <data key="d4">The enAiLlm function is used in conjunction with get_extract_entities_prompt to process sample excerpts effectively.</data>
      <data key="d5">function interaction, sequential processing</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_cb0e5d0ad627c9ecd6e0fb7b4ac2bb43</data>
    </edge>
    <edge source="Ships" target="Weight">
      <data key="d4">Ships are ranked according to their weight, which influences their categorization and operational characteristics.</data>
      <data key="d5">ranking criteria, classification</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_2f5e12b98d229a1119f45f912ee45c12</data>
    </edge>
    <edge source="Ships" target="Connectivity">
      <data key="d4">Ships are also ranked based on connectivity, indicating the importance of this attribute in their classification.</data>
      <data key="d5">ranking criteria, classification</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_2f5e12b98d229a1119f45f912ee45c12</data>
    </edge>
    <edge source="Test Queries" target="Precision and Recall">
      <data key="d4">Test Queries serve to assess the Precision and Recall of the similarity search results.</data>
      <data key="d5">evaluation process, metrics</data>
      <data key="d6">14.0</data>
      <data key="d7">excerpt_id_9852e72fbe12ed839b385c87873fec09</data>
    </edge>
    <edge source="Model Selection" target="Advanced Models">
      <data key="d4">The process of Model Selection in SmolRAG focuses on incorporating Advanced Models for better performance.</data>
      <data key="d5">enhancement, model comparison</data>
      <data key="d6">14.0</data>
      <data key="d7">excerpt_id_9852e72fbe12ed839b385c87873fec09</data>
    </edge>
    <edge source="v1_router" target="query_endpoint_v1">
      <data key="d4">The query_endpoint_v1 function is associated with the v1_router, processing requests for version 1.</data>
      <data key="d5">API processing, version 1</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_b9097e11b1551a13941242fc121df006</data>
    </edge>
    <edge source="v1_router" target="query_endpoint_v2">
      <data key="d4">The query_endpoint_v2 function interacts with the included v1_router, which represents the v1 API endpoints.</data>
      <data key="d5">functionality, connection</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_453681d430472ffcca54f90331e78fee</data>
    </edge>
    <edge source="v2_router" target="query_endpoint_v2">
      <data key="d4">The query_endpoint_v2 function interacts with the included v2_router, which represents the v2 API endpoints.:|:The query_endpoint_v2 function is associated with the v2_router, processing requests for version 2.</data>
      <data key="d5">functionality, connection:|:API processing, version 2</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_b9097e11b1551a13941242fc121df006:|:excerpt_id_453681d430472ffcca54f90331e78fee</data>
    </edge>
    <edge source="llm.get_completion" target="logger.error">
      <data key="d4">The function llm.get_completion may encounter errors that are logged using the logger.error function for monitoring and debugging purposes.</data>
      <data key="d5">error handling, logging</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_65383440b6cc941c8450b659b284a24d</data>
    </edge>
    <edge source="llm.get_completion" target="retry_with_backoff">
      <data key="d4">The retry_with_backoff function can wrap the llm.get_completion call to manage retries in case of errors.</data>
      <data key="d5">error recovery, retries</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_65383440b6cc941c8450b659b284a24d</data>
    </edge>
    <edge source="llm.get_completion" target="sanitize_content">
      <data key="d4">The sanitize_content function might be employed before passing content to llm.get_completion to ensure quality and correctness.</data>
      <data key="d5">data integrity, preparation</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_65383440b6cc941c8450b659b284a24d</data>
    </edge>
    <edge source="logger.error" target="retry_with_backoff">
      <data key="d4">The retry_with_backoff function can also log errors through logger.error which aids in understanding the reasons for retries.</data>
      <data key="d5">error tracking, retry management</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_65383440b6cc941c8450b659b284a24d</data>
    </edge>
    <edge source="with_file_lock" target="File Permission Problems">
      <data key="d4">The with_file_lock function helps address File Permission Problems by ensuring exclusive access to files during operations.</data>
      <data key="d5">concurrent access, file safety</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_65383440b6cc941c8450b659b284a24d</data>
    </edge>
    <edge source="backup_vector_store" target="Vector Store Issues">
      <data key="d4">The backup_vector_store function is a solution for mitigating risks associated with Vector Store Issues by preserving data.</data>
      <data key="d5">data preservation, risk mitigation</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_65383440b6cc941c8450b659b284a24d</data>
    </edge>
    <edge source="paragraphs" target="current_chunk">
      <data key="d4">current_chunk is built from the paragraphs during the iteration in the custom_chunking_strategy.</data>
      <data key="d5">text building, iteration</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_52671ae166986e6c86752cd3194af2af</data>
    </edge>
    <edge source="rag" target="verify_embedding_dimensions">
      <data key="d4">rag is utilized in the verify_embedding_dimensions function to query and validate embedding dimensions.</data>
      <data key="d5">functional relationship, validation</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_8125dcd822731acc0c981b8a1307c4d3</data>
    </edge>
    <edge source="rag" target="inspect_graph">
      <data key="d4">The inspect_graph function operates on rag to provide insights into its structure and content of nodes and edges.</data>
      <data key="d5">graph inspection, function operation</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_cb0e5d0ad627c9ecd6e0fb7b4ac2bb43</data>
    </edge>
    <edge source="rag" target="standard_result">
      <data key="d4">RAG provides the standard result as output for a typical querying approach, demonstrating its functionality.</data>
      <data key="d5">querying interface, output</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_cbb4e8dad766e2f663005e81522d4b82</data>
    </edge>
    <edge source="rag" target="local_kg_result">
      <data key="d4">RAG generates a local knowledge graph result based on specific querying actions, showcasing its versatility.</data>
      <data key="d5">querying interface, output</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_cbb4e8dad766e2f663005e81522d4b82</data>
    </edge>
    <edge source="rag" target="global_kg_result">
      <data key="d4">RAG is responsible for producing global knowledge graph results, reflecting its comprehensive querying capability.</data>
      <data key="d5">querying interface, output</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_cbb4e8dad766e2f663005e81522d4b82</data>
    </edge>
    <edge source="rag" target="hybrid_kg_result">
      <data key="d4">Hybrid KG results stem from RAG's ability to integrate multiple querying approaches for more enriched data retrieval.</data>
      <data key="d5">querying interface, output</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_cbb4e8dad766e2f663005e81522d4b82</data>
    </edge>
    <edge source="rag" target="mix_result">
      <data key="d4">Mix results are a direct product of RAG employing a mixed querying methodology for diverse outputs.</data>
      <data key="d5">querying interface, output</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_cbb4e8dad766e2f663005e81522d4b82</data>
    </edge>
    <edge source="rag" target="documents">
      <data key="d4">The documents() function is utilized within the rag interface to perform a querying action, thus showing their connection in functionality.</data>
      <data key="d5">functional relationship, querying</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_1022857c40806a92372f49dc394cbcfe</data>
    </edge>
    <edge source="rag" target="prune_old_documents">
      <data key="d4">prune_old_documents operates on the rag variable to manage document aging and removal, affecting system performance.</data>
      <data key="d5">memory management, relationship to data</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_f460391fbb913e0e360f66999d788989</data>
    </edge>
    <edge source="excerpt_kv" target="to_excerpt_kv">
      <data key="d4">to_excerpt_kv is defined in relation to excerpt_kv as a mapping variable, indicating a direct connection.</data>
      <data key="d5">variable relationship, data mapping</data>
      <data key="d6">14.0</data>
      <data key="d7">excerpt_id_8efc423402a060df074b1830e38ed77b</data>
    </edge>
    <edge source="Complexity" target="Robust Performance">
      <data key="d4">Complexity may detract from Robust Performance, as intricate processing can slow down response times.</data>
      <data key="d5">performance challenges</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_958fb948ab95cbababa3713159600cc7</data>
    </edge>
    <edge source="Complexity" target="Resource Intensity">
      <data key="d4">Resource Intensity is a direct consequence of Complexity, necessitating more resources to handle intricate queries.</data>
      <data key="d5">resource management</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_958fb948ab95cbababa3713159600cc7</data>
    </edge>
    <edge source="api/main.py" target="app">
      <data key="d4">The app is defined within the api/main.py file, which contains its initial configuration."+:|:The app variable in api/main.py represents the FastAPI application built for processing API requests.</data>
      <data key="d5">configuration, file association:|:API implementation, main entry point</data>
      <data key="d6">38.0</data>
      <data key="d7">excerpt_id_c4c3ec315a84b895249de1a09e9984ee:|:excerpt_id_0c67144102b1d81212b12e6ef61ad148</data>
    </edge>
    <edge source="api/main.py" target="QueryResponse">
      <data key="d4">QueryResponse is a model defined in api/main.py used for formatting the API response to clients.</data>
      <data key="d5">API structure, response handling</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_0c67144102b1d81212b12e6ef61ad148</data>
    </edge>
    <edge source="app" target="CORSMiddleware">
      <data key="d4">The app instance integrates CORSMiddleware to manage CORS settings, enhancing API accessibility and security.:|:The app has been configured to use CORSMiddleware to handle cross-origin requests."+</data>
      <data key="d5">integration, accessibility:|:middleware, functionality</data>
      <data key="d6">26.0</data>
      <data key="d7">excerpt_id_c4c3ec315a84b895249de1a09e9984ee:|:excerpt_id_ed82afd79e512c2446b7d0cddfce1ee3</data>
    </edge>
    <edge source="query_map" target="process_query_with_timeout">
      <data key="d4">query_map is utilized within the process_query_with_timeout function to direct the appropriate processing of queries.</data>
      <data key="d5">variable usage, query processing</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_1123c47dc960c83e906ef0521acbf692</data>
    </edge>
    <edge source="validate_request()" target="query_endpoint()">
      <data key="d4">validate_request() is invoked within query_endpoint() to ensure that incoming requests are valid before processing.</data>
      <data key="d5">request validation, operational flow</data>
      <data key="d6">20.0</data>
      <data key="d7">excerpt_id_0c67144102b1d81212b12e6ef61ad148</data>
    </edge>
    <edge source="set_logger()" target="app/logger.py">
      <data key="d4">set_logger() function is defined within app/logger.py, allowing advanced logging configuration.</data>
      <data key="d5">configuration, functionality</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_9224c08a6f58fb5797f206ea7efc517e</data>
    </edge>
    <edge source="performance metrics" target="data flow">
      <data key="d4">Performance metrics are logged to track the data flow within the system and ensure efficiency.</data>
      <data key="d5">monitoring, process efficiency</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_0c67144102b1d81212b12e6ef61ad148</data>
    </edge>
    <edge source="Rich Context" target="Robust Performance">
      <data key="d4">Rich Context contributes to Robust Performance by providing detailed insights, enhancing overall response quality.</data>
      <data key="d5">feature enhancement</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_958fb948ab95cbababa3713159600cc7</data>
    </edge>
    <edge source="Rich Context" target="Information Overload">
      <data key="d4">Rich Context might lead to Information Overload when too much information is presented, complicating user interpretation.</data>
      <data key="d5">information management</data>
      <data key="d6">5.0</data>
      <data key="d7">excerpt_id_958fb948ab95cbababa3713159600cc7</data>
    </edge>
    <edge source="Rich Context" target="Balancing Challenge">
      <data key="d4">Balancing Challenge affects how well Rich Context is achieved, relating to the coherence of information presented.</data>
      <data key="d5">contextual coherence</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_958fb948ab95cbababa3713159600cc7</data>
    </edge>
    <edge source="Resource Intensity" target="Query Time">
      <data key="d4">Resource Intensity impacts Query Time, as more intensive queries tend to have longer response times.</data>
      <data key="d5">performance, limitations</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_84dc24216724ab859775d987f5bb2e19</data>
    </edge>
    <edge source="Example API Requests" target="Standard Query">
      <data key="d4">Standard Query is demonstrated as part of the Example API Requests, showing how to execute basic queries.</data>
      <data key="d5">usage, illustration</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_453681d430472ffcca54f90331e78fee</data>
    </edge>
    <edge source="kup_path" target="Symptom: Missing or incorrect embeddings">
      <data key="d4">The variable kup_path may be involved in the context explaining symptoms about missing or incorrect embeddings, tying variable context to the symptom description.</data>
      <data key="d5">contextual relevance, variable usage</data>
      <data key="d6">5.0</data>
      <data key="d7">excerpt_id_025af8cc196b4a0f0777ff0f427b6dff</data>
    </edge>
    <edge source="Potential Causes" target="Solutions">
      <data key="d4">Potential Causes describe reasons that lead to issues, which Solutions aims to address, indicating a problem-solution relationship.</data>
      <data key="d5">problem-solution, causality</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_025af8cc196b4a0f0777ff0f427b6dff</data>
    </edge>
    <edge source="Solutions" target="check_embeddings">
      <data key="d4">The check_embeddings function is part of the solutions outlined to verify and resolve embedding issues.</data>
      <data key="d5">verification, resolution</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_025af8cc196b4a0f0777ff0f427b6dff</data>
    </edge>
    <edge source="semantic meaning" target="high-quality embeddings">
      <data key="d4">High-quality embeddings are designed to effectively represent semantic meaning for enhanced information retrieval.</data>
      <data key="d5">data representation, semantic understanding</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_3e377a1f38aab6a7301bb88392d388d4</data>
    </edge>
    <edge source="query()" target="local_kg_query()">
      <data key="d4">Both query() and local_kg_query() functions are part of SmolRag's querying capabilities for data retrieval.</data>
      <data key="d5">querying capabilities, function relationship</data>
      <data key="d6">14.0</data>
      <data key="d7">excerpt_id_9224c08a6f58fb5797f206ea7efc517e</data>
    </edge>
    <edge source="local_kg_query()" target="global_kg_query()">
      <data key="d4">Both local_kg_query() and global_kg_query() aim to retrieve information from different types of knowledge graphs.</data>
      <data key="d5">knowledge graphs, querying methods</data>
      <data key="d6">14.0</data>
      <data key="d7">excerpt_id_9224c08a6f58fb5797f206ea7efc517e</data>
    </edge>
    <edge source="global_kg_query()" target="hybrid_kg_query()">
      <data key="d4">global_kg_query() is one approach while hybrid_kg_query() combines querying methods to enhance information retrieval.</data>
      <data key="d5">knowledge graphs, querying methods</data>
      <data key="d6">14.0</data>
      <data key="d7">excerpt_id_9224c08a6f58fb5797f206ea7efc517e</data>
    </edge>
    <edge source="hybrid_kg_query()" target="mix_query()">
      <data key="d4">The hybrid_kg_query() builds towards a more complex querying strategy as seen in mix_query().</data>
      <data key="d5">querying methodologies, complexity</data>
      <data key="d6">12.0</data>
      <data key="d7">excerpt_id_9224c08a6f58fb5797f206ea7efc517e</data>
    </edge>
    <edge source="uvicorn" target="api.main:app">
      <data key="d4">uvicorn is used to run the FastAPI application defined in api.main:app.</data>
      <data key="d5">application deployment, technology</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_9224c08a6f58fb5797f206ea7efc517e</data>
    </edge>
    <edge source="Memory-Efficient Vector Store" target="initialize">
      <data key="d4">initialize sets up the memory configuration for the Memory-Efficient Vector Store, providing a foundational step for its operations.</data>
      <data key="d5">setup, foundational method</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_bb6ad6a345cbdf6df0cbdc4225260a25</data>
    </edge>
    <edge source="Memory-Efficient Vector Store" target="add_vector">
      <data key="d4">add_vector is a method that allows the Memory-Efficient Vector Store to add new vectors, contributing to its functionality of managing data.</data>
      <data key="d5">data management, functionality</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_bb6ad6a345cbdf6df0cbdc4225260a25</data>
    </edge>
    <edge source="Memory-Efficient Vector Store" target="self.file_path">
      <data key="d4">self.file_path is integral to the Memory-Efficient Vector Store as it determines where the memory-mapped array is stored.</data>
      <data key="d5">storage, configuration</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_bb6ad6a345cbdf6df0cbdc4225260a25</data>
    </edge>
    <edge source="Memory-Efficient Vector Store" target="self.dimensions">
      <data key="d4">self.dimensions is used by the Memory-Efficient Vector Store to define the size of each vector being managed.</data>
      <data key="d5">vector size, configuration</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_bb6ad6a345cbdf6df0cbdc4225260a25</data>
    </edge>
    <edge source="initialize" target="MemmapVectorStore">
      <data key="d4">MemmapVectorStore calls the initialize method to set up the storage structure when creating an instance.</data>
      <data key="d5">initialization, setup</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_03db7bd394b5c8f0cca7825a7bc0976e</data>
    </edge>
    <edge source="initialize" target="save_metadata">
      <data key="d4">When a new MemmapVectorStore is initialized, it also calls save_metadata to save the initial state of the stored vectors.</data>
      <data key="d5">initialization, state management</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_03db7bd394b5c8f0cca7825a7bc0976e</data>
    </edge>
    <edge source="self.metadata" target="top_indices">
      <data key="d4">self.metadata is accessed using the top_indices to retrieve specific document information, establishing a link between the two entities.</data>
      <data key="d5">data retrieval, indexing</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_e329d73f72654b591f8c6832617f0209</data>
    </edge>
    <edge source="Document Ingestion Pipeline" target="Excerpts">
      <data key="d4">The Document Ingestion Pipeline generates Excerpts from the documents for further processing such as summarization and embedding.</data>
      <data key="d5">data processing, information extraction</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_a94908d6a99d624559f006ef6ef883ec</data>
    </edge>
    <edge source="Document Ingestion Pipeline" target="Summaries">
      <data key="d4">The Document Ingestion Pipeline creates Summaries based on the Excerpts generated from the documents.</data>
      <data key="d5">data processing, summarization</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_a94908d6a99d624559f006ef6ef883ec</data>
    </edge>
    <edge source="Document Ingestion Pipeline" target="Entities and Relationships">
      <data key="d4">Entities and Relationships are extracted during the Document Ingestion Pipeline as part of data processing.</data>
      <data key="d5">data extraction, information management</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_a94908d6a99d624559f006ef6ef883ec</data>
    </edge>
    <edge source="Document Ingestion Pipeline" target="Input Directory">
      <data key="d4">The Input Directory provides the documents that are read by the Document Ingestion Pipeline for processing.</data>
      <data key="d5">data source, initial input</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_a94908d6a99d624559f006ef6ef883ec</data>
    </edge>
    <edge source="Document Ingestion Pipeline" target="asyncio">
      <data key="d4">The Document Ingestion Pipeline uses asyncio for parallel processing of tasks to improve efficiency in document handling.</data>
      <data key="d5">parallel processing, efficiency</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_d4a7e13bce25a456a78a4eef57373bf4</data>
    </edge>
    <edge source="Document Ingestion Pipeline" target="rate limiting">
      <data key="d4">Rate limiting is applied within the Document Ingestion Pipeline to manage API calls effectively, thus preventing traffic overload.</data>
      <data key="d5">configuration management, system performance</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_d4a7e13bce25a456a78a4eef57373bf4</data>
    </edge>
    <edge source="Query Processing Pipeline" target="Results">
      <data key="d4">The Query Processing Pipeline processes queries and generates Results based on the execution outcomes according to query types.</data>
      <data key="d5">query execution, output generation</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_a94908d6a99d624559f006ef6ef883ec</data>
    </edge>
    <edge source="Query Processing Pipeline" target="asyncio">
      <data key="d4">The Query Processing Pipeline employs asyncio for concurrent processing of queries, enhancing the system's response time.</data>
      <data key="d5">parallel processing, responsiveness</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_d4a7e13bce25a456a78a4eef57373bf4</data>
    </edge>
    <edge source="Input Directory" target="Import Documents Method">
      <data key="d4">The Input Directory is where documents are placed, and the Import Documents Method is used to process these documents for ingestion.</data>
      <data key="d5">configuration-api relationship</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_dc65135b9ad9bfac43cc3ae95a7b4158</data>
    </edge>
    <edge source="Hybrid KG" target="Mix">
      <data key="d4">Hybrid KG and Mix are related through their high resource usage and detail levels, catering to complex queries but at higher costs.</data>
      <data key="d5">complexity, resource demands</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_84dc24216724ab859775d987f5bb2e19</data>
    </edge>
    <edge source="filter_func" target="excerpt_id">
      <data key="d4">filter_func uses excerpt_id as a parameter to filter results from embeddings, creating a direct dependency.</data>
      <data key="d5">data filtering, dependency</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_8125dcd822731acc0c981b8a1307c4d3</data>
    </edge>
    <edge source="filter_func" target="results">
      <data key="d4">results store the outcome of the filter_func, indicating whether any embeddings were found using the given excerpt_id.</data>
      <data key="d5">data retrieval, outcome</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_8125dcd822731acc0c981b8a1307c4d3</data>
    </edge>
    <edge source="excerpt_id" target="D">
      <data key="d4">D is used in conjunction with excerpt_id to access specific excerpt data based on its unique identifier.</data>
      <data key="d5">data referencing, variable relationship</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_38c732d43cab759a55244eaa09fa38a6</data>
    </edge>
    <edge source="excerpt_id" target="excerpt_data">
      <data key="d4">excerpt_id is a key within the excerpt_data structure, allowing for targeted access to the full details of an excerpt.</data>
      <data key="d5">data structure, key-value pair</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_38c732d43cab759a55244eaa09fa38a6</data>
    </edge>
    <edge source="results" target="queries">
      <data key="d4">Queries are processed to generate results that are collected in the results variable.:|:Queries are processed to generate results, establishing a direct relationship between the input requests and their respective outputs.</data>
      <data key="d5">batch processing, result compilation:|:input-output, query processing</data>
      <data key="d6">17.0</data>
      <data key="d7">excerpt_id_97e526b02e37e6e2b2b176a8cb9cc039:|:excerpt_id_79e52f475952407e95cfdbc653290c6d</data>
    </edge>
    <edge source="results" target="Print Results">
      <data key="d4">Print Results is the function that outputs the contents of the 'results' variable during execution.</data>
      <data key="d5">function execution, output</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_6d692b7f7ce26d7c5b94249c8453447e</data>
    </edge>
    <edge source="results" target="print results">
      <data key="d4">The function Print results outputs the variable results, reflecting the results of processed queries.</data>
      <data key="d5">output, processing</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_9bec674c65e1e71d106b31cafb5387bf</data>
    </edge>
    <edge source="verify_embedding_dimensions" target="expected_dim">
      <data key="d4">expected_dim is referenced in verify_embedding_dimensions to validate the dimensions of retrieved embeddings.</data>
      <data key="d5">expected vs actual, evaluation</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_8125dcd822731acc0c981b8a1307c4d3</data>
    </edge>
    <edge source="knowledge_graph_issues" target="symptom">
      <data key="d4">symptom is a manifestation of knowledge_graph_issues when entities and relationships are missing or incorrect.</data>
      <data key="d5">problem identification, observation</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_8125dcd822731acc0c981b8a1307c4d3</data>
    </edge>
    <edge source="knowledge_graph_issues" target="potential_causes">
      <data key="d4">potential_causes provide explanations for the knowledge_graph_issues, helping to identify root causes.</data>
      <data key="d5">cause and effect, troubleshooting</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_8125dcd822731acc0c981b8a1307c4d3</data>
    </edge>
    <edge source="potential_causes" target="solutions">
      <data key="d4">solutions are proposed steps that address the potential_causes leading to knowledge_graph_issues.</data>
      <data key="d5">remediation, recommendations</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_8125dcd822731acc0c981b8a1307c4d3</data>
    </edge>
    <edge source="CORSMiddleware" target="Query Endpoint">
      <data key="d4">CORSMiddleware is applied to the Query Endpoint to enable cross-origin requests, allowing for broader access to the API.</data>
      <data key="d5">CORS, access control</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_e0d2ab7be18b619d1b6cfd5900b9347e</data>
    </edge>
    <edge source="top_indices" target="similarities">
      <data key="d4">top_indices represents indices derived from the similarities array, indicating a direct correlation between the two as part of the same computation process.</data>
      <data key="d5">data processing, computation</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_e329d73f72654b591f8c6832617f0209</data>
    </edge>
    <edge source="Vector Database Files" target="Knowledge Graph Files">
      <data key="d4">Both are crucial configuration components for managing data and facilitating efficient storage and retrieval processes.</data>
      <data key="d5">data management, storage efficiency</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_e329d73f72654b591f8c6832617f0209</data>
    </edge>
    <edge source="setup_logger" target="logger">
      <data key="d4">The setup_logger function is responsible for initializing the logger instance, linking the two closely together in functionality.</data>
      <data key="d5">initialization, logging</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_e329d73f72654b591f8c6832617f0209</data>
    </edge>
    <edge source="RotatingFileHandler" target="Log Rotation">
      <data key="d4">RotatingFileHandler is a part of the Log Rotation process, signifying their relationship in managing log file sizes.</data>
      <data key="d5">log management, maintenance</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_e329d73f72654b591f8c6832617f0209</data>
    </edge>
    <edge source="RotatingFileHandler" target="setup_rotating_logger">
      <data key="d4">The setup_rotating_logger function utilizes RotatingFileHandler to manage log file sizes effectively.</data>
      <data key="d5">logging configuration, file management</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_b6a3bf9520f31279c695c790576b2216</data>
    </edge>
    <edge source="logger" target="setup_rotating_logger">
      <data key="d4">The logger variable is created as part of the logger setup in setup_rotating_logger, used throughout the application for logging.</data>
      <data key="d5">logging instance, application usage</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_b6a3bf9520f31279c695c790576b2216</data>
    </edge>
    <edge source="Query Type Selection Strategies" target="Question Analysis">
      <data key="d4">"Question Analysis is a critical component of the strategies that enhance query type selection.")</data>
      <data key="d5">optimization, strategy</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_eefa49769efd623d4dac1e62ed2a7ced</data>
    </edge>
    <edge source="Query Type Selection Strategies" target="Iterative Refinement">
      <data key="d4">"Iterative Refinement is part of the strategies that aim to improve the quality of query responses.")</data>
      <data key="d5">optimization, strategy</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_eefa49769efd623d4dac1e62ed2a7ced</data>
    </edge>
    <edge source="Query Type Selection Strategies" target="Domain-Specific Defaults">
      <data key="d4">"Domain-Specific Defaults influence the overall effectiveness of various query types based on the context.")</data>
      <data key="d5">customization, effectiveness</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_eefa49769efd623d4dac1e62ed2a7ced</data>
    </edge>
    <edge source="API Integration" target="Python API">
      <data key="d4">"The Python API allows developers to implement query type selection capabilities in their applications.")</data>
      <data key="d5">implementation, integration</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_eefa49769efd623d4dac1e62ed2a7ced</data>
    </edge>
    <edge source="API Integration" target="REST API">
      <data key="d4">"The REST API provides a flexible interface for user queries, aligning with the capabilities of query type selection.")</data>
      <data key="d5">integration, flexibility</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_eefa49769efd623d4dac1e62ed2a7ced</data>
    </edge>
    <edge source="Uvicorn" target="Gunicorn">
      <data key="d4">Uvicorn can be used in tandem with Gunicorn for improved performance in server deployment."+</data>
      <data key="d5">performance optimization</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_63cd91bc48a4a86dbc4244526ba83736</data>
    </edge>
    <edge source="Horizontal Scaling" target="Scaling Strategies">
      <data key="d4">Horizontal Scaling is another approach within Scaling Strategies that focuses on distributing workloads across multiple machines to handle larger queries and datasets.</data>
      <data key="d5">workload distribution, scalability</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_d819e633cca45f5553e358a312c96667</data>
    </edge>
    <edge source="Graph Structure" target="nodes">
      <data key="d4">The Graph Structure is composed of nodes, which serve as fundamental components within the graph framework.</data>
      <data key="d5">graph components, structural relationship</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_cb0e5d0ad627c9ecd6e0fb7b4ac2bb43</data>
    </edge>
    <edge source="Graph Structure" target="edges">
      <data key="d4">The Graph Structure includes edges that connect nodes, facilitating relationships and interactions between them.</data>
      <data key="d5">graph connectivity, structural relationship</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_cb0e5d0ad627c9ecd6e0fb7b4ac2bb43</data>
    </edge>
    <edge source="CustomSmolRag" target="ranking parameters">
      <data key="d4">ranking parameters are modified specifically within the CustomSmolRag class to influence how relationships are assessed.</data>
      <data key="d5">parameter adjustment, ranking logic</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_58afd38ac61f13786dbc05d2f0c7bf8f</data>
    </edge>
    <edge source="CustomSmolRag" target="_get_query_excerpts">
      <data key="d4">CustomSmolRag defines the _get_query_excerpts method to enhance data retrieval precision based on text queries.</data>
      <data key="d5">data retrieval, method implementation</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_38c732d43cab759a55244eaa09fa38a6</data>
    </edge>
    <edge source="CustomSmolRag" target="fast_query">
      <data key="d4">CustomSmolRag subclass customizes the context extraction process used in fast_query function for more efficient memory use.</data>
      <data key="d5">configuration customization, function optimization</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_fe5d529dab986843e6821f4c56079a32</data>
    </edge>
    <edge source="CustomSmolRag" target="custom_query">
      <data key="d4">custom_query is a method defined within CustomSmolRag that enhances its querying capabilities.</data>
      <data key="d5">functionality enhancement, method extension</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_7f32de37a5cddfe45cdff7356d2a5584</data>
    </edge>
    <edge source="Document Management" target="Add Document Endpoint">
      <data key="d4">The Add Document Endpoint is part of the Document Management feature, demonstrating how documents can be added through the API.</data>
      <data key="d5">endpoint functionality, document handling</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_1e99d3a705e109f5103d3d1958b6a8db</data>
    </edge>
    <edge source="Document Management" target="Remove Document Endpoint">
      <data key="d4">The Remove Document Endpoint is also related to the Document Management feature, showing how documents can be removed through the API.</data>
      <data key="d5">endpoint functionality, document handling</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_1e99d3a705e109f5103d3d1958b6a8db</data>
    </edge>
    <edge source="System Information" target="Get Info Endpoint">
      <data key="d4">The Get Info Endpoint is directly tied to the System Information feature, allowing retrieval of data about the system.</data>
      <data key="d5">endpoint functionality, system data</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_1e99d3a705e109f5103d3d1958b6a8db</data>
    </edge>
    <edge source="Webhooks" target="Webhook Query Endpoint">
      <data key="d4">The Webhook Query Endpoint allows users to notify an external system about the completion of query processing, illustrating the Webhooks feature.</data>
      <data key="d5">notification, external integration</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_1e99d3a705e109f5103d3d1958b6a8db</data>
    </edge>
    <edge source="Async Query Endpoint" target="Get Query Result Endpoint">
      <data key="d4">The Get Query Result Endpoint allows users to fetch results for queries initiated via the Async Query Endpoint, indicating a workflow relationship.</data>
      <data key="d5">workflow, asynchronous processing</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_1e99d3a705e109f5103d3d1958b6a8db</data>
    </edge>
    <edge source="RAG" target="Graph Traversal">
      <data key="d4">RAG integrates Graph Traversal functions to navigate and retrieve data from the knowledge graph based on queries.</data>
      <data key="d5">data retrieval, function integration</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_fcc70198270a02757f7c7194e7f32c25</data>
    </edge>
    <edge source="RAG" target="Ranking Parameters">
      <data key="d4">RAG adjusts the Ranking Parameters to optimize querying results from the knowledge graph.</data>
      <data key="d5">result optimization, configuration adjustment</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_fcc70198270a02757f7c7194e7f32c25</data>
    </edge>
    <edge source="Speed" target="Accuracy">
      <data key="d4">Speed is prioritized over accuracy, indicating a trade-off in performance metrics.</data>
      <data key="d5">performance metrics, trade-off</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_b3a95e34944a889758e6b0c6d679b0e6</data>
    </edge>
    <edge source="Chunk Size and Overlap" target="Custom Configuration">
      <data key="d4">Chunk Size and Overlap settings are part of customizing configurations for optimized performance.</data>
      <data key="d5">configuration adjustment, optimization</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_b3a95e34944a889758e6b0c6d679b0e6</data>
    </edge>
    <edge source="Query Type" target="Token Limits">
      <data key="d4">Token Limits affect the processing of different Query Types, ensuring that queries remain manageable.</data>
      <data key="d5">processing constraints, optimization</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_b3a95e34944a889758e6b0c6d679b0e6</data>
    </edge>
    <edge source="BatchEmbedder" target="OpenAI">
      <data key="d4">BatchEmbedder utilizes the OpenAI API to generate embeddings for multiple texts through its methods.</data>
      <data key="d5">dependency, usage</data>
      <data key="d6">10.0</data>
      <data key="d7">excerpt_id_b35b21c7869785d9ef1329f450f10a5d</data>
    </edge>
    <edge source="BatchEmbedder" target="embed_texts">
      <data key="d4">The embed_texts function is a key method of BatchEmbedder that interfaces with the OpenAI API to obtain embeddings.</data>
      <data key="d5">functionality, core method</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_b35b21c7869785d9ef1329f450f10a5d</data>
    </edge>
    <edge source="BatchEmbedder" target="batch_size">
      <data key="d4">BatchEmbedder uses the batch_size variable to determine how many texts to process per request, directly influencing performance and efficiency.</data>
      <data key="d5">configuration, performance</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_b35b21c7869785d9ef1329f450f10a5d</data>
    </edge>
    <edge source="BatchEmbedder" target="embeddings">
      <data key="d4">BatchEmbedder is responsible for generating embeddings, with the output being stored in the embeddings variable for further use.</data>
      <data key="d5">data processing, output storage</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_d819e633cca45f5553e358a312c96667</data>
    </edge>
    <edge source="embed_texts" target="embedding">
      <data key="d4">The output of embed_texts is a list of embeddings, which are the results derived from processing the input texts.</data>
      <data key="d5">output, transformational</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_b35b21c7869785d9ef1329f450f10a5d</data>
    </edge>
    <edge source="embedding" target="_get_query_excerpts">
      <data key="d4">embedding is utilized within _get_query_excerpts to generate a numerical representation for similarity evaluation.</data>
      <data key="d5">similarity evaluation, data processing</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_38c732d43cab759a55244eaa09fa38a6</data>
    </edge>
    <edge source="embedding" target="edding">
      <data key="d4">The edding function outputs a numerical representation of the input text, stored in the embedding variable.</data>
      <data key="d5">function output, data processing</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_75e438adb9ff4c01e847c8be11bcc6e4</data>
    </edge>
    <edge source="embedding" target="Test text">
      <data key="d4">The Test text serves as the input for the edding function, resulting in the creation of the embedding variable.</data>
      <data key="d5">input-output relationship, data transformation</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_75e438adb9ff4c01e847c8be11bcc6e4</data>
    </edge>
    <edge source="embedding" target="len">
      <data key="d4">The len function is used to assess the dimensionality of the embedding variable after it is generated.</data>
      <data key="d5">measurement, result assessment</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_75e438adb9ff4c01e847c8be11bcc6e4</data>
    </edge>
    <edge source="webhook_query" target="WebhookQueryRequest">
      <data key="d4">The webhook_query function utilizes WebhookQueryRequest to define the expected structure of incoming queries.</data>
      <data key="d5">request structure, function utilization</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_e65b14cb533eda0a73c1a54d86336320</data>
    </edge>
    <edge source="hl_results" target="ranking parameters">
      <data key="d4">hl_results store the output of relationship matches which are evaluated using ranking parameters to determine their order.".</data>
      <data key="d5">data evaluation, ranking process</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_58afd38ac61f13786dbc05d2f0c7bf8f</data>
    </edge>
    <edge source="Scaling Strategies" target="Vertical Scaling">
      <data key="d4">Vertical Scaling is a specific approach under Scaling Strategies aimed at enhancing individual system capabilities instead of adding new machines.</data>
      <data key="d5">resource enhancement, strategic approach</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_d819e633cca45f5553e358a312c96667</data>
    </edge>
    <edge source="Scaling Strategies" target="Monitoring and Profiling">
      <data key="d4">Monitoring and Profiling is essential for assessing the effectiveness and efficiency of the Scaling Strategies employed.</data>
      <data key="d5">performance assessment, strategy optimization</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_d819e633cca45f5553e358a312c96667</data>
    </edge>
    <edge source="Cloud Deployment" target="Docker Compose">
      <data key="d4">Docker Compose illustrates a practical example of Cloud Deployment, facilitating the management and orchestration of applications in containers.</data>
      <data key="d5">deployment management, containerization</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_d819e633cca45f5553e358a312c96667</data>
    </edge>
    <edge source="data" target="rank">
      <data key="d4">Data is sorted using rank as one of its primary criteria, demonstrating a direct relationship in the ordering process.</data>
      <data key="d5">data sorting, criteria</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_cbb4e8dad766e2f663005e81522d4b82</data>
    </edge>
    <edge source="data" target="weight">
      <data key="d4">Weight influences the sorting of data in conjunction with rank, showing its role in the ranking process.</data>
      <data key="d5">data sorting, criteria</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_cbb4e8dad766e2f663005e81522d4b82</data>
    </edge>
    <edge source="smolrag-api-1" target="Monitoring Metrics">
      <data key="d4">smolrag-api-1 is monitored as part of the Monitoring Metrics to assess its performance.".</data>
      <data key="d5">performance monitoring, metrics</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_a4f75c2d6d663c161d853c1243a60af5</data>
    </edge>
    <edge source="smolrag-api-2" target="Monitoring Metrics">
      <data key="d4">smolrag-api-2 is monitored as part of the Monitoring Metrics to assess its performance.".</data>
      <data key="d5">performance monitoring, metrics</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_a4f75c2d6d663c161d853c1243a60af5</data>
    </edge>
    <edge source="Monitoring Metrics" target="Response Times">
      <data key="d4">Response Times is one of the key Monitoring Metrics that track operation durations.".</data>
      <data key="d5">performance evaluation, time tracking</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_a4f75c2d6d663c161d853c1243a60af5</data>
    </edge>
    <edge source="Monitoring Metrics" target="Resource Usage">
      <data key="d4">Resource Usage is another Monitoring Metric that assesses CPU, memory, and disk usage.".</data>
      <data key="d5">performance evaluation, resource management</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_a4f75c2d6d663c161d853c1243a60af5</data>
    </edge>
    <edge source="Monitoring Metrics" target="Error Rates">
      <data key="d4">Error Rates are monitored to identify and analyze operational errors.".</data>
      <data key="d5">performance evaluation, error tracking</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_a4f75c2d6d663c161d853c1243a60af5</data>
    </edge>
    <edge source="Monitoring Metrics" target="Profiling Tools">
      <data key="d4">Profiling Tools are utilized to analyze and optimize Monitoring Metrics for performance.".</data>
      <data key="d5">performance enhancement, analysis</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_a4f75c2d6d663c161d853c1243a60af5</data>
    </edge>
    <edge source="Monitoring Metrics" target="Simple Performance Monitoring">
      <data key="d4">Simple Performance Monitoring serves as an example for implementing effective Monitoring Metrics.".</data>
      <data key="d5">illustration, performance strategy</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_a4f75c2d6d663c161d853c1243a60af5</data>
    </edge>
    <edge source="Error Rates" target="Load Tests">
      <data key="d4">"Load Tests assess Error Rates under varying conditions, providing insights into system reliability during high traffic.")</data>
      <data key="d5">performance measurement, system reliability</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_3db25e98f4a52a9f3effc27f3a26925e</data>
    </edge>
    <edge source="score" target="excerpt_data">
      <data key="d4">score provides a quantitative evaluation of the excerpt, influencing the presentation of information stored in excerpt_data.</data>
      <data key="d5">evaluation, data relationship</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_38c732d43cab759a55244eaa09fa38a6</data>
    </edge>
    <edge source="excerpt_data" target="Summary">
      <data key="d4">Summary outputs a synthesized version of the info stored in excerpt_data, streamlining the presentation of key points.</data>
      <data key="d5">information presentation, summary feature</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_38c732d43cab759a55244eaa09fa38a6</data>
    </edge>
    <edge source="excerpt_data" target="Excerpt">
      <data key="d4">Excerpt displays a portion of the text contained within excerpt_data, enhancing understanding of the content.</data>
      <data key="d5">contextual information, feature relationship</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_38c732d43cab759a55244eaa09fa38a6</data>
    </edge>
    <edge source="_get_query_excerpts" target="top_k">
      <data key="d4">top_k determines the number of results to return in _get_query_excerpts, impacting the breadth of retrieved data.</data>
      <data key="d5">result limitation, query specification</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_38c732d43cab759a55244eaa09fa38a6</data>
    </edge>
    <edge source="_get_query_excerpts" target="threshold">
      <data key="d4">threshold influences the minimum similarity requirement in _get_query_excerpts, affecting retrieval precision.</data>
      <data key="d5">query precision, parameter adjustment</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_38c732d43cab759a55244eaa09fa38a6</data>
    </edge>
    <edge source="top_k" target="approximate_vector_search">
      <data key="d4">top_k determines how many results are ultimately returned from approximate_vector_search, reflecting an input parameter that impacts the function's output.</data>
      <data key="d5">output parameters, configuration</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_450b2f19c98596bfc6089aeec9514ca4</data>
    </edge>
    <edge source="Tracing" target="PerformanceMonitor">
      <data key="d4">The PerformanceMonitor may also integrate tracing as part of its monitoring capabilities to track performance across systems.</data>
      <data key="d5">monitoring, performance tracking</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_a932de00c67d51e468546b00d37959d4</data>
    </edge>
    <edge source="PerformanceMonitor" target="monitor.start()">
      <data key="d4">The start() method is used to begin the monitoring process within PerformanceMonitor, recording necessary metrics.</data>
      <data key="d5">method invocation, performance start</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_a932de00c67d51e468546b00d37959d4</data>
    </edge>
    <edge source="PerformanceMonitor" target="monitor.end()">
      <data key="d4">The end() method finalizes the monitoring and logs results from the operation within PerformanceMonitor.</data>
      <data key="d5">method invocation, performance end</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_a932de00c67d51e468546b00d37959d4</data>
    </edge>
    <edge source="monitor.start()" target="rag.import_documents()">
      <data key="d4">The document ingestion process is monitored by invoking the start() method of PerformanceMonitor.</data>
      <data key="d5">performance tracking, operation monitoring</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_a932de00c67d51e468546b00d37959d4</data>
    </edge>
    <edge source="monitor.start()" target="rag.query()">
      <data key="d4">Processing of a query is also monitored by starting the PerformanceMonitor tracking method.</data>
      <data key="d5">performance tracking, operation monitoring</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_a932de00c67d51e468546b00d37959d4</data>
    </edge>
    <edge source="monitor.start()" target="monitor.end()">
      <data key="d4">The functions monitor.start() and monitor.end() are sequentially related, as one starts monitoring and the other ends it for performance analysis.</data>
      <data key="d5">process flow, monitoring</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_4e649c101b76d51df1364c3c6cc472a9</data>
    </edge>
    <edge source="monitor.end()" target="ingestion_stats">
      <data key="d4">ingestion_stats is generated as a result of executing the monitor.end() function, which provides performance metrics related to document ingestion.</data>
      <data key="d5">statistics generation, performance tracking</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_4e649c101b76d51df1364c3c6cc472a9</data>
    </edge>
    <edge source="rag.import_documents()" target="document_ingestion">
      <data key="d4">Document ingestion is directly related to the function rag.import_documents(), which performs the action of importing the documents.</data>
      <data key="d5">process initiation, function execution</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_4e649c101b76d51df1364c3c6cc472a9</data>
    </edge>
    <edge source="rag.query()" target="query_stats">
      <data key="d4">The execution of rag.query() results in query_stats being generated upon invoking monitor.end(), relating the query operation to the statistics.</data>
      <data key="d5">function execution, performance metrics</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_4e649c101b76d51df1364c3c6cc472a9</data>
    </edge>
    <edge source="cache_file" target="approximate_vector_search">
      <data key="d4">cache_file is used within the approximate_vector_search function to define where to store cached results, reflecting a dependency relationship.</data>
      <data key="d5">dependency, file handling</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_450b2f19c98596bfc6089aeec9514ca4</data>
    </edge>
    <edge source="approximate_vector_search" target="FAISS">
      <data key="d4">approximate_vector_search function serves as an example of how one might implement features seen in libraries like FAISS, indicating a design inspiration relationship.</data>
      <data key="d5">design inspiration, implementation</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_450b2f19c98596bfc6089aeec9514ca4</data>
    </edge>
    <edge source="approximate_vector_search" target="sample_size">
      <data key="d4">sample_size sets a limit for the number of vectors processed initially in approximate_vector_search, indicating a part of the function's logic.</data>
      <data key="d5">function logic, sampling</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_450b2f19c98596bfc6089aeec9514ca4</data>
    </edge>
    <edge source="candidate_vectors" target="fast_query">
      <data key="d4">fast_query function utilizes candidate_vectors to return results based on query input.</data>
      <data key="d5">function usage, data flow</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_fe5d529dab986843e6821f4c56079a32</data>
    </edge>
    <edge source="Hardware Considerations" target="CPU Considerations">
      <data key="d4">CPU Considerations are a subset of Hardware Considerations, specifying how CPU characteristics affect the overall performance of SmolRAG.</data>
      <data key="d5">technical specifications, performance optimization</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_6c06a295a7f56782823d65a71c55d286</data>
    </edge>
    <edge source="Hardware Considerations" target="Memory Considerations">
      <data key="d4">Memory Considerations fall under Hardware Considerations and detail the memory requirements that support SmolRAG's operations.</data>
      <data key="d5">technical specifications, resource allocation</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_6c06a295a7f56782823d65a71c55d286</data>
    </edge>
    <edge source="Hardware Considerations" target="Storage Considerations">
      <data key="d4">Storage Considerations include essential factors related to storage systems necessary for the effective function of SmolRAG.</data>
      <data key="d5">technical specifications, resource allocation</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_6c06a295a7f56782823d65a71c55d286</data>
    </edge>
    <edge source="Hardware Considerations" target="Network Considerations">
      <data key="d4">Network Considerations provide crucial information about network requirements that impact SmolRAG's performance in distributed environments.</data>
      <data key="d5">technical specifications, connectivity needs</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_6c06a295a7f56782823d65a71c55d286</data>
    </edge>
    <edge source="Hardware Considerations" target="Example: Hardware Recommendations">
      <data key="d4">Example: Hardware Recommendations provides illustrative examples of hardware configurations based on deployment sizes, supporting the Hardware Considerations section.</data>
      <data key="d5">guidelines, practical application</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_6c06a295a7f56782823d65a71c55d286</data>
    </edge>
    <edge source="fast_query" target="memory_efficient_query">
      <data key="d4">memory_efficient_query modifies the process of performing queries to enhance memory management in fast_query.</data>
      <data key="d5">memory management, function enhancement</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_fe5d529dab986843e6821f4c56079a32</data>
    </edge>
    <edge source="fast_query" target="memory_safe_query">
      <data key="d4">memory_safe_query checks system memory before executing queries, thereby ensuring smoother execution of fast_query.</data>
      <data key="d5">memory safety, execution safety</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_fe5d529dab986843e6821f4c56079a32</data>
    </edge>
    <edge source="fast_query" target="API Issues">
      <data key="d4">API Issues may arise during the execution of fast_query when interacting with external API systems.</data>
      <data key="d5">error handling, external dependencies</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_fe5d529dab986843e6821f4c56079a32</data>
    </edge>
    <edge source="32+ GB RAM" target="Distributed Deployment">
      <data key="d4">"The high RAM capacity is essential for effective Distributed Deployment, supporting multiple processes and operations.")</data>
      <data key="d5">performance optimization, system architecture</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_3db25e98f4a52a9f3effc27f3a26925e</data>
    </edge>
    <edge source="200+ GB SSD storage" target="Distributed Deployment">
      <data key="d4">"Adequate SSD storage is vital for Distributed Deployment, ensuring quick data retrieval and enhanced system performance.")</data>
      <data key="d5">performance optimization, resource allocation</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_3db25e98f4a52a9f3effc27f3a26925e</data>
    </edge>
    <edge source="Performance Testing" target="Load Tests">
      <data key="d4">"Load Tests are a specific type of Performance Testing focused on evaluating system performance under different load conditions.")</data>
      <data key="d5">testing methodology, performance evaluation</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_3db25e98f4a52a9f3effc27f3a26925e</data>
    </edge>
    <edge source="Performance Testing" target="Stress Tests">
      <data key="d4">"Stress Tests are also categorized under Performance Testing, aimed at uncovering system vulnerabilities under excessive load.")</data>
      <data key="d5">testing methodology, performance evaluation</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_3db25e98f4a52a9f3effc27f3a26925e</data>
    </edge>
    <edge source="Performance Testing" target="Endurance Tests">
      <data key="d4">"Endurance Tests fall within the scope of Performance Testing to measure system performance over prolonged periods.")</data>
      <data key="d5">testing methodology, performance validation</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_3db25e98f4a52a9f3effc27f3a26925e</data>
    </edge>
    <edge source="Benchmark Tests" target="Throughput">
      <data key="d4">"Benchmark Tests often measure Throughput, highlighting the volume of operations that can be processed in a given time frame.")</data>
      <data key="d5">performance measurement, testing metrics</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_3db25e98f4a52a9f3effc27f3a26925e</data>
    </edge>
    <edge source="Benchmark Tests" target="Simple Benchmark Script">
      <data key="d4">"A Simple Benchmark Script is an example of how to conduct Benchmark Tests, demonstrating best practices in performance measurement.")</data>
      <data key="d5">testing example, performance measurement</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_3db25e98f4a52a9f3effc27f3a26925e</data>
    </edge>
    <edge source="OpenAI API" target="Quota">
      <data key="d4">Quota management is a feature of the OpenAI API that monitors and restricts usage based on predefined limits to prevent overuse.</data>
      <data key="d5">resource management, usage limits</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_30d921e9ed8b86da0f8b9366dfbaa2a7</data>
    </edge>
    <edge source="OpenAI API" target="Service Disruption">
      <data key="d4">Service Disruption can affect the availability of the OpenAI API, impacting how users interact with it.</data>
      <data key="d5">service reliability, user impact</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_30d921e9ed8b86da0f8b9366dfbaa2a7</data>
    </edge>
    <edge source="benchmark_queries" target="test_queries">
      <data key="d4">Test_queries are used as inputs within the benchmark_queries function to evaluate different query types.</data>
      <data key="d5">input variables, functional execution</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_8df198dc0e22767ee72f9d76b21e44aa</data>
    </edge>
    <edge source="benchmark_queries" target="standard_results">
      <data key="d4">Standard_results are outputs from the benchmark_queries function, reflecting the performance of standard queries.</data>
      <data key="d5">output relationships, performance tracking</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_8df198dc0e22767ee72f9d76b21e44aa</data>
    </edge>
    <edge source="benchmark_queries" target="kg_results">
      <data key="d4">Kg_results show performance metrics specific to hybrid knowledge graph queries executed within the benchmark_queries function.</data>
      <data key="d5">performance tracking, output relationships</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_8df198dc0e22767ee72f9d76b21e44aa</data>
    </edge>
    <edge source="benchmark_queries" target="mix_results">
      <data key="d4">Mix_results document performance for mixed queries processed by the benchmark_queries function.</data>
      <data key="d5">performance assessment, output relationships</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_8df198dc0e22767ee72f9d76b21e44aa</data>
    </edge>
    <edge source="print" target="Avg Time">
      <data key="d4">The print function outputs the Avg Time feature, indicating its role in displaying average performance metrics.</data>
      <data key="d5">functionality, reporting</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_1f85cb53bc4e7de3a80fec7f9c6b4d2c</data>
    </edge>
    <edge source="print" target="Min Time">
      <data key="d4">The Min Time feature is printed by the print function, which communicates minimal processing metrics to the user.</data>
      <data key="d5">functionality, reporting</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_1f85cb53bc4e7de3a80fec7f9c6b4d2c</data>
    </edge>
    <edge source="print" target="Max Time">
      <data key="d4">Max Time is output by the print function, demonstrating how it reports the maximum performance observed.</data>
      <data key="d5">functionality, reporting</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_1f85cb53bc4e7de3a80fec7f9c6b4d2c</data>
    </edge>
    <edge source="self.min_seconds_per_request" target="time_since_last_request">
      <data key="d4">self.min_seconds_per_request is used to determine the minimum delay by subtracting time_since_last_request, to control the timing of requests.</data>
      <data key="d5">request management, timing control</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_6eb845511a3798c85225934f19cae61f</data>
    </edge>
    <edge source="retry_with_exponential_backoff" target="initial_delay">
      <data key="d4">initial_delay serves as a starting point for calculating the wait time before the first retry in the retry_with_exponential_backoff function.</data>
      <data key="d5">retry configuration, timing</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_6eb845511a3798c85225934f19cae61f</data>
    </edge>
    <edge source="retry_with_exponential_backoff" target="exponential_base">
      <data key="d4">exponential_base affects how quickly the retry delay increases with each failed attempt in the retry_with_exponential_backoff function.</data>
      <data key="d5">delay management, retry logic</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_6eb845511a3798c85225934f19cae61f</data>
    </edge>
    <edge source="retry_with_exponential_backoff" target="jitter">
      <data key="d4">jitter adds variability to the retry timing, making it less predictable, and is a part of the retry_with_exponential_backoff configuration.</data>
      <data key="d5">retry strategy, variability</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_6eb845511a3798c85225934f19cae61f</data>
    </edge>
    <edge source="retry_with_exponential_backoff" target="max_retries">
      <data key="d4">max_retries defines the limit for how many times to try the operation before giving up within the retry_with_exponential_backoff function.</data>
      <data key="d5">retry limits, error handling</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_6eb845511a3798c85225934f19cae61f</data>
    </edge>
    <edge source="retry_with_exponential_backoff" target="errors">
      <data key="d4">errors specifies the types of exceptions that will trigger a retry attempt in the retry_with_exponential_backoff function.</data>
      <data key="d5">error management, retry criteria</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_6eb845511a3798c85225934f19cae61f</data>
    </edge>
    <edge source="Containerization" target="Serverless Considerations">
      <data key="d4">Both Containerization and Serverless Considerations focus on optimizing application performance in cloud environments.</data>
      <data key="d5">performance optimization, deployment strategies</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_4b1d39bb3b412ccb5521449ed59095c6</data>
    </edge>
    <edge source="Kubernetes Resource Configuration" target="data-volume">
      <data key="d4">The Kubernetes Resource Configuration provides the setup for managing persistent data using the data-volume.</data>
      <data key="d5">data management, application setup</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_4b1d39bb3b412ccb5521449ed59095c6</data>
    </edge>
    <edge source="Kubernetes Resource Configuration" target="docs-volume">
      <data key="d4">The Kubernetes Resource Configuration includes setting up the docs-volume for input documents required by SmolRAG.</data>
      <data key="d5">data management, application setup</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_4b1d39bb3b412ccb5521449ed59095c6</data>
    </edge>
    <edge source="data-volume" target="smolrag-data-pvc">
      <data key="d4">data-volume utilizes smolrag-data-pvc as its persistent volume claim for data storage, indicating how the variable is configured for persistence.</data>
      <data key="d5">storage configuration, persistence</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_ab0c2359f35ddf542e46336b81a7e409</data>
    </edge>
    <edge source="docs-volume" target="smolrag-docs-pvc">
      <data key="d4">docs-volume uses smolrag-docs-pvc as the persistent volume claim for managing documents, showing the relationship in document storage management.</data>
      <data key="d5">storage management, persistence</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_ab0c2359f35ddf542e46336b81a7e409</data>
    </edge>
    <edge source="HTTPException" target="process_query_with_timeout">
      <data key="d4">process_query_with_timeout raises an HTTPException on timeout to inform users about query timeout problems.</data>
      <data key="d5">error handling, user notification</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_1123c47dc960c83e906ef0521acbf692</data>
    </edge>
    <edge source="prune_old_documents" target="threshold_time">
      <data key="d4">prune_old_documents uses threshold_time to determine which documents to remove based on their age.</data>
      <data key="d5">data management, time-based filtering</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_f460391fbb913e0e360f66999d788989</data>
    </edge>
    <edge source="clean_old_cache_files" target="threshold_time">
      <data key="d4">clean_old_cache_files relies on threshold_time to identify outdated cache files for removal.</data>
      <data key="d5">file management, time filter</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_f460391fbb913e0e360f66999d788989</data>
    </edge>
    <edge source="threshold_time" target="file_mtime">
      <data key="d4">file_mtime is compared to threshold_time to decide whether a cache file should be deleted based on its age.</data>
      <data key="d5">file management, time comparison</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_3e82863c53e1d9f1a2c455e3b10d5c48</data>
    </edge>
    <edge source="file_path" target="max_vectors">
      <data key="d4">file_path is the path where the memory-mapped storage will be located, while max_vectors determines how many vectors can be stored at that path.</data>
      <data key="d5">configuration, resource management</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_03db7bd394b5c8f0cca7825a7bc0976e</data>
    </edge>
    <edge source="optimize_memory" target="gc">
      <data key="d4">The optimize_memory function utilizes gc to perform garbage collection as part of its memory optimization process.</data>
      <data key="d5">memory management, function dependence</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_3e82863c53e1d9f1a2c455e3b10d5c48</data>
    </edge>
    <edge source="optimize_memory" target="psutil">
      <data key="d4">The optimize_memory function uses psutil to monitor and report memory usage before and after garbage collection.</data>
      <data key="d5">memory monitoring, function integration</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_3e82863c53e1d9f1a2c455e3b10d5c48</data>
    </edge>
    <edge source="Memory" target="CPU usage">
      <data key="d4">High CPU usage can lead to memory being consumed more rapidly, affecting overall system performance.</data>
      <data key="d5">performance, resource consumption</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_f14c1300eef7ee3f8f678d652b5e2c17</data>
    </edge>
    <edge source="CPU usage" target="optimized_similarity">
      <data key="d4">The optimized_similarity function aims to reduce CPU usage by employing vectorized operations, directly addressing performance issues.</data>
      <data key="d5">optimization, performance improvement</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_f14c1300eef7ee3f8f678d652b5e2c17</data>
    </edge>
    <edge source="CPU usage" target="process_with_controlled_batches">
      <data key="d4">The process_with_controlled_batches function is designed to manage CPU usage by processing items in batches, hence reducing potential bottlenecks.</data>
      <data key="d5">resource management, batching</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_f14c1300eef7ee3f8f678d652b5e2c17</data>
    </edge>
    <edge source="cProfile" target="profile_function">
      <data key="d4">The profile_function utilizes cProfile to measure performance, indicating that it is dependent on this module for its operations.</data>
      <data key="d5">dependency, performance profiling</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_f14c1300eef7ee3f8f678d652b5e2c17</data>
    </edge>
    <edge source="pstats" target="profile_function">
      <data key="d4">Once profiling is completed, the profile_function uses pstats to analyze and print out the profiling results, establishing a connection between the two.</data>
      <data key="d5">data analysis, profiling results</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_f14c1300eef7ee3f8f678d652b5e2c17</data>
    </edge>
    <edge source="BufferedVectorStore" target="base_store">
      <data key="d4">BufferedVectorStore depends on the base_store to store data, indicating a direct relationship in its implementation.</data>
      <data key="d5">dependency, implementation</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_01ca0248de3b39f386fb010c1c75727a</data>
    </edge>
    <edge source="BufferedVectorStore" target="buffer">
      <data key="d4">BufferedVectorStore utilizes the buffer to temporarily hold data before committing it to the base_store, emphasizing the flow of data management.</data>
      <data key="d5">data management, flow</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_01ca0248de3b39f386fb010c1c75727a</data>
    </edge>
    <edge source="BufferedVectorStore" target="buffer_size">
      <data key="d4">The buffer_size parameter configures the BufferedVectorStore's behavior, affecting how it handles data operations.</data>
      <data key="d5">configuration, performance</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_01ca0248de3b39f386fb010c1c75727a</data>
    </edge>
    <edge source="setup_rotating_logger" target="log_path">
      <data key="d4">The log_path variable is used in setup_rotating_logger to designate where logs will be stored.</data>
      <data key="d5">file path, logging setup</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_b6a3bf9520f31279c695c790576b2216</data>
    </edge>
    <edge source="setup_rotating_logger" target="max_bytes">
      <data key="d4">The max_bytes variable specifies the log file size limit within the setup_rotating_logger for log rotation purposes.</data>
      <data key="d5">size limit, logging configuration</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_b6a3bf9520f31279c695c790576b2216</data>
    </edge>
    <edge source="setup_rotating_logger" target="backup_count">
      <data key="d4">The backup_count variable is part of the logging setup in setup_rotating_logger, dictating how many backups are maintained.</data>
      <data key="d5">backup management, logging setup</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_b6a3bf9520f31279c695c790576b2216</data>
    </edge>
    <edge source="MemmapVectorStore" target="numpy">
      <data key="d4">MemmapVectorStore utilizes numpy for handling storage and manipulation of large datasets through memory-mapped files.</data>
      <data key="d5">data management, library usage</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_03db7bd394b5c8f0cca7825a7bc0976e</data>
    </edge>
    <edge source="MemmapVectorStore" target="load_metadata">
      <data key="d4">MemmapVectorStore uses load_metadata to retrieve the count of vectors from the metadata file during initialization to resume from a previous state.</data>
      <data key="d5">data retrieval, state management</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_03db7bd394b5c8f0cca7825a7bc0976e</data>
    </edge>
    <edge source="load_metadata" target="count">
      <data key="d4">The load_metadata function populates the count variable with data read from the metadata file, establishing a direct dependency between the function and the variable.</data>
      <data key="d5">data loading, variable assignment</data>
      <data key="d6">9.0</data>
      <data key="d7">excerpt_id_d14d4b5fb9d1135b6a915fef1087d3b4</data>
    </edge>
    <edge source="metadata_file" target="count">
      <data key="d4">The metadata_file variable specifies the file from which the count variable is initialized, forming a connection between the two variables in the data loading process.</data>
      <data key="d5">data source, initialization</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_d14d4b5fb9d1135b6a915fef1087d3b4</data>
    </edge>
    <edge source="app/logs/" target="main.log">
      <data key="d4">The main.log file is stored in the app/logs/ directory, which serves as the location for application logs, linking the directory to the log file.</data>
      <data key="d5">file organization, directory structure</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_d14d4b5fb9d1135b6a915fef1087d3b4</data>
    </edge>
    <edge source="app/logs/" target="embeddings.db">
      <data key="d4">The embeddings.db file is stored within the application data directory, implicitly suggesting its role in application functionalities similar to logging.</data>
      <data key="d5">data storage, application functions</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_d14d4b5fb9d1135b6a915fef1087d3b4</data>
    </edge>
    <edge source="main.log" target="set_logger">
      <data key="d4">The set_logger function configures the logging settings that will affect how entries are recorded in the main.log file, indicating its dependence on logger settings.</data>
      <data key="d5">configuration, logging</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_d14d4b5fb9d1135b6a915fef1087d3b4</data>
    </edge>
    <edge source="check_system_resources" target="available memory">
      <data key="d4">check_system_resources also reports on available memory, indicating how much memory remains for new processes.</data>
      <data key="d5">resource management, performance</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_7026c9111f1e878a76710759253c04ae</data>
    </edge>
    <edge source="check_system_resources" target="Free Disk Space">
      <data key="d4">check_system_resources displays Free Disk Space, informing users about disk capacity and potential operational issues.</data>
      <data key="d5">resource management, capacity awareness</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_7026c9111f1e878a76710759253c04ae</data>
    </edge>
    <edge source="OpenAI's Language Models" target="Summarization Process">
      <data key="d4">OpenAI's Language Models are utilized in the Summarization Process to convert text into concise summaries using specific prompts.</data>
      <data key="d5">text processing, summarization</data>
      <data key="d6">18.0</data>
      <data key="d7">excerpt_id_40ff8100b340e2bffbf37fe882a8ee48</data>
    </edge>
    <edge source="Vector Embedding Generation" target="Embedding Model">
      <data key="d4">The defined Embedding Model determines how Vector Embedding Generation is performed, affecting the resulting vector quality.</data>
      <data key="d5">configuration, performance</data>
      <data key="d6">14.0</data>
      <data key="d7">excerpt_id_40ff8100b340e2bffbf37fe882a8ee48</data>
    </edge>
    <edge source="Concurrent Processing" target="asyncio.gather()">
      <data key="d4">The `asyncio.gather()` function is essential for implementing Concurrent Processing in SmolRAG, allowing task aggregation.</data>
      <data key="d5">task management, efficiency</data>
      <data key="d6">16.0</data>
      <data key="d7">excerpt_id_7fedf9d4b30621d6c79f65db2d09ce1a</data>
    </edge>
    <edge source="remove" target="equal">
      <data key="d4">The equal function can be used to validate values before removal, ensuring only the correct key-value pair is deleted from the store.</data>
      <data key="d5">validation process, data integrity</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_048561f7b91b06effbd2fa38d6b6e86d</data>
    </edge>
    <edge source="Asyncio Implementation" target="Rate Limiting Configuration">
      <data key="d4">Asyncio Implementation operates in tandem with Rate Limiting Configuration to enhance the performance of API calls without overwhelming the system.</data>
      <data key="d5">performance optimization, concurrency</data>
      <data key="d6">8.0</data>
      <data key="d7">excerpt_id_e0d2ab7be18b619d1b6cfd5900b9347e</data>
    </edge>
    <edge source="Asyncio Implementation" target="CustomRateLimitedSmolRag">
      <data key="d4">CustomRateLimitedSmolRag extends the Asyncio Implementation to incorporate specific rate limiting features.</data>
      <data key="d5">customization, performance tuning</data>
      <data key="d6">7.0</data>
      <data key="d7">excerpt_id_e0d2ab7be18b619d1b6cfd5900b9347e</data>
    </edge>
    <edge source="File Identification" target="Metadata Extraction">
      <data key="d4">Metadata Extraction relies on File Identification to ensure that the necessary metadata is preserved during the ingestion process.</data>
      <data key="d5">function-feature relationship</data>
      <data key="d6">6.0</data>
      <data key="d7">excerpt_id_dc65135b9ad9bfac43cc3ae95a7b4158</data>
    </edge>
    <data key="d0">similarity search, semantic meaning, information retrieval, vector representation</data>
  </graph>
</graphml>
